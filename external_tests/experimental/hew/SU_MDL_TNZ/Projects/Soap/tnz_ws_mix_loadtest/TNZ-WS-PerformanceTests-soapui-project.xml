<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="TNZ WS PerformanceTests" resourceRoot="" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:description>This SoapUI project is intended for performance testing the new TNZ hardware.

It defines a single testsuite (TestSuite 1) containing s single testcase (MixedServices TestCase) that is processed by the loadtest (MixedSevices LoadTest).
The project additionally requires a subscriber.csv containing the subscribers to be used during the loadtest.
The subscribers.csv is expected to reside in the same folder where this project file is located.

MixedServices TestCase
----------------------
is made up by 6 representative web service operations of 3 different components.
Two of those operations are dublicated to give them more weight within the loadtest.
As usual the operation request templates get their parameters (subscriberId and IMSI) from the corresponding testcase properties 
which on their side are initialized by the testcase's setupScript.

MixedSevices LoadTest
---------------------
is the central dialog to execute the MixedServices TestCase for performance meassurement. 
To explore performance have a look at: https://portal.inew-cs.com/redmine/projects/qa-technology-corner/wiki/PerformanceTestingStrategies_
    
Adaptation Requirements:
=========================

  MixedServices TestCase
  ----------------------
    At the moment the endpoints of operation test steps are configured to the Columbia testbed.
    This has to be adapted to the real TNZ harware:
     - double click the test step
     - click into the address line at the top of the operation request window     
     - select [edit current..]
     - adapt the IP address (and perhaps the port number)

  subscribers.csv
  ---------------
    At the moment this file contains all subscribers of the Columbia testbed.
    These of course have to be replaced by the subscribers of the TNZ environment.

    Also be aware that the test step PROV.getSimDetailsByImsi fails for all subscribers that have NOT been created via Provisioning system (e.g. CG created subscribers). 
    You may temporarily deactivate this test step (via context menu: &lt;Disable Teststep>) as long as your test subscribers miss the SIM card.


Some experienced values
========================

  To get a general impression of the load test find some reference values below.

  System under test: Columbia testbed
  TestCase modification: TestStep PROV.getSimDetailsBySImsi deactivated since it fails on most of the CG created subscribers
  LoadTest Settings:
    Duration: 60 seconds
    Strategy: Simple
    Test Delay: 0
    Random: 0
 
  1) Testing Host: HP Pavillon Entertainment PC (notebook)

     a) Threads: 10
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
  	CRCE.getAccountSummary                      27   3109   129.76   627   10.43    450154    7493    0	
        CRCE.getAccountSummary Repetiton            29    728   114.44   627   10.43    450154    7493    0	
        CRCE.getSubscriberProfileByImsi             29    704   120.12   627   10.43   1019554   16973    0	
        CRCE.getSubscriberProfileByImsi Repetition  25   1176   119.28   627   10.43   1019554   16973    0	
        CRCE.getTariffByProviderId                  24   1288   118.45   627   10.43   2927463   48735    0	
        CRCE.getTariffPlansBySubscriber             33    764   123.38   627   10.43   1128889   18793    0	
        PROV.getSimDetailsByImsi (disabled)	     0      0     0.0      0    0.0          0       0    0	
        XDR.getDetails	                            49   1438   219.63   627   10.43   1949803   32459    0	
	TestCase:                                  216   9207   945.1    627   10.43   8945571  148921    0	


     b) Threads: 20
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
	CRCE.getAccountSummary                      33   4208   203.52                  661908   10993    0	
	CRCE.getAccountSummary Repetiton            26    597   167.51                  661908   10993    0	
	CRCE.getSubscriberProfileByImsi             27   3209   189.36                 1411412   23441    0	
	CRCE.getSubscriberProfileByImsi Repetition  23    949   176.05                 1411412   23441    0	
	CRCE.getTariffByProviderId                  29    778   173.24                 4052692   67308    0	
	CRCE.getTariffPlansBySubscriber             37   2152   177.12                 1560520   25917    0	
	PROV.getSimDetailsByImsi (disabled)          0      0     0.0      0    0.0          0       0    0	
	XDR.getDetails                              47   2089   273.27                 2251700   37396    0	
	TestCase:                                  222  13982  1360.11   868   14.41  12011552  199490    0	

     c) Threads: 40
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
	CRCE.getAccountSummary                      39   1809   351.88                  653746   10876    0	
	CRCE.getAccountSummary Repetiton            30    981   340.98                  653746   10876    0	
	CRCE.getSubscriberProfileByImsi             29   1622   368.08                 1396778   23238    0	
	CRCE.getSubscriberProfileByImsi Repetition  29   1730   360.44                 1396778   23238    0	
	CRCE.getTariffByProviderId                  26   1229   338.67                 4010671   66725    0	
	CRCE.getTariffPlansBySubscriber             32   1026   354.99                 1544401   25694    0	
	PROV.getSimDetailsByImsi (disabled)          0      0     0.0      0    0.0          0       0    0	
	XDR.getDetails                              49   4835   613.97                 2241693   37295    0	
	TestCase:                                  234  13232  2729.04   859   14.29  11897813   197943   0

  2) Testing Host: TestAutomationServer 10.0.0.50

     a) Threads: 10
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
	CRCE.getAccountSummary                       9   2149    43.32                  770240   11461    0	
	CRCE.getAccountSummary Repetiton             7    246    25.25                  770240   11461    0	
	CRCE.getSubscriberProfileByImsi              9   2250    51.44                 1642290   24437    0	
	CRCE.getSubscriberProfileByImsi Repetition   9    295    32.23                 1642290   24437    0	
	CRCE.getTariffByProviderId                   6   1024    44.12                 4715690   70169    0	
	CRCE.getTariffPlansBySubscriber              9    314    34.97                 1844221   27442    0	
	PROV.getSimDetailsByImsi (disabled)          0      0     0.0      0    0.0          0       0    0	
	XDR.getDetails                              39   2610   347.59                 2471825   36780    0	
	TestCase:                                   88   8888   578.96  1010   15.02  13856796  206190    0	      
 
     b) Threads: 20
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
	CRCE.getAccountSummary                       7   1024    25.66                  905272   14798    0	
	CRCE.getAccountSummary Repetiton             7   1020    25.7                   905272   14798    0	
	CRCE.getSubscriberProfileByImsi              8   1055    37.64                 1876659   30677    0	
	CRCE.getSubscriberProfileByImsi Repetition   8   1055    39.72                 1876659   30677    0	
	CRCE.getTariffByProviderId                   6    680    39.19                 5388026   88078    0	
	CRCE.getTariffPlansBySubscriber             11    646    34.05                 2428894   39705    0	
	PROV.getSimDetailsByImsi (disabled)          0      0     0.0      0    0.0          0       0    0	
	XDR.getDetails                              59   6258   812.76                 2624193   42897    1	
	TestCase:                                  106  11738  1014.75  1154   18.86  16004975  261634    1	
 
      c) Threads: 40
                                                   min    max   avg      cnt  tps        bytes     bps  err
                                                  ----  -----  -------  ----  ------  --------  ------  --- 
	CRCE.getAccountSummary                       6   1045    35.48                  879050   14519    0	
	CRCE.getAccountSummary Repetiton             6    679    31.61                  879050   14519    0	
	CRCE.getSubscriberProfileByImsi              8   1050    42.74                 1832729   30271    0	
	CRCE.getSubscriberProfileByImsi Repetition   7   1025    40.83                 1832729   30271    0	
	CRCE.getTariffByProviderId                   6   1908    42.24                 5261963   86912    0	
	CRCE.getTariffPlansBySubscriber              6   1053    33.93                 2316613   38263    0	
	PROV.getSimDetailsByImsi (disabled)          0      0     0.0      0    0.0          0       0    0	
	XDR.getDetails                              71   7939  1816.4                  2599842   42942    0	
	TestCase:                                  110  14699  2043.26  1127   18.61  15601976  257700    0	

</con:description><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="AccountPeerSoapBinding" type="wsdl" bindingName="{http://provisioning.published.accounting.negret.tryge.com/}AccountPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/accounting/accounts?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/accounting/accounts?wsdl"><con:part><con:url>http://10.105.140.125:8080/accounting/accounts?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="AccountPeer" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://published.accounting.crce.inewcs.com" xmlns:tns="http://published.accounting.crce.inewcs.com">
      <xsd:complexType name="AccountDescriptor">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:AccountCategory"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="descriptorId" type="xsd:int"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="tns:AccountType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="AccountType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
          <xsd:enumeration value="GROUP_PREPAID"/>
          <xsd:enumeration value="GROUP_POSTPAID"/>
          <xsd:enumeration value="EXTERNAL_PREPAID"/>
          <xsd:enumeration value="UNLIMITED"/>
          <xsd:enumeration value="TIMER"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfAccountDescriptor">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="AccountDescriptor" nillable="true" type="tns:AccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="AccountCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="MAIN"/>
          <xsd:enumeration value="BUSINESS"/>
          <xsd:enumeration value="LOYALTY"/>
          <xsd:enumeration value="TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="BUNDLE_ACCOUNT"/>
          <xsd:enumeration value="BONUS"/>
          <xsd:enumeration value="LOAN"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com" xmlns:ns0="http://published.accounting.crce.inewcs.com" xmlns:tns="http://provisioning.published.accounting.negret.tryge.com">
      <xsd:import namespace="http://published.accounting.crce.inewcs.com"/>
      <xsd:complexType name="ArrayOfSummaryType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SummaryType" nillable="true" type="tns:SummaryType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountResType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="account" nillable="true" type="tns:AccountType"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="RuleViolation"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownAccount"/>
          <xsd:enumeration value="UnknownCurrency"/>
          <xsd:enumeration value="UnknownCurrencyUnit"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="UnknownReservation"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SummaryListType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="summaryList" nillable="true" type="tns:ArrayOfSummaryType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfAccountType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="AccountType" nillable="true" type="tns:AccountType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SummaryType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="balance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="expiryAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="reservedBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:CurrencyUnitType"/>
          <xsd:element minOccurs="0" name="unitId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unlimited" type="xsd:boolean"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="balance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="category" nillable="true" type="ns0:AccountCategory"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="initialBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="reservedBalance" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="ns0:AccountType"/>
          <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:CurrencyUnitType"/>
          <xsd:element minOccurs="0" name="unitId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="CurrencyGroup">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE"/>
          <xsd:enumeration value="DATA"/>
          <xsd:enumeration value="SMS"/>
          <xsd:enumeration value="MMS"/>
          <xsd:enumeration value="LOYALTY"/>
          <xsd:enumeration value="MONETARY"/>
          <xsd:enumeration value="OTHER"/>
          <xsd:enumeration value="DATA_TIMER"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="AccountDetailsType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accounts" nillable="true" type="tns:ArrayOfAccountType"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CurrencyUnitType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="mantissa" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SummaryResType">
        <xsd:complexContent>
          <xsd:extension base="tns:SummaryType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://provisioning.published.accounting.negret.tryge.com/" xmlns:ns0="http://provisioning.published.accounting.negret.tryge.com" xmlns:ns1="http://published.accounting.crce.inewcs.com">
      <xsd:import namespace="http://provisioning.published.accounting.negret.tryge.com"/>
      <xsd:import namespace="http://published.accounting.crce.inewcs.com"/>
      <xsd:element name="getMainAccount" type="tns:getMainAccount"/>
      <xsd:complexType name="getMainAccount">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountResponse" type="tns:getMainAccountResponse"/>
      <xsd:complexType name="getMainAccountResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountAsSummary" type="tns:getMainAccountAsSummary"/>
      <xsd:complexType name="getMainAccountAsSummary">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getMainAccountAsSummaryResponse" type="tns:getMainAccountAsSummaryResponse"/>
      <xsd:complexType name="getMainAccountAsSummaryResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyGroup" type="tns:getSummaryByCurrencyGroup"/>
      <xsd:complexType name="getSummaryByCurrencyGroup">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="ns0:CurrencyGroup"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyGroupResponse" type="tns:getSummaryByCurrencyGroupResponse"/>
      <xsd:complexType name="getSummaryByCurrencyGroupResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryListType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDetails" type="tns:getAccountDetails"/>
      <xsd:complexType name="getAccountDetails">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDetailsResponse" type="tns:getAccountDetailsResponse"/>
      <xsd:complexType name="getAccountDetailsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptor" type="tns:getAccountDescriptor"/>
      <xsd:complexType name="getAccountDescriptor">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptorResponse" type="tns:getAccountDescriptorResponse"/>
      <xsd:complexType name="getAccountDescriptorResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:AccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountSummary" type="tns:getAccountSummary"/>
      <xsd:complexType name="getAccountSummary">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountSummaryResponse" type="tns:getAccountSummaryResponse"/>
      <xsd:complexType name="getAccountSummaryResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrency" type="tns:getSummaryByCurrency"/>
      <xsd:complexType name="getSummaryByCurrency">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSummaryByCurrencyResponse" type="tns:getSummaryByCurrencyResponse"/>
      <xsd:complexType name="getSummaryByCurrencyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:SummaryListType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptors" type="tns:getAccountDescriptors"/>
      <xsd:complexType name="getAccountDescriptors">
        <xsd:sequence/>
      </xsd:complexType>
      <xsd:element name="getAccountDescriptorsResponse" type="tns:getAccountDescriptorsResponse"/>
      <xsd:complexType name="getAccountDescriptorsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ArrayOfAccountDescriptor"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccount" type="tns:getAccount"/>
      <xsd:complexType name="getAccount">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element name="arg1" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountResponse" type="tns:getAccountResponse"/>
      <xsd:complexType name="getAccountResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountResType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsByCurrency" type="tns:getAccountsByCurrency"/>
      <xsd:complexType name="getAccountsByCurrency">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsByCurrencyResponse" type="tns:getAccountsByCurrencyResponse"/>
      <xsd:complexType name="getAccountsByCurrencyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccounts" type="tns:getAccounts"/>
      <xsd:complexType name="getAccounts">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getAccountsResponse" type="tns:getAccountsResponse"/>
      <xsd:complexType name="getAccountsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:AccountDetailsType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getSummaryByCurrencyGroupResponse">
    <wsdl:part element="tns:getSummaryByCurrencyGroupResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrencyResponse">
    <wsdl:part element="tns:getSummaryByCurrencyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountAsSummaryResponse">
    <wsdl:part element="tns:getMainAccountAsSummaryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptorResponse">
    <wsdl:part element="tns:getAccountDescriptorResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccounts">
    <wsdl:part element="tns:getAccounts" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDetailsResponse">
    <wsdl:part element="tns:getAccountDetailsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptor">
    <wsdl:part element="tns:getAccountDescriptor" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDetails">
    <wsdl:part element="tns:getAccountDetails" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountResponse">
    <wsdl:part element="tns:getAccountResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountSummaryResponse">
    <wsdl:part element="tns:getAccountSummaryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptors">
    <wsdl:part element="tns:getAccountDescriptors" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrency">
    <wsdl:part element="tns:getSummaryByCurrency" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSummaryByCurrencyGroup">
    <wsdl:part element="tns:getSummaryByCurrencyGroup" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsByCurrencyResponse">
    <wsdl:part element="tns:getAccountsByCurrencyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountAsSummary">
    <wsdl:part element="tns:getMainAccountAsSummary" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountSummary">
    <wsdl:part element="tns:getAccountSummary" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccountResponse">
    <wsdl:part element="tns:getMainAccountResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccount">
    <wsdl:part element="tns:getAccount" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsByCurrency">
    <wsdl:part element="tns:getAccountsByCurrency" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountsResponse">
    <wsdl:part element="tns:getAccountsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMainAccount">
    <wsdl:part element="tns:getMainAccount" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAccountDescriptorsResponse">
    <wsdl:part element="tns:getAccountDescriptorsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="AccountPeerPortType">
    <wsdl:operation name="getMainAccount">
      <wsdl:input message="tns:getMainAccount" name="getMainAccount"></wsdl:input>
      <wsdl:output message="tns:getMainAccountResponse" name="getMainAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMainAccountAsSummary">
      <wsdl:input message="tns:getMainAccountAsSummary" name="getMainAccountAsSummary"></wsdl:input>
      <wsdl:output message="tns:getMainAccountAsSummaryResponse" name="getMainAccountAsSummaryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrencyGroup">
      <wsdl:input message="tns:getSummaryByCurrencyGroup" name="getSummaryByCurrencyGroup"></wsdl:input>
      <wsdl:output message="tns:getSummaryByCurrencyGroupResponse" name="getSummaryByCurrencyGroupResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDetails">
      <wsdl:input message="tns:getAccountDetails" name="getAccountDetails"></wsdl:input>
      <wsdl:output message="tns:getAccountDetailsResponse" name="getAccountDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptor">
      <wsdl:input message="tns:getAccountDescriptor" name="getAccountDescriptor"></wsdl:input>
      <wsdl:output message="tns:getAccountDescriptorResponse" name="getAccountDescriptorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountSummary">
      <wsdl:input message="tns:getAccountSummary" name="getAccountSummary"></wsdl:input>
      <wsdl:output message="tns:getAccountSummaryResponse" name="getAccountSummaryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrency">
      <wsdl:input message="tns:getSummaryByCurrency" name="getSummaryByCurrency"></wsdl:input>
      <wsdl:output message="tns:getSummaryByCurrencyResponse" name="getSummaryByCurrencyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptors">
      <wsdl:input message="tns:getAccountDescriptors" name="getAccountDescriptors"></wsdl:input>
      <wsdl:output message="tns:getAccountDescriptorsResponse" name="getAccountDescriptorsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccount">
      <wsdl:input message="tns:getAccount" name="getAccount"></wsdl:input>
      <wsdl:output message="tns:getAccountResponse" name="getAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountsByCurrency">
      <wsdl:input message="tns:getAccountsByCurrency" name="getAccountsByCurrency"></wsdl:input>
      <wsdl:output message="tns:getAccountsByCurrencyResponse" name="getAccountsByCurrencyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccounts">
      <wsdl:input message="tns:getAccounts" name="getAccounts"></wsdl:input>
      <wsdl:output message="tns:getAccountsResponse" name="getAccountsResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="AccountPeerSoapBinding" type="tns:AccountPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getMainAccount">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMainAccount">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMainAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getMainAccountAsSummary">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMainAccountAsSummary">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMainAccountAsSummaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrencyGroup">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSummaryByCurrencyGroup">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSummaryByCurrencyGroupResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptor">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDescriptor">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDescriptorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDetails">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountSummary">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountSummary">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountSummaryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountDescriptors">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountDescriptors">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountDescriptorsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSummaryByCurrency">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSummaryByCurrency">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSummaryByCurrencyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccount">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccount">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccounts">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccounts">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAccountsByCurrency">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAccountsByCurrency">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAccountsByCurrencyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="AccountPeer">
    <wsdl:port binding="tns:AccountPeerSoapBinding" name="AccountPeerPort">
      <soap:address location="http://10.105.140.125:8080/accounting/accounts"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getAccount" bindingOperationName="getAccount" type="Request-Response" outputName="getAccountResponse" inputName="getAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccount>
         <prov:arg0>?</prov:arg0>
         <prov:arg1>?</prov:arg1>
      </prov:getAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccount"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDescriptor" bindingOperationName="getAccountDescriptor" type="Request-Response" outputName="getAccountDescriptorResponse" inputName="getAccountDescriptor" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDescriptor>
         <prov:arg0>?</prov:arg0>
      </prov:getAccountDescriptor>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDescriptor"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDescriptors" bindingOperationName="getAccountDescriptors" type="Request-Response" outputName="getAccountDescriptorsResponse" inputName="getAccountDescriptors" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDescriptors/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDescriptors"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccounts" bindingOperationName="getAccounts" type="Request-Response" outputName="getAccountsResponse" inputName="getAccounts" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccounts>
         <prov:arg0>?</prov:arg0>
      </prov:getAccounts>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccounts"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountsByCurrency" bindingOperationName="getAccountsByCurrency" type="Request-Response" outputName="getAccountsByCurrencyResponse" inputName="getAccountsByCurrency" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountsByCurrency>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getAccountsByCurrency>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountsByCurrency"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountSummary" bindingOperationName="getAccountSummary" type="Request-Response" outputName="getAccountSummaryResponse" inputName="getAccountSummary" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountSummary>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getAccountSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountSummary"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMainAccount" bindingOperationName="getMainAccount" type="Request-Response" outputName="getMainAccountResponse" inputName="getMainAccount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccount>
         <prov:arg0>?</prov:arg0>
      </prov:getMainAccount>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getMainAccount"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getMainAccountAsSummary" bindingOperationName="getMainAccountAsSummary" type="Request-Response" outputName="getMainAccountAsSummaryResponse" inputName="getMainAccountAsSummary" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getMainAccountAsSummary>
         <prov:arg0>?</prov:arg0>
      </prov:getMainAccountAsSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getMainAccountAsSummary"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSummaryByCurrency" bindingOperationName="getSummaryByCurrency" type="Request-Response" outputName="getSummaryByCurrencyResponse" inputName="getSummaryByCurrency" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getSummaryByCurrency>
         <prov:arg0>?</prov:arg0>
      </prov:getSummaryByCurrency>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getSummaryByCurrency"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSummaryByCurrencyGroup" bindingOperationName="getSummaryByCurrencyGroup" type="Request-Response" outputName="getSummaryByCurrencyGroupResponse" inputName="getSummaryByCurrencyGroup" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getSummaryByCurrencyGroup>
         <prov:arg0>?</prov:arg0>
         <!--Optional:-->
         <prov:arg1>?</prov:arg1>
      </prov:getSummaryByCurrencyGroup>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getSummaryByCurrencyGroup"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAccountDetails" bindingOperationName="getAccountDetails" type="Request-Response" outputName="getAccountDetailsResponse" inputName="getAccountDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountDetails>
         <prov:arg0>?</prov:arg0>
      </prov:getAccountDetails>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://provisioning.published.accounting.negret.tryge.com/AccountPeerPortType/getAccountDetails"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="SubscriberPeerSoapBinding" type="wsdl" bindingName="{http://services.profiler.negret.tryge.com/}SubscriberPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.107.82.202:8080/profiler/subscriber?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.107.82.202:8080/profiler/subscriber?wsdl"><con:part><con:url>http://10.107.82.202:8080/profiler/subscriber?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="SubscriberPeer" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://services.profiler.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns0="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns1="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://commons.api.plugins.profiler.inewcs.com"/>
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:complexType name="string2SubscriberHeaderMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="ns0:SubscriberHeader"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfString">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="string" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExternalProperty" type="tns:setExternalProperty"/>
      <xsd:complexType name="setExternalProperty">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberPropertyChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExternalPropertyResponse" type="tns:setExternalPropertyResponse"/>
      <xsd:complexType name="setExternalPropertyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExpiryDate" type="tns:setExpiryDate"/>
      <xsd:complexType name="setExpiryDate">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:ExpiryDateChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setExpiryDateResponse" type="tns:setExpiryDateResponse"/>
      <xsd:complexType name="setExpiryDateResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingDate" type="tns:setBillingDate"/>
      <xsd:complexType name="setBillingDate">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:BillingDateChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingDateResponse" type="tns:setBillingDateResponse"/>
      <xsd:complexType name="setBillingDateResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeLanguageRequest" type="tns:changeLanguageRequest"/>
      <xsd:complexType name="changeLanguageRequest">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element name="arg1" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeLanguageRequestResponse" type="tns:changeLanguageRequestResponse"/>
      <xsd:complexType name="changeLanguageRequestResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByExternalId" type="tns:getSubscriberProfileByExternalId"/>
      <xsd:complexType name="getSubscriberProfileByExternalId">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByExternalIdResponse" type="tns:getSubscriberProfileByExternalIdResponse"/>
      <xsd:complexType name="getSubscriberProfileByExternalIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByImsi" type="tns:getSubscriberProfileByImsi"/>
      <xsd:complexType name="getSubscriberProfileByImsi">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByImsiResponse" type="tns:getSubscriberProfileByImsiResponse"/>
      <xsd:complexType name="getSubscriberProfileByImsiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addFlag" type="tns:addFlag"/>
      <xsd:complexType name="addFlag">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="addFlagResponse" type="tns:addFlagResponse"/>
      <xsd:complexType name="addFlagResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfile" type="tns:getSubscriberProfile"/>
      <xsd:complexType name="getSubscriberProfile">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileResponse" type="tns:getSubscriberProfileResponse"/>
      <xsd:complexType name="getSubscriberProfileResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeExternalId" type="tns:changeExternalId"/>
      <xsd:complexType name="changeExternalId">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeExternalIdResponse" type="tns:changeExternalIdResponse"/>
      <xsd:complexType name="changeExternalIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingId" type="tns:setBillingId"/>
      <xsd:complexType name="setBillingId">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:BillingIdChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setBillingIdResponse" type="tns:setBillingIdResponse"/>
      <xsd:complexType name="setBillingIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeNotification" type="tns:changeNotification"/>
      <xsd:complexType name="changeNotification">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:NotificationChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeNotificationResponse" type="tns:changeNotificationResponse"/>
      <xsd:complexType name="changeNotificationResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unblockSubscriber" type="tns:unblockSubscriber"/>
      <xsd:complexType name="unblockSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg3" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="unblockSubscriberResponse" type="tns:unblockSubscriberResponse"/>
      <xsd:complexType name="unblockSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeExternalProperty" type="tns:removeExternalProperty"/>
      <xsd:complexType name="removeExternalProperty">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberPropertyRemovalRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeExternalPropertyResponse" type="tns:removeExternalPropertyResponse"/>
      <xsd:complexType name="removeExternalPropertyResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeFlag" type="tns:removeFlag"/>
      <xsd:complexType name="removeFlag">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="removeFlagResponse" type="tns:removeFlagResponse"/>
      <xsd:complexType name="removeFlagResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeAdditionalStateInfo" type="tns:changeAdditionalStateInfo"/>
      <xsd:complexType name="changeAdditionalStateInfo">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeAdditionalStateInfoResponse" type="tns:changeAdditionalStateInfoResponse"/>
      <xsd:complexType name="changeAdditionalStateInfoResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileById" type="tns:getSubscriberProfileById"/>
      <xsd:complexType name="getSubscriberProfileById">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfileByIdResponse" type="tns:getSubscriberProfileByIdResponse"/>
      <xsd:complexType name="getSubscriberProfileByIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberProfileType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriber" type="tns:activateSubscriber"/>
      <xsd:complexType name="activateSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateSubscriberResponse" type="tns:activateSubscriberResponse"/>
      <xsd:complexType name="activateSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeChargingMode" type="tns:changeChargingMode"/>
      <xsd:complexType name="changeChargingMode">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="changeChargingModeResponse" type="tns:changeChargingModeResponse"/>
      <xsd:complexType name="changeChargingModeResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="blockSubscriber" type="tns:blockSubscriber"/>
      <xsd:complexType name="blockSubscriber">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg2" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="arg3" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="blockSubscriberResponse" type="tns:blockSubscriberResponse"/>
      <xsd:complexType name="blockSubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfiles" type="tns:getSubscriberProfiles"/>
      <xsd:complexType name="getSubscriberProfiles">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:SubscriberBulkLookupRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSubscriberProfilesResponse" type="tns:getSubscriberProfilesResponse"/>
      <xsd:complexType name="getSubscriberProfilesResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:SubscriberBulkLookupResponse"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setAccountLimit" type="tns:setAccountLimit"/>
      <xsd:complexType name="setAccountLimit">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="arg0" type="ns1:AccountLimitChangeRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="setAccountLimitResponse" type="tns:setAccountLimitResponse"/>
      <xsd:complexType name="setAccountLimitResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns1:ActionResultType"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://util.java" xmlns:tns="http://util.java">
      <xsd:complexType abstract="true" name="TimeZone">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="DSTSavings" type="xsd:int"/>
          <xsd:element minOccurs="0" name="ID" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="displayName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="rawOffset" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:ns0="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns1="http://services.profiler.negret.tryge.com/" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://commons.api.plugins.profiler.inewcs.com"/>
      <xsd:import namespace="http://services.profiler.negret.tryge.com/"/>
      <xsd:complexType name="SubscriberPropertyRemovalRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="propertyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BillingIdChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="billingId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SubscriberBulkLookupRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="subscribers" nillable="true" type="ns0:ArrayOfSubscriberMatcher"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSubscriberPropertyType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SubscriberPropertyType" nillable="true" type="tns:SubscriberPropertyType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BillingDateChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="billingDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="NotificationType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="SMS"/>
          <xsd:enumeration value="EMAIL"/>
          <xsd:enumeration value="NONE"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SubscriberPropertyType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="value" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SubscriberBulkLookupResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="subscribers" nillable="true" type="ns1:string2SubscriberHeaderMap"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="SubscriberPropertyChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="propertyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="propertyValue" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="LanguageType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="NotificationCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="CallChargeNotification"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="NotificationChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:NotificationCategory"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="tns:NotificationType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FeatureActivationType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="end" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="featureId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="start" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="AccountLimitChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountLimit" type="xsd:long"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberNotificationType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="NONE"/>
          <xsd:enumeration value="USSD"/>
          <xsd:enumeration value="SMS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="SubscriberType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ActionResultType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SubscriberProfileType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="accountLimit" type="xsd:long"/>
          <xsd:element minOccurs="0" name="activationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="additionalStateInfo" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="billingId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="callChargeNotification" nillable="true" type="tns:SubscriberNotificationType"/>
          <xsd:element minOccurs="0" name="chargingMode" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="externalId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="externalProperties" nillable="true" type="tns:ArrayOfSubscriberPropertyType"/>
          <xsd:element minOccurs="0" name="featureActivations" nillable="true" type="tns:ArrayOfFeatureActivationType"/>
          <xsd:element minOccurs="0" name="flags" nillable="true" type="ns1:ArrayOfString"/>
          <xsd:element minOccurs="0" name="groupActivationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="groupExpiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="groupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="groupMembershipFee" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="imei" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="installationDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="language" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="languageId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="nextGroupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="nextTariffId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="nextTariffName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="nextTariffSwitch" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="prepaidMinimumRevenue" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="previousGroupId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="previousType" nillable="true" type="tns:SubscriberType"/>
          <xsd:element minOccurs="0" name="previousTypeSwitch" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="ns0:SimType"/>
          <xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="tariffId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="tariffName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="type" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfFeatureActivationType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="FeatureActivationType" nillable="true" type="tns:FeatureActivationType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ExpiryDateChangeRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://commons.api.plugins.profiler.inewcs.com" xmlns:ns0="http://services.profiler.negret.tryge.com" xmlns:ns1="http://util.java" xmlns:tns="http://commons.api.plugins.profiler.inewcs.com">
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:import namespace="http://util.java"/>
      <xsd:complexType name="ArrayOfSubscriberMatcher">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SubscriberMatcher" nillable="true" type="tns:SubscriberMatcher"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PREPAID"/>
          <xsd:enumeration value="POSTPAID"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="SimType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="STANDARD"/>
          <xsd:enumeration value="DATAONLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SubscriberHeader">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="preferredLanguage" nillable="true" type="ns0:LanguageType"/>
          <xsd:element minOccurs="0" name="providerId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="simType" nillable="true" type="tns:SimType"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="subscriberState" nillable="true" type="tns:SubscriberState"/>
          <xsd:element minOccurs="0" name="subscriberType" nillable="true" type="tns:SubscriberType"/>
          <xsd:element minOccurs="0" name="timeZone" nillable="true" type="ns1:TimeZone"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="SubscriberState">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INSTALLED"/>
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="BLOCKED"/>
          <xsd:enumeration value="INACTIVE"/>
          <xsd:enumeration value="EXPIRED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SubscriberMatcher">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="setBillingDateResponse">
    <wsdl:part element="tns:setBillingDateResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExpiryDate">
    <wsdl:part element="tns:setExpiryDate" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriber">
    <wsdl:part element="tns:activateSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriberResponse">
    <wsdl:part element="tns:unblockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriberResponse">
    <wsdl:part element="tns:blockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeExternalPropertyResponse">
    <wsdl:part element="tns:removeExternalPropertyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfile">
    <wsdl:part element="tns:getSubscriberProfile" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByImsi">
    <wsdl:part element="tns:getSubscriberProfileByImsi" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addFlagResponse">
    <wsdl:part element="tns:addFlagResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeExternalIdResponse">
    <wsdl:part element="tns:changeExternalIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeAdditionalStateInfoResponse">
    <wsdl:part element="tns:changeAdditionalStateInfoResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExternalPropertyResponse">
    <wsdl:part element="tns:setExternalPropertyResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeLanguageRequestResponse">
    <wsdl:part element="tns:changeLanguageRequestResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfilesResponse">
    <wsdl:part element="tns:getSubscriberProfilesResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByExternalIdResponse">
    <wsdl:part element="tns:getSubscriberProfileByExternalIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingId">
    <wsdl:part element="tns:setBillingId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByIdResponse">
    <wsdl:part element="tns:getSubscriberProfileByIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfiles">
    <wsdl:part element="tns:getSubscriberProfiles" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberResponse">
    <wsdl:part element="tns:activateSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeAdditionalStateInfo">
    <wsdl:part element="tns:changeAdditionalStateInfo" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExpiryDateResponse">
    <wsdl:part element="tns:setExpiryDateResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setExternalProperty">
    <wsdl:part element="tns:setExternalProperty" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileResponse">
    <wsdl:part element="tns:getSubscriberProfileResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeExternalProperty">
    <wsdl:part element="tns:removeExternalProperty" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByExternalId">
    <wsdl:part element="tns:getSubscriberProfileByExternalId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingDate">
    <wsdl:part element="tns:setBillingDate" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setAccountLimitResponse">
    <wsdl:part element="tns:setAccountLimitResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeChargingModeResponse">
    <wsdl:part element="tns:changeChargingModeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeChargingMode">
    <wsdl:part element="tns:changeChargingMode" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeNotification">
    <wsdl:part element="tns:changeNotification" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileById">
    <wsdl:part element="tns:getSubscriberProfileById" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeNotificationResponse">
    <wsdl:part element="tns:changeNotificationResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFlagResponse">
    <wsdl:part element="tns:removeFlagResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeLanguageRequest">
    <wsdl:part element="tns:changeLanguageRequest" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setBillingIdResponse">
    <wsdl:part element="tns:setBillingIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriber">
    <wsdl:part element="tns:blockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addFlag">
    <wsdl:part element="tns:addFlag" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeExternalId">
    <wsdl:part element="tns:changeExternalId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="setAccountLimit">
    <wsdl:part element="tns:setAccountLimit" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberProfileByImsiResponse">
    <wsdl:part element="tns:getSubscriberProfileByImsiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFlag">
    <wsdl:part element="tns:removeFlag" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriber">
    <wsdl:part element="tns:unblockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="SubscriberPeerPortType">
    <wsdl:operation name="setExternalProperty">
      <wsdl:input message="tns:setExternalProperty" name="setExternalProperty"></wsdl:input>
      <wsdl:output message="tns:setExternalPropertyResponse" name="setExternalPropertyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExpiryDate">
      <wsdl:input message="tns:setExpiryDate" name="setExpiryDate"></wsdl:input>
      <wsdl:output message="tns:setExpiryDateResponse" name="setExpiryDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingDate">
      <wsdl:input message="tns:setBillingDate" name="setBillingDate"></wsdl:input>
      <wsdl:output message="tns:setBillingDateResponse" name="setBillingDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeLanguageRequest">
      <wsdl:input message="tns:changeLanguageRequest" name="changeLanguageRequest"></wsdl:input>
      <wsdl:output message="tns:changeLanguageRequestResponse" name="changeLanguageRequestResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByExternalId">
      <wsdl:input message="tns:getSubscriberProfileByExternalId" name="getSubscriberProfileByExternalId"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByExternalIdResponse" name="getSubscriberProfileByExternalIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByImsi">
      <wsdl:input message="tns:getSubscriberProfileByImsi" name="getSubscriberProfileByImsi"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByImsiResponse" name="getSubscriberProfileByImsiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addFlag">
      <wsdl:input message="tns:addFlag" name="addFlag"></wsdl:input>
      <wsdl:output message="tns:addFlagResponse" name="addFlagResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfile">
      <wsdl:input message="tns:getSubscriberProfile" name="getSubscriberProfile"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileResponse" name="getSubscriberProfileResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeExternalId">
      <wsdl:input message="tns:changeExternalId" name="changeExternalId"></wsdl:input>
      <wsdl:output message="tns:changeExternalIdResponse" name="changeExternalIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingId">
      <wsdl:input message="tns:setBillingId" name="setBillingId"></wsdl:input>
      <wsdl:output message="tns:setBillingIdResponse" name="setBillingIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeNotification">
      <wsdl:input message="tns:changeNotification" name="changeNotification"></wsdl:input>
      <wsdl:output message="tns:changeNotificationResponse" name="changeNotificationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <wsdl:input message="tns:unblockSubscriber" name="unblockSubscriber"></wsdl:input>
      <wsdl:output message="tns:unblockSubscriberResponse" name="unblockSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeExternalProperty">
      <wsdl:input message="tns:removeExternalProperty" name="removeExternalProperty"></wsdl:input>
      <wsdl:output message="tns:removeExternalPropertyResponse" name="removeExternalPropertyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeFlag">
      <wsdl:input message="tns:removeFlag" name="removeFlag"></wsdl:input>
      <wsdl:output message="tns:removeFlagResponse" name="removeFlagResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeAdditionalStateInfo">
      <wsdl:input message="tns:changeAdditionalStateInfo" name="changeAdditionalStateInfo"></wsdl:input>
      <wsdl:output message="tns:changeAdditionalStateInfoResponse" name="changeAdditionalStateInfoResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileById">
      <wsdl:input message="tns:getSubscriberProfileById" name="getSubscriberProfileById"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfileByIdResponse" name="getSubscriberProfileByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <wsdl:input message="tns:activateSubscriber" name="activateSubscriber"></wsdl:input>
      <wsdl:output message="tns:activateSubscriberResponse" name="activateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeChargingMode">
      <wsdl:input message="tns:changeChargingMode" name="changeChargingMode"></wsdl:input>
      <wsdl:output message="tns:changeChargingModeResponse" name="changeChargingModeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <wsdl:input message="tns:blockSubscriber" name="blockSubscriber"></wsdl:input>
      <wsdl:output message="tns:blockSubscriberResponse" name="blockSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfiles">
      <wsdl:input message="tns:getSubscriberProfiles" name="getSubscriberProfiles"></wsdl:input>
      <wsdl:output message="tns:getSubscriberProfilesResponse" name="getSubscriberProfilesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setAccountLimit">
      <wsdl:input message="tns:setAccountLimit" name="setAccountLimit"></wsdl:input>
      <wsdl:output message="tns:setAccountLimitResponse" name="setAccountLimitResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="SubscriberPeerSoapBinding" type="tns:SubscriberPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="setBillingDate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setBillingDate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setBillingDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExpiryDate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setExpiryDate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setExpiryDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setExternalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setExternalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setExternalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeLanguageRequest">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeLanguageRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeLanguageRequestResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByExternalId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileByExternalId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByExternalIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addFlag">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addFlag">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addFlagResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileByImsi">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileByImsi">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByImsiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfile">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfile">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeExternalId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeExternalId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeExternalIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setBillingId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setBillingId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setBillingIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeNotification">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeNotification">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeNotificationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeExternalProperty">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeExternalProperty">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeExternalPropertyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="unblockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="unblockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeFlag">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeFlag">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeFlagResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeAdditionalStateInfo">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeAdditionalStateInfo">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeAdditionalStateInfoResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfileById">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfileById">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfileByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="blockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="blockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeChargingMode">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeChargingMode">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeChargingModeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberProfiles">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberProfiles">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberProfilesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="setAccountLimit">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setAccountLimit">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setAccountLimitResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="SubscriberPeer">
    <wsdl:port binding="tns:SubscriberPeerSoapBinding" name="SubscriberPeerPort">
      <soap:address location="http://10.107.82.202:8080/profiler/subscriber"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="activateSubscriber" bindingOperationName="activateSubscriber" type="Request-Response" outputName="activateSubscriberResponse" inputName="activateSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/activateSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="addFlag" bindingOperationName="addFlag" type="Request-Response" outputName="addFlagResponse" inputName="addFlag" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:addFlag>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:addFlag>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/addFlag"/></con:call></con:operation><con:operation isOneWay="false" action="" name="blockSubscriber" bindingOperationName="blockSubscriber" type="Request-Response" outputName="blockSubscriberResponse" inputName="blockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:blockSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
         <!--Optional:-->
         <ser:arg3>?</ser:arg3>
      </ser:blockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/blockSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeAdditionalStateInfo" bindingOperationName="changeAdditionalStateInfo" type="Request-Response" outputName="changeAdditionalStateInfoResponse" inputName="changeAdditionalStateInfo" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeAdditionalStateInfo>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeAdditionalStateInfo>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeAdditionalStateInfo"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeChargingMode" bindingOperationName="changeChargingMode" type="Request-Response" outputName="changeChargingModeResponse" inputName="changeChargingMode" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeChargingMode>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeChargingMode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeChargingMode"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeExternalId" bindingOperationName="changeExternalId" type="Request-Response" outputName="changeExternalIdResponse" inputName="changeExternalId" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeExternalId>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:changeExternalId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeExternalId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeLanguageRequest" bindingOperationName="changeLanguageRequest" type="Request-Response" outputName="changeLanguageRequestResponse" inputName="changeLanguageRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeLanguageRequest>
         <ser:arg0>?</ser:arg0>
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
      </ser:changeLanguageRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeLanguageRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeNotification" bindingOperationName="changeNotification" type="Request-Response" outputName="changeNotificationResponse" inputName="changeNotification" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeNotification>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:category>?</ser1:category>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
            <!--Optional:-->
            <ser1:type>?</ser1:type>
         </ser:arg0>
      </ser:changeNotification>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/changeNotification"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfile" bindingOperationName="getSubscriberProfile" type="Request-Response" outputName="getSubscriberProfileResponse" inputName="getSubscriberProfile" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfile>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfile"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileByExternalId" bindingOperationName="getSubscriberProfileByExternalId" type="Request-Response" outputName="getSubscriberProfileByExternalIdResponse" inputName="getSubscriberProfileByExternalId" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByExternalId>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileByExternalId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileByExternalId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileById" bindingOperationName="getSubscriberProfileById" type="Request-Response" outputName="getSubscriberProfileByIdResponse" inputName="getSubscriberProfileById" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileById>
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileById>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileById"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfileByImsi" bindingOperationName="getSubscriberProfileByImsi" type="Request-Response" outputName="getSubscriberProfileByImsiResponse" inputName="getSubscriberProfileByImsi" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>
         <!--Optional:-->
         <ser:arg0>?</ser:arg0>
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfileByImsi"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberProfiles" bindingOperationName="getSubscriberProfiles" type="Request-Response" outputName="getSubscriberProfilesResponse" inputName="getSubscriberProfiles" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com" xmlns:com="http://commons.api.plugins.profiler.inewcs.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfiles>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:subscribers>
               <!--Zero or more repetitions:-->
               <com:SubscriberMatcher>
                  <!--Optional:-->
                  <com:imsi>?</com:imsi>
                  <!--Optional:-->
                  <com:msisdn>?</com:msisdn>
                  <!--Optional:-->
                  <com:subscriberId>?</com:subscriberId>
               </com:SubscriberMatcher>
            </ser1:subscribers>
         </ser:arg0>
      </ser:getSubscriberProfiles>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/getSubscriberProfiles"/></con:call></con:operation><con:operation isOneWay="false" action="" name="removeFlag" bindingOperationName="removeFlag" type="Request-Response" outputName="removeFlagResponse" inputName="removeFlag" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:removeFlag>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:removeFlag>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/removeFlag"/></con:call></con:operation><con:operation isOneWay="false" action="" name="unblockSubscriber" bindingOperationName="unblockSubscriber" type="Request-Response" outputName="unblockSubscriberResponse" inputName="unblockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:unblockSubscriber>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
         <!--Optional:-->
         <ser:arg2>?</ser:arg2>
         <!--Optional:-->
         <ser:arg3>?</ser:arg3>
      </ser:unblockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/unblockSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setBillingDate" bindingOperationName="setBillingDate" type="Request-Response" outputName="setBillingDateResponse" inputName="setBillingDate" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setBillingDate>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingDate>?</ser1:billingDate>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setBillingDate>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setBillingDate"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setExpiryDate" bindingOperationName="setExpiryDate" type="Request-Response" outputName="setExpiryDateResponse" inputName="setExpiryDate" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setExpiryDate>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:expiryDate>?</ser1:expiryDate>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setExpiryDate>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setExpiryDate"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setExternalProperty" bindingOperationName="setExternalProperty" type="Request-Response" outputName="setExternalPropertyResponse" inputName="setExternalProperty" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setExternalProperty>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:propertyName>?</ser1:propertyName>
            <!--Optional:-->
            <ser1:propertyValue>?</ser1:propertyValue>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setExternalProperty>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setExternalProperty"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setBillingId" bindingOperationName="setBillingId" type="Request-Response" outputName="setBillingIdResponse" inputName="setBillingId" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setBillingId>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:billingId>?</ser1:billingId>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setBillingId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setBillingId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="removeExternalProperty" bindingOperationName="removeExternalProperty" type="Request-Response" outputName="removeExternalPropertyResponse" inputName="removeExternalProperty" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:removeExternalProperty>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:propertyName>?</ser1:propertyName>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:removeExternalProperty>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/removeExternalProperty"/></con:call></con:operation><con:operation isOneWay="false" action="" name="setAccountLimit" bindingOperationName="setAccountLimit" type="Request-Response" outputName="setAccountLimitResponse" inputName="setAccountLimit" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:setAccountLimit>
         <!--Optional:-->
         <ser:arg0>
            <!--Optional:-->
            <ser1:accountLimit>?</ser1:accountLimit>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
         </ser:arg0>
      </ser:setAccountLimit>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/SubscriberPeerPortType/setAccountLimit"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="TariffPeerSoapBinding" type="wsdl" bindingName="{http://services.profiler.negret.tryge.com/}TariffPeerSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.105.140.125:8080/profiler/tariffs?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.105.140.125:8080/profiler/tariffs?wsdl"><con:part><con:url>http://10.105.140.125:8080/profiler/tariffs?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="TariffPeer" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://services.profiler.negret.tryge.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com" xmlns:tns="http://services.profiler.negret.tryge.com">
      <xsd:simpleType name="TariffCategory">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DEFAULT_TARIFF"/>
          <xsd:enumeration value="TARIFF_PLAN"/>
          <xsd:enumeration value="DEFINABLE_TARIFF_PLAN"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffPeriodType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="INTERVAL"/>
          <xsd:enumeration value="CALENDAR"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffPlanActivationRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="crmUser" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="serviceType" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="tariffPlanId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfDefaultTariffType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="DefaultTariffType" nillable="true" type="tns:DefaultTariffType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="TariffPlanStatus">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ACTIVE"/>
          <xsd:enumeration value="ON_HOLD"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="TariffsType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="tariffs" nillable="true" type="tns:ArrayOfDefaultTariffType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="QuotaType" nillable="true" type="tns:QuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="UserPlanDefinition">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="includedQuotas" nillable="true" type="tns:ArrayOfBaseQuotaType"/>
          <xsd:element minOccurs="0" name="price" nillable="true" type="tns:BaseQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfBaseQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="BaseQuotaType" nillable="true" type="tns:BaseQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SelectableQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bonusMessage" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bonusThresholdAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="increment" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="maxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="minAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMaxAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="rangeMinAmount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffIntervalPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="interval" type="xsd:int"/>
              <xsd:element minOccurs="0" name="intervalUnit" nillable="true" type="tns:TariffTimeInterval"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="charges" nillable="true" type="tns:ArrayOfChargeExt"/>
              <xsd:element minOccurs="0" name="lastRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="nextRenewalDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="periodicCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="periodicCycle" nillable="true" type="tns:TariffCycle"/>
              <xsd:element minOccurs="0" name="renewalPeriod" nillable="true" type="tns:TariffPeriod"/>
              <xsd:element minOccurs="0" name="status" nillable="true" type="tns:TariffPlanStatus"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TariffPlansType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="tariffPlans" nillable="true" type="tns:ArrayOfTariffPlanType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="BaseQuotaType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitRelation" nillable="true" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DefaultTariffType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffType">
            <xsd:sequence/>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfChargeExt">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="ChargeExt" nillable="true" type="tns:ChargeExt"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Charge">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="amount" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="currencyUnitId" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyUnitName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="QuotaType">
        <xsd:complexContent>
          <xsd:extension base="tns:BaseQuotaType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="rolloverEnabled" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unitId" type="xsd:long"/>
              <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfTariffPlanType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="TariffPlanType" nillable="true" type="tns:TariffPlanType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffPlanDeactivationRequest">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanActivationRequest">
            <xsd:sequence/>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType abstract="true" name="TariffType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:TariffCategory"/>
          <xsd:element minOccurs="0" name="code" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="default" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="id" type="xsd:long"/>
          <xsd:element minOccurs="0" name="includedQuota" nillable="true" type="tns:ArrayOfQuotaType"/>
          <xsd:element minOccurs="0" name="name" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="providerId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="InvalidArguments"/>
          <xsd:enumeration value="InvalidPlanDefinition"/>
          <xsd:enumeration value="InvalidState"/>
          <xsd:enumeration value="InsufficientFunds"/>
          <xsd:enumeration value="PlanAlreadyActivated"/>
          <xsd:enumeration value="UnknownSubscriber"/>
          <xsd:enumeration value="UnknownCounter"/>
          <xsd:enumeration value="UnknownTariff"/>
          <xsd:enumeration value="UnknownProvider"/>
          <xsd:enumeration value="UnknownLocation"/>
          <xsd:enumeration value="DbError"/>
          <xsd:enumeration value="UnknownError"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="TariffTimeInterval">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="DAYS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfSelectableQuotaType">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="SelectableQuotaType" nillable="true" type="tns:SelectableQuotaType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ChargeExt">
        <xsd:complexContent>
          <xsd:extension base="tns:Charge">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="preferred" type="xsd:boolean"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="UserDefinablePlanType">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPlanType">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="minimumCharge" nillable="true" type="tns:Charge"/>
              <xsd:element minOccurs="0" name="selectableQuotas" nillable="true" type="tns:ArrayOfSelectableQuotaType"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TariffCycle">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="WEEKLY"/>
          <xsd:enumeration value="MONTHLY"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType abstract="true" name="TariffPeriod">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="periodType" nillable="true" type="tns:TariffPeriodType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TariffCalendarPeriod">
        <xsd:complexContent>
          <xsd:extension base="tns:TariffPeriod">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="dayOf" type="xsd:int"/>
              <xsd:element minOccurs="0" name="periodicity" nillable="true" type="tns:TariffCycle"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://services.profiler.negret.tryge.com/" xmlns:ns0="http://services.profiler.negret.tryge.com">
      <xsd:import namespace="http://services.profiler.negret.tryge.com"/>
      <xsd:element name="getTariffPlansBySubscriber" type="tns:getTariffPlansBySubscriber"/>
      <xsd:complexType name="getTariffPlansBySubscriber">
        <xsd:sequence>
          <xsd:element name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffPlansBySubscriberResponse" type="tns:getTariffPlansBySubscriberResponse"/>
      <xsd:complexType name="getTariffPlansBySubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="tariffPlansResponse" type="ns0:TariffPlansType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffById" type="tns:getTariffById"/>
      <xsd:complexType name="getTariffById">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffByIdResponse" type="tns:getTariffByIdResponse"/>
      <xsd:complexType name="getTariffByIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:TariffType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deactivateTariffPlan" type="tns:deactivateTariffPlan"/>
      <xsd:complexType name="deactivateTariffPlan">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deactivationRequest" type="ns0:TariffPlanDeactivationRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="deactivateTariffPlanResponse" type="tns:deactivateTariffPlanResponse"/>
      <xsd:complexType name="deactivateTariffPlanResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deactivationResponse" nillable="true" type="ns0:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffBySubscriber" type="tns:getTariffBySubscriber"/>
      <xsd:complexType name="getTariffBySubscriber">
        <xsd:sequence>
          <xsd:element name="subscriberId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffBySubscriberResponse" type="tns:getTariffBySubscriberResponse"/>
      <xsd:complexType name="getTariffBySubscriberResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="tariffResponse" type="ns0:TariffType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffsByProviderIdAndLabel" type="tns:getTariffsByProviderIdAndLabel"/>
      <xsd:complexType name="getTariffsByProviderIdAndLabel">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
          <xsd:element minOccurs="0" name="arg1" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffsByProviderIdAndLabelResponse" type="tns:getTariffsByProviderIdAndLabelResponse"/>
      <xsd:complexType name="getTariffsByProviderIdAndLabelResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:TariffsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffPlansByTariff" type="tns:getTariffPlansByTariff"/>
      <xsd:complexType name="getTariffPlansByTariff">
        <xsd:sequence>
          <xsd:element name="providerId" type="xsd:long"/>
          <xsd:element name="tariffId" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffPlansByTariffResponse" type="tns:getTariffPlansByTariffResponse"/>
      <xsd:complexType name="getTariffPlansByTariffResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="tariffPlansResponse" type="ns0:TariffPlansType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffByProviderId" type="tns:getTariffByProviderId"/>
      <xsd:complexType name="getTariffByProviderId">
        <xsd:sequence>
          <xsd:element name="arg0" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getTariffByProviderIdResponse" type="tns:getTariffByProviderIdResponse"/>
      <xsd:complexType name="getTariffByProviderIdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" type="ns0:TariffsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateUserDefinedPlan" type="tns:activateUserDefinedPlan"/>
      <xsd:complexType name="activateUserDefinedPlan">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationRequest" type="ns0:TariffPlanActivationRequest"/>
          <xsd:element minOccurs="0" name="planDefinition" type="ns0:UserPlanDefinition"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateUserDefinedPlanResponse" type="tns:activateUserDefinedPlanResponse"/>
      <xsd:complexType name="activateUserDefinedPlanResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationResponse" nillable="true" type="ns0:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateTariffPlan" type="tns:activateTariffPlan"/>
      <xsd:complexType name="activateTariffPlan">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationRequest" type="ns0:TariffPlanActivationRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="activateTariffPlanResponse" type="tns:activateTariffPlanResponse"/>
      <xsd:complexType name="activateTariffPlanResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="activationResponse" nillable="true" type="ns0:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="activateUserDefinedPlanResponse">
    <wsdl:part element="tns:activateUserDefinedPlanResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffByProviderId">
    <wsdl:part element="tns:getTariffByProviderId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffPlansByTariff">
    <wsdl:part element="tns:getTariffPlansByTariff" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffBySubscriber">
    <wsdl:part element="tns:getTariffBySubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffPlansByTariffResponse">
    <wsdl:part element="tns:getTariffPlansByTariffResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffById">
    <wsdl:part element="tns:getTariffById" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateTariffPlan">
    <wsdl:part element="tns:deactivateTariffPlan" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateTariffPlanResponse">
    <wsdl:part element="tns:deactivateTariffPlanResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateTariffPlan">
    <wsdl:part element="tns:activateTariffPlan" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffBySubscriberResponse">
    <wsdl:part element="tns:getTariffBySubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffByProviderIdResponse">
    <wsdl:part element="tns:getTariffByProviderIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffPlansBySubscriber">
    <wsdl:part element="tns:getTariffPlansBySubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffsByProviderIdAndLabel">
    <wsdl:part element="tns:getTariffsByProviderIdAndLabel" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateUserDefinedPlan">
    <wsdl:part element="tns:activateUserDefinedPlan" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffPlansBySubscriberResponse">
    <wsdl:part element="tns:getTariffPlansBySubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateTariffPlanResponse">
    <wsdl:part element="tns:activateTariffPlanResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffsByProviderIdAndLabelResponse">
    <wsdl:part element="tns:getTariffsByProviderIdAndLabelResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTariffByIdResponse">
    <wsdl:part element="tns:getTariffByIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="TariffPeerPortType">
    <wsdl:operation name="getTariffPlansBySubscriber">
      <wsdl:input message="tns:getTariffPlansBySubscriber" name="getTariffPlansBySubscriber"></wsdl:input>
      <wsdl:output message="tns:getTariffPlansBySubscriberResponse" name="getTariffPlansBySubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffById">
      <wsdl:input message="tns:getTariffById" name="getTariffById"></wsdl:input>
      <wsdl:output message="tns:getTariffByIdResponse" name="getTariffByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deactivateTariffPlan">
      <wsdl:input message="tns:deactivateTariffPlan" name="deactivateTariffPlan"></wsdl:input>
      <wsdl:output message="tns:deactivateTariffPlanResponse" name="deactivateTariffPlanResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffBySubscriber">
      <wsdl:input message="tns:getTariffBySubscriber" name="getTariffBySubscriber"></wsdl:input>
      <wsdl:output message="tns:getTariffBySubscriberResponse" name="getTariffBySubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffsByProviderIdAndLabel">
      <wsdl:input message="tns:getTariffsByProviderIdAndLabel" name="getTariffsByProviderIdAndLabel"></wsdl:input>
      <wsdl:output message="tns:getTariffsByProviderIdAndLabelResponse" name="getTariffsByProviderIdAndLabelResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffPlansByTariff">
      <wsdl:input message="tns:getTariffPlansByTariff" name="getTariffPlansByTariff"></wsdl:input>
      <wsdl:output message="tns:getTariffPlansByTariffResponse" name="getTariffPlansByTariffResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffByProviderId">
      <wsdl:input message="tns:getTariffByProviderId" name="getTariffByProviderId"></wsdl:input>
      <wsdl:output message="tns:getTariffByProviderIdResponse" name="getTariffByProviderIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateUserDefinedPlan">
      <wsdl:input message="tns:activateUserDefinedPlan" name="activateUserDefinedPlan"></wsdl:input>
      <wsdl:output message="tns:activateUserDefinedPlanResponse" name="activateUserDefinedPlanResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateTariffPlan">
      <wsdl:input message="tns:activateTariffPlan" name="activateTariffPlan"></wsdl:input>
      <wsdl:output message="tns:activateTariffPlanResponse" name="activateTariffPlanResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="TariffPeerSoapBinding" type="tns:TariffPeerPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getTariffById">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffById">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffPlansBySubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffPlansBySubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffPlansBySubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deactivateTariffPlan">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deactivateTariffPlan">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deactivateTariffPlanResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffBySubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffBySubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffBySubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffPlansByTariff">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffPlansByTariff">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffPlansByTariffResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffsByProviderIdAndLabel">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffsByProviderIdAndLabel">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffsByProviderIdAndLabelResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTariffByProviderId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTariffByProviderId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTariffByProviderIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateUserDefinedPlan">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateUserDefinedPlan">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateUserDefinedPlanResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateTariffPlan">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateTariffPlan">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateTariffPlanResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="TariffPeer">
    <wsdl:port binding="tns:TariffPeerSoapBinding" name="TariffPeerPort">
      <soap:address location="http://10.105.140.125:8080/profiler/tariffs"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.107.82.202:8080/profiler/tariffs</con:endpoint><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="activateTariffPlan" bindingOperationName="activateTariffPlan" type="Request-Response" outputName="activateTariffPlanResponse" inputName="activateTariffPlan" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateTariffPlan>
         <!--Optional:-->
         <ser:activationRequest>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
            <!--Optional:-->
            <ser1:tariffPlanId>?</ser1:tariffPlanId>
         </ser:activationRequest>
      </ser:activateTariffPlan>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/activateTariffPlan"/></con:call></con:operation><con:operation isOneWay="false" action="" name="activateUserDefinedPlan" bindingOperationName="activateUserDefinedPlan" type="Request-Response" outputName="activateUserDefinedPlanResponse" inputName="activateUserDefinedPlan" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateUserDefinedPlan>
         <!--Optional:-->
         <ser:activationRequest>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
            <!--Optional:-->
            <ser1:tariffPlanId>?</ser1:tariffPlanId>
         </ser:activationRequest>
         <!--Optional:-->
         <ser:planDefinition>
            <!--Optional:-->
            <ser1:includedQuotas>
               <!--Zero or more repetitions:-->
               <ser1:BaseQuotaType>
                  <!--Optional:-->
                  <ser1:amount>?</ser1:amount>
                  <!--Optional:-->
                  <ser1:currencyId>?</ser1:currencyId>
                  <!--Optional:-->
                  <ser1:unitRelation>?</ser1:unitRelation>
               </ser1:BaseQuotaType>
            </ser1:includedQuotas>
            <!--Optional:-->
            <ser1:price>
               <!--Optional:-->
               <ser1:amount>?</ser1:amount>
               <!--Optional:-->
               <ser1:currencyId>?</ser1:currencyId>
               <!--Optional:-->
               <ser1:unitRelation>?</ser1:unitRelation>
            </ser1:price>
         </ser:planDefinition>
      </ser:activateUserDefinedPlan>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/activateUserDefinedPlan"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deactivateTariffPlan" bindingOperationName="deactivateTariffPlan" type="Request-Response" outputName="deactivateTariffPlanResponse" inputName="deactivateTariffPlan" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/" xmlns:ser1="http://services.profiler.negret.tryge.com">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deactivateTariffPlan>
         <!--Optional:-->
         <ser:deactivationRequest>
            <!--Optional:-->
            <ser1:crmUser>?</ser1:crmUser>
            <!--Optional:-->
            <ser1:serviceType>?</ser1:serviceType>
            <!--Optional:-->
            <ser1:subscriberId>?</ser1:subscriberId>
            <!--Optional:-->
            <ser1:tariffPlanId>?</ser1:tariffPlanId>
         </ser:deactivationRequest>
      </ser:deactivateTariffPlan>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/deactivateTariffPlan"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffById" bindingOperationName="getTariffById" type="Request-Response" outputName="getTariffByIdResponse" inputName="getTariffById" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffById>
         <ser:arg0>?</ser:arg0>
      </ser:getTariffById>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffById"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffByProviderId" bindingOperationName="getTariffByProviderId" type="Request-Response" outputName="getTariffByProviderIdResponse" inputName="getTariffByProviderId" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Tariffs of ProviderId 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffByProviderId>
         <ser:arg0>1</ser:arg0>
      </ser:getTariffByProviderId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffByProviderId"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffBySubscriber" bindingOperationName="getTariffBySubscriber" type="Request-Response" outputName="getTariffBySubscriberResponse" inputName="getTariffBySubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffBySubscriber>
         <ser:subscriberId>?</ser:subscriberId>
      </ser:getTariffBySubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffBySubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffPlansBySubscriber" bindingOperationName="getTariffPlansBySubscriber" type="Request-Response" outputName="getTariffPlansBySubscriberResponse" inputName="getTariffPlansBySubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffPlansBySubscriber>
         <ser:subscriberId>?</ser:subscriberId>
      </ser:getTariffPlansBySubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffPlansBySubscriber"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffPlansByTariff" bindingOperationName="getTariffPlansByTariff" type="Request-Response" outputName="getTariffPlansByTariffResponse" inputName="getTariffPlansByTariff" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffPlansByTariff>
         <ser:providerId>?</ser:providerId>
         <ser:tariffId>?</ser:tariffId>
      </ser:getTariffPlansByTariff>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffPlansByTariff"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTariffsByProviderIdAndLabel" bindingOperationName="getTariffsByProviderIdAndLabel" type="Request-Response" outputName="getTariffsByProviderIdAndLabelResponse" inputName="getTariffsByProviderIdAndLabel" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffsByProviderIdAndLabel>
         <ser:arg0>?</ser:arg0>
         <!--Optional:-->
         <ser:arg1>?</ser:arg1>
      </ser:getTariffsByProviderIdAndLabel>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.profiler.negret.tryge.com/TariffPeerPortType/getTariffsByProviderIdAndLabel"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="CRMServiceImplServiceSoapBinding" type="wsdl" bindingName="{http://service.provisioning.inewcs.com/}CRMServiceImplServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.0.20.28:8080/inewcs-provisioning-core/CRMService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.0.20.28:8080/inewcs-provisioning-core/CRMService?wsdl"><con:part><con:url>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="CRMServiceImplService" targetNamespace="http://service.provisioning.inewcs.com/" xmlns:ns1="http://services.api.provisioning.inewcs.com/" xmlns:ns2="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://service.provisioning.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:import location="http://10.0.20.28:8080/inewcs-provisioning-core/CRMService?wsdl=CRMService.wsdl" namespace="http://services.api.provisioning.inewcs.com/"></wsdl:import>
  <wsdl:binding name="CRMServiceImplServiceSoapBinding" type="ns1:CRMService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="deleteSim1">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deleteSim1">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteSim1Response">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSubscriberIMEIs">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSubscriberIMEIs">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriberIMEIsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCarriers">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCarriers">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCarriersResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="processIMEI">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="processIMEI">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="processIMEIResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="blockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="blockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalArgumentException">
        <soap:fault name="IllegalArgumentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByIMEI">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSimDetailsByIMEI">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSimDetailsByIMEIResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeFromBlacklist">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeFromBlacklist">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeFromBlacklistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeMSISDN">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="changeMSISDN">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="changeMSISDNResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="portIn">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="portIn">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="portInResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="checkIMEIStatus">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="checkIMEIStatus">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="checkIMEIStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="unblockSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="unblockSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalArgumentException">
        <soap:fault name="IllegalArgumentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="portOut">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="portOut">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="portOutResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addToBlacklist">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addToBlacklist">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addToBlacklistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTACFAC">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTACFAC">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTACFACResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecycledSimCardHistory">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getRecycledSimCardHistory">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getRecycledSimCardHistoryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByMSISDN">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSimDetailsByMSISDN">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSimDetailsByMSISDNResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberEx">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriberEx">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberExResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="modifyWhitelist">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="modifyWhitelist">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="modifyWhitelistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByICCID">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSimDetailsByICCID">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSimDetailsByICCIDResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDevice">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDevice">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDeviceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="test">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="test">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="testResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAdHocOperationsHistory">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAdHocOperationsHistory">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAdHocOperationsHistoryResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getUnlockFee">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getUnlockFee">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getUnlockFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByPassportId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSimDetailsByPassportId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSimDetailsByPassportIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="otaPush">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="otaPush">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="otaPushResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSim">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deleteSim">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deleteSimResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="recycleSimCard">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="recycleSimCard">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="recycleSimCardResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="generateAdHocOperationErrorFile">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="generateAdHocOperationErrorFile">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="generateAdHocOperationErrorFileResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="Exception">
        <soap:fault name="Exception" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriber">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getModels">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getModels">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getModelsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendVerificationCode">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="sendVerificationCode">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendVerificationCodeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="processSTKResponse">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="processSTKResponse">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="processSTKResponseResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAdHocOperationHealth">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAdHocOperationHealth">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAdHocOperationHealthResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getManufacturers">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getManufacturers">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getManufacturersResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="swapSims">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="swapSims">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="swapSimsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByIMSI">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSimDetailsByIMSI">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSimDetailsByIMSIResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberOld">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="activateSubscriberOld">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="activateSubscriberOldResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addToWhitelist">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addToWhitelist">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addToWhitelistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="updateSIMDetails">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="updateSIMDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateSIMDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="recoveryAdHocOperation">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="recoveryAdHocOperation">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="recoveryAdHocOperationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ProvisioningException">
        <soap:fault name="ProvisioningException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CRMServiceImplService">
    <wsdl:port binding="tns:CRMServiceImplServiceSoapBinding" name="CRMServiceImplPort">
      <soap:address location="http://10.0.20.28:8080/inewcs-provisioning-core/CRMService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService?wsdl=CRMService.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="CRMService" targetNamespace="http://services.api.provisioning.inewcs.com/" xmlns:ns1="http://services.api.provisioning.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xs:schema attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://services.api.provisioning.inewcs.com/" xmlns:tns="http://services.api.provisioning.inewcs.com/" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:complexType name="imeiListResponse">
        <xs:sequence>
          <xs:element name="gracePeriod" type="xs:int"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="imeis" nillable="true" type="tns:imei"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="imei">
        <xs:sequence>
          <xs:element minOccurs="0" name="currImeiStatus" type="tns:imeiStatus"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="imeiPK" type="tns:imeipk"/>
          <xs:element minOccurs="0" name="modifiedDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="prevImeiStatus" type="tns:imeiStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="imeipk">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="carrier">
        <xs:sequence>
          <xs:element minOccurs="0" name="description" type="xs:string"/>
          <xs:element minOccurs="0" name="handOffCode" type="xs:int"/>
          <xs:element minOccurs="0" name="id" type="xs:int"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceProviderId" type="xs:int"/>
          <xs:element minOccurs="0" name="serviceProviderName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType final="extension restriction" name="simCardDetails">
        <xs:sequence>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="birthday" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="contactMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="country" type="xs:string"/>
          <xs:element minOccurs="0" name="date" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="district" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="health" type="xs:string"/>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="imeiDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="imeiStatus" type="tns:imeiStatus"/>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="isImeiCheckCodeValid" type="xs:boolean"/>
          <xs:element minOccurs="0" name="isOTASupported" type="xs:boolean"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element minOccurs="0" name="model" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="pin1" type="xs:string"/>
          <xs:element minOccurs="0" name="pin2" type="xs:string"/>
          <xs:element minOccurs="0" name="puk1" type="xs:string"/>
          <xs:element minOccurs="0" name="puk2" type="xs:string"/>
          <xs:element minOccurs="0" name="simCardProvider" type="tns:simCardProvider"/>
          <xs:element minOccurs="0" name="state" type="tns:simCardState"/>
          <xs:element minOccurs="0" name="stkState" type="xs:string"/>
          <xs:element minOccurs="0" name="type" type="tns:subscriberType"/>
          <xs:element minOccurs="0" name="typeOfPassport" type="xs:int"/>
          <xs:element minOccurs="0" name="verificationCode" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="result">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="tns:resultCode"/>
          <xs:element minOccurs="0" name="errorFile" type="xs:string"/>
          <xs:element minOccurs="0" name="errorMessage" type="xs:string"/>
          <xs:element minOccurs="0" name="operationId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="imeiStatusResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="code" type="tns:resultCode"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="entries" nillable="true" type="tns:entry"/>
          <xs:element minOccurs="0" name="errMsg" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="status" type="tns:imeiStatus"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="entry">
        <xs:sequence>
          <xs:element minOccurs="0" name="operatorId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportType" type="xs:string"/>
          <xs:element minOccurs="0" name="subscriberName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType abstract="true" name="abstractTACFAC">
        <xs:sequence>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element minOccurs="0" name="model" type="xs:string"/>
          <xs:element minOccurs="0" name="tacFac" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="tacfac">
        <xs:complexContent>
          <xs:extension base="tns:abstractTACFAC">
            <xs:sequence/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="recycledSIMCardResult">
        <xs:sequence>
          <xs:element minOccurs="0" name="date" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="health" type="xs:string"/>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="jobScenarioKey" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="adHocResponse">
        <xs:complexContent>
          <xs:extension base="tns:result">
            <xs:sequence>
              <xs:element name="transparentData">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element minOccurs="0" name="key" type="xs:string"/>
                          <xs:element minOccurs="0" name="value" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="device">
        <xs:sequence>
          <xs:element minOccurs="0" name="activation" type="xs:string"/>
          <xs:element minOccurs="0" name="colour" type="xs:string"/>
          <xs:element minOccurs="0" name="deactivation" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="lockStatusKey" type="xs:string"/>
          <xs:element minOccurs="0" name="lockidNetwork" type="xs:string"/>
          <xs:element minOccurs="0" name="lockidServiceProvider" type="xs:string"/>
          <xs:element minOccurs="0" name="lockidSubNet" type="xs:string"/>
          <xs:element minOccurs="0" name="lockkeyNetwork" type="xs:string"/>
          <xs:element minOccurs="0" name="lockkeyServiceProvider" type="xs:string"/>
          <xs:element minOccurs="0" name="lockkeySubnet" type="xs:string"/>
          <xs:element minOccurs="0" name="make" type="xs:string"/>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element minOccurs="0" name="model" type="xs:string"/>
          <xs:element minOccurs="0" name="nck" type="xs:string"/>
          <xs:element minOccurs="0" name="networkCode" type="xs:string"/>
          <xs:element minOccurs="0" name="shippingDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="softwareVersion" type="xs:string"/>
          <xs:element minOccurs="0" name="unlockDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="unlockFee" type="xs:string"/>
          <xs:element minOccurs="0" name="unlockkeyNetwork" type="xs:string"/>
          <xs:element minOccurs="0" name="unlockkeyServiceProvider" type="xs:string"/>
          <xs:element minOccurs="0" name="unlockkeySubnet" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="adHocHistory">
        <xs:sequence>
          <xs:element minOccurs="0" name="date" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="health" type="tns:health"/>
          <xs:element minOccurs="0" name="id" type="xs:long"/>
          <xs:element minOccurs="0" name="jobScenarioKey" type="xs:string"/>
          <xs:element minOccurs="0" name="modifiedDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="operationId" type="xs:long"/>
          <xs:element minOccurs="0" name="parameters" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="application">
        <xs:restriction base="xs:string">
          <xs:enumeration value="CRM"/>
          <xs:enumeration value="PROVISIONING"/>
          <xs:enumeration value="USSD"/>
          <xs:enumeration value="IVR"/>
          <xs:enumeration value="WEB_PORTAL"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="imeiStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Registered"/>
          <xs:enumeration value="RegisteredToAnotherUser"/>
          <xs:enumeration value="RegisteredToAnotherOperator"/>
          <xs:enumeration value="Blacklisted"/>
          <xs:enumeration value="UnRegistered"/>
          <xs:enumeration value="Unknown"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="simCardProvider">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Oberthur"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="simCardState">
        <xs:restriction base="xs:string">
          <xs:enumeration value="INSTALLED"/>
          <xs:enumeration value="ACTIVE"/>
          <xs:enumeration value="INACTIVE"/>
          <xs:enumeration value="BLOCKED"/>
          <xs:enumeration value="EXPIRED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="subscriberType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="PREPAID"/>
          <xs:enumeration value="POSTPAID"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="resultCode">
        <xs:restriction base="xs:string">
          <xs:enumeration value="Ok"/>
          <xs:enumeration value="Failed"/>
          <xs:enumeration value="IOError"/>
          <xs:enumeration value="UnknownError"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="health">
        <xs:restriction base="xs:string">
          <xs:enumeration value="OK"/>
          <xs:enumeration value="FAILED"/>
          <xs:enumeration value="INPROGRESS"/>
          <xs:enumeration value="Expired"/>
          <xs:enumeration value="Unknown"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="ProvisioningException">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="ProvisioningException" type="tns:ProvisioningException"/>
      <xs:complexType name="IllegalArgumentException">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="IllegalArgumentException" type="tns:IllegalArgumentException"/>
      <xs:complexType name="Exception">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="Exception" type="tns:Exception"/>
      <xs:element name="getSubscriberIMEIs" type="tns:getSubscriberIMEIs"/>
      <xs:complexType name="getSubscriberIMEIs">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSubscriberIMEIsResponse" type="tns:getSubscriberIMEIsResponse"/>
      <xs:complexType name="getSubscriberIMEIsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:imeiListResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="deleteSim1" type="tns:deleteSim1"/>
      <xs:complexType name="deleteSim1">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="deleteSim1Response" type="tns:deleteSim1Response"/>
      <xs:complexType name="deleteSim1Response">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getCarriers" type="tns:getCarriers"/>
      <xs:complexType name="getCarriers">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="getCarriersResponse" type="tns:getCarriersResponse"/>
      <xs:complexType name="getCarriersResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:carrier"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="processIMEI" type="tns:processIMEI"/>
      <xs:complexType name="processIMEI">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="terminalProfile" type="xs:string"/>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="currentImei" type="xs:string"/>
          <xs:element minOccurs="0" name="previousImei" type="xs:string"/>
          <xs:element name="imeiChanged" type="xs:boolean"/>
          <xs:element name="firstTimeActivation" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="processIMEIResponse" type="tns:processIMEIResponse"/>
      <xs:complexType name="processIMEIResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="blockSubscriber" type="tns:blockSubscriber"/>
      <xs:complexType name="blockSubscriber">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:long"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
          <xs:element minOccurs="0" name="arg2" type="xs:string"/>
          <xs:element minOccurs="0" name="arg3" type="xs:string"/>
          <xs:element minOccurs="0" name="arg4" type="xs:string"/>
          <xs:element minOccurs="0" name="arg5" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="blockSubscriberResponse" type="tns:blockSubscriberResponse"/>
      <xs:complexType name="blockSubscriberResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByIMEI" type="tns:getSimDetailsByIMEI"/>
      <xs:complexType name="getSimDetailsByIMEI">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByIMEIResponse" type="tns:getSimDetailsByIMEIResponse"/>
      <xs:complexType name="getSimDetailsByIMEIResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:simCardDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="removeFromBlacklist" type="tns:removeFromBlacklist"/>
      <xs:complexType name="removeFromBlacklist">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="removeFromBlacklistResponse" type="tns:removeFromBlacklistResponse"/>
      <xs:complexType name="removeFromBlacklistResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="changeMSISDN" type="tns:changeMSISDN"/>
      <xs:complexType name="changeMSISDN">
        <xs:sequence>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="newMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="changeMSISDNResponse" type="tns:changeMSISDNResponse"/>
      <xs:complexType name="changeMSISDNResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="portIn" type="tns:portIn"/>
      <xs:complexType name="portIn">
        <xs:sequence>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="newMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="portInResponse" type="tns:portInResponse"/>
      <xs:complexType name="portInResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="checkIMEIStatus" type="tns:checkIMEIStatus"/>
      <xs:complexType name="checkIMEIStatus">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="checkIMEIStatusResponse" type="tns:checkIMEIStatusResponse"/>
      <xs:complexType name="checkIMEIStatusResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:imeiStatusResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="unblockSubscriber" type="tns:unblockSubscriber"/>
      <xs:complexType name="unblockSubscriber">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:long"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
          <xs:element minOccurs="0" name="arg2" type="xs:string"/>
          <xs:element minOccurs="0" name="arg3" type="xs:string"/>
          <xs:element minOccurs="0" name="arg4" type="xs:string"/>
          <xs:element minOccurs="0" name="arg5" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="unblockSubscriberResponse" type="tns:unblockSubscriberResponse"/>
      <xs:complexType name="unblockSubscriberResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="portOut" type="tns:portOut"/>
      <xs:complexType name="portOut">
        <xs:sequence>
          <xs:element minOccurs="0" name="iccid" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="portOutResponse" type="tns:portOutResponse"/>
      <xs:complexType name="portOutResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getTACFAC" type="tns:getTACFAC"/>
      <xs:complexType name="getTACFAC">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getTACFACResponse" type="tns:getTACFACResponse"/>
      <xs:complexType name="getTACFACResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:tacfac"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="addToBlacklist" type="tns:addToBlacklist"/>
      <xs:complexType name="addToBlacklist">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="reportType" type="xs:string"/>
          <xs:element minOccurs="0" name="reportDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="subscriberName" type="xs:string"/>
          <xs:element minOccurs="0" name="district" type="xs:string"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="contactMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="addToBlacklistResponse" type="tns:addToBlacklistResponse"/>
      <xs:complexType name="addToBlacklistResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getRecycledSimCardHistory" type="tns:getRecycledSimCardHistory"/>
      <xs:complexType name="getRecycledSimCardHistory">
        <xs:sequence>
          <xs:element minOccurs="0" name="startDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="endDate" type="xs:dateTime"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getRecycledSimCardHistoryResponse" type="tns:getRecycledSimCardHistoryResponse"/>
      <xs:complexType name="getRecycledSimCardHistoryResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:recycledSIMCardResult"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByMSISDN" type="tns:getSimDetailsByMSISDN"/>
      <xs:complexType name="getSimDetailsByMSISDN">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByMSISDNResponse" type="tns:getSimDetailsByMSISDNResponse"/>
      <xs:complexType name="getSimDetailsByMSISDNResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:simCardDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="modifyWhitelist" type="tns:modifyWhitelist"/>
      <xs:complexType name="modifyWhitelist">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportType" type="xs:int"/>
          <xs:element minOccurs="0" name="subscriberName" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="modifyWhitelistResponse" type="tns:modifyWhitelistResponse"/>
      <xs:complexType name="modifyWhitelistResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriberEx" type="tns:activateSubscriberEx"/>
      <xs:complexType name="activateSubscriberEx">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportType" type="xs:int"/>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="contactMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="district" type="xs:string"/>
          <xs:element minOccurs="0" name="country" type="xs:string"/>
          <xs:element minOccurs="0" name="birthday" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="issueDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="refCode" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriberExResponse" type="tns:activateSubscriberExResponse"/>
      <xs:complexType name="activateSubscriberExResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:adHocResponse"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByICCID" type="tns:getSimDetailsByICCID"/>
      <xs:complexType name="getSimDetailsByICCID">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByICCIDResponse" type="tns:getSimDetailsByICCIDResponse"/>
      <xs:complexType name="getSimDetailsByICCIDResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:simCardDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getDevice" type="tns:getDevice"/>
      <xs:complexType name="getDevice">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
          <xs:element minOccurs="0" name="model" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getDeviceResponse" type="tns:getDeviceResponse"/>
      <xs:complexType name="getDeviceResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:device"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="test" type="tns:test"/>
      <xs:complexType name="test">
        <xs:sequence>
          <xs:element minOccurs="0" name="command" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="testResponse" type="tns:testResponse"/>
      <xs:complexType name="testResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="getUnlockFee" type="tns:getUnlockFee"/>
      <xs:complexType name="getUnlockFee">
        <xs:sequence>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getUnlockFeeResponse" type="tns:getUnlockFeeResponse"/>
      <xs:complexType name="getUnlockFeeResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getAdHocOperationsHistory" type="tns:getAdHocOperationsHistory"/>
      <xs:complexType name="getAdHocOperationsHistory">
        <xs:sequence>
          <xs:element minOccurs="0" name="startDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="endDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="key" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getAdHocOperationsHistoryResponse" type="tns:getAdHocOperationsHistoryResponse"/>
      <xs:complexType name="getAdHocOperationsHistoryResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:adHocHistory"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByPassportId" type="tns:getSimDetailsByPassportId"/>
      <xs:complexType name="getSimDetailsByPassportId">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByPassportIdResponse" type="tns:getSimDetailsByPassportIdResponse"/>
      <xs:complexType name="getSimDetailsByPassportIdResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="tns:simCardDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="otaPush" type="tns:otaPush"/>
      <xs:complexType name="otaPush">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="otaPushResponse" type="tns:otaPushResponse"/>
      <xs:complexType name="otaPushResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="deleteSim" type="tns:deleteSim"/>
      <xs:complexType name="deleteSim">
        <xs:sequence>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="deleteSimResponse" type="tns:deleteSimResponse"/>
      <xs:complexType name="deleteSimResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="recycleSimCard" type="tns:recycleSimCard"/>
      <xs:complexType name="recycleSimCard">
        <xs:sequence>
          <xs:element minOccurs="0" name="simCardId" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="recycleSimCardResponse" type="tns:recycleSimCardResponse"/>
      <xs:complexType name="recycleSimCardResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="generateAdHocOperationErrorFile" type="tns:generateAdHocOperationErrorFile"/>
      <xs:complexType name="generateAdHocOperationErrorFile">
        <xs:sequence>
          <xs:element name="id" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="generateAdHocOperationErrorFileResponse" type="tns:generateAdHocOperationErrorFileResponse"/>
      <xs:complexType name="generateAdHocOperationErrorFileResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriber" type="tns:activateSubscriber"/>
      <xs:complexType name="activateSubscriber">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportType" type="xs:int"/>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="contactMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="district" type="xs:string"/>
          <xs:element minOccurs="0" name="country" type="xs:string"/>
          <xs:element minOccurs="0" name="birthday" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="serviceType" type="tns:application"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriberResponse" type="tns:activateSubscriberResponse"/>
      <xs:complexType name="activateSubscriberResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="sendVerificationCode" type="tns:sendVerificationCode"/>
      <xs:complexType name="sendVerificationCode">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="sendVerificationCodeResponse" type="tns:sendVerificationCodeResponse"/>
      <xs:complexType name="sendVerificationCodeResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getModels" type="tns:getModels"/>
      <xs:complexType name="getModels">
        <xs:sequence>
          <xs:element minOccurs="0" name="manufacturer" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getModelsResponse" type="tns:getModelsResponse"/>
      <xs:complexType name="getModelsResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="processSTKResponse" type="tns:processSTKResponse"/>
      <xs:complexType name="processSTKResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element name="success" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="processSTKResponseResponse" type="tns:processSTKResponseResponse"/>
      <xs:complexType name="processSTKResponseResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="swapSims" type="tns:swapSims"/>
      <xs:complexType name="swapSims">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
          <xs:element minOccurs="0" name="arg2" type="xs:string"/>
          <xs:element minOccurs="0" name="arg3" type="xs:string"/>
          <xs:element minOccurs="0" name="arg4" type="xs:string"/>
          <xs:element minOccurs="0" name="arg5" type="tns:application"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="swapSimsResponse" type="tns:swapSimsResponse"/>
      <xs:complexType name="swapSimsResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="getManufacturers" type="tns:getManufacturers"/>
      <xs:complexType name="getManufacturers">
        <xs:sequence/>
      </xs:complexType>
      <xs:element name="getManufacturersResponse" type="tns:getManufacturersResponse"/>
      <xs:complexType name="getManufacturersResponse">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="return" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getAdHocOperationHealth" type="tns:getAdHocOperationHealth"/>
      <xs:complexType name="getAdHocOperationHealth">
        <xs:sequence>
          <xs:element name="id" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getAdHocOperationHealthResponse" type="tns:getAdHocOperationHealthResponse"/>
      <xs:complexType name="getAdHocOperationHealthResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:health"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByIMSI" type="tns:getSimDetailsByIMSI"/>
      <xs:complexType name="getSimDetailsByIMSI">
        <xs:sequence>
          <xs:element minOccurs="0" name="arg0" type="xs:string"/>
          <xs:element minOccurs="0" name="arg1" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="getSimDetailsByIMSIResponse" type="tns:getSimDetailsByIMSIResponse"/>
      <xs:complexType name="getSimDetailsByIMSIResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:simCardDetails"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriberOld" type="tns:activateSubscriberOld"/>
      <xs:complexType name="activateSubscriberOld">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="msisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="subscriberId" type="xs:long"/>
          <xs:element minOccurs="0" name="agent" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="activateSubscriberOldResponse" type="tns:activateSubscriberOldResponse"/>
      <xs:complexType name="activateSubscriberOldResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="updateSIMDetails" type="tns:updateSIMDetails"/>
      <xs:complexType name="updateSIMDetails">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="firstName" type="xs:string"/>
          <xs:element minOccurs="0" name="lastName" type="xs:string"/>
          <xs:element minOccurs="0" name="passportId" type="xs:string"/>
          <xs:element minOccurs="0" name="passportType" type="xs:int"/>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
          <xs:element minOccurs="0" name="contactMsisdn" type="xs:string"/>
          <xs:element minOccurs="0" name="email" type="xs:string"/>
          <xs:element minOccurs="0" name="city" type="xs:string"/>
          <xs:element minOccurs="0" name="district" type="xs:string"/>
          <xs:element minOccurs="0" name="country" type="xs:string"/>
          <xs:element minOccurs="0" name="birthday" type="xs:dateTime"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="updateSIMDetailsResponse" type="tns:updateSIMDetailsResponse"/>
      <xs:complexType name="updateSIMDetailsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="addToWhitelist" type="tns:addToWhitelist"/>
      <xs:complexType name="addToWhitelist">
        <xs:sequence>
          <xs:element minOccurs="0" name="imsi" type="xs:string"/>
          <xs:element minOccurs="0" name="imei" type="xs:string"/>
          <xs:element minOccurs="0" name="verificationCode" type="xs:string"/>
          <xs:element minOccurs="0" name="user" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="addToWhitelistResponse" type="tns:addToWhitelistResponse"/>
      <xs:complexType name="addToWhitelistResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:result"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="recoveryAdHocOperation" type="tns:recoveryAdHocOperation"/>
      <xs:complexType name="recoveryAdHocOperation">
        <xs:sequence>
          <xs:element name="id" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="recoveryAdHocOperationResponse" type="tns:recoveryAdHocOperationResponse"/>
      <xs:complexType name="recoveryAdHocOperationResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="recycleSimCard">
    <wsdl:part element="ns1:recycleSimCard" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByPassportIdResponse">
    <wsdl:part element="ns1:getSimDetailsByPassportIdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByICCIDResponse">
    <wsdl:part element="ns1:getSimDetailsByICCIDResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateSIMDetailsResponse">
    <wsdl:part element="ns1:updateSIMDetailsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="swapSims">
    <wsdl:part element="ns1:swapSims" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ProvisioningException">
    <wsdl:part element="ns1:ProvisioningException" name="ProvisioningException"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDevice">
    <wsdl:part element="ns1:getDevice" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="test">
    <wsdl:part element="ns1:test" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberResponse">
    <wsdl:part element="ns1:activateSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="portIn">
    <wsdl:part element="ns1:portIn" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="processIMEI">
    <wsdl:part element="ns1:processIMEI" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTACFAC">
    <wsdl:part element="ns1:getTACFAC" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="testResponse">
    <wsdl:part element="ns1:testResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByMSISDN">
    <wsdl:part element="ns1:getSimDetailsByMSISDN" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFromBlacklist">
    <wsdl:part element="ns1:removeFromBlacklist" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRecycledSimCardHistoryResponse">
    <wsdl:part element="ns1:getRecycledSimCardHistoryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="swapSimsResponse">
    <wsdl:part element="ns1:swapSimsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberEx">
    <wsdl:part element="ns1:activateSubscriberEx" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByIMSIResponse">
    <wsdl:part element="ns1:getSimDetailsByIMSIResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriberResponse">
    <wsdl:part element="ns1:blockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="modifyWhitelist">
    <wsdl:part element="ns1:modifyWhitelist" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="otaPushResponse">
    <wsdl:part element="ns1:otaPushResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriberResponse">
    <wsdl:part element="ns1:unblockSubscriberResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriber">
    <wsdl:part element="ns1:activateSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCarriersResponse">
    <wsdl:part element="ns1:getCarriersResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSim1">
    <wsdl:part element="ns1:deleteSim1" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="modifyWhitelistResponse">
    <wsdl:part element="ns1:modifyWhitelistResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAdHocOperationsHistoryResponse">
    <wsdl:part element="ns1:getAdHocOperationsHistoryResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByPassportId">
    <wsdl:part element="ns1:getSimDetailsByPassportId" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAdHocOperationHealth">
    <wsdl:part element="ns1:getAdHocOperationHealth" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeFromBlacklistResponse">
    <wsdl:part element="ns1:removeFromBlacklistResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="recoveryAdHocOperationResponse">
    <wsdl:part element="ns1:recoveryAdHocOperationResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByIMEIResponse">
    <wsdl:part element="ns1:getSimDetailsByIMEIResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="blockSubscriber">
    <wsdl:part element="ns1:blockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeMSISDNResponse">
    <wsdl:part element="ns1:changeMSISDNResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="portOutResponse">
    <wsdl:part element="ns1:portOutResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="unblockSubscriber">
    <wsdl:part element="ns1:unblockSubscriber" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addToWhitelist">
    <wsdl:part element="ns1:addToWhitelist" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="checkIMEIStatus">
    <wsdl:part element="ns1:checkIMEIStatus" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="recycleSimCardResponse">
    <wsdl:part element="ns1:recycleSimCardResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAdHocOperationsHistory">
    <wsdl:part element="ns1:getAdHocOperationsHistory" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByIMSI">
    <wsdl:part element="ns1:getSimDetailsByIMSI" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByICCID">
    <wsdl:part element="ns1:getSimDetailsByICCID" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addToBlacklist">
    <wsdl:part element="ns1:addToBlacklist" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeMSISDN">
    <wsdl:part element="ns1:changeMSISDN" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="generateAdHocOperationErrorFile">
    <wsdl:part element="ns1:generateAdHocOperationErrorFile" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByIMEI">
    <wsdl:part element="ns1:getSimDetailsByIMEI" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getUnlockFeeResponse">
    <wsdl:part element="ns1:getUnlockFeeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="generateAdHocOperationErrorFileResponse">
    <wsdl:part element="ns1:generateAdHocOperationErrorFileResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getModels">
    <wsdl:part element="ns1:getModels" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getModelsResponse">
    <wsdl:part element="ns1:getModelsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="Exception">
    <wsdl:part element="ns1:Exception" name="Exception"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="IllegalArgumentException">
    <wsdl:part element="ns1:IllegalArgumentException" name="IllegalArgumentException"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendVerificationCode">
    <wsdl:part element="ns1:sendVerificationCode" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="processSTKResponseResponse">
    <wsdl:part element="ns1:processSTKResponseResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="otaPush">
    <wsdl:part element="ns1:otaPush" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberIMEIs">
    <wsdl:part element="ns1:getSubscriberIMEIs" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberOld">
    <wsdl:part element="ns1:activateSubscriberOld" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceResponse">
    <wsdl:part element="ns1:getDeviceResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="checkIMEIStatusResponse">
    <wsdl:part element="ns1:checkIMEIStatusResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getManufacturers">
    <wsdl:part element="ns1:getManufacturers" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addToBlacklistResponse">
    <wsdl:part element="ns1:addToBlacklistResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSimResponse">
    <wsdl:part element="ns1:deleteSimResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="processSTKResponse">
    <wsdl:part element="ns1:processSTKResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTACFACResponse">
    <wsdl:part element="ns1:getTACFACResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberExResponse">
    <wsdl:part element="ns1:activateSubscriberExResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSim">
    <wsdl:part element="ns1:deleteSim" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSubscriberIMEIsResponse">
    <wsdl:part element="ns1:getSubscriberIMEIsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="recoveryAdHocOperation">
    <wsdl:part element="ns1:recoveryAdHocOperation" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getUnlockFee">
    <wsdl:part element="ns1:getUnlockFee" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="addToWhitelistResponse">
    <wsdl:part element="ns1:addToWhitelistResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="portInResponse">
    <wsdl:part element="ns1:portInResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteSim1Response">
    <wsdl:part element="ns1:deleteSim1Response" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="portOut">
    <wsdl:part element="ns1:portOut" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="processIMEIResponse">
    <wsdl:part element="ns1:processIMEIResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendVerificationCodeResponse">
    <wsdl:part element="ns1:sendVerificationCodeResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getRecycledSimCardHistory">
    <wsdl:part element="ns1:getRecycledSimCardHistory" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateSIMDetails">
    <wsdl:part element="ns1:updateSIMDetails" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAdHocOperationHealthResponse">
    <wsdl:part element="ns1:getAdHocOperationHealthResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCarriers">
    <wsdl:part element="ns1:getCarriers" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSimDetailsByMSISDNResponse">
    <wsdl:part element="ns1:getSimDetailsByMSISDNResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getManufacturersResponse">
    <wsdl:part element="ns1:getManufacturersResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="activateSubscriberOldResponse">
    <wsdl:part element="ns1:activateSubscriberOldResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="CRMService">
    <wsdl:operation name="getSubscriberIMEIs">
      <wsdl:input message="ns1:getSubscriberIMEIs" name="getSubscriberIMEIs"></wsdl:input>
      <wsdl:output message="ns1:getSubscriberIMEIsResponse" name="getSubscriberIMEIsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSim1">
      <wsdl:input message="ns1:deleteSim1" name="deleteSim1"></wsdl:input>
      <wsdl:output message="ns1:deleteSim1Response" name="deleteSim1Response"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCarriers">
      <wsdl:input message="ns1:getCarriers" name="getCarriers"></wsdl:input>
      <wsdl:output message="ns1:getCarriersResponse" name="getCarriersResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="processIMEI">
      <wsdl:input message="ns1:processIMEI" name="processIMEI"></wsdl:input>
      <wsdl:output message="ns1:processIMEIResponse" name="processIMEIResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="blockSubscriber">
      <wsdl:input message="ns1:blockSubscriber" name="blockSubscriber"></wsdl:input>
      <wsdl:output message="ns1:blockSubscriberResponse" name="blockSubscriberResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
      <wsdl:fault message="ns1:IllegalArgumentException" name="IllegalArgumentException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByIMEI">
      <wsdl:input message="ns1:getSimDetailsByIMEI" name="getSimDetailsByIMEI"></wsdl:input>
      <wsdl:output message="ns1:getSimDetailsByIMEIResponse" name="getSimDetailsByIMEIResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeFromBlacklist">
      <wsdl:input message="ns1:removeFromBlacklist" name="removeFromBlacklist"></wsdl:input>
      <wsdl:output message="ns1:removeFromBlacklistResponse" name="removeFromBlacklistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeMSISDN">
      <wsdl:input message="ns1:changeMSISDN" name="changeMSISDN"></wsdl:input>
      <wsdl:output message="ns1:changeMSISDNResponse" name="changeMSISDNResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="portIn">
      <wsdl:input message="ns1:portIn" name="portIn"></wsdl:input>
      <wsdl:output message="ns1:portInResponse" name="portInResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="checkIMEIStatus">
      <wsdl:input message="ns1:checkIMEIStatus" name="checkIMEIStatus"></wsdl:input>
      <wsdl:output message="ns1:checkIMEIStatusResponse" name="checkIMEIStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="unblockSubscriber">
      <wsdl:input message="ns1:unblockSubscriber" name="unblockSubscriber"></wsdl:input>
      <wsdl:output message="ns1:unblockSubscriberResponse" name="unblockSubscriberResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
      <wsdl:fault message="ns1:IllegalArgumentException" name="IllegalArgumentException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="portOut">
      <wsdl:input message="ns1:portOut" name="portOut"></wsdl:input>
      <wsdl:output message="ns1:portOutResponse" name="portOutResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTACFAC">
      <wsdl:input message="ns1:getTACFAC" name="getTACFAC"></wsdl:input>
      <wsdl:output message="ns1:getTACFACResponse" name="getTACFACResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addToBlacklist">
      <wsdl:input message="ns1:addToBlacklist" name="addToBlacklist"></wsdl:input>
      <wsdl:output message="ns1:addToBlacklistResponse" name="addToBlacklistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getRecycledSimCardHistory">
      <wsdl:input message="ns1:getRecycledSimCardHistory" name="getRecycledSimCardHistory"></wsdl:input>
      <wsdl:output message="ns1:getRecycledSimCardHistoryResponse" name="getRecycledSimCardHistoryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByMSISDN">
      <wsdl:input message="ns1:getSimDetailsByMSISDN" name="getSimDetailsByMSISDN"></wsdl:input>
      <wsdl:output message="ns1:getSimDetailsByMSISDNResponse" name="getSimDetailsByMSISDNResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="modifyWhitelist">
      <wsdl:input message="ns1:modifyWhitelist" name="modifyWhitelist"></wsdl:input>
      <wsdl:output message="ns1:modifyWhitelistResponse" name="modifyWhitelistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberEx">
      <wsdl:input message="ns1:activateSubscriberEx" name="activateSubscriberEx"></wsdl:input>
      <wsdl:output message="ns1:activateSubscriberExResponse" name="activateSubscriberExResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByICCID">
      <wsdl:input message="ns1:getSimDetailsByICCID" name="getSimDetailsByICCID"></wsdl:input>
      <wsdl:output message="ns1:getSimDetailsByICCIDResponse" name="getSimDetailsByICCIDResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDevice">
      <wsdl:input message="ns1:getDevice" name="getDevice"></wsdl:input>
      <wsdl:output message="ns1:getDeviceResponse" name="getDeviceResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="test">
      <wsdl:input message="ns1:test" name="test"></wsdl:input>
      <wsdl:output message="ns1:testResponse" name="testResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getUnlockFee">
      <wsdl:input message="ns1:getUnlockFee" name="getUnlockFee"></wsdl:input>
      <wsdl:output message="ns1:getUnlockFeeResponse" name="getUnlockFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAdHocOperationsHistory">
      <wsdl:input message="ns1:getAdHocOperationsHistory" name="getAdHocOperationsHistory"></wsdl:input>
      <wsdl:output message="ns1:getAdHocOperationsHistoryResponse" name="getAdHocOperationsHistoryResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByPassportId">
      <wsdl:input message="ns1:getSimDetailsByPassportId" name="getSimDetailsByPassportId"></wsdl:input>
      <wsdl:output message="ns1:getSimDetailsByPassportIdResponse" name="getSimDetailsByPassportIdResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="otaPush">
      <wsdl:input message="ns1:otaPush" name="otaPush"></wsdl:input>
      <wsdl:output message="ns1:otaPushResponse" name="otaPushResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteSim">
      <wsdl:input message="ns1:deleteSim" name="deleteSim"></wsdl:input>
      <wsdl:output message="ns1:deleteSimResponse" name="deleteSimResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="recycleSimCard">
      <wsdl:input message="ns1:recycleSimCard" name="recycleSimCard"></wsdl:input>
      <wsdl:output message="ns1:recycleSimCardResponse" name="recycleSimCardResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="generateAdHocOperationErrorFile">
      <wsdl:input message="ns1:generateAdHocOperationErrorFile" name="generateAdHocOperationErrorFile"></wsdl:input>
      <wsdl:output message="ns1:generateAdHocOperationErrorFileResponse" name="generateAdHocOperationErrorFileResponse"></wsdl:output>
      <wsdl:fault message="ns1:Exception" name="Exception"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriber">
      <wsdl:input message="ns1:activateSubscriber" name="activateSubscriber"></wsdl:input>
      <wsdl:output message="ns1:activateSubscriberResponse" name="activateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendVerificationCode">
      <wsdl:input message="ns1:sendVerificationCode" name="sendVerificationCode"></wsdl:input>
      <wsdl:output message="ns1:sendVerificationCodeResponse" name="sendVerificationCodeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getModels">
      <wsdl:input message="ns1:getModels" name="getModels"></wsdl:input>
      <wsdl:output message="ns1:getModelsResponse" name="getModelsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="processSTKResponse">
      <wsdl:input message="ns1:processSTKResponse" name="processSTKResponse"></wsdl:input>
      <wsdl:output message="ns1:processSTKResponseResponse" name="processSTKResponseResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="swapSims">
      <wsdl:input message="ns1:swapSims" name="swapSims"></wsdl:input>
      <wsdl:output message="ns1:swapSimsResponse" name="swapSimsResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getManufacturers">
      <wsdl:input message="ns1:getManufacturers" name="getManufacturers"></wsdl:input>
      <wsdl:output message="ns1:getManufacturersResponse" name="getManufacturersResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAdHocOperationHealth">
      <wsdl:input message="ns1:getAdHocOperationHealth" name="getAdHocOperationHealth"></wsdl:input>
      <wsdl:output message="ns1:getAdHocOperationHealthResponse" name="getAdHocOperationHealthResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSimDetailsByIMSI">
      <wsdl:input message="ns1:getSimDetailsByIMSI" name="getSimDetailsByIMSI"></wsdl:input>
      <wsdl:output message="ns1:getSimDetailsByIMSIResponse" name="getSimDetailsByIMSIResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="activateSubscriberOld">
      <wsdl:input message="ns1:activateSubscriberOld" name="activateSubscriberOld"></wsdl:input>
      <wsdl:output message="ns1:activateSubscriberOldResponse" name="activateSubscriberOldResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateSIMDetails">
      <wsdl:input message="ns1:updateSIMDetails" name="updateSIMDetails"></wsdl:input>
      <wsdl:output message="ns1:updateSIMDetailsResponse" name="updateSIMDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addToWhitelist">
      <wsdl:input message="ns1:addToWhitelist" name="addToWhitelist"></wsdl:input>
      <wsdl:output message="ns1:addToWhitelistResponse" name="addToWhitelistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="recoveryAdHocOperation">
      <wsdl:input message="ns1:recoveryAdHocOperation" name="recoveryAdHocOperation"></wsdl:input>
      <wsdl:output message="ns1:recoveryAdHocOperationResponse" name="recoveryAdHocOperationResponse"></wsdl:output>
      <wsdl:fault message="ns1:ProvisioningException" name="ProvisioningException"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="activateSubscriber" bindingOperationName="activateSubscriber" type="Request-Response" outputName="activateSubscriberResponse" inputName="activateSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriber>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <msisdn>?</msisdn>
         <!--Optional:-->
         <subscriberId>?</subscriberId>
         <!--Optional:-->
         <firstName>?</firstName>
         <!--Optional:-->
         <lastName>?</lastName>
         <!--Optional:-->
         <passportId>?</passportId>
         <!--Optional:-->
         <passportType>?</passportType>
         <!--Optional:-->
         <address>?</address>
         <!--Optional:-->
         <contactMsisdn>?</contactMsisdn>
         <!--Optional:-->
         <email>?</email>
         <!--Optional:-->
         <city>?</city>
         <!--Optional:-->
         <district>?</district>
         <!--Optional:-->
         <country>?</country>
         <!--Optional:-->
         <birthday>?</birthday>
         <!--Optional:-->
         <serviceType>?</serviceType>
         <!--Optional:-->
         <user>?</user>
      </ser:activateSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/activateSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="activateSubscriberEx" bindingOperationName="activateSubscriberEx" type="Request-Response" outputName="activateSubscriberExResponse" inputName="activateSubscriberEx" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriberEx>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <msisdn>?</msisdn>
         <!--Optional:-->
         <subscriberId>?</subscriberId>
         <!--Optional:-->
         <firstName>?</firstName>
         <!--Optional:-->
         <lastName>?</lastName>
         <!--Optional:-->
         <passportId>?</passportId>
         <!--Optional:-->
         <passportType>?</passportType>
         <!--Optional:-->
         <address>?</address>
         <!--Optional:-->
         <contactMsisdn>?</contactMsisdn>
         <!--Optional:-->
         <email>?</email>
         <!--Optional:-->
         <city>?</city>
         <!--Optional:-->
         <district>?</district>
         <!--Optional:-->
         <country>?</country>
         <!--Optional:-->
         <birthday>?</birthday>
         <!--Optional:-->
         <issueDate>?</issueDate>
         <!--Optional:-->
         <refCode>?</refCode>
         <!--Optional:-->
         <serviceType>?</serviceType>
         <!--Optional:-->
         <user>?</user>
      </ser:activateSubscriberEx>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/activateSubscriberEx"/></con:call></con:operation><con:operation isOneWay="false" action="" name="activateSubscriberOld" bindingOperationName="activateSubscriberOld" type="Request-Response" outputName="activateSubscriberOldResponse" inputName="activateSubscriberOld" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:activateSubscriberOld>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <msisdn>?</msisdn>
         <!--Optional:-->
         <subscriberId>?</subscriberId>
         <!--Optional:-->
         <agent>?</agent>
         <!--Optional:-->
         <user>?</user>
      </ser:activateSubscriberOld>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/activateSubscriberOld"/></con:call></con:operation><con:operation isOneWay="false" action="" name="addToBlacklist" bindingOperationName="addToBlacklist" type="Request-Response" outputName="addToBlacklistResponse" inputName="addToBlacklist" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:addToBlacklist>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <reportType>?</reportType>
         <!--Optional:-->
         <reportDate>?</reportDate>
         <!--Optional:-->
         <subscriberName>?</subscriberName>
         <!--Optional:-->
         <district>?</district>
         <!--Optional:-->
         <city>?</city>
         <!--Optional:-->
         <address>?</address>
         <!--Optional:-->
         <contactMsisdn>?</contactMsisdn>
         <!--Optional:-->
         <user>?</user>
      </ser:addToBlacklist>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/addToBlacklist"/></con:call></con:operation><con:operation isOneWay="false" action="" name="addToWhitelist" bindingOperationName="addToWhitelist" type="Request-Response" outputName="addToWhitelistResponse" inputName="addToWhitelist" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:addToWhitelist>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <verificationCode>?</verificationCode>
         <!--Optional:-->
         <user>?</user>
      </ser:addToWhitelist>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/addToWhitelist"/></con:call></con:operation><con:operation isOneWay="false" action="" name="blockSubscriber" bindingOperationName="blockSubscriber" type="Request-Response" outputName="blockSubscriberResponse" inputName="blockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:blockSubscriber>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
         <!--Optional:-->
         <arg2>?</arg2>
         <!--Optional:-->
         <arg3>?</arg3>
         <!--Optional:-->
         <arg4>?</arg4>
         <!--Optional:-->
         <arg5>?</arg5>
      </ser:blockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/blockSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="changeMSISDN" bindingOperationName="changeMSISDN" type="Request-Response" outputName="changeMSISDNResponse" inputName="changeMSISDN" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:changeMSISDN>
         <!--Optional:-->
         <iccid>?</iccid>
         <!--Optional:-->
         <msisdn>?</msisdn>
         <!--Optional:-->
         <newMsisdn>?</newMsisdn>
         <!--Optional:-->
         <user>?</user>
         <!--Optional:-->
         <serviceType>?</serviceType>
      </ser:changeMSISDN>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/changeMSISDN"/></con:call></con:operation><con:operation isOneWay="false" action="" name="checkIMEIStatus" bindingOperationName="checkIMEIStatus" type="Request-Response" outputName="checkIMEIStatusResponse" inputName="checkIMEIStatus" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:checkIMEIStatus>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <user>?</user>
      </ser:checkIMEIStatus>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/checkIMEIStatus"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteSim" bindingOperationName="deleteSim" type="Request-Response" outputName="deleteSimResponse" inputName="deleteSim" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSim>
         <!--Optional:-->
         <msisdn>?</msisdn>
         <!--Optional:-->
         <user>?</user>
         <!--Optional:-->
         <serviceType>?</serviceType>
      </ser:deleteSim>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/deleteSim"/></con:call></con:operation><con:operation isOneWay="false" action="" name="deleteSim1" bindingOperationName="deleteSim1" type="Request-Response" outputName="deleteSim1Response" inputName="deleteSim1" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:deleteSim1>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:deleteSim1>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/deleteSim1"/></con:call></con:operation><con:operation isOneWay="false" action="" name="generateAdHocOperationErrorFile" bindingOperationName="generateAdHocOperationErrorFile" type="Request-Response" outputName="generateAdHocOperationErrorFileResponse" inputName="generateAdHocOperationErrorFile" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:generateAdHocOperationErrorFile>
         <id>?</id>
      </ser:generateAdHocOperationErrorFile>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/generateAdHocOperationErrorFile"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAdHocOperationHealth" bindingOperationName="getAdHocOperationHealth" type="Request-Response" outputName="getAdHocOperationHealthResponse" inputName="getAdHocOperationHealth" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAdHocOperationHealth>
         <id>?</id>
      </ser:getAdHocOperationHealth>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getAdHocOperationHealth"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getAdHocOperationsHistory" bindingOperationName="getAdHocOperationsHistory" type="Request-Response" outputName="getAdHocOperationsHistoryResponse" inputName="getAdHocOperationsHistory" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getAdHocOperationsHistory>
         <!--Optional:-->
         <startDate>?</startDate>
         <!--Optional:-->
         <endDate>?</endDate>
         <!--Optional:-->
         <key>?</key>
      </ser:getAdHocOperationsHistory>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getAdHocOperationsHistory"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getCarriers" bindingOperationName="getCarriers" type="Request-Response" outputName="getCarriersResponse" inputName="getCarriers" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getCarriers/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getCarriers"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getDevice" bindingOperationName="getDevice" type="Request-Response" outputName="getDeviceResponse" inputName="getDevice" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getDevice>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <manufacturer>?</manufacturer>
         <!--Optional:-->
         <model>?</model>
      </ser:getDevice>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getDevice"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getManufacturers" bindingOperationName="getManufacturers" type="Request-Response" outputName="getManufacturersResponse" inputName="getManufacturers" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getManufacturers/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getManufacturers"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getModels" bindingOperationName="getModels" type="Request-Response" outputName="getModelsResponse" inputName="getModels" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getModels>
         <!--Optional:-->
         <manufacturer>?</manufacturer>
      </ser:getModels>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getModels"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getRecycledSimCardHistory" bindingOperationName="getRecycledSimCardHistory" type="Request-Response" outputName="getRecycledSimCardHistoryResponse" inputName="getRecycledSimCardHistory" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getRecycledSimCardHistory>
         <!--Optional:-->
         <startDate>?</startDate>
         <!--Optional:-->
         <endDate>?</endDate>
      </ser:getRecycledSimCardHistory>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getRecycledSimCardHistory"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSimDetailsByICCID" bindingOperationName="getSimDetailsByICCID" type="Request-Response" outputName="getSimDetailsByICCIDResponse" inputName="getSimDetailsByICCID" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByICCID>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:getSimDetailsByICCID>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSimDetailsByICCID"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSimDetailsByIMEI" bindingOperationName="getSimDetailsByIMEI" type="Request-Response" outputName="getSimDetailsByIMEIResponse" inputName="getSimDetailsByIMEI" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByIMEI>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:getSimDetailsByIMEI>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSimDetailsByIMEI"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSimDetailsByIMSI" bindingOperationName="getSimDetailsByIMSI" type="Request-Response" outputName="getSimDetailsByIMSIResponse" inputName="getSimDetailsByIMSI" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByIMSI>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:getSimDetailsByIMSI>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSimDetailsByIMSI"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSimDetailsByMSISDN" bindingOperationName="getSimDetailsByMSISDN" type="Request-Response" outputName="getSimDetailsByMSISDNResponse" inputName="getSimDetailsByMSISDN" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByMSISDN>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:getSimDetailsByMSISDN>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSimDetailsByMSISDN"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSimDetailsByPassportId" bindingOperationName="getSimDetailsByPassportId" type="Request-Response" outputName="getSimDetailsByPassportIdResponse" inputName="getSimDetailsByPassportId" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByPassportId>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
      </ser:getSimDetailsByPassportId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSimDetailsByPassportId"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSubscriberIMEIs" bindingOperationName="getSubscriberIMEIs" type="Request-Response" outputName="getSubscriberIMEIsResponse" inputName="getSubscriberIMEIs" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberIMEIs>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <serviceType>?</serviceType>
      </ser:getSubscriberIMEIs>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getSubscriberIMEIs"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getTACFAC" bindingOperationName="getTACFAC" type="Request-Response" outputName="getTACFACResponse" inputName="getTACFAC" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTACFAC>
         <!--Optional:-->
         <imei>?</imei>
      </ser:getTACFAC>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getTACFAC"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getUnlockFee" bindingOperationName="getUnlockFee" type="Request-Response" outputName="getUnlockFeeResponse" inputName="getUnlockFee" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getUnlockFee>
         <!--Optional:-->
         <imei>?</imei>
      </ser:getUnlockFee>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/getUnlockFee"/></con:call></con:operation><con:operation isOneWay="false" action="" name="modifyWhitelist" bindingOperationName="modifyWhitelist" type="Request-Response" outputName="modifyWhitelistResponse" inputName="modifyWhitelist" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:modifyWhitelist>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <passportId>?</passportId>
         <!--Optional:-->
         <passportType>?</passportType>
         <!--Optional:-->
         <subscriberName>?</subscriberName>
         <!--Optional:-->
         <user>?</user>
      </ser:modifyWhitelist>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/modifyWhitelist"/></con:call></con:operation><con:operation isOneWay="false" action="" name="otaPush" bindingOperationName="otaPush" type="Request-Response" outputName="otaPushResponse" inputName="otaPush" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:otaPush>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <user>?</user>
      </ser:otaPush>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/otaPush"/></con:call></con:operation><con:operation isOneWay="false" action="" name="portIn" bindingOperationName="portIn" type="Request-Response" outputName="portInResponse" inputName="portIn" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:portIn>
         <!--Optional:-->
         <iccid>?</iccid>
         <!--Optional:-->
         <newMsisdn>?</newMsisdn>
         <!--Optional:-->
         <user>?</user>
         <!--Optional:-->
         <serviceType>?</serviceType>
      </ser:portIn>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/portIn"/></con:call></con:operation><con:operation isOneWay="false" action="" name="portOut" bindingOperationName="portOut" type="Request-Response" outputName="portOutResponse" inputName="portOut" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:portOut>
         <!--Optional:-->
         <iccid>?</iccid>
         <!--Optional:-->
         <user>?</user>
         <!--Optional:-->
         <serviceType>?</serviceType>
      </ser:portOut>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/portOut"/></con:call></con:operation><con:operation isOneWay="false" action="" name="processIMEI" bindingOperationName="processIMEI" type="Request-Response" outputName="processIMEIResponse" inputName="processIMEI" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:processIMEI>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <terminalProfile>?</terminalProfile>
         <!--Optional:-->
         <iccid>?</iccid>
         <!--Optional:-->
         <currentImei>?</currentImei>
         <!--Optional:-->
         <previousImei>?</previousImei>
         <imeiChanged>?</imeiChanged>
         <firstTimeActivation>?</firstTimeActivation>
      </ser:processIMEI>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/processIMEI"/></con:call></con:operation><con:operation isOneWay="false" action="" name="processSTKResponse" bindingOperationName="processSTKResponse" type="Request-Response" outputName="processSTKResponseResponse" inputName="processSTKResponse" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:processSTKResponse>
         <!--Optional:-->
         <imsi>?</imsi>
         <success>?</success>
      </ser:processSTKResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/processSTKResponse"/></con:call></con:operation><con:operation isOneWay="false" action="" name="recoveryAdHocOperation" bindingOperationName="recoveryAdHocOperation" type="Request-Response" outputName="recoveryAdHocOperationResponse" inputName="recoveryAdHocOperation" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:recoveryAdHocOperation>
         <id>?</id>
      </ser:recoveryAdHocOperation>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/recoveryAdHocOperation"/></con:call></con:operation><con:operation isOneWay="false" action="" name="recycleSimCard" bindingOperationName="recycleSimCard" type="Request-Response" outputName="recycleSimCardResponse" inputName="recycleSimCard" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:recycleSimCard>
         <!--Optional:-->
         <simCardId>?</simCardId>
      </ser:recycleSimCard>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/recycleSimCard"/></con:call></con:operation><con:operation isOneWay="false" action="" name="removeFromBlacklist" bindingOperationName="removeFromBlacklist" type="Request-Response" outputName="removeFromBlacklistResponse" inputName="removeFromBlacklist" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:removeFromBlacklist>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <imei>?</imei>
         <!--Optional:-->
         <user>?</user>
      </ser:removeFromBlacklist>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/removeFromBlacklist"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendVerificationCode" bindingOperationName="sendVerificationCode" type="Request-Response" outputName="sendVerificationCodeResponse" inputName="sendVerificationCode" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:sendVerificationCode>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <user>?</user>
      </ser:sendVerificationCode>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/sendVerificationCode"/></con:call></con:operation><con:operation isOneWay="false" action="" name="swapSims" bindingOperationName="swapSims" type="Request-Response" outputName="swapSimsResponse" inputName="swapSims" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:swapSims>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
         <!--Optional:-->
         <arg2>?</arg2>
         <!--Optional:-->
         <arg3>?</arg3>
         <!--Optional:-->
         <arg4>?</arg4>
         <!--Optional:-->
         <arg5>?</arg5>
      </ser:swapSims>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/swapSims"/></con:call></con:operation><con:operation isOneWay="false" action="" name="test" bindingOperationName="test" type="Request-Response" outputName="testResponse" inputName="test" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:test>
         <!--Optional:-->
         <command>?</command>
      </ser:test>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/test"/></con:call></con:operation><con:operation isOneWay="false" action="" name="unblockSubscriber" bindingOperationName="unblockSubscriber" type="Request-Response" outputName="unblockSubscriberResponse" inputName="unblockSubscriber" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:unblockSubscriber>
         <!--Optional:-->
         <arg0>?</arg0>
         <!--Optional:-->
         <arg1>?</arg1>
         <!--Optional:-->
         <arg2>?</arg2>
         <!--Optional:-->
         <arg3>?</arg3>
         <!--Optional:-->
         <arg4>?</arg4>
         <!--Optional:-->
         <arg5>?</arg5>
      </ser:unblockSubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/unblockSubscriber"/></con:call></con:operation><con:operation isOneWay="false" action="" name="updateSIMDetails" bindingOperationName="updateSIMDetails" type="Request-Response" outputName="updateSIMDetailsResponse" inputName="updateSIMDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:updateSIMDetails>
         <!--Optional:-->
         <imsi>?</imsi>
         <!--Optional:-->
         <firstName>?</firstName>
         <!--Optional:-->
         <lastName>?</lastName>
         <!--Optional:-->
         <passportId>?</passportId>
         <!--Optional:-->
         <passportType>?</passportType>
         <!--Optional:-->
         <address>?</address>
         <!--Optional:-->
         <contactMsisdn>?</contactMsisdn>
         <!--Optional:-->
         <email>?</email>
         <!--Optional:-->
         <city>?</city>
         <!--Optional:-->
         <district>?</district>
         <!--Optional:-->
         <country>?</country>
         <!--Optional:-->
         <birthday>?</birthday>
      </ser:updateSIMDetails>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://service.provisioning.inewcs.com/CRMService/updateSIMDetails"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="HistoryServiceSoapBinding" type="wsdl" bindingName="{http://api.history.xdr.mvno.inewcs.com/}HistoryServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://10.107.82.218:4800/HistoryService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://10.107.82.218:4800/HistoryService?wsdl"><con:part><con:url>http://10.107.82.218:4800/HistoryService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="HistoryService" targetNamespace="http://api.history.xdr.mvno.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.history.xdr.mvno.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://types.api.history.xdr.mvno.inewcs.com" xmlns:tns="http://types.api.history.xdr.mvno.inewcs.com">
      <xsd:complexType name="SubscriberIdentifier">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberId" nillable="true" type="xsd:long"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="Unit">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="MILLISECOND"/>
          <xsd:enumeration value="SECOND"/>
          <xsd:enumeration value="MINUTE"/>
          <xsd:enumeration value="BYTE"/>
          <xsd:enumeration value="KILOBYTE"/>
          <xsd:enumeration value="MESSAGE"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="Action">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ALL"/>
          <xsd:enumeration value="SUBSCRIBER_CREATE"/>
          <xsd:enumeration value="SUBSCRIBER_ACTIVATE"/>
          <xsd:enumeration value="SUBSCRIBER_BLOCK"/>
          <xsd:enumeration value="SUBSCRIBER_UNBLOCK"/>
          <xsd:enumeration value="SUBSCRIBER_DELETE"/>
          <xsd:enumeration value="TARIFF_ACTIVATE"/>
          <xsd:enumeration value="TARIFF_DEACTIVATE"/>
          <xsd:enumeration value="TARIFF_RENEW"/>
          <xsd:enumeration value="TARIFF_CHANGE"/>
          <xsd:enumeration value="FNF_ADD"/>
          <xsd:enumeration value="FNF_CHANGE"/>
          <xsd:enumeration value="FNF_DELETE"/>
          <xsd:enumeration value="COST_CONTROL_EXCEED"/>
          <xsd:enumeration value="BUNDLE_ACTIVATE"/>
          <xsd:enumeration value="BUNDLE_DEACTIVATE"/>
          <xsd:enumeration value="BUNDLE_RENEW"/>
          <xsd:enumeration value="TOPUP"/>
          <xsd:enumeration value="TOPUP_BONUS"/>
          <xsd:enumeration value="TOPUP_BUNDLE"/>
          <xsd:enumeration value="TOPUP_TARIFF_PLAN"/>
          <xsd:enumeration value="TOPUP_COMPENSATION"/>
          <xsd:enumeration value="TOPUP_LOYALTY"/>
          <xsd:enumeration value="ON_DEMAND_CREDIT_PACK"/>
          <xsd:enumeration value="MONEY_TRANSFER"/>
          <xsd:enumeration value="SIM_SWAP"/>
          <xsd:enumeration value="PORT_IN"/>
          <xsd:enumeration value="PORT_OUT"/>
          <xsd:enumeration value="IMEI_CHANGE"/>
          <xsd:enumeration value="LANGUAGE_CHANGE"/>
          <xsd:enumeration value="VOICE_MO"/>
          <xsd:enumeration value="VOICE_MT"/>
          <xsd:enumeration value="VOICE_MF"/>
          <xsd:enumeration value="VIDEO_MO"/>
          <xsd:enumeration value="VIDEO_MT"/>
          <xsd:enumeration value="VIDEO_MF"/>
          <xsd:enumeration value="SMS_MO"/>
          <xsd:enumeration value="SMS_MT"/>
          <xsd:enumeration value="MMS_MO"/>
          <xsd:enumeration value="MMS_MT"/>
          <xsd:enumeration value="DATA"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="NO_ENTRIES_FOUND"/>
          <xsd:enumeration value="DATABASE_ERROR"/>
          <xsd:enumeration value="UNKNOWN_SUBSCRIBER"/>
          <xsd:enumeration value="UNKNOWN_ERROR"/>
          <xsd:enumeration value="INVALID_ARGUMENTS"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfHistoryEntry">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="HistoryEntry" nillable="true" type="tns:HistoryEntry"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HistoryRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchCriteria" nillable="true" type="tns:SearchCriteria"/>
          <xsd:element minOccurs="0" name="subscriberIdentifier" nillable="true" type="tns:SubscriberIdentifier"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="TrafficEntry">
        <xsd:complexContent>
          <xsd:extension base="tns:HistoryEntry">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="cdpa" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="cgpa" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="chargedUnits" nillable="true" type="xsd:long"/>
              <xsd:element minOccurs="0" name="destination" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="location" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="roaming" nillable="true" type="xsd:boolean"/>
              <xsd:element minOccurs="0" name="unit" nillable="true" type="tns:Unit"/>
              <xsd:element minOccurs="0" name="usedUnits" nillable="true" type="xsd:long"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="BundleEntry">
        <xsd:complexContent>
          <xsd:extension base="tns:AdminEntry">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="bundleCode" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="bundleName" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TopupEntry">
        <xsd:complexContent>
          <xsd:extension base="tns:AdminEntry">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="accountExpiryDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="distributor" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="paymentMethod" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="subDistributor" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="voucher" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="AdminEntry">
        <xsd:complexContent>
          <xsd:extension base="tns:HistoryEntry">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="activationDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="expiryDate" type="xsd:dateTime"/>
              <xsd:element minOccurs="0" name="resultCode" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="serviceChannel" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="tariffId" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="HistoryResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="entries" nillable="true" type="tns:ArrayOfHistoryEntry"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="searchCriteria" nillable="true" type="tns:SearchCriteria"/>
          <xsd:element minOccurs="0" name="subscriberIdentifier" nillable="true" type="tns:SubscriberIdentifier"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SearchCriteria">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="actions" nillable="true" type="tns:ArrayOfAction"/>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:Category"/>
          <xsd:element minOccurs="0" name="endDate" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="startDate" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="Currency">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="currencyId" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="currencyName" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="relation" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="unitName" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="Category">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="ADMIN"/>
          <xsd:enumeration value="TOPUP"/>
          <xsd:enumeration value="TRAFFIC"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SimEntry">
        <xsd:complexContent>
          <xsd:extension base="tns:HistoryEntry">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="iccid" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="imei" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="portedFrom" nillable="true" type="xsd:string"/>
              <xsd:element minOccurs="0" name="portedTo" nillable="true" type="xsd:string"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="HistoryEntry">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="action" nillable="true" type="tns:Action"/>
          <xsd:element minOccurs="0" name="category" nillable="true" type="tns:Category"/>
          <xsd:element minOccurs="0" name="charge" nillable="true" type="xsd:long"/>
          <xsd:element minOccurs="0" name="chargeFree" nillable="true" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="currency" nillable="true" type="tns:Currency"/>
          <xsd:element minOccurs="0" name="sessionId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="timestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfAction">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="Action" nillable="true" type="tns:Action"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="HistorySessionRequest">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="searchCriteria" nillable="true" type="tns:SearchCriteria"/>
          <xsd:element minOccurs="0" name="sessionId" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="subscriberIdentifier" nillable="true" type="tns:SubscriberIdentifier"/>
          <xsd:element minOccurs="0" name="timestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://api.history.xdr.mvno.inewcs.com/" xmlns:ns0="http://types.api.history.xdr.mvno.inewcs.com">
      <xsd:import namespace="http://types.api.history.xdr.mvno.inewcs.com"/>
      <xsd:element name="getDetails" type="tns:getDetails"/>
      <xsd:complexType name="getDetails">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="HistoryRequest" nillable="true" type="ns0:HistoryRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDetailsResponse" type="tns:getDetailsResponse"/>
      <xsd:complexType name="getDetailsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="HistoryRequest" nillable="true" type="ns0:HistoryResponse"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSession" type="tns:getSession"/>
      <xsd:complexType name="getSession">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="sessionId" nillable="true" type="ns0:HistorySessionRequest"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getSessionResponse" type="tns:getSessionResponse"/>
      <xsd:complexType name="getSessionResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="HistorySessionRequest" nillable="true" type="ns0:HistoryResponse"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getDetails">
    <wsdl:part element="tns:getDetails" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSessionResponse">
    <wsdl:part element="tns:getSessionResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSession">
    <wsdl:part element="tns:getSession" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDetailsResponse">
    <wsdl:part element="tns:getDetailsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="HistoryServicePortType">
    <wsdl:operation name="getDetails">
      <wsdl:input message="tns:getDetails" name="getDetails"></wsdl:input>
      <wsdl:output message="tns:getDetailsResponse" name="getDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSession">
      <wsdl:input message="tns:getSession" name="getSession"></wsdl:input>
      <wsdl:output message="tns:getSessionResponse" name="getSessionResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="HistoryServiceSoapBinding" type="tns:HistoryServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getDetails">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDetails">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getSession">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSession">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSessionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="HistoryService">
    <wsdl:port binding="tns:HistoryServiceSoapBinding" name="HistoryServicePort">
      <soap:address location="http://0.0.0.0:4800/HistoryService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://10.107.82.218:4800/HistoryService</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getDetails" bindingOperationName="getDetails" type="Request-Response" outputName="getDetailsResponse" inputName="getDetails" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.218:4800/HistoryService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.history.xdr.mvno.inewcs.com/" xmlns:typ="http://types.api.history.xdr.mvno.inewcs.com">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDetails>
         <!--Optional:-->
         <api:HistoryRequest>
            <!--Optional:-->
            <typ:searchCriteria>
               <!--Optional:-->
               <typ:actions>
                  <!--Zero or more repetitions:-->
                  <typ:Action>?</typ:Action>
               </typ:actions>
               <!--Optional:-->
               <typ:category>?</typ:category>
               <!--Optional:-->
               <typ:endDate>?</typ:endDate>
               <!--Optional:-->
               <typ:startDate>?</typ:startDate>
            </typ:searchCriteria>
            <!--Optional:-->
            <typ:subscriberIdentifier>
               <!--Optional:-->
               <typ:imsi>?</typ:imsi>
               <!--Optional:-->
               <typ:msisdn>?</typ:msisdn>
               <!--Optional:-->
               <typ:subscriberId>?</typ:subscriberId>
            </typ:subscriberIdentifier>
         </api:HistoryRequest>
      </api:getDetails>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.history.xdr.mvno.inewcs.com/HistoryServicePortType/getDetails"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getSession" bindingOperationName="getSession" type="Request-Response" outputName="getSessionResponse" inputName="getSession" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.218:4800/HistoryService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.history.xdr.mvno.inewcs.com/" xmlns:typ="http://types.api.history.xdr.mvno.inewcs.com">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getSession>
         <!--Optional:-->
         <api:sessionId>
            <!--Optional:-->
            <typ:searchCriteria>
               <!--Optional:-->
               <typ:actions>
                  <!--Zero or more repetitions:-->
                  <typ:Action>?</typ:Action>
               </typ:actions>
               <!--Optional:-->
               <typ:category>?</typ:category>
               <!--Optional:-->
               <typ:endDate>?</typ:endDate>
               <!--Optional:-->
               <typ:startDate>?</typ:startDate>
            </typ:searchCriteria>
            <!--Optional:-->
            <typ:sessionId>?</typ:sessionId>
            <!--Optional:-->
            <typ:subscriberIdentifier>
               <!--Optional:-->
               <typ:imsi>?</typ:imsi>
               <!--Optional:-->
               <typ:msisdn>?</typ:msisdn>
               <!--Optional:-->
               <typ:subscriberId>?</typ:subscriberId>
            </typ:subscriberIdentifier>
            <!--Optional:-->
            <typ:timestamp>?</typ:timestamp>
         </api:sessionId>
      </api:getSession>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.history.xdr.mvno.inewcs.com/HistoryServicePortType/getSession"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite_1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MixedServices_TestCase" searchProperties="true" id="1f6b157e-d124-4659-87ee-bf596da6ed99"><con:settings/><con:testStep type="request" name="CRCE.getAccountSummary"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getAccountSummary</con:operation><con:request name="CRCE.getAccountSummary"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountSummary>
         <prov:arg0>${#TestCase#subscriberId}</prov:arg0>
 <!-- subscriberId-->
         <prov:arg1>Pesos</prov:arg1> <!-- currencyName -->
      </prov:getAccountSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CRCE.getAccountSummary Repetiton"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>AccountPeerSoapBinding</con:interface><con:operation>getAccountSummary</con:operation><con:request name="CRCE.getAccountSummary Repetiton"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.105.140.125:8080/accounting/accounts</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prov="http://provisioning.published.accounting.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <prov:getAccountSummary>
         <prov:arg0>${#TestCase#subscriberId}</prov:arg0> <!-- subscriberId-->
         <prov:arg1>Pesos</prov:arg1> <!-- currencyName -->
      </prov:getAccountSummary>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CRCE.getSubscriberProfileByImsi"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfileByImsi</con:operation><con:request name="CRCE.getSubscriberProfileByImsi"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>    
         <ser:arg0>${#TestCase#imsi}</ser:arg0> <!--imsi-->
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CRCE.getSubscriberProfileByImsi Repetition"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>SubscriberPeerSoapBinding</con:interface><con:operation>getSubscriberProfileByImsi</con:operation><con:request name="CRCE.getSubscriberProfileByImsi Repetition"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/subscriber</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSubscriberProfileByImsi>
         <ser:arg0>${#TestCase#imsi}</ser:arg0> <!--imsi-->
      </ser:getSubscriberProfileByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CRCE.getTariffByProviderId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>TariffPeerSoapBinding</con:interface><con:operation>getTariffByProviderId</con:operation><con:request name="CRCE.getTariffByProviderId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffByProviderId>
         <ser:arg0>1</ser:arg0>
 <!-- providerId -->
      </ser:getTariffByProviderId>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CRCE.getTariffPlansBySubscriber"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>TariffPeerSoapBinding</con:interface><con:operation>getTariffPlansBySubscriber</con:operation><con:request name="CRCE.getTariffPlansBySubscriber"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.202:8080/profiler/tariffs</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.profiler.negret.tryge.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getTariffPlansBySubscriber>
         <ser:subscriberId>${#TestCase#subscriberId}</ser:subscriberId>
      </ser:getTariffPlansBySubscriber>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="PROV.getSimDetailsByImsi" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>CRMServiceImplServiceSoapBinding</con:interface><con:operation>getSimDetailsByIMSI</con:operation><con:request name="PROV.getSimDetailsByImsi"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.0.20.28:8080/inewcs-provisioning-core/CRMService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ser="http://services.api.provisioning.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <ser:getSimDetailsByIMSI>
         
         <arg0>${#TestCase#imsi}</arg0>
 <!-- imsi -->
         <arg1>walter.heincz</arg1>
 <!-- user -->
      </ser:getSimDetailsByIMSI>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="XDR.getDetails" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>HistoryServiceSoapBinding</con:interface><con:operation>getDetails</con:operation><con:request name="XDR.getDetails"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://10.107.82.218:4800/HistoryService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.history.xdr.mvno.inewcs.com/" xmlns:typ="http://types.api.history.xdr.mvno.inewcs.com">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDetails>
          <api:HistoryRequest>

            <typ:searchCriteria>
               <!-- typ:actions>
                  <typ:Action>?</typ:Action>
               </typ:actions -->
               <typ:category>TRAFFIC</typ:category>
               <typ:endDate>2013-03-14</typ:endDate>
               <typ:startDate>2013-01-01</typ:startDate>
            </typ:searchCriteria>

            <typ:subscriberIdentifier>
               <typ:imsi>${#TestCase#imsi}</typ:imsi>
               <!-- typ:msisdn>?</typ:msisdn -->
               <!-- typ:subscriberId>?</typ:subscriberId -->
            </typ:subscriberIdentifier>

         </api:HistoryRequest>
      </api:getDetails>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" disabled="true"/><con:assertion type="Schema Compliance" disabled="true"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" disabled="true"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="MixedServices_LoadTest"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>0</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript>/****************************************************************** 
 * This is the loadtest's initialization script. It loads the 
 * content of the subscribers.csv into an array and stores it in the 
 * context variable for further processing within the testcase's 
 * setupScript.
 *
 * Additionally this initializer creates a loadTestSetupOk flag as
 * property of the context variable to indicate that
 * 1. the file was successfully loaded AND
 * 2. each contained line has at least 2 columns
 *
 * This flag is used by the testcases's setupScript to abort
 * the loadtest in case of loadTestSetupOk=false.
 * This is a workaround for the fact that loadtest abortion is not
 * possible (has no effect) directly in the loadtests setupScript
 * since the corresponding loadTestRunner is created AFTER the 
 * setupScript's execution.
 *
 *
 * Input:
 *   content of the ./subscriber.csv
 *
 * Output:
 *   context.resource             Array of subscribers (Id;IMSI)
 *   context['loadTestSetupOk']   Flag indicating that init was ok
 *
 * Author: 
 *   walter.heincz@i-new.com
 ******************************************************************/

String loadTestName = loadTestRunner.getLoadTest().name
log.info loadTestName + ' initializing...'
context['loadTestSetupOk'] = false  //create a flag for the testCase setupScript since loadTestRunner.fail has no effext here in the loadTest setupScript

String SUBSCRIBERS_FILE_NAME = 'subscribers.csv'
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
String projectPath = groovyUtils.projectPath
String subscribersFile = projectPath + '/' + SUBSCRIBERS_FILE_NAME

log.info 'Loading subscribers file: ' + subscribersFile
File csvFile = new File(subscribersFile)
List lines = csvFile.readLines()
context.resource = lines

log.info 'Checking columns count (subscriberId, imsi) of ' + SUBSCRIBERS_FILE_NAME
context['loadTestSetupOk'] = true //in case of error the following while resets to false
Integer i = 0
while (i&lt;lines.size) { //for each line
  String subscriber = lines[i]
  String[] splitSubscriber = subscriber.split(';')
  if (splitSubscriber.size() &lt;2) {
    //loadTestRunner.fail('Load test ABORTED: ' + SUBSCRIBERS_FILE_NAME + ' misses collumns in line ' + (i+1))	 
    log.info loadTestName + ' ABORTED: ' + SUBSCRIBERS_FILE_NAME + ' misses collumns in line ' + (i+1)
    context['loadTestSetupOk'] = false
    i=lines.size 
  } else {
    i++
  }  	 
}

if (context['loadTestSetupOk']) {
  log.info loadTestName + ' successfully INITIALIZED'
  log.info '---------------------------------'
}  

</con:setupScript><con:tearDownScript>String loadTestName = loadTestRunner.getLoadTest().name
log.info '====================== END OF ' + loadTestName +' ==================================='</con:tearDownScript></con:loadTest><con:setupScript>/****************************************************************** 
 * This is the testcase's initialization script. In case that the
 * testcase is executed outside a loadtest, this script does nothing.
 * Otherwise it adapts the TestCase properties (from the subscribers.csv 
 * content passed via loadTestRunner's context).
 *
 * Additionally this setupScript is responsible for aborting the loadtest
 * in case that its initialization failed. This shift of responsibility
 * from the loattest's setupScript to the testcase's setupScript was
 * necessary due to a SoapUI bug (design error) that prevents abortion
 * within the loadTest setupScript.
 *
 *
 * Input:
 *   context.LoadTestRunner.context.resource      Array of subscribers  
 *   context.LoadTestContext['loadTestSetupOk']   Flag indicating that 
 *                                                loadtest init was ok
 * Output:
 *   property subscriberId        The current subscriber's id  
 *   property imsi                The current subscribers IMSI
 *
 * Author: 
 *   walter.heincz@i-new.com
 ******************************************************************/

if (context.LoadTestRunner!=null) { //the test case is part of a load test execution and thus context.TotalRunCount is available  

  if( !context.LoadTestContext['loadTestSetupOk'] ) {
  	//catch up what doesn't have any effect in the loadTest setupScript due to a soapUi bug
  	String loadTestName = context.loadTestRunner.getLoadTest().name
     context.LoadTestRunner.cancel( loadTestName + ' initialization failed!')
          
  } else {	 
    String testCaseName = testCase.name

    List lines = context.LoadTestRunner.context.resource; //get input data created by LoadTest setup script
    String subscriber =  lines[context.TotalRunCount%(lines.size)]; //get the current line - loop the list infinitely

    //split the line into fields
    String[] splitSubscriber = subscriber.split(';')
    String subscriberId = splitSubscriber[0]
    String imsi         = splitSubscriber[1]

    //adapt the TestCase properties
    testRunner.testCase.setPropertyValue( "subscriberId", subscriberId )
    testRunner.testCase.setPropertyValue( "imsi", imsi )

    log.info 'Executing ' + testCaseName + ' with subscriberId=' + subscriberId + ' imsi=' +imsi
  }	
}                          
</con:setupScript><con:properties><con:property><con:name>subscriberId</con:name><con:value>1</con:value></con:property><con:property><con:name>imsi</con:name><con:value>732123900010000</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>