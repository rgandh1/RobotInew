<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="Robotframework_ARS-Bridge" resourceRoot="" defaultScriptLanguage="Groovy" soapui-version="4.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:description>This SoapUI project is a generalized basis (layer) for AndroidRemoting based end-to-end testing to be integrated into RobotFramework test suites.
 
It defines 2 SoapUI test suites only for grouping purposes - but the contained TCs are intended to be executed separately (i.e. it makes no sense to execute a whole suite in one run) 

1) The suite Testcases provides a small set of independant high level TCs that cover generalized szenarios and should help to easily create general purpose Robot suites with reduced control (i.e. low granularity of ARS operations)

2) The suite LowLevelOperations exposes each single AndroidRemoting webservice operation in a separate fully parametrized TC to provide the Robot testsuite with detailed control (i.e. high granularity of ARS operations) over all aspects of the AndroidRemoting service.

To parametrize the project's webservice endpoints it owns "Custom Properties" (arsHost and arsPort) that have to be configured before any TC can succesfully be run.

Simmilarly each of the TCs owns a set of properties that have to be configured before execution. Unfortunately Robotframework can access only properties on project level, not on TC level. 
Therefore all TC properties are exposed as project properties. The property names are prefixed by the name of the TC it belongs to.

All TCs in this project have disabled the OPTION "Fail TestCase if it has failed TestSteps" so that each test step can be verified with a Groovy script (cancel_on_failed_step_...)..
This Groovy script sets the TCs output.result property and programatically cancel the TC in case of an test step error.
Unfortunately Robotframework can only set but NOT retrieve properties and thus the output.result property is invisibile for Robot.  

After a TC's execution the Robot test suite can query that output.result property:
output.result=OK indicates successfull execution and any other value describes a failure.
</con:description><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="IArsSystemServiceSoapBinding" type="wsdl" bindingName="{http://api.androidremoting.callsgen.inewcs.com/}IArsSystemServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/androidremoting/system?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/androidremoting/system?wsdl"><con:part><con:url>http://localhost:8080/androidremoting/system?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="IArsSystemService" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:complexType name="DeviceInfoResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceInfo" nillable="true" type="tns:DeviceInfo"/>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="CountResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="count" type="xsd:int"/>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="FAILED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="DeviceInfo">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="androidSdk" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="androidVersion" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="batteryLevel" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="manufacturer" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="model" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="operator" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="operatorIsoCountry" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneObserverVersion" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="roaming" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com"/>
      <xsd:element name="getDeviceCount" type="tns:getDeviceCount"/>
      <xsd:complexType name="getDeviceCount">
        <xsd:sequence/>
      </xsd:complexType>
      <xsd:element name="getDeviceCountResponse" type="tns:getDeviceCountResponse"/>
      <xsd:complexType name="getDeviceCountResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:CountResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceInfoByIdx" type="tns:getDeviceInfoByIdx"/>
      <xsd:complexType name="getDeviceInfoByIdx">
        <xsd:sequence>
          <xsd:element name="deviceIdx" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceInfoByIdxResponse" type="tns:getDeviceInfoByIdxResponse"/>
      <xsd:complexType name="getDeviceInfoByIdxResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:DeviceInfoResult"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getDeviceInfoByIdx">
    <wsdl:part element="tns:getDeviceInfoByIdx" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceCountResponse">
    <wsdl:part element="tns:getDeviceCountResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceInfoByIdxResponse">
    <wsdl:part element="tns:getDeviceInfoByIdxResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceCount">
    <wsdl:part element="tns:getDeviceCount" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IArsSystemServicePortType">
    <wsdl:operation name="getDeviceCount">
      <wsdl:input message="tns:getDeviceCount" name="getDeviceCount"></wsdl:input>
      <wsdl:output message="tns:getDeviceCountResponse" name="getDeviceCountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDeviceInfoByIdx">
      <wsdl:input message="tns:getDeviceInfoByIdx" name="getDeviceInfoByIdx"></wsdl:input>
      <wsdl:output message="tns:getDeviceInfoByIdxResponse" name="getDeviceInfoByIdxResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IArsSystemServiceSoapBinding" type="tns:IArsSystemServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getDeviceCount">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDeviceCount">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDeviceCountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDeviceInfoByIdx">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDeviceInfoByIdx">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDeviceInfoByIdxResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IArsSystemService">
    <wsdl:port binding="tns:IArsSystemServiceSoapBinding" name="IArsSystemServicePort">
      <soap:address location="http://10.2.1.40:8080/androidremoting/system"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/system</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getDeviceCount" bindingOperationName="getDeviceCount" type="Request-Response" outputName="getDeviceCountResponse" inputName="getDeviceCount" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/system</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDeviceCount/>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsSystemServicePortType/getDeviceCount"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getDeviceInfoByIdx" bindingOperationName="getDeviceInfoByIdx" type="Request-Response" outputName="getDeviceInfoByIdxResponse" inputName="getDeviceInfoByIdx" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/system</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDeviceInfoByIdx>
         <api:deviceIdx>?</api:deviceIdx>
      </api:getDeviceInfoByIdx>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsSystemServicePortType/getDeviceInfoByIdx"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="IArsPhoneServiceSoapBinding" type="wsdl" bindingName="{http://api.androidremoting.callsgen.inewcs.com/}IArsPhoneServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/androidremoting/phone?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/androidremoting/phone?wsdl"><con:part><con:url>http://localhost:8080/androidremoting/phone?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="IArsPhoneService" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://android.external.api.androidremoting.callsgen.inewcs.com" xmlns:tns="http://android.external.api.androidremoting.callsgen.inewcs.com">
      <xsd:simpleType name="AndroidKeyEvent">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="KEYCODE_UNKNOWN"/>
          <xsd:enumeration value="KEYCODE_MENU_1"/>
          <xsd:enumeration value="KEYCODE_SOFT_RIGHT"/>
          <xsd:enumeration value="KEYCODE_HOME"/>
          <xsd:enumeration value="KEYCODE_BACK"/>
          <xsd:enumeration value="KEYCODE_CALL"/>
          <xsd:enumeration value="KEYCODE_ENDCALL"/>
          <xsd:enumeration value="KEYCODE_0"/>
          <xsd:enumeration value="KEYCODE_1"/>
          <xsd:enumeration value="KEYCODE_2"/>
          <xsd:enumeration value="KEYCODE_3"/>
          <xsd:enumeration value="KEYCODE_4"/>
          <xsd:enumeration value="KEYCODE_5"/>
          <xsd:enumeration value="KEYCODE_6"/>
          <xsd:enumeration value="KEYCODE_7"/>
          <xsd:enumeration value="KEYCODE_8"/>
          <xsd:enumeration value="KEYCODE_9"/>
          <xsd:enumeration value="KEYCODE_STAR"/>
          <xsd:enumeration value="KEYCODE_POUND"/>
          <xsd:enumeration value="KEYCODE_DPAD_UP"/>
          <xsd:enumeration value="KEYCODE_DPAD_DOWN"/>
          <xsd:enumeration value="KEYCODE_DPAD_LEFT"/>
          <xsd:enumeration value="KEYCODE_DPAD_RIGHT"/>
          <xsd:enumeration value="KEYCODE_DPAD_CENTER"/>
          <xsd:enumeration value="KEYCODE_VOLUME_UP"/>
          <xsd:enumeration value="KEYCODE_VOLUME_DOWN"/>
          <xsd:enumeration value="KEYCODE_POWER"/>
          <xsd:enumeration value="KEYCODE_CAMERA"/>
          <xsd:enumeration value="KEYCODE_CLEAR"/>
          <xsd:enumeration value="KEYCODE_A"/>
          <xsd:enumeration value="KEYCODE_B"/>
          <xsd:enumeration value="KEYCODE_C"/>
          <xsd:enumeration value="KEYCODE_D"/>
          <xsd:enumeration value="KEYCODE_E"/>
          <xsd:enumeration value="KEYCODE_F"/>
          <xsd:enumeration value="KEYCODE_G"/>
          <xsd:enumeration value="KEYCODE_H"/>
          <xsd:enumeration value="KEYCODE_I"/>
          <xsd:enumeration value="KEYCODE_J"/>
          <xsd:enumeration value="KEYCODE_K"/>
          <xsd:enumeration value="KEYCODE_L"/>
          <xsd:enumeration value="KEYCODE_M"/>
          <xsd:enumeration value="KEYCODE_N"/>
          <xsd:enumeration value="KEYCODE_O"/>
          <xsd:enumeration value="KEYCODE_P"/>
          <xsd:enumeration value="KEYCODE_Q"/>
          <xsd:enumeration value="KEYCODE_R"/>
          <xsd:enumeration value="KEYCODE_S"/>
          <xsd:enumeration value="KEYCODE_T"/>
          <xsd:enumeration value="KEYCODE_U"/>
          <xsd:enumeration value="KEYCODE_V"/>
          <xsd:enumeration value="KEYCODE_W"/>
          <xsd:enumeration value="KEYCODE_X"/>
          <xsd:enumeration value="KEYCODE_Y"/>
          <xsd:enumeration value="KEYCODE_Z"/>
          <xsd:enumeration value="KEYCODE_COMMA"/>
          <xsd:enumeration value="KEYCODE_PERIOD"/>
          <xsd:enumeration value="KEYCODE_ALT_LEFT"/>
          <xsd:enumeration value="KEYCODE_ALT_RIGHT"/>
          <xsd:enumeration value="KEYCODE_SHIFT_LEFT"/>
          <xsd:enumeration value="KEYCODE_SHIFT_RIGHT"/>
          <xsd:enumeration value="KEYCODE_TAB"/>
          <xsd:enumeration value="KEYCODE_SPACE"/>
          <xsd:enumeration value="KEYCODE_SYM"/>
          <xsd:enumeration value="KEYCODE_EXPLORER"/>
          <xsd:enumeration value="KEYCODE_ENVELOPE"/>
          <xsd:enumeration value="KEYCODE_ENTER"/>
          <xsd:enumeration value="KEYCODE_DEL"/>
          <xsd:enumeration value="KEYCODE_GRAVE"/>
          <xsd:enumeration value="KEYCODE_MINUS"/>
          <xsd:enumeration value="KEYCODE_EQUALS"/>
          <xsd:enumeration value="KEYCODE_LEFT_BRACKET"/>
          <xsd:enumeration value="KEYCODE_RIGHT_BRACKET"/>
          <xsd:enumeration value="KEYCODE_BACKSLASH"/>
          <xsd:enumeration value="KEYCODE_SEMICOLON"/>
          <xsd:enumeration value="KEYCODE_APOSTROPHE"/>
          <xsd:enumeration value="KEYCODE_SLASH"/>
          <xsd:enumeration value="KEYCODE_AT"/>
          <xsd:enumeration value="KEYCODE_NUM"/>
          <xsd:enumeration value="KEYCODE_HEADSETHOOK"/>
          <xsd:enumeration value="KEYCODE_FOCUS"/>
          <xsd:enumeration value="KEYCODE_PLUS"/>
          <xsd:enumeration value="KEYCODE_MENU_82"/>
          <xsd:enumeration value="KEYCODE_NOTIFICATION"/>
          <xsd:enumeration value="KEYCODE_SEARCH"/>
          <xsd:enumeration value="TAG_LAST_KEYCODE"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com/"/>
      <xsd:simpleType name="PhoneEventType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE_SERVICE_STATE_CHANGED"/>
          <xsd:enumeration value="USSD_REQUEST_SENT"/>
          <xsd:enumeration value="USSD_RESPONSE_RECEIVED"/>
          <xsd:enumeration value="SMS_SENT"/>
          <xsd:enumeration value="SMS_DELIVERED"/>
          <xsd:enumeration value="SMS_RECEIVED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="FtpFileDescriptorResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="ftpFileDescriptor" nillable="true" type="tns:FtpFileDescriptor"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DeviceInfoResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceInfo" nillable="true" type="tns:DeviceInfo"/>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEventResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneEvent" nillable="true" type="tns:PhoneEvent"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArrayOfPhoneEvent">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="PhoneEvent" nillable="true" type="tns:PhoneEvent"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="FAILED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="PhoneEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="details" nillable="true" type="ns0:string2stringMap"/>
          <xsd:element minOccurs="0" name="hostTimestamp" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="id" type="xsd:int"/>
          <xsd:element minOccurs="0" name="phoneEventType" nillable="true" type="tns:PhoneEventType"/>
          <xsd:element minOccurs="0" name="phoneTimestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="DeviceInfo">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="androidSdk" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="androidVersion" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="batteryLevel" nillable="true" type="xsd:int"/>
          <xsd:element minOccurs="0" name="imsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="manufacturer" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="model" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="msisdn" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="operator" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="operatorIsoCountry" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneObserverVersion" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="roaming" type="xsd:boolean"/>
          <xsd:element minOccurs="0" name="state" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneActionResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneEvents" nillable="true" type="tns:ArrayOfPhoneEvent"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="FtpFileDescriptor">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="file" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="host" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="port" type="xsd:int"/>
          <xsd:element minOccurs="0" name="pswd" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="user" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com" xmlns:ns1="http://android.external.api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com"/>
      <xsd:import namespace="http://android.external.api.androidremoting.callsgen.inewcs.com"/>
      <xsd:complexType name="string2stringMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceInfoByImsi" type="tns:getDeviceInfoByImsi"/>
      <xsd:complexType name="getDeviceInfoByImsi">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getDeviceInfoByImsiResponse" type="tns:getDeviceInfoByImsiResponse"/>
      <xsd:complexType name="getDeviceInfoByImsiResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:DeviceInfoResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="execShellCommand" type="tns:execShellCommand"/>
      <xsd:complexType name="execShellCommand">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="command" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="execShellCommandResponse" type="tns:execShellCommandResponse"/>
      <xsd:complexType name="execShellCommandResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getEvent" type="tns:getEvent"/>
      <xsd:complexType name="getEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element name="eventIdx" type="xsd:int"/>
          <xsd:element name="timeoutSeconds" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getEventResponse" type="tns:getEventResponse"/>
      <xsd:complexType name="getEventResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneEventResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendInputText" type="tns:sendInputText"/>
      <xsd:complexType name="sendInputText">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="text" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendInputTextResponse" type="tns:sendInputTextResponse"/>
      <xsd:complexType name="sendInputTextResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendInputKeyevent" type="tns:sendInputKeyevent"/>
      <xsd:complexType name="sendInputKeyevent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="keyEvent" nillable="true" type="ns1:AndroidKeyEvent"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendInputKeyeventResponse" type="tns:sendInputKeyeventResponse"/>
      <xsd:complexType name="sendInputKeyeventResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getScreenshot" type="tns:getScreenshot"/>
      <xsd:complexType name="getScreenshot">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getScreenshotResponse" type="tns:getScreenshotResponse"/>
      <xsd:complexType name="getScreenshotResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:FtpFileDescriptorResult"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="sendInputKeyevent">
    <wsdl:part element="tns:sendInputKeyevent" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceInfoByImsi">
    <wsdl:part element="tns:getDeviceInfoByImsi" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEvent">
    <wsdl:part element="tns:getEvent" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="execShellCommand">
    <wsdl:part element="tns:execShellCommand" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendInputText">
    <wsdl:part element="tns:sendInputText" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScreenshot">
    <wsdl:part element="tns:getScreenshot" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="execShellCommandResponse">
    <wsdl:part element="tns:execShellCommandResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getScreenshotResponse">
    <wsdl:part element="tns:getScreenshotResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDeviceInfoByImsiResponse">
    <wsdl:part element="tns:getDeviceInfoByImsiResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendInputKeyeventResponse">
    <wsdl:part element="tns:sendInputKeyeventResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getEventResponse">
    <wsdl:part element="tns:getEventResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendInputTextResponse">
    <wsdl:part element="tns:sendInputTextResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IArsPhoneServicePortType">
    <wsdl:operation name="getDeviceInfoByImsi">
      <wsdl:input message="tns:getDeviceInfoByImsi" name="getDeviceInfoByImsi"></wsdl:input>
      <wsdl:output message="tns:getDeviceInfoByImsiResponse" name="getDeviceInfoByImsiResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="execShellCommand">
      <wsdl:input message="tns:execShellCommand" name="execShellCommand"></wsdl:input>
      <wsdl:output message="tns:execShellCommandResponse" name="execShellCommandResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getEvent">
      <wsdl:input message="tns:getEvent" name="getEvent"></wsdl:input>
      <wsdl:output message="tns:getEventResponse" name="getEventResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendInputText">
      <wsdl:input message="tns:sendInputText" name="sendInputText"></wsdl:input>
      <wsdl:output message="tns:sendInputTextResponse" name="sendInputTextResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendInputKeyevent">
      <wsdl:input message="tns:sendInputKeyevent" name="sendInputKeyevent"></wsdl:input>
      <wsdl:output message="tns:sendInputKeyeventResponse" name="sendInputKeyeventResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getScreenshot">
      <wsdl:input message="tns:getScreenshot" name="getScreenshot"></wsdl:input>
      <wsdl:output message="tns:getScreenshotResponse" name="getScreenshotResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IArsPhoneServiceSoapBinding" type="tns:IArsPhoneServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getDeviceInfoByImsi">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDeviceInfoByImsi">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDeviceInfoByImsiResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="execShellCommand">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="execShellCommand">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="execShellCommandResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getEvent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getEvent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getEventResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendInputText">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="sendInputText">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendInputTextResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendInputKeyevent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="sendInputKeyevent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendInputKeyeventResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getScreenshot">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getScreenshot">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getScreenshotResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IArsPhoneService">
    <wsdl:port binding="tns:IArsPhoneServiceSoapBinding" name="IArsPhoneServicePort">
      <soap:address location="http://10.2.1.40:8080/androidremoting/phone"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="execShellCommand" bindingOperationName="execShellCommand" type="Request-Response" outputName="execShellCommandResponse" inputName="execShellCommand" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:execShellCommand>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:command>?</api:command>
      </api:execShellCommand>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/execShellCommand"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getDeviceInfoByImsi" bindingOperationName="getDeviceInfoByImsi" type="Request-Response" outputName="getDeviceInfoByImsiResponse" inputName="getDeviceInfoByImsi" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDeviceInfoByImsi>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getDeviceInfoByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/getDeviceInfoByImsi"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getEvent" bindingOperationName="getEvent" type="Request-Response" outputName="getEventResponse" inputName="getEvent" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getEvent>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <api:eventIdx>?</api:eventIdx>
         <api:timeoutSeconds>?</api:timeoutSeconds>
      </api:getEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/getEvent"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getScreenshot" bindingOperationName="getScreenshot" type="Request-Response" outputName="getScreenshotResponse" inputName="getScreenshot" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getScreenshot>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getScreenshot>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/getScreenshot"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendInputKeyevent" bindingOperationName="sendInputKeyevent" type="Request-Response" outputName="sendInputKeyeventResponse" inputName="sendInputKeyevent" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendInputKeyevent>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:keyEvent>?</api:keyEvent>
      </api:sendInputKeyevent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/sendInputKeyevent"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendInputText" bindingOperationName="sendInputText" type="Request-Response" outputName="sendInputTextResponse" inputName="sendInputText" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendInputText>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:text>?</api:text>
      </api:sendInputText>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsPhoneServicePortType/sendInputText"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="IArsVoiceServiceSoapBinding" type="wsdl" bindingName="{http://api.androidremoting.callsgen.inewcs.com/}IArsVoiceServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/androidremoting/voice?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/androidremoting/voice?wsdl"><con:part><con:url>http://localhost:8080/androidremoting/voice?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="IArsVoiceService" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com/"/>
      <xsd:simpleType name="PhoneEventType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE_SERVICE_STATE_CHANGED"/>
          <xsd:enumeration value="USSD_REQUEST_SENT"/>
          <xsd:enumeration value="USSD_RESPONSE_RECEIVED"/>
          <xsd:enumeration value="SMS_SENT"/>
          <xsd:enumeration value="SMS_DELIVERED"/>
          <xsd:enumeration value="SMS_RECEIVED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType name="VoiceState">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="UNKNOWN"/>
          <xsd:enumeration value="IDLE"/>
          <xsd:enumeration value="DIALING"/>
          <xsd:enumeration value="RINGING"/>
          <xsd:enumeration value="CONNECTED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="VoiceStateResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
          <xsd:element minOccurs="0" name="voiceState" nillable="true" type="tns:VoiceState"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="ArsResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEventResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneEvent" nillable="true" type="tns:PhoneEvent"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="FAILED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfPhoneEvent">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="PhoneEvent" nillable="true" type="tns:PhoneEvent"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="details" nillable="true" type="ns0:string2stringMap"/>
          <xsd:element minOccurs="0" name="hostTimestamp" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="id" type="xsd:int"/>
          <xsd:element minOccurs="0" name="phoneEventType" nillable="true" type="tns:PhoneEventType"/>
          <xsd:element minOccurs="0" name="phoneTimestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneActionResult">
        <xsd:complexContent>
          <xsd:extension base="tns:ArsResult">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="phoneEvents" nillable="true" type="tns:ArrayOfPhoneEvent"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com"/>
      <xsd:complexType name="string2stringMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="dial" type="tns:dial"/>
      <xsd:complexType name="dial">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneNumber" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="dialResponse" type="tns:dialResponse"/>
      <xsd:complexType name="dialResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getCurrentVoiceState" type="tns:getCurrentVoiceState"/>
      <xsd:complexType name="getCurrentVoiceState">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getCurrentVoiceStateResponse" type="tns:getCurrentVoiceStateResponse"/>
      <xsd:complexType name="getCurrentVoiceStateResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:VoiceStateResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="answer" type="tns:answer"/>
      <xsd:complexType name="answer">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="answerResponse" type="tns:answerResponse"/>
      <xsd:complexType name="answerResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="release" type="tns:release"/>
      <xsd:complexType name="release">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="releaseResponse" type="tns:releaseResponse"/>
      <xsd:complexType name="releaseResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastVoiceEvent" type="tns:getLastVoiceEvent"/>
      <xsd:complexType name="getLastVoiceEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastVoiceEventResponse" type="tns:getLastVoiceEventResponse"/>
      <xsd:complexType name="getLastVoiceEventResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneEventResult"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="releaseResponse">
    <wsdl:part element="tns:releaseResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="release">
    <wsdl:part element="tns:release" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastVoiceEvent">
    <wsdl:part element="tns:getLastVoiceEvent" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="dialResponse">
    <wsdl:part element="tns:dialResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="dial">
    <wsdl:part element="tns:dial" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastVoiceEventResponse">
    <wsdl:part element="tns:getLastVoiceEventResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="answer">
    <wsdl:part element="tns:answer" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentVoiceStateResponse">
    <wsdl:part element="tns:getCurrentVoiceStateResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentVoiceState">
    <wsdl:part element="tns:getCurrentVoiceState" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="answerResponse">
    <wsdl:part element="tns:answerResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IArsVoiceServicePortType">
    <wsdl:operation name="dial">
      <wsdl:input message="tns:dial" name="dial"></wsdl:input>
      <wsdl:output message="tns:dialResponse" name="dialResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCurrentVoiceState">
      <wsdl:input message="tns:getCurrentVoiceState" name="getCurrentVoiceState"></wsdl:input>
      <wsdl:output message="tns:getCurrentVoiceStateResponse" name="getCurrentVoiceStateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="answer">
      <wsdl:input message="tns:answer" name="answer"></wsdl:input>
      <wsdl:output message="tns:answerResponse" name="answerResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="release">
      <wsdl:input message="tns:release" name="release"></wsdl:input>
      <wsdl:output message="tns:releaseResponse" name="releaseResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getLastVoiceEvent">
      <wsdl:input message="tns:getLastVoiceEvent" name="getLastVoiceEvent"></wsdl:input>
      <wsdl:output message="tns:getLastVoiceEventResponse" name="getLastVoiceEventResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IArsVoiceServiceSoapBinding" type="tns:IArsVoiceServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="dial">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="dial">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="dialResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getCurrentVoiceState">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCurrentVoiceState">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCurrentVoiceStateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="answer">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="answer">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="answerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="release">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="release">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="releaseResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getLastVoiceEvent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getLastVoiceEvent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getLastVoiceEventResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IArsVoiceService">
    <wsdl:port binding="tns:IArsVoiceServiceSoapBinding" name="IArsVoiceServicePort">
      <soap:address location="http://10.2.1.40:8080/androidremoting/voice"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="answer" bindingOperationName="answer" type="Request-Response" outputName="answerResponse" inputName="answer" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:answer>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:answer>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsVoiceServicePortType/answer"/></con:call></con:operation><con:operation isOneWay="false" action="" name="dial" bindingOperationName="dial" type="Request-Response" outputName="dialResponse" inputName="dial" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:dial>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:phoneNumber>?</api:phoneNumber>
      </api:dial>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsVoiceServicePortType/dial"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getCurrentVoiceState" bindingOperationName="getCurrentVoiceState" type="Request-Response" outputName="getCurrentVoiceStateResponse" inputName="getCurrentVoiceState" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsVoiceServicePortType/getCurrentVoiceState"/></con:call></con:operation><con:operation isOneWay="false" action="" name="getLastVoiceEvent" bindingOperationName="getLastVoiceEvent" type="Request-Response" outputName="getLastVoiceEventResponse" inputName="getLastVoiceEvent" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getLastVoiceEvent>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getLastVoiceEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsVoiceServicePortType/getLastVoiceEvent"/></con:call></con:operation><con:operation isOneWay="false" action="" name="release" bindingOperationName="release" type="Request-Response" outputName="releaseResponse" inputName="release" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsVoiceServicePortType/release"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="IArsSmsServiceSoapBinding" type="wsdl" bindingName="{http://api.androidremoting.callsgen.inewcs.com/}IArsSmsServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/androidremoting/sms?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/androidremoting/sms?wsdl"><con:part><con:url>http://localhost:8080/androidremoting/sms?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="IArsSmsService" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com/"/>
      <xsd:simpleType name="PhoneEventType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE_SERVICE_STATE_CHANGED"/>
          <xsd:enumeration value="USSD_REQUEST_SENT"/>
          <xsd:enumeration value="USSD_RESPONSE_RECEIVED"/>
          <xsd:enumeration value="SMS_SENT"/>
          <xsd:enumeration value="SMS_DELIVERED"/>
          <xsd:enumeration value="SMS_RECEIVED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArsResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEventResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneEvent" nillable="true" type="tns:PhoneEvent"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="FAILED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfPhoneEvent">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="PhoneEvent" nillable="true" type="tns:PhoneEvent"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="details" nillable="true" type="ns0:string2stringMap"/>
          <xsd:element minOccurs="0" name="hostTimestamp" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="id" type="xsd:int"/>
          <xsd:element minOccurs="0" name="phoneEventType" nillable="true" type="tns:PhoneEventType"/>
          <xsd:element minOccurs="0" name="phoneTimestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneActionResult">
        <xsd:complexContent>
          <xsd:extension base="tns:ArsResult">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="phoneEvents" nillable="true" type="tns:ArrayOfPhoneEvent"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com"/>
      <xsd:complexType name="string2stringMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendSms" type="tns:sendSms"/>
      <xsd:complexType name="sendSms">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="destinationNumber" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="message" nillable="true" type="xsd:string"/>
          <xsd:element name="timeoutSeconds" type="xsd:int"/>
          <xsd:element name="ensureDelivery" type="xsd:boolean"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendSmsResponse" type="tns:sendSmsResponse"/>
      <xsd:complexType name="sendSmsResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastSmsEvent" type="tns:getLastSmsEvent"/>
      <xsd:complexType name="getLastSmsEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastSmsEventResponse" type="tns:getLastSmsEventResponse"/>
      <xsd:complexType name="getLastSmsEventResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneEventResult"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="sendSms">
    <wsdl:part element="tns:sendSms" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastSmsEvent">
    <wsdl:part element="tns:getLastSmsEvent" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendSmsResponse">
    <wsdl:part element="tns:sendSmsResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastSmsEventResponse">
    <wsdl:part element="tns:getLastSmsEventResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IArsSmsServicePortType">
    <wsdl:operation name="sendSms">
      <wsdl:input message="tns:sendSms" name="sendSms"></wsdl:input>
      <wsdl:output message="tns:sendSmsResponse" name="sendSmsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getLastSmsEvent">
      <wsdl:input message="tns:getLastSmsEvent" name="getLastSmsEvent"></wsdl:input>
      <wsdl:output message="tns:getLastSmsEventResponse" name="getLastSmsEventResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IArsSmsServiceSoapBinding" type="tns:IArsSmsServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="sendSms">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="sendSms">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendSmsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getLastSmsEvent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getLastSmsEvent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getLastSmsEventResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IArsSmsService">
    <wsdl:port binding="tns:IArsSmsServiceSoapBinding" name="IArsSmsServicePort">
      <soap:address location="http://10.2.1.40:8080/androidremoting/sms"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getLastSmsEvent" bindingOperationName="getLastSmsEvent" type="Request-Response" outputName="getLastSmsEventResponse" inputName="getLastSmsEvent" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getLastSmsEvent>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getLastSmsEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsSmsServicePortType/getLastSmsEvent"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendSms" bindingOperationName="sendSms" type="Request-Response" outputName="sendSmsResponse" inputName="sendSms" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendSms>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:destinationNumber>?</api:destinationNumber>
         <!--Optional:-->
         <api:message>?</api:message>
         <api:timeoutSeconds>?</api:timeoutSeconds>
         <api:ensureDelivery>?</api:ensureDelivery>
      </api:sendSms>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsSmsServicePortType/sendSms"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="IArsUssdServiceSoapBinding" type="wsdl" bindingName="{http://api.androidremoting.callsgen.inewcs.com/}IArsUssdServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/androidremoting/ussd?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/androidremoting/ussd?wsdl"><con:part><con:url>http://localhost:8080/androidremoting/ussd?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="IArsUssdService" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com/" xmlns:tns="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com/"/>
      <xsd:simpleType name="PhoneEventType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="VOICE_SERVICE_STATE_CHANGED"/>
          <xsd:enumeration value="USSD_REQUEST_SENT"/>
          <xsd:enumeration value="USSD_RESPONSE_RECEIVED"/>
          <xsd:enumeration value="SMS_SENT"/>
          <xsd:enumeration value="SMS_DELIVERED"/>
          <xsd:enumeration value="SMS_RECEIVED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArsResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEventResult">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="failedReason" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="phoneEvent" nillable="true" type="tns:PhoneEvent"/>
          <xsd:element minOccurs="0" name="resultCode" nillable="true" type="tns:ResultCode"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:simpleType name="ResultCode">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="OK"/>
          <xsd:enumeration value="FAILED"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="ArrayOfPhoneEvent">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="PhoneEvent" nillable="true" type="tns:PhoneEvent"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="details" nillable="true" type="ns0:string2stringMap"/>
          <xsd:element minOccurs="0" name="hostTimestamp" type="xsd:dateTime"/>
          <xsd:element minOccurs="0" name="id" type="xsd:int"/>
          <xsd:element minOccurs="0" name="phoneEventType" nillable="true" type="tns:PhoneEventType"/>
          <xsd:element minOccurs="0" name="phoneTimestamp" type="xsd:dateTime"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="PhoneActionResult">
        <xsd:complexContent>
          <xsd:extension base="tns:ArsResult">
            <xsd:sequence>
              <xsd:element minOccurs="0" name="phoneEvents" nillable="true" type="tns:ArrayOfPhoneEvent"/>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <xsd:schema attributeFormDefault="qualified" elementFormDefault="qualified" targetNamespace="http://api.androidremoting.callsgen.inewcs.com/" xmlns:ns0="http://api.androidremoting.callsgen.inewcs.com">
      <xsd:import namespace="http://api.androidremoting.callsgen.inewcs.com"/>
      <xsd:complexType name="string2stringMap">
        <xsd:sequence>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="entry">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element minOccurs="0" name="key" type="xsd:string"/>
                <xsd:element minOccurs="0" name="value" type="xsd:string"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastUssdEvent" type="tns:getLastUssdEvent"/>
      <xsd:complexType name="getLastUssdEvent">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="getLastUssdEventResponse" type="tns:getLastUssdEventResponse"/>
      <xsd:complexType name="getLastUssdEventResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneEventResult"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendUssd" type="tns:sendUssd"/>
      <xsd:complexType name="sendUssd">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="deviceImsi" nillable="true" type="xsd:string"/>
          <xsd:element minOccurs="0" name="ussdCode" nillable="true" type="xsd:string"/>
          <xsd:element name="timeoutSeconds" type="xsd:int"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="sendUssdResponse" type="tns:sendUssdResponse"/>
      <xsd:complexType name="sendUssdResponse">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="return" nillable="true" type="ns0:PhoneActionResult"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="sendUssdResponse">
    <wsdl:part element="tns:sendUssdResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="sendUssd">
    <wsdl:part element="tns:sendUssd" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastUssdEventResponse">
    <wsdl:part element="tns:getLastUssdEventResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="getLastUssdEvent">
    <wsdl:part element="tns:getLastUssdEvent" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IArsUssdServicePortType">
    <wsdl:operation name="getLastUssdEvent">
      <wsdl:input message="tns:getLastUssdEvent" name="getLastUssdEvent"></wsdl:input>
      <wsdl:output message="tns:getLastUssdEventResponse" name="getLastUssdEventResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendUssd">
      <wsdl:input message="tns:sendUssd" name="sendUssd"></wsdl:input>
      <wsdl:output message="tns:sendUssdResponse" name="sendUssdResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IArsUssdServiceSoapBinding" type="tns:IArsUssdServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getLastUssdEvent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getLastUssdEvent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getLastUssdEventResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="sendUssd">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="sendUssd">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="sendUssdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IArsUssdService">
    <wsdl:port binding="tns:IArsUssdServiceSoapBinding" name="IArsUssdServicePort">
      <soap:address location="http://10.2.1.40:8080/androidremoting/ussd"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/ussd</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="getLastUssdEvent" bindingOperationName="getLastUssdEvent" type="Request-Response" outputName="getLastUssdEventResponse" inputName="getLastUssdEvent" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/ussd</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getLastUssdEvent>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
      </api:getLastUssdEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsUssdServicePortType/getLastUssdEvent"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="sendUssd" bindingOperationName="sendUssd" type="Request-Response" outputName="sendUssdResponse" inputName="sendUssd" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/ussd</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendUssd>
         <!--Optional:-->
         <api:deviceImsi>?</api:deviceImsi>
         <!--Optional:-->
         <api:ussdCode>?</api:ussdCode>
         <api:timeoutSeconds>?</api:timeoutSeconds>
      </api:sendUssd>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://api.androidremoting.callsgen.inewcs.com/IArsUssdServicePortType/sendUssd"/></con:call></con:operation></con:interface><con:testSuite name="Testcases"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Call" searchProperties="true" id="120295e0-8ff0-4f1a-bb55-6a1b81a803f3" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This TC executes a voice call between 2 Android Phones attached to an Android Remoting Server.

Arguments (i.e. related Testcases.Call.input.XXX project properties):

  cgDeviceImsi
    IMSI of the attached phone that shall act as the calling phone

  cdDeviceImsi
    IMSI of the attached phone that should be called when dialMsisdn (see below) is dialed on the calling phone

  dialMsisdn
    MSISDN that shall be dialed on the calling phone (specified via cgDeviceImsi).
    This parameter is exposed instead of automatically being taken from the called device (specified in cdDeviceImsi) to be able to use different numbering formats.
    The TC fails if the dialed MSISDN doesn't contact the called device (specified in cdDeviceImsi) within 20 seconds after dialing.

  callDurationMillis
    Specifies the duration in milliseconds the successfull connection shall be held open until it's released.
    This parameter is exposed instead of simply taking a hardcoded constant to offer the possibility of testing also charging results related to the call's duration.

  releasedByCg
    This flag ("true" or "false") specifies whether the successfull call establishement between the 2 phones shall be released by the calling (cgDeviceImsi) or the called (cdDeviceImsi) party.

Returnvalues (as "Testcases.Call.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success any other value in case of failure:
    TC_PRECONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE
    TC_PRECONDITION_VIOLATION__CALLED_DEVICE_NOT_IDLE
    DIAL_ON_CALLING_DEVICE_FAILED
    CALLED_DEVICE_NOT_RINGING
    ANSWER_ON_CALLED_DEVICE_FAILED
    CONNECT_AFTER_ANSWER_ON_CALLED_DEVICE_FAILED
    FINAL_RELEASE_ON_CALLING_DEVICE_FAILED
    FINAL_RELEASE_ON_CALLED_DEVICE_FAILED
    TC_POSTCONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE
    TC_POSTCONDITION_VIOLATION__CALLED_DEVICE_NOT_IDLE



    </con:description><con:settings/><con:testStep type="groovy" name="Setup"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'OK'
</script></con:config></con:testStep><con:testStep type="request" name="01_release_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="01_release_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="02_release_cdDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="02_release_cdDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="03_check_cgDevice_state_IDLE"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="03_check_cgDevice_state_IDLE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="04_check_cdDevice_state_IDLE"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="04_check_cdDevice_state_IDLE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_3_and_4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("03_check_cgDevice_state_IDLE").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "03_check_cgDevice_state_IDLE" )
  //testRunner.cancel( "03_check_cgDevice_state_IDLE" )
  //testRunner.gotoStepByName("finish")
  
} else if( testRunner.testCase.getTestStepByName("04_check_cdDevice_state_IDLE").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__CALLED_DEVICE_NOT_IDLE'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "04_check_cdDevice_state_IDLE" )
  //testRunner.cancel( "04_check_cdDevice_state_IDLE" )
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="request" name="05_dial_Msisdn_on_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>dial</con:operation><con:request name="05_dial_Msisdn_on_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
       <api:dial>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
         <api:phoneNumber>${#Project#Testcases.Call.input.dialMsisdn}</api:phoneNumber>
      </api:dial>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_5"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("05_dial_Msisdn_on_cgDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'DIAL_ON_CALLING_DEVICE_FAILED'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "05_dial_Msisdn_on_cgDevice" )  
  //testRunner.cancel( "05_dial_Msisdn_on_cgDevice" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="06_init_repeat_counter"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.Call.local.repeatcounter'].value = 0
</script></con:config></con:testStep><con:testStep type="delay" name="07_wait_1s_for_Network"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="08_query_cdDevice_state"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="08_query_cdDevice_state"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="09_exit_repeat_if_state_RINGING"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>state_RINGING</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns3='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';


contains(//ns2:voiceState, 'RINGING')</con:expression><con:targetStep>11_check_cdDevice_state_RINGING</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="10_repeat_max_20_times"><con:settings/><con:config><script>def counter = Integer.parseInt(testRunner.testCase.testSuite.project.properties['Testcases.Call.local.repeatcounter'].value)
counter=counter+1
testRunner.testCase.testSuite.project.properties['Testcases.Call.local.repeatcounter'].value = counter

if(counter >=20) {
  //log.info 'counter= ' + counter + ' => Exit' 
} else {
  //log.info 'counter= ' + counter + ' => Repeat' 
  testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('07_wait_1s_for_Network'))
}</script></con:config></con:testStep><con:testStep type="request" name="11_check_cdDevice_state_RINGING"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="11_check_cdDevice_state_RINGING"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="voiceState = RINGING"><con:configuration><token>&lt;ns2:voiceState>RINGING&lt;/ns2:voiceState></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("11_check_cdDevice_state_RINGING").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'CALLED_DEVICE_NOT_RINGING'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "11_check_cdDevice_state_RINGING" )  
  //testRunner.cancel( "11_check_cdDevice_state_RINGING" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="request" name="12_answer_cdDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>answer</con:operation><con:request name="12_answer_cdDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:answer>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:answer>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name=""/><con:assertion type="Simple Contains" name="Not SOAP Fault"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_12"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("12_answer_cdDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'ANSWER_ON_CALLED_DEVICE_FAILED'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "12_answer_cdDevice" )  
  //testRunner.cancel( "12_answer_cdDevice" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="request" name="13_check_cgDevice_state_CONNECTED"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="13_check_cgDevice_state_CONNECTED"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" name="voiceState = CONNECTED"><con:configuration><token>&lt;ns2:voiceState>CONNECTED&lt;/ns2:voiceState></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_13"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("13_check_cgDevice_state_CONNECTED").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'CONNECT_AFTER_ANSWER_ON_CALLED_DEVICE_FAILED'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "13_check_cgDevice_state_CONNECTED" )  
  //testRunner.cancel( "13_check_cgDevice_state_CONNECTED" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="delay" name="14_wait_callDurationSecs_to_simulate_chat"><con:settings/><con:config><delay>${#Project#Testcases.Call.input.callDurationMillis}</delay></con:config></con:testStep><con:testStep type="groovy" name="15_Goto_18_if_NOT_input.releasedByCg"><con:settings/><con:config><script>def releasedByCg = testRunner.testCase.testSuite.project.properties['Testcases.Call.input.releasedByCg'].value

if(releasedByCg != "true")
   testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('18_final_release_cdDevice'))
</script></con:config></con:testStep><con:testStep type="request" name="16_final_release_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="16_final_release_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_16"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("16_final_release_cgDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'FINAL_RELEASE_ON_CALLING_DEVICE_FAILED'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "16_final_release_cgDevice" )  
  //testRunner.cancel( "16_final_release_cgDevice" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="17_goto_19"><con:settings/><con:config><script>testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('19_final_check_cgDevice_state_IDLE'))
</script></con:config></con:testStep><con:testStep type="request" name="18_final_release_cdDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="18_final_release_cdDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("18_final_release_cdDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase-testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'FINAL_RELEASE_ON_CALLED_DEVICE_FAILED'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "18_final_release_cdDevice" )  
  //testRunner.cancel( "18_final_release_cdDevice" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="request" name="19_final_check_cgDevice_state_IDLE"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="19_final_check_cgDevice_state_IDLE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cgDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="20_final_check_cdDevice_state_IDLE"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="20_final_check_cdDevice_state_IDLE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.Call.input.cdDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_19_and_20"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("19_final_check_cgDevice_state_IDLE").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'TC_POSTCONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE'
  log.error 'Testcases.Call.output.resultCodeesult=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "19_final_check_cgDevice_state_IDLE" )
  //testRunner.cancel( "19_final_check_cgDevice_state_IDLE" )
  //testRunner.gotoStepByName("finish")
  
} else if( testRunner.testCase.getTestStepByName("20_final_check_cdDevice_state_IDLE").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value = 'TC_POSTCONDITION_VIOLATION__CALLED_DEVICE_NOT_IDLE'
  log.error 'Testcases.Call.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Call.output.resultCode'].value
  testRunner.fail( "20_final_check_cdDevice_state_IDLE" )
  //testRunner.cancel( "20_final_check_cdDevice_state_IDLE" )
  //testRunner.gotoStepByName("finish")
 
} else {
  log.info 'Testcases.Call.output.resultCode=OK'
}	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="CallUnattached" searchProperties="true" id="1a3e82b5-1521-4f6f-82c4-5f6987b0e627" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This TC is similar to the basic "Call" TC except that only the calling phone (A-party) needs to be attached to an Android Remoting Server.
It can be used to test connections to fix-net subscribers or to any phones (or services) that are not attachable to an Android Remoting System.

Arguments (i.e. related Testcases.CallUnattached.input.XXX project properties):

  cgDeviceImsi
    IMSI of the attached phone that shall act as the calling phone (A-party)

  dialMsisdn
    MSISDN that shall be dialed on the calling device (specified via cgDeviceImsi).
    The TC fails if the dialed MSISDN doesn't result in a connection within 20 seconds after dialing.

  callDurationMillis
    Specifies the duration in milliseconds the established connection shall be held open until it's released by the calling device (specified via cgDeviceImsi).
    ATTENTION: The TC fails if the connection is released by the called party.

Returnvalues (as "Testcases.CallUnattached.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success, any other value in case of failure:
    TC_PRECONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE
    DIAL_ON_CALLING_DEVICE_FAILED
    CONNECT_FAILED
    FINAL_RELEASE_ON_CALLING_DEVICE_FAILED
</con:description><con:settings/><con:testStep type="groovy" name="Setup"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value = 'OK'
</script></con:config></con:testStep><con:testStep type="request" name="01_release_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="01_release_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="02_check_cgDevice_state_IDLE"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="02_check_cgDevice_state_IDLE"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("02_check_cgDevice_state_IDLE").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__CALLING_DEVICE_NOT_IDLE'
  log.error 'Testcases.CallUnattached.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value
  testRunner.fail( "02_check_cgDevice_state_IDLE" )
  //testRunner.cancel( "02_check_cgDevice_state_IDLE" )
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="request" name="03_dial_Msisdn_on_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>dial</con:operation><con:request name="03_dial_Msisdn_on_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
       <api:dial>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
         <api:phoneNumber>${#Project#Testcases.CallUnattached.input.dialMsisdn}</api:phoneNumber>
      </api:dial>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("03_dial_Msisdn_on_cgDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value = 'DIAL_ON_CALLING_DEVICE_FAILED'
  log.error 'Testcases.CallUnattached.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value
  testRunner.fail( "03_dial_Msisdn_on_cgDevice" )  
  //testRunner.cancel( "03_dial_Msisdn_on_cgDevice" )  
  //testRunner.gotoStepByName("finish")
}

</script></con:config></con:testStep><con:testStep type="groovy" name="04_init_repeat_counter"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.local.repeatcounter'].value = 0
</script></con:config></con:testStep><con:testStep type="delay" name="05_wait_1s_for_Connection"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="06_query_cgDevice_state"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="06_query_cgDevice_state"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="goto" name="07_exit_repeat_if_state_CONNECTED"><con:settings/><con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:condition><con:name>state_RINGING</con:name><con:type>XPATH</con:type><con:expression>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace ns3='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';


contains(//ns2:voiceState, 'CONNECTED')</con:expression><con:targetStep>10_wait_callDurationSecs_to_simulate_chat</con:targetStep></con:condition></con:config></con:testStep><con:testStep type="groovy" name="08_repeat_max_20_times"><con:settings/><con:config><script>def counter = Integer.parseInt(testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.local.repeatcounter'].value)
counter=counter+1
testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.local.repeatcounter'].value = counter

if(counter >=20) {
  //log.info 'counter= ' + counter + ' => Exit' 
} else {
  //log.info 'counter= ' + counter + ' => Repeat' 
  testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('05_wait_1s_for_Connection'))
}</script></con:config></con:testStep><con:testStep type="request" name="09_release_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="09_release_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value = 'CONNECT_FAILED'
log.error 'Testcases.CallUnattached.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value
testRunner.fail( "08_repeat_max_20_times" )  
//testRunner.cancel( "08_repeat_max_20_times" )  
//testRunner.gotoStepByName("finish")


</script></con:config></con:testStep><con:testStep type="delay" name="10_wait_callDurationSecs_to_simulate_chat"><con:settings/><con:config><delay>${#Project#Testcases.CallUnattached.input.callDurationMillis}</delay></con:config></con:testStep><con:testStep type="request" name="11_final_release_cgDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="11_final_release_cgDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#Testcases.CallUnattached.input.cgDeviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("11_final_release_cgDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value = 'FINAL_RELEASE_ON_CALLING_DEVICE_FAILED'
  log.error 'Testcases.CallUnattached.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.CallUnattached.output.resultCode'].value
  testRunner.fail( "11_final_release_cgDevice" )  
  //testRunner.cancel( "11_final_release_cgDevice" )  
  //testRunner.gotoStepByName("finish")
  
} else {
  log.info 'Testcases.CallUnattached.output.resultCode=OK'
}	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Ussd" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="eb332ce2-2205-44b3-9321-bc3900465987"><con:description>This TC executes a simple (non-dialog based) USSD call on an Android Phone attached to an Android Remoting Server.

Arguments (i.e. related Testcases.Ussd.input.XXX project properties):

  deviceImsi
    IMSI of the attached phone where the ussdCode shall be dialed

  ussdCode
    USSD code to be dialed

  timeoutSeconds
    Specifies the max duration in seconds that shall be waited for the response.

Returnvalues (as "Testcases.Ussd.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success any other value in case of failure:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE    
    TIMEOUT

  responseText
    In case of resultCode=OK this result value provides the received response text.
    This can be analyzed by the calling testsuite to dedermine if the response fits the expectations and thus the TC execution is really succesful.
    ATTENTION: To ensure that the log entry is limited to one line all occurencies of line breaks within the received response text are replaced by &lt;br> before it's written to the log

</con:description><con:settings/><con:testStep type="groovy" name="Setup"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.Ussd.output.resultCode'].value = 'OK'
</script></con:config></con:testStep><con:testStep type="request" name="01_dial_ussdCode"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsUssdServiceSoapBinding</con:interface><con:operation>sendUssd</con:operation><con:request name="01_dial_ussdCode"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/ussd</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendUssd>
         <api:deviceImsi>${#Project#Testcases.Ussd.input.deviceImsi}</api:deviceImsi>
         <api:ussdCode>${#Project#Testcases.Ussd.input.ussdCode}</api:ussdCode>
         <api:timeoutSeconds>${#Project#Testcases.Ussd.input.timeoutSeconds}</api:timeoutSeconds>
      </api:sendUssd>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_02_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_dial_ussdCode").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.gotoStepByName("02_transfer_responseText")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_dial_ussdCode</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:sendUssdResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>Testcases.Ussd.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

log.error 'Testcases.Ussd.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Ussd.output.resultCode'].value
testRunner.fail( "01_dial_ussdCode" )  
//testRunner.cancel( "01_dial_ussdCode" )  
	

</script></con:config></con:testStep><con:testStep type="transfer" name="02_transfer_responseText"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="true" transferToAll="true" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>responseText</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_dial_ussdCode</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:sendUssdResponse[1]/ns1:return[1]/ns2:phoneEvents[1]/ns2:PhoneEvent[2]/ns2:details[1]/ns1:entry[1]/ns1:value[1] </con:sourcePath><con:targetType>Testcases.Ussd.output.responseText</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="03_log_responseText"><con:settings/><con:config><script>def responseText = testRunner.testCase.testSuite.project.properties['Testcases.Ussd.output.responseText'].value
responseText = responseText.replaceAll("[\r\n|\n\r|\n|\r]", "&lt;br>") //replace any kind of line break with html &lt;br> tag
testRunner.testCase.testSuite.project.properties['Testcases.Ussd.output.responseText'].value = responseText //update the property - perhaps in future we want to process that too

log.info 'Testcases.Ussd.output.responseText=' + responseText 
log.info 'Testcases.Ussd.output.resultCode=OK'
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Sms" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="24e98ddf-d30a-4d9c-bdde-b6ef97f56251"><con:description>This TC sends an SMS between 2 Android Phones attached to an Android Remoting Server.

Arguments (i.e. related Testcases.Sms.input.XXX project properties):

  origDeviceImsi
    IMSI of the attached phone that shall act as the SMS originating phone

  destDeviceImsi
    IMSI of the attached phone that should receive the SMS when it's submitted via destMsisdn (see below) on the originating phone

  destMsisdn
    MSISDN that shall be used to submit the SMS on the originating phone (specified via origDeviceImsi).
    This parameter is exposed instead of automatically being taken from the destination device (specified in destDeviceImsi) to be able to use different numbering formats.
    The TC fails if the SMS submitted via this MSISDN is not received on destination device (specified in destDeviceImsi).

  message 
    Specifies the SMS body to be sent.
    ATTENTION: Line breaks have to be coded as HTML br tag 

  ensureDelivery
    This flag ("true" or "false") specifies whether the TC shall wait on the originating device for submission report AND delivery report or for the submission report only.

  sendTimeoutSeconds
    Specifies the max duration in seconds that shall be waited on the originating device for the submission or delivery report (depending on ensureDelivery).
    
  receiveTimeoutSeconds
    Specifies the max duration in seconds that shall be waited on the destination device for the SMS receival.

Returnvalues (as "Testcases.Sms.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success any other value in case of failure:
    TC_PRECONDITION_VIOLATION__DESTINATION_DEVICE_NOT_AVAILABLE
    TC_PRECONDITION_VIOLATION__ORIGINATING_DEVICE_NOT_AVAILABLE
    TIMEOUT
    RECEIVE_TIMEOUT

  receivedMessage
    In case of resultCode=OK this result value provides the received SMS body.
    This can be analyzed by the calling testsuite to dedermine if the response fits the expectations and thus the TC execution is really succesful.
    ATTENTION: To ensure that the log entry is limited to one line all occurencies of line breaks within the received response text are replaced by &lt;br> before it's written to the log
</con:description><con:settings/><con:testStep type="groovy" name="Setup"><con:settings/><con:config><script>def message = testRunner.testCase.testSuite.project.properties['Testcases.Sms.input.message'].value
message = message.replaceAll("&lt;br>", "\n") //replace &lt;br> with real line breaks to be embedable into the SOAP XML
testRunner.testCase.testSuite.project.properties['Testcases.Sms.input.message'].value = message 

testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value = 'OK'


</script></con:config></con:testStep><con:testStep type="request" name="01_get_destDevice_last_sms_id"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsSmsServiceSoapBinding</con:interface><con:operation>getLastSmsEvent</con:operation><con:request name="01_get_destDevice_last_sms_id"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getLastSmsEvent>
         <api:deviceImsi>${#Project#Testcases.Sms.input.destDeviceImsi}</api:deviceImsi>
      </api:getLastSmsEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_get_destDevice_last_sms_id").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__DESTINATION_DEVICE_NOT_AVAILABLE'
  log.error 'Testcases.Sms.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value
  testRunner.fail( "01_get_destDevice_last_sms_id" )  
  //testRunner.cancel( "01_get_destDevice_last_sms_id" )  
}	

</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_lastSmsId"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_get_destDevice_last_sms_id</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:getLastSmsEventResponse[1]/ns1:return[1]/ns2:phoneEvent[1]/ns2:id[1]</con:sourcePath><con:targetType>Testcases.Sms.local.lastSmsId</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="request" name="02_query_origDevice"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsPhoneServiceSoapBinding</con:interface><con:operation>getDeviceInfoByImsi</con:operation><con:request name="02_query_origDevice"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/phone</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getDeviceInfoByImsi>
         <api:deviceImsi>${#Project#Testcases.Sms.input.origDeviceImsi}</api:deviceImsi>
      </api:getDeviceInfoByImsi>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("02_query_origDevice").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__ORIGINATING_DEVICE_NOT_AVAILABLE'
  log.error 'Testcases.Sms.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value
  testRunner.fail( "02_query_origDevice" )  
  //testRunner.cancel( "02_query_orgDevice" )  
}	

</script></con:config></con:testStep><con:testStep type="request" name="03_send_sms"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsSmsServiceSoapBinding</con:interface><con:operation>sendSms</con:operation><con:request name="03_send_sms"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendSms>
         <api:deviceImsi>${#Project#Testcases.Sms.input.origDeviceImsi}</api:deviceImsi>
         <api:destinationNumber>${#Project#Testcases.Sms.input.destMsisdn}</api:destinationNumber>
         <api:message>${#Project#Testcases.Sms.input.message}</api:message>
         <api:timeoutSeconds>${#Project#Testcases.Sms.input.sendTimeoutSeconds}</api:timeoutSeconds>
         <api:ensureDelivery>${#Project#Testcases.Sms.input.ensureDelivery}</api:ensureDelivery>
      </api:sendSms>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_4_on_successfull_step_3"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("03_send_sms").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.gotoStepByName("04_init_repeat_counter")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>03_send_sms</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:sendSmsResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>Testcases.Sms.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

log.error 'Testcases.Sms.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value
testRunner.fail( "03_send_sms" )  
//testRunner.cancel( "03_send_sms" )  
	

</script></con:config></con:testStep><con:testStep type="groovy" name="04_init_repeat_counter"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.properties['Testcases.Sms.local.repeatcounter'].value = 0
</script></con:config></con:testStep><con:testStep type="delay" name="05_wait_1s_for_sms_receival"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="request" name="06_get_destDevice_current_sms_id"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsSmsServiceSoapBinding</con:interface><con:operation>getLastSmsEvent</con:operation><con:request name="06_get_destDevice_current_sms_id"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getLastSmsEvent>
         <api:deviceImsi>${#Project#Testcases.Sms.input.destDeviceImsi}</api:deviceImsi>
      </api:getLastSmsEvent>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="cancel_on_failed_step_6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("06_get_destDevice_current_sms_id").assertionStatus==AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value = 'TC_PRECONDITION_VIOLATION__DESTINATION_DEVICE_NOT_AVAILABLE'
  log.error 'Testcases.Sms.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value
  testRunner.fail( "06_get_destDevice_current_sms_id" )  
  //testRunner.cancel( "06_get_destDevice_current_sms_id" )  
}	

</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_currentSmsId"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false"><con:name>id</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>06_get_destDevice_current_sms_id</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:getLastSmsEventResponse[1]/ns1:return[1]/ns2:phoneEvent[1]/ns2:id[1]</con:sourcePath><con:targetType>Testcases.Sms.local.currentSmsId</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="exit_repeat_on_received_message"><con:settings/><con:config><script>def lastSmsId = testRunner.testCase.testSuite.project.properties['Testcases.Sms.local.lastSmsId'].value
def currentSmsId = testRunner.testCase.testSuite.project.properties['Testcases.Sms.local.currentSmsId'].value

if (lastSmsId != currentSmsId) {
  testRunner.gotoStepByName("08_transfer_receivedMessage")	
}	</script></con:config></con:testStep><con:testStep type="groovy" name="07_repeat_or_cancel"><con:settings/><con:config><script>def counter = Integer.parseInt(testRunner.testCase.testSuite.project.properties['Testcases.Sms.local.repeatcounter'].value)
counter=counter+1
testRunner.testCase.testSuite.project.properties['Testcases.Call.local.repeatcounter'].value = counter

def receiveTimeoutSeconds = Integer.parseInt(testRunner.testCase.testSuite.project.properties['Testcases.Sms.input.receiveTimeoutSeconds'].value)

if(counter &lt; receiveTimeoutSeconds) {
  //log.info 'counter= ' + counter + ' => Repeat' 
  testRunner.gotoStep(testRunner.testCase.getTestStepIndexByName('05_wait_1s_for_sms_receival'))
} else {
  //log.info 'counter= ' + counter + ' => Exit' 
  testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value = 'RECEIVE_TIMEOUT'
  log.error 'Testcases.Sms.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.resultCode'].value
  testRunner.fail( "06_get_destDevice_current_sms_id" )  
  //testRunner.cancel( "06_get_destDevice_current_sms_id" )  	
}</script></con:config></con:testStep><con:testStep type="transfer" name="08_transfer_receivedMessage"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>receivedMessage</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>06_get_destDevice_current_sms_id</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:getLastSmsEventResponse[1]/ns1:return[1]/ns2:phoneEvent[1]/ns2:details[1]/ns1:entry[2]/ns1:value[1]</con:sourcePath><con:targetType>Testcases.Sms.output.receivedMessage</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="09_log_receivedMessage"><con:settings/><con:config><script>def receivedMessage = testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.receivedMessage'].value
receivedMessage = receivedMessage.replaceAll("[\r\n|\n\r|\n|\r]", "&lt;br>") //replace any kind of line break with html &lt;br> tag
testRunner.testCase.testSuite.project.properties['Testcases.Sms.output.receivedMessage'].value = receivedMessage //update the property - perhaps in future we want to process that too

log.info 'Testcases.Sms.output.receivedMessage=' + receivedMessage 
log.info 'Testcases.Sms.output.resultCode=OK'
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="SmsUnattached" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fb75854f-4e44-4058-b3b0-3ee26fe4f537"><con:description>This TC is similar to the basic "Sms" TC except that only the originating phone needs to be attached to an Android Remoting Server.
It can be used to test SMS transmissions to any phones (or services) that are not attachable to an Android Remoting System.

Arguments (i.e. related Testcases.SmsUnattached.input.XXX project properties):

  origDeviceImsi
    IMSI of the attached phone that shall act as the originating phone

  destMsisdn
    MSISDN that shall be used to submit the SMS on the originating phone (specified via origDeviceImsi).
    The TC fails if the SMS submitted via this MSISDN is not replied by a submission or delivery report (depending on ensureDelivery) within the specified timeoutSeconds

  message 
    Specifies the SMS body to be sent.
    ATTENTION: Line breaks have to be coded as HTML br tag 
    
  ensureDelivery
    This flag ("true" or "false") specifies whether the TC shall wait on the originating device for submission report AND delivery report or for the submission report only.

  timeoutSeconds
    Specifies the max duration in seconds that shall be waited on the originating device for the submission or delivery report (depending on ensureDelivery).
    

Returnvalues (as "Testcases.SmsUnattached.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success any other value in case of failure:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE    
    TIMEOUT
</con:description><con:settings/><con:testStep type="groovy" name="Setup"><con:settings/><con:config><script>def message = testRunner.testCase.testSuite.project.properties['Testcases.SmsUnattached.input.message'].value
message = message.replaceAll("&lt;br>", "\n") //replace &lt;br> with real line breaks to be embedable into the SOAP XML
testRunner.testCase.testSuite.project.properties['Testcases.SmsUnattached.input.message'].value = message 

testRunner.testCase.testSuite.project.properties['Testcases.SmsUnattached.output.resultCode'].value = 'OK'
</script></con:config></con:testStep><con:testStep type="request" name="01_send_sms"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsSmsServiceSoapBinding</con:interface><con:operation>sendSms</con:operation><con:request name="01_send_sms"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/sms</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:sendSms>
         <api:deviceImsi>${#Project#Testcases.SmsUnattached.input.origDeviceImsi}</api:deviceImsi>
         <api:destinationNumber>${#Project#Testcases.SmsUnattached.input.destMsisdn}</api:destinationNumber>
         <api:message>${#Project#Testcases.SmsUnattached.input.message}</api:message>
         <api:timeoutSeconds>${#Project#Testcases.SmsUnattached.input.timeoutSeconds}</api:timeoutSeconds>
         <api:ensureDelivery>${#Project#Testcases.SmsUnattached.input.ensureDelivery}</api:ensureDelivery>
      </api:sendSms>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="Contains"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_finish_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_send_sms").assertionStatus!=AssertionStatus.FAILED ){
  log.info 'Testcases.SmsUnattached.output.resultCode=OK'
  testRunner.gotoStepByName("finish")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_send_sms</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:sendSmsResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>Testcases.Sms.local.repeatcounter</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

log.error 'Testcases.SmsUnattached.output.resultCode=' + testRunner.testCase.testSuite.project.properties['Testcases.SmsUnattached.output.resultCode'].value
testRunner.fail( "01_send_sms" )  
//testRunner.cancel( "01_send_sms" )  
	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite name="LowLevelOps"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Voice.dial" searchProperties="true" id="850b34fc-f7dd-429f-bbf0-568747aa7071" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This TC is a delegator to the dial operation of the Android Remoting voice service. 
See detailed documentation at: https://portal.inew-cs.com/redmine/projects/qa-technology-corner/wiki/AndroidRemoting_

Arguments (i.e. related LowLevelOps.Voice.dial.input.XXX project properties):

  deviceImsi
    specifies the (IDLE) device to be used for dialing

  phoneNumber
    specifies the MSISDN to be dialed

Returnvalues (as "LowLevelOps.Voice.dial.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success - in case of  failure  the service's failureReason:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE
    VOICE_STATE_PRECONDITION_VIOLATION
    VOICE_STATE_POSTCONDITION_VIOLATION
    UNKNOWN



    </con:description><con:settings/><con:testStep type="request" name="01_dial"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>dial</con:operation><con:request name="01_dial"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:dial>
         <api:deviceImsi>${#Project#LowLevelOps.Voice.dial.input.deviceImsi}</api:deviceImsi>
         <api:phoneNumber>${#Project#LowLevelOps.Voice.dial.input.phoneNumber}</api:phoneNumber>
      </api:dial>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_finish_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_dial").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.dial.output.resultCode'].value = 'OK'
  log.info 'LowLevelOps.Voice.dial.output.resultCode=OK'
  testRunner.gotoStepByName("finish")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_dial</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:dialResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>LowLevelOps.Voice.dial.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>
log.error 'LowLevelOps.Voice.answer.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.answer.output.resultCode'].value
testRunner.fail( "01_answer" )  
	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Voice.answer" searchProperties="true" id="48dbacb0-c29e-4206-89b0-a0fb5dd381ee" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:description>This TC is a delegator to the answer operation of the Android Remoting voice service.
See detailed documentation at: https://portal.inew-cs.com/redmine/projects/qa-technology-corner/wiki/AndroidRemoting_

Arguments (i.e. related LowLevelOps.Voice.answer.input.XXX project properties):

  deviceImsi
    specifies the (RINGING) device to be used for answering

Returnvalues (as "LowLevelOps.Voice.answer.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success - in case of  failure  the service's failureReason:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE
    VOICE_STATE_PRECONDITION_VIOLATION
    VOICE_STATE_POSTCONDITION_VIOLATION
    UNKNOWN

</con:description><con:settings/><con:testStep type="request" name="01_answer"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>answer</con:operation><con:request name="01_answer"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:answer>
         <api:deviceImsi>${#Project#LowLevelOps.Voice.answer.input.deviceImsi}</api:deviceImsi>
      </api:answer>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_finish_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_answer").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.answer.output.resultCode'].value = 'OK'
  log.info 'LowLevelOps.Voice.answer.output.resultCode=OK'
  testRunner.gotoStepByName("finish")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_answer</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:answerResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>LowLevelOps.Voice.answer.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>
log.error 'LowLevelOps.Voice.answer.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.answer.output.resultCode'].value
testRunner.fail( "01_answer" )  
	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Voice.release" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="69b1d941-bad4-4162-9db9-60c45667e6e5"><con:description>This TC is a delegator to the release operation of the Android Remoting voice service.
See detailed documentation at: https://portal.inew-cs.com/redmine/projects/qa-technology-corner/wiki/AndroidRemoting_

Arguments (i.e. related LowLevelOps.Voice.release.input.XXX project properties):

  deviceImsi
    specifies the (DIALING, RINGING or CONNECTED) device to be used for releasingthe active call (or call attempt)

Returnvalues (as "LowLevelOps.Voice.release.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success - in case of  failure  the service's failureReason:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE
    VOICE_STATE_PRECONDITION_VIOLATION
    VOICE_STATE_POSTCONDITION_VIOLATION
    UNKNOWN


     </con:description><con:settings/><con:testStep type="request" name="01_release"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>release</con:operation><con:request name="01_release"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:release>
         <api:deviceImsi>${#Project#LowLevelOps.Voice.release.input.deviceImsi}</api:deviceImsi>
      </api:release>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_finish_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_release").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.release.output.resultCode'].value = 'OK'
  log.info 'LowLevelOps.Voice.release.output.resultCode=OK'
  testRunner.gotoStepByName("finish")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_release</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:releaseResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>LowLevelOps.Voice.release.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>
log.error 'LowLevelOps.Voice.release.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.release.output.resultCode'].value
testRunner.fail( "01_release" )  
	

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="Voice.getCurrentVoiceState" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="e3ac511f-1437-45ee-979c-ab613a466033"><con:description>This TC is a delegator to the getCurrentVoiceState operation of the Android Remoting voice service.
See detailed documentation at: https://portal.inew-cs.com/redmine/projects/qa-technology-corner/wiki/AndroidRemoting_

Arguments (i.e. related LowLevelOps.Voice.getCurrentVoiceState.input.XXX project properties):

  deviceImsi
    specifies the device to be queried

Returnvalues (as "LowLevelOps.Voice.getCurrentVoiceState.output.XXX=yyy" entry in global-groovy.log)

  resultCode
    OK in case of success - in case of  failure  the service's failureReason:
    DEVICE_NOT_FOUND
    DEVICE_NOT_ONLINE
    VOICE_STATE_PRECONDITION_VIOLATION
    VOICE_STATE_POSTCONDITION_VIOLATION
    UNKNOWN

  voiceState
    in case of resultCode=OK this property provides the device' actual state (IDLE, DIALING, RINGING or CONNECTED)
     </con:description><con:settings/><con:testStep type="request" name="01_getCurrentVoiceState"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>IArsVoiceServiceSoapBinding</con:interface><con:operation>getCurrentVoiceState</con:operation><con:request name="01_getCurrentVoiceState"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://${#Project#arsHost}:${#Project#arsPort}/androidremoting/voice</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:api="http://api.androidremoting.callsgen.inewcs.com/">
   <soapenv:Header/>
   <soapenv:Body>
      <api:getCurrentVoiceState>
         <api:deviceImsi>${#Project#LowLevelOps.Voice.getCurrentVoiceState.input.deviceImsi}</api:deviceImsi>
      </api:getCurrentVoiceState>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="SOAP Fault Assertion"/><con:assertion type="Simple Contains" name="resultCode = OK"><con:configuration><token>&lt;ns2:resultCode>OK&lt;/ns2:resultCode></token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="goto_transfer_VoiceState_on_successfull_step_1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.Assertable.AssertionStatus

if( testRunner.testCase.getTestStepByName("01_getCurrentVoiceState").assertionStatus!=AssertionStatus.FAILED ){
  testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.getCurrentVoiceState.output.resultCode'].value = 'OK'
  testRunner.gotoStepByName("transfer_voiceState")	
}	
</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_failedReason"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>failedReason</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_getCurrentVoiceState</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:getCurrentVoiceStateResponse[1]/ns1:return[1]/ns2:failedReason[1]</con:sourcePath><con:targetType>LowLevelOps.Voice.getCurrentVoiceState.output.resultCode</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="cancel"><con:settings/><con:config><script>
log.error 'LowLevelOps.Voice.getCurrentVoiceState.output.resultCode=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.getCurrentVoiceState.output.resultCode'].value
testRunner.fail( "01_release" )  
	

</script></con:config></con:testStep><con:testStep type="transfer" name="transfer_voiceState"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="false" transferTextContent="true" failOnError="true" ignoreEmpty="false" useXQuery="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="false"><con:name>voiceState</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>01_getCurrentVoiceState</con:sourceStep><con:sourcePath>declare namespace ns2='http://api.androidremoting.callsgen.inewcs.com';
declare namespace ns1='http://api.androidremoting.callsgen.inewcs.com/';
//ns1:getCurrentVoiceStateResponse[1]/ns1:return[1]/ns2:voiceState[1]</con:sourcePath><con:targetType>LowLevelOps.Voice.getCurrentVoiceState.output.voiceState</con:targetType><con:targetStep>#Project#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="log_voiceState"><con:settings/><con:config><script>
log.info 'LowLevelOps.Voice.getCurrentVoiceState.output.voiceState=' + testRunner.testCase.testSuite.project.properties['LowLevelOps.Voice.getCurrentVoiceState.output.voiceState'].value
log.info 'LowLevelOps.Voice.getCurrentVoiceState.output.resultCode=OK'

</script></con:config></con:testStep><con:testStep type="groovy" name="finish"><con:settings/><con:config><script>/****************************************************************** 
 * This is pseudo teststep (without any action) acting as goto lable
 * to regularily FINISH the TC even in case of an error instead of 
 * CANCLING it what would lead to an unwanted exception in the robot
 * testsuite and thus aborting it without further possibilities
 * to react to the error.
 ******************************************************************/
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>arsHost</con:name><con:value>10.2.1.40</con:value></con:property><con:property><con:name>arsPort</con:name><con:value>8080</con:value></con:property><con:property><con:name>Testcases.Call.input.cgDeviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>Testcases.Call.input.cdDeviceImsi</con:name><con:value>232033013972239</con:value></con:property><con:property><con:name>Testcases.Call.input.dialMsisdn</con:name><con:value>+43676844901416</con:value></con:property><con:property><con:name>Testcases.Call.input.callDurationMillis</con:name><con:value>10000</con:value></con:property><con:property><con:name>Testcases.Call.input.releasedByCg</con:name><con:value>true</con:value></con:property><con:property><con:name>Testcases.Call.output.resultCode</con:name><con:value>FINAL_RELEASE_ON_CALLING_DEVICE_FAILED</con:value></con:property><con:property><con:name>Testcases.Call.local.repeatcounter</con:name><con:value>5</con:value></con:property><con:property><con:name>Testcases.CallUnattached.input.cgDeviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>Testcases.CallUnattached.input.dialMsisdn</con:name><con:value>+43676844901416</con:value></con:property><con:property><con:name>Testcases.CallUnattached.input.callDurationMillis</con:name><con:value>10000</con:value></con:property><con:property><con:name>Testcases.CallUnattached.output.resultCode</con:name><con:value>CONNECT_FAILED</con:value></con:property><con:property><con:name>Testcases.CallUnattached.local.repeatcounter</con:name><con:value>20</con:value></con:property><con:property><con:name>Testcases.Ussd.input.deviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>Testcases.Ussd.input.ussdCode</con:name><con:value>##21#</con:value></con:property><con:property><con:name>Testcases.Ussd.input.timeoutSeconds</con:name><con:value>10</con:value></con:property><con:property><con:name>Testcases.Ussd.output.responseText</con:name><con:value>Call forwarding&lt;br/>Erasure was successful.</con:value></con:property><con:property><con:name>Testcases.Ussd.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>Testcases.Sms.input.origDeviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>Testcases.Sms.input.destDeviceImsi</con:name><con:value>232033013972239</con:value></con:property><con:property><con:name>Testcases.Sms.input.destMsisdn</con:name><con:value>+43676844901416</con:value></con:property><con:property><con:name>Testcases.Sms.input.message</con:name><con:value>Hi!
This is a test message #4</con:value></con:property><con:property><con:name>Testcases.Sms.input.ensureDelivery</con:name><con:value>true</con:value></con:property><con:property><con:name>Testcases.Sms.input.sendTimeoutSeconds</con:name><con:value>10</con:value></con:property><con:property><con:name>Testcases.Sms.input.receiveTimeoutSeconds</con:name><con:value>20</con:value></con:property><con:property><con:name>Testcases.Sms.local.lastSmsId</con:name><con:value>14</con:value></con:property><con:property><con:name>Testcases.Sms.local.currentSmsId</con:name><con:value>15</con:value></con:property><con:property><con:name>Testcases.Sms.local.repeatcounter</con:name><con:value>0</con:value></con:property><con:property><con:name>Testcases.Sms.output.receivedMessage</con:name><con:value>Hi!&lt;br>This is a test message #4</con:value></con:property><con:property><con:name>Testcases.Sms.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.input.origDeviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.input.destMsisdn</con:name><con:value>+43676844901416</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.input.message</con:name><con:value>Hi!&lt;br>This is another test message</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.input.ensureDelivery</con:name><con:value>true</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.input.timeoutSeconds</con:name><con:value>20</con:value></con:property><con:property><con:name>Testcases.SmsUnattached.output.resultCode</con:name><con:value>DEVICE_NOT_FOUND</con:value></con:property><con:property><con:name>LowLevelOps.Voice.dial.input.deviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>LowLevelOps.Voice.dial.input.phoneNumber</con:name><con:value>+43676844901416</con:value></con:property><con:property><con:name>LowLevelOps.Voice.dial.output.resultCode</con:name><con:value>OK</con:value></con:property><con:property><con:name>LowLevelOps.Voice.answer.input.deviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>LowLevelOps.Voice.answer.output.resultCode</con:name><con:value>VOICE_STATE_PRECONDITION_VIOLATION</con:value></con:property><con:property><con:name>LowLevelOps.Voice.release.input.deviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>LowLevelOps.Voice.release.output.resultCode</con:name><con:value>VOICE_STATE_PRECONDITION_VIOLATION</con:value></con:property><con:property><con:name>LowLevelOps.Voice.getCurrentVoiceState.input.deviceImsi</con:name><con:value>232033013972240</con:value></con:property><con:property><con:name>LowLevelOps.Voice.getCurrentVoiceState.output.voiceState</con:name><con:value>IDLE</con:value></con:property><con:property><con:name>LowLevelOps.Voice.getCurrentVoiceState.output.resultCode</con:name><con:value>DEVICE_NOT_FOUND</con:value></con:property></con:properties><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>