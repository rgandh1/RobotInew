<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160205 03:37:51.371">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s1-s1" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:37:53.060" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:37:53.063" level="INFO">${date} = Fri Feb  5 03:37:53 CET 2016</msg>
<status status="PASS" endtime="20160205 03:37:53.062" starttime="20160205 03:37:53.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:53.067" level="INFO">Date and time: Fri Feb  5 03:37:53 CET 2016</msg>
<status status="PASS" endtime="20160205 03:37:53.073" starttime="20160205 03:37:53.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:53.078" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:37:53.079" starttime="20160205 03:37:53.075"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:53.140" starttime="20160205 03:37:53.138"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:53.324" starttime="20160205 03:37:53.153"></status>
</kw>
<msg timestamp="20160205 03:37:53.327" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 03:37:53.326" starttime="20160205 03:37:53.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:37:53.341" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:37:53.733" level="INFO">Read output: Last login: Fri Feb  5 00:06:11 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:37:53.734" starttime="20160205 03:37:53.338"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:53.735" starttime="20160205 03:37:53.329"></status>
</kw>
<msg timestamp="20160205 03:37:53.737" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160205 03:37:53.737" starttime="20160205 03:37:53.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:37:53.744" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:37:53.743" starttime="20160205 03:37:53.739"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:37:53.747" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:37:54.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:37:54.218" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:37:54.216" starttime="20160205 03:37:53.745"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.225" starttime="20160205 03:37:54.222"></status>
</kw>
<msg timestamp="20160205 03:37:54.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:37:54.226" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:37:54.225" starttime="20160205 03:37:54.219"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.234" starttime="20160205 03:37:54.232"></status>
</kw>
<msg timestamp="20160205 03:37:54.235" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:37:54.235" starttime="20160205 03:37:54.228"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:37:54.239" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:37:54.239" starttime="20160205 03:37:54.236"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:37:54.243" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:37:54.242" starttime="20160205 03:37:54.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.245" starttime="20160205 03:37:54.244"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.256" starttime="20160205 03:37:54.254"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.262" starttime="20160205 03:37:54.257"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:54.263" starttime="20160205 03:37:54.246"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.269" starttime="20160205 03:37:54.267"></status>
</kw>
<msg timestamp="20160205 03:37:54.270" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:37:54.270" starttime="20160205 03:37:54.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.273" starttime="20160205 03:37:54.271"></status>
</kw>
<msg timestamp="20160205 03:37:54.276" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:37:54.276" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:37:54.275" starttime="20160205 03:37:53.096"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.321" starttime="20160205 03:37:54.319"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:54.368" starttime="20160205 03:37:54.326"></status>
</kw>
<msg timestamp="20160205 03:37:54.369" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 03:37:54.369" starttime="20160205 03:37:54.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:37:54.378" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:37:54.792" level="INFO">Read output: Last login: Fri Feb  5 00:09:17 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:37:54.793" starttime="20160205 03:37:54.375"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:54.794" starttime="20160205 03:37:54.370"></status>
</kw>
<msg timestamp="20160205 03:37:54.796" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160205 03:37:54.795" starttime="20160205 03:37:54.310"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:37:54.801" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:37:54.801" starttime="20160205 03:37:54.797"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:37:54.804" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:37:55.175" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:37:55.177" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:37:55.176" starttime="20160205 03:37:54.802"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.183" starttime="20160205 03:37:55.180"></status>
</kw>
<msg timestamp="20160205 03:37:55.184" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:37:55.185" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:37:55.184" starttime="20160205 03:37:55.178"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.192" starttime="20160205 03:37:55.190"></status>
</kw>
<msg timestamp="20160205 03:37:55.193" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:37:55.193" starttime="20160205 03:37:55.186"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:37:55.196" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:37:55.196" starttime="20160205 03:37:55.194"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:37:55.200" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:37:55.199" starttime="20160205 03:37:55.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.202" starttime="20160205 03:37:55.201"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.213" starttime="20160205 03:37:55.211"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.215" starttime="20160205 03:37:55.214"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:55.219" starttime="20160205 03:37:55.203"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.226" starttime="20160205 03:37:55.224"></status>
</kw>
<msg timestamp="20160205 03:37:55.227" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:37:55.227" starttime="20160205 03:37:55.220"></status>
</kw>
<msg timestamp="20160205 03:37:55.230" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:37:55.230" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:37:55.229" starttime="20160205 03:37:54.289"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.276" starttime="20160205 03:37:55.275"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:55.324" starttime="20160205 03:37:55.282"></status>
</kw>
<msg timestamp="20160205 03:37:55.325" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 03:37:55.325" starttime="20160205 03:37:55.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:37:55.333" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:37:55.788" level="INFO">Read output: Last login: Fri Feb  5 00:06:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:37:55.789" starttime="20160205 03:37:55.331"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:55.790" starttime="20160205 03:37:55.327"></status>
</kw>
<msg timestamp="20160205 03:37:55.792" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160205 03:37:55.791" starttime="20160205 03:37:55.267"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:37:55.798" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:37:55.797" starttime="20160205 03:37:55.793"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:37:55.801" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:37:56.002" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:37:56.004" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:37:56.003" starttime="20160205 03:37:55.799"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.010" starttime="20160205 03:37:56.008"></status>
</kw>
<msg timestamp="20160205 03:37:56.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:37:56.012" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:37:56.011" starttime="20160205 03:37:56.006"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.019" starttime="20160205 03:37:56.017"></status>
</kw>
<msg timestamp="20160205 03:37:56.020" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:37:56.019" starttime="20160205 03:37:56.013"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:37:56.023" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:37:56.023" starttime="20160205 03:37:56.021"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:37:56.026" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:37:56.026" starttime="20160205 03:37:56.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.029" starttime="20160205 03:37:56.027"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.038" starttime="20160205 03:37:56.036"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.040" starttime="20160205 03:37:56.039"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.042" starttime="20160205 03:37:56.030"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.048" starttime="20160205 03:37:56.047"></status>
</kw>
<msg timestamp="20160205 03:37:56.050" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:37:56.049" starttime="20160205 03:37:56.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.052" starttime="20160205 03:37:56.051"></status>
</kw>
<msg timestamp="20160205 03:37:56.055" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:37:56.056" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:37:56.054" starttime="20160205 03:37:55.243"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.097" starttime="20160205 03:37:56.096"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.148" starttime="20160205 03:37:56.104"></status>
</kw>
<msg timestamp="20160205 03:37:56.150" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:37:56.149" starttime="20160205 03:37:56.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.158" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:37:56.602" level="INFO">Read output: Last login: Fri Feb  5 00:06:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:37:56.603" starttime="20160205 03:37:56.156"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.603" starttime="20160205 03:37:56.151"></status>
</kw>
<msg timestamp="20160205 03:37:56.605" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:37:56.605" starttime="20160205 03:37:56.088"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:37:56.611" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:37:56.610" starttime="20160205 03:37:56.606"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:37:56.613" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:37:56.720" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:37:56.721" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:37:56.721" starttime="20160205 03:37:56.612"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.727" starttime="20160205 03:37:56.725"></status>
</kw>
<msg timestamp="20160205 03:37:56.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:37:56.729" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:37:56.728" starttime="20160205 03:37:56.723"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.735" starttime="20160205 03:37:56.734"></status>
</kw>
<msg timestamp="20160205 03:37:56.736" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:37:56.736" starttime="20160205 03:37:56.730"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:37:56.740" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:37:56.739" starttime="20160205 03:37:56.737"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:37:56.743" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:37:56.742" starttime="20160205 03:37:56.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.745" starttime="20160205 03:37:56.744"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.754" starttime="20160205 03:37:56.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.759" starttime="20160205 03:37:56.755"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.759" starttime="20160205 03:37:56.746"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.766" starttime="20160205 03:37:56.764"></status>
</kw>
<msg timestamp="20160205 03:37:56.767" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:37:56.766" starttime="20160205 03:37:56.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.769" starttime="20160205 03:37:56.768"></status>
</kw>
<msg timestamp="20160205 03:37:56.771" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:37:56.772" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:37:56.771" starttime="20160205 03:37:56.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:56.775" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:37:56.776" starttime="20160205 03:37:56.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:56.778" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:37:56.779" starttime="20160205 03:37:56.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:56.782" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:37:56.783" starttime="20160205 03:37:56.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:37:56.786" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:37:56.786" starttime="20160205 03:37:56.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:37:56.789" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:37:56.790" starttime="20160205 03:37:56.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:37:56.792" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:37:56.793" starttime="20160205 03:37:56.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:37:56.796" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:37:56.796" starttime="20160205 03:37:56.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:37:56.799" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:37:56.799" starttime="20160205 03:37:56.797"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.808" starttime="20160205 03:37:56.804"></status>
</kw>
<msg timestamp="20160205 03:37:56.809" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:37:56.809" starttime="20160205 03:37:56.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.812" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:37:56.813" starttime="20160205 03:37:56.810"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.814" starttime="20160205 03:37:53.034"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.824" starttime="20160205 03:37:56.823"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:37:56.827" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:37:56.827" starttime="20160205 03:37:56.825"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.840" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:37:56.840" starttime="20160205 03:37:56.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.843" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:37:56.843" starttime="20160205 03:37:56.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.846" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:37:56.846" starttime="20160205 03:37:56.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.849" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160205 03:37:56.849" starttime="20160205 03:37:56.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.851" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:37:56.852" starttime="20160205 03:37:56.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.854" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:37:56.855" starttime="20160205 03:37:56.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.857" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:37:56.858" starttime="20160205 03:37:56.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.860" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:37:56.861" starttime="20160205 03:37:56.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.866" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:37:56.866" starttime="20160205 03:37:56.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.869" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:37:56.869" starttime="20160205 03:37:56.867"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.891" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:37:56.892" starttime="20160205 03:37:56.877"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.893" starttime="20160205 03:37:56.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.927" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:37:56.928" starttime="20160205 03:37:56.925"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.929" starttime="20160205 03:37:56.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.934" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:37:56.934" starttime="20160205 03:37:56.932"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.935" starttime="20160205 03:37:56.930"></status>
</kw>
<status status="PASS" endtime="20160205 03:37:56.936" starttime="20160205 03:37:56.871"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:37:56.940" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:37:56.940" starttime="20160205 03:37:56.937"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.943" starttime="20160205 03:37:56.941"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.945" starttime="20160205 03:37:56.944"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.948" starttime="20160205 03:37:56.946"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.950" starttime="20160205 03:37:56.949"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.952" starttime="20160205 03:37:56.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.955" starttime="20160205 03:37:56.953"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.957" starttime="20160205 03:37:56.956"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.960" starttime="20160205 03:37:56.958"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.962" starttime="20160205 03:37:56.961"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.965" starttime="20160205 03:37:56.963"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.968" starttime="20160205 03:37:56.966"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:37:56.970" starttime="20160205 03:37:56.968"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:37:56.974" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:38:01.905" level="INFO">03:37:57,148 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/ext] for external libraries
03:37:57,149 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
03:37:58,767 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
03:37:58,784 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [3]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
03:37:58,785 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
03:37:58,786 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
03:37:58,786 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
03:37:58,786 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
03:37:58,786 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
03:37:58,786 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
03:37:58,795 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
03:37:58,801 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
03:37:59,228 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
03:37:59,290 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
03:37:59,479 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:37:59,479 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:37:59,511 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:37:59,518 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:37:59,714 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:37:59,714 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:37:59,714 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:37:59,715 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
03:37:59,802 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
03:38:00,104 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
03:38:00,136 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
03:38:00,138 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:00,139 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:00,140 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:00,275 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:00,276 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:00,283 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:00,283 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:00,284 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:00,284 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
03:38:00,348 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
03:38:00,354 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
03:38:00,402 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
03:38:00,406 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:00,408 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:00,408 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:00,437 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:00,437 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:00,444 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:00,444 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:00,444 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:00,444 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
03:38:00,514 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
03:38:00,525 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
03:38:00,570 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
03:38:00,573 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:00,575 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:00,575 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:38:00,622 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:00,622 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:00,628 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:00,628 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:00,628 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:00,628 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
03:38:00,685 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
03:38:00,691 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
03:38:00,732 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
03:38:00,735 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:00,737 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:00,737 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
03:38:00,753 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:00,753 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:00,765 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:00,765 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:00,765 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:00,766 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
03:38:00,827 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
03:38:00,846 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
03:38:00,883 INFO  [SoapUITestCaseRunner] running step [setBalance]
03:38:00,885 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:00,886 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:00,886 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
03:38:00,927 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:00,927 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:00,932 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:00,932 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:00,933 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:00,933 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
03:38:00,966 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
03:38:00,970 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
03:38:00,992 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
03:38:01,030 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
03:38:01,033 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
03:38:01,035 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,036 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,037 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:38:01,046 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,046 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,056 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,057 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,057 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,057 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
03:38:01,057 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
03:38:01,073 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
03:38:01,074 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
03:38:01,075 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,077 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,077 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:01,149 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,149 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,155 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,155 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,155 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,155 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
03:38:01,156 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
03:38:01,161 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
03:38:01,163 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
03:38:01,165 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,167 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,167 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:01,181 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,181 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,187 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,187 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,187 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,188 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
03:38:01,188 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
03:38:01,198 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
03:38:01,199 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
03:38:01,201 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,203 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,203 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:38:01,259 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,259 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,265 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,265 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,265 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,266 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
03:38:01,266 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
03:38:01,271 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
03:38:01,272 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
03:38:01,274 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,276 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,276 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
03:38:01,298 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,298 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,310 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,310 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,311 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,311 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
03:38:01,311 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
03:38:01,332 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
03:38:01,333 INFO  [SoapUITestCaseRunner] running step [setBalance]
03:38:01,335 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,337 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,337 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
03:38:01,382 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,383 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,394 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,394 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,394 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,394 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
03:38:01,395 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
03:38:01,403 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
03:38:01,404 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
03:38:01,406 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
03:38:01,409 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
03:38:01,411 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,413 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,413 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:38:01,424 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,425 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,441 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,441 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,441 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,441 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
03:38:01,442 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
03:38:01,464 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
03:38:01,465 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
03:38:01,467 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,469 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,469 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:01,571 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,571 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,577 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,577 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,578 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,578 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
03:38:01,578 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
03:38:01,583 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
03:38:01,584 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
03:38:01,586 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,588 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,588 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
03:38:01,603 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,603 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,609 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,609 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,609 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,609 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
03:38:01,610 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
03:38:01,619 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
03:38:01,620 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
03:38:01,622 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,623 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,623 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
03:38:01,678 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,678 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,685 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,686 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,686 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,686 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
03:38:01,687 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
03:38:01,692 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
03:38:01,692 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
03:38:01,701 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,703 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,703 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
03:38:01,718 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,718 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,729 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,729 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,730 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,730 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
03:38:01,730 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
03:38:01,747 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
03:38:01,748 INFO  [SoapUITestCaseRunner] running step [setBalance]
03:38:01,750 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
03:38:01,751 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
03:38:01,752 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
03:38:01,791 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
03:38:01,791 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
03:38:01,801 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
03:38:01,801 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
03:38:01,802 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
03:38:01,802 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
03:38:01,802 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
03:38:01,810 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
03:38:01,811 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
03:38:01,812 INFO  [SoapUITestCaseRunner] running step [finish_successful]
03:38:01,888 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
03:38:01,889 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 3017ms, status: FINISHED
03:38:01,890 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 3017ms</msg>
<status status="PASS" endtime="20160205 03:38:01.924" starttime="20160205 03:37:56.972"></status>
</kw>
<msg timestamp="20160205 03:38:01.931" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:01.932" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:01.928" starttime="20160205 03:37:56.971"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:01.966" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:01.961" starttime="20160205 03:38:01.956"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:01.973" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:01.972" starttime="20160205 03:38:01.968"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:01.981" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:01.980" starttime="20160205 03:38:01.976"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:01.993" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:02.003" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:02.005" starttime="20160205 03:38:01.988"></status>
</kw>
<msg timestamp="20160205 03:38:02.010" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:02.011" level="INFO">${return_log_entry} = 2016-02-05 03:38:01,888 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:02.008" starttime="20160205 03:38:01.983"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.029" starttime="20160205 03:38:02.025"></status>
</kw>
<msg timestamp="20160205 03:38:02.031" level="INFO">${return_log_entry} = 2016-02-05 03:38:01,888 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:02.030" starttime="20160205 03:38:02.014"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.047" starttime="20160205 03:38:02.043"></status>
</kw>
<msg timestamp="20160205 03:38:02.050" level="INFO">${return_log_entry} = 2016-02-05 03:38:01,888 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:02.049" starttime="20160205 03:38:02.034"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.067" starttime="20160205 03:38:02.062"></status>
</kw>
<msg timestamp="20160205 03:38:02.070" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:02.069" starttime="20160205 03:38:02.052"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.091" starttime="20160205 03:38:02.088"></status>
</kw>
<msg timestamp="20160205 03:38:02.094" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:02.093" starttime="20160205 03:38:02.072"></status>
</kw>
<msg timestamp="20160205 03:38:02.098" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:02.096" starttime="20160205 03:38:01.937"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.117" starttime="20160205 03:38:02.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.122" starttime="20160205 03:38:02.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.127" starttime="20160205 03:38:02.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:02.139" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:02.139" starttime="20160205 03:38:02.134"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:02.140" starttime="20160205 03:38:02.132"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:02.141" starttime="20160205 03:38:02.128"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:02.141" starttime="20160205 03:38:02.101"></status>
</kw>
<msg timestamp="20160205 03:38:02.143" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:38:02.143" starttime="20160205 03:37:56.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:38:02.146" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:02.146" starttime="20160205 03:38:02.144"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:38:02.151" level="INFO">${b_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:38:02.151" starttime="20160205 03:38:02.147"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:38:02.156" level="INFO">${b_party_imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160205 03:38:02.155" starttime="20160205 03:38:02.152"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160205 03:38:02.161" level="INFO">${c_party_msisdn} = 642041010002</msg>
<status status="PASS" endtime="20160205 03:38:02.160" starttime="20160205 03:38:02.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:02.163" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:38:02.164" starttime="20160205 03:38:02.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.166" starttime="20160205 03:38:02.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:02.168" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160205 03:38:02.168" starttime="20160205 03:38:02.166"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:02.193" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:38:02.192" starttime="20160205 03:38:02.191"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:02.196" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:38:02.195" starttime="20160205 03:38:02.194"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:38:02.199" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:38:02.198" starttime="20160205 03:38:02.197"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:38:02.201" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:38:02.201" starttime="20160205 03:38:02.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.204" starttime="20160205 03:38:02.202"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:02.208" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:02.208" starttime="20160205 03:38:02.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.210" starttime="20160205 03:38:02.209"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:38:02.213" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:02.214" starttime="20160205 03:38:02.211"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:02.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:02.219" starttime="20160205 03:38:02.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.221" starttime="20160205 03:38:02.220"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:38:02.224" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:02.225" starttime="20160205 03:38:02.222"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:38:02.229" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:02.230" starttime="20160205 03:38:02.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:02.232" starttime="20160205 03:38:02.230"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:38:02.242" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:06.199" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:06.197" starttime="20160205 03:38:02.233"></status>
</kw>
<msg timestamp="20160205 03:38:06.202" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:06.201" starttime="20160205 03:38:02.181"></status>
</kw>
<msg timestamp="20160205 03:38:06.203" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:06.203" starttime="20160205 03:38:02.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:06.206" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:38:06.207" starttime="20160205 03:38:06.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:06.211" starttime="20160205 03:38:06.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.213" starttime="20160205 03:38:06.211"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.230" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:06.230" starttime="20160205 03:38:06.228"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:06.231" starttime="20160205 03:38:06.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.235" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:06.236" starttime="20160205 03:38:06.233"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:06.236" starttime="20160205 03:38:06.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.240" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:06.241" starttime="20160205 03:38:06.239"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:06.242" starttime="20160205 03:38:06.237"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:06.242" starttime="20160205 03:38:06.222"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.245" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:06.246" starttime="20160205 03:38:06.243"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.248" starttime="20160205 03:38:06.246"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.251" starttime="20160205 03:38:06.249"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.253" starttime="20160205 03:38:06.251"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.256" starttime="20160205 03:38:06.254"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.258" starttime="20160205 03:38:06.256"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.260" starttime="20160205 03:38:06.258"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:06.263" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:38:06.626" level="INFO">03:38:06,617 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:38:06,619 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426279
03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:38:06,621 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:38:06,622 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:38:06,623 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:38:06,624 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:38:06.627" starttime="20160205 03:38:06.262"></status>
</kw>
<msg timestamp="20160205 03:38:06.629" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.629" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:06.628" starttime="20160205 03:38:06.261"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.638" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:06.637" starttime="20160205 03:38:06.635"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.640" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.640" starttime="20160205 03:38:06.639"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.643" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.643" starttime="20160205 03:38:06.641"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.648" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.651" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.652" starttime="20160205 03:38:06.646"></status>
</kw>
<msg timestamp="20160205 03:38:06.653" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.653" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,617 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:06.652" starttime="20160205 03:38:06.644"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.660" starttime="20160205 03:38:06.659"></status>
</kw>
<msg timestamp="20160205 03:38:06.662" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,617 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:06.661" starttime="20160205 03:38:06.654"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.668" starttime="20160205 03:38:06.666"></status>
</kw>
<msg timestamp="20160205 03:38:06.669" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,617 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:06.669" starttime="20160205 03:38:06.662"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.676" starttime="20160205 03:38:06.674"></status>
</kw>
<msg timestamp="20160205 03:38:06.677" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:06.677" starttime="20160205 03:38:06.670"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.686" starttime="20160205 03:38:06.685"></status>
</kw>
<msg timestamp="20160205 03:38:06.688" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:06.687" starttime="20160205 03:38:06.678"></status>
</kw>
<msg timestamp="20160205 03:38:06.689" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:06.689" starttime="20160205 03:38:06.631"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.698" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:38:06.697" starttime="20160205 03:38:06.695"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.700" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.700" starttime="20160205 03:38:06.698"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.703" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.703" starttime="20160205 03:38:06.701"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.707" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.711" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.712" starttime="20160205 03:38:06.706"></status>
</kw>
<msg timestamp="20160205 03:38:06.713" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.713" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,619 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:06.712" starttime="20160205 03:38:06.704"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.720" starttime="20160205 03:38:06.718"></status>
</kw>
<msg timestamp="20160205 03:38:06.721" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,619 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:06.721" starttime="20160205 03:38:06.714"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.728" starttime="20160205 03:38:06.726"></status>
</kw>
<msg timestamp="20160205 03:38:06.729" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,619 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:06.728" starttime="20160205 03:38:06.722"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.736" starttime="20160205 03:38:06.734"></status>
</kw>
<msg timestamp="20160205 03:38:06.737" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:06.737" starttime="20160205 03:38:06.730"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.746" starttime="20160205 03:38:06.744"></status>
</kw>
<msg timestamp="20160205 03:38:06.747" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:06.747" starttime="20160205 03:38:06.738"></status>
</kw>
<msg timestamp="20160205 03:38:06.748" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:06.748" starttime="20160205 03:38:06.690"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.757" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:38:06.757" starttime="20160205 03:38:06.755"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.760" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.759" starttime="20160205 03:38:06.758"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.762" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.762" starttime="20160205 03:38:06.761"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.767" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.770" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.771" starttime="20160205 03:38:06.765"></status>
</kw>
<msg timestamp="20160205 03:38:06.772" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.772" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.771" starttime="20160205 03:38:06.763"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.779" starttime="20160205 03:38:06.777"></status>
</kw>
<msg timestamp="20160205 03:38:06.780" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.779" starttime="20160205 03:38:06.773"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.786" starttime="20160205 03:38:06.785"></status>
</kw>
<msg timestamp="20160205 03:38:06.787" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.787" starttime="20160205 03:38:06.781"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.794" starttime="20160205 03:38:06.792"></status>
</kw>
<msg timestamp="20160205 03:38:06.795" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.795" starttime="20160205 03:38:06.788"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.804" starttime="20160205 03:38:06.803"></status>
</kw>
<msg timestamp="20160205 03:38:06.805" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.805" starttime="20160205 03:38:06.796"></status>
</kw>
<msg timestamp="20160205 03:38:06.807" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:06.806" starttime="20160205 03:38:06.750"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.815" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:38:06.815" starttime="20160205 03:38:06.813"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.818" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.817" starttime="20160205 03:38:06.816"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.820" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.820" starttime="20160205 03:38:06.819"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.825" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.828" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.829" starttime="20160205 03:38:06.823"></status>
</kw>
<msg timestamp="20160205 03:38:06.830" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.830" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.829" starttime="20160205 03:38:06.821"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.836" starttime="20160205 03:38:06.835"></status>
</kw>
<msg timestamp="20160205 03:38:06.837" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.837" starttime="20160205 03:38:06.831"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.844" starttime="20160205 03:38:06.842"></status>
</kw>
<msg timestamp="20160205 03:38:06.845" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,620 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.845" starttime="20160205 03:38:06.838"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.852" starttime="20160205 03:38:06.850"></status>
</kw>
<msg timestamp="20160205 03:38:06.853" level="INFO">${resultCode} = 2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.853" starttime="20160205 03:38:06.846"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.862" starttime="20160205 03:38:06.860"></status>
</kw>
<msg timestamp="20160205 03:38:06.863" level="INFO">${resultCode} = 2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.862" starttime="20160205 03:38:06.854"></status>
</kw>
<msg timestamp="20160205 03:38:06.864" level="INFO">${id} = 2426279</msg>
<status status="PASS" endtime="20160205 03:38:06.864" starttime="20160205 03:38:06.808"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.873" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:38:06.872" starttime="20160205 03:38:06.870"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.875" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.875" starttime="20160205 03:38:06.874"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.878" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.878" starttime="20160205 03:38:06.876"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.883" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.886" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.887" starttime="20160205 03:38:06.881"></status>
</kw>
<msg timestamp="20160205 03:38:06.888" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.889" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,621 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.888" starttime="20160205 03:38:06.879"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.895" starttime="20160205 03:38:06.894"></status>
</kw>
<msg timestamp="20160205 03:38:06.896" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,621 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.896" starttime="20160205 03:38:06.889"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.903" starttime="20160205 03:38:06.902"></status>
</kw>
<msg timestamp="20160205 03:38:06.904" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,621 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.904" starttime="20160205 03:38:06.897"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.911" starttime="20160205 03:38:06.910"></status>
</kw>
<msg timestamp="20160205 03:38:06.913" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.912" starttime="20160205 03:38:06.905"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.922" starttime="20160205 03:38:06.920"></status>
</kw>
<msg timestamp="20160205 03:38:06.923" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.923" starttime="20160205 03:38:06.913"></status>
</kw>
<msg timestamp="20160205 03:38:06.924" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:06.924" starttime="20160205 03:38:06.866"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.933" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:38:06.932" starttime="20160205 03:38:06.930"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.936" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.935" starttime="20160205 03:38:06.934"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.938" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.938" starttime="20160205 03:38:06.936"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.943" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:06.946" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:06.947" starttime="20160205 03:38:06.941"></status>
</kw>
<msg timestamp="20160205 03:38:06.948" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:06.948" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,622 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:06.947" starttime="20160205 03:38:06.939"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.955" starttime="20160205 03:38:06.953"></status>
</kw>
<msg timestamp="20160205 03:38:06.956" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,622 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:06.956" starttime="20160205 03:38:06.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.962" starttime="20160205 03:38:06.961"></status>
</kw>
<msg timestamp="20160205 03:38:06.963" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,622 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:06.963" starttime="20160205 03:38:06.957"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.971" starttime="20160205 03:38:06.969"></status>
</kw>
<msg timestamp="20160205 03:38:06.972" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:06.971" starttime="20160205 03:38:06.964"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:06.981" starttime="20160205 03:38:06.979"></status>
</kw>
<msg timestamp="20160205 03:38:06.982" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:06.981" starttime="20160205 03:38:06.973"></status>
</kw>
<msg timestamp="20160205 03:38:06.983" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:06.983" starttime="20160205 03:38:06.926"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:06.991" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:38:06.991" starttime="20160205 03:38:06.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.994" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:06.994" starttime="20160205 03:38:06.992"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:06.997" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:06.996" starttime="20160205 03:38:06.995"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.001" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.005" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.005" starttime="20160205 03:38:06.999"></status>
</kw>
<msg timestamp="20160205 03:38:07.007" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.008" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,623 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.006" starttime="20160205 03:38:06.998"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.015" starttime="20160205 03:38:07.013"></status>
</kw>
<msg timestamp="20160205 03:38:07.016" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,623 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.015" starttime="20160205 03:38:07.009"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.022" starttime="20160205 03:38:07.021"></status>
</kw>
<msg timestamp="20160205 03:38:07.023" level="INFO">${return_log_entry} = 2016-02-05 03:38:06,623 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.023" starttime="20160205 03:38:07.017"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.030" starttime="20160205 03:38:07.028"></status>
</kw>
<msg timestamp="20160205 03:38:07.031" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.031" starttime="20160205 03:38:07.024"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.040" starttime="20160205 03:38:07.039"></status>
</kw>
<msg timestamp="20160205 03:38:07.041" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.041" starttime="20160205 03:38:07.032"></status>
</kw>
<msg timestamp="20160205 03:38:07.043" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.042" starttime="20160205 03:38:06.984"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.051" starttime="20160205 03:38:07.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.053" starttime="20160205 03:38:07.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.055" starttime="20160205 03:38:07.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:07.066" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:07.066" starttime="20160205 03:38:07.061"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.067" starttime="20160205 03:38:07.060"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.068" starttime="20160205 03:38:07.056"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.068" starttime="20160205 03:38:07.045"></status>
</kw>
<msg timestamp="20160205 03:38:07.072" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:38:07.072" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:38:07.073" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:38:07.073" level="INFO">${id} = 2426279</msg>
<msg timestamp="20160205 03:38:07.073" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:38:07.074" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:38:07.074" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:07.071" starttime="20160205 03:38:06.215"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.092" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:07.092" starttime="20160205 03:38:07.088"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.093" starttime="20160205 03:38:07.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.097" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:07.098" starttime="20160205 03:38:07.095"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.098" starttime="20160205 03:38:07.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.102" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:07.103" starttime="20160205 03:38:07.101"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.103" starttime="20160205 03:38:07.099"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.104" starttime="20160205 03:38:07.083"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.107" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:07.107" starttime="20160205 03:38:07.105"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.110" starttime="20160205 03:38:07.108"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.113" starttime="20160205 03:38:07.111"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.115" starttime="20160205 03:38:07.113"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.117" starttime="20160205 03:38:07.116"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.119" starttime="20160205 03:38:07.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.122" starttime="20160205 03:38:07.120"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:07.125" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426279']</msg>
<msg timestamp="20160205 03:38:07.336" level="INFO">03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426280
03:38:07,333 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:07.337" starttime="20160205 03:38:07.124"></status>
</kw>
<msg timestamp="20160205 03:38:07.338" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.339" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:07.338" starttime="20160205 03:38:07.122"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:07.350" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:07.349" starttime="20160205 03:38:07.347"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.354" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:07.353" starttime="20160205 03:38:07.351"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.357" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:07.357" starttime="20160205 03:38:07.355"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.363" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.367" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.368" starttime="20160205 03:38:07.360"></status>
</kw>
<msg timestamp="20160205 03:38:07.369" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.370" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:07.369" starttime="20160205 03:38:07.358"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.379" starttime="20160205 03:38:07.377"></status>
</kw>
<msg timestamp="20160205 03:38:07.380" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:07.380" starttime="20160205 03:38:07.371"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.388" starttime="20160205 03:38:07.386"></status>
</kw>
<msg timestamp="20160205 03:38:07.389" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:07.389" starttime="20160205 03:38:07.381"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.398" starttime="20160205 03:38:07.395"></status>
</kw>
<msg timestamp="20160205 03:38:07.399" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:07.398" starttime="20160205 03:38:07.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.410" starttime="20160205 03:38:07.408"></status>
</kw>
<msg timestamp="20160205 03:38:07.411" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:07.410" starttime="20160205 03:38:07.400"></status>
</kw>
<msg timestamp="20160205 03:38:07.413" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:07.412" starttime="20160205 03:38:07.341"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:07.422" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:38:07.422" starttime="20160205 03:38:07.420"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.426" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:07.425" starttime="20160205 03:38:07.423"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.429" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:07.428" starttime="20160205 03:38:07.427"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.434" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.438" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.438" starttime="20160205 03:38:07.432"></status>
</kw>
<msg timestamp="20160205 03:38:07.440" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.440" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.439" starttime="20160205 03:38:07.430"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.448" starttime="20160205 03:38:07.446"></status>
</kw>
<msg timestamp="20160205 03:38:07.449" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.449" starttime="20160205 03:38:07.441"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.457" starttime="20160205 03:38:07.455"></status>
</kw>
<msg timestamp="20160205 03:38:07.458" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,332 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.458" starttime="20160205 03:38:07.450"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.466" starttime="20160205 03:38:07.464"></status>
</kw>
<msg timestamp="20160205 03:38:07.468" level="INFO">${resultCode} = 2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.467" starttime="20160205 03:38:07.459"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.478" starttime="20160205 03:38:07.476"></status>
</kw>
<msg timestamp="20160205 03:38:07.479" level="INFO">${resultCode} = 2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.479" starttime="20160205 03:38:07.469"></status>
</kw>
<msg timestamp="20160205 03:38:07.481" level="INFO">${accountId} = 2426280</msg>
<status status="PASS" endtime="20160205 03:38:07.481" starttime="20160205 03:38:07.414"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:07.491" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:38:07.491" starttime="20160205 03:38:07.489"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.495" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:07.494" starttime="20160205 03:38:07.492"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.566" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:07.565" starttime="20160205 03:38:07.561"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.577" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.586" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.587" starttime="20160205 03:38:07.573"></status>
</kw>
<msg timestamp="20160205 03:38:07.589" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.590" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,333 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.588" starttime="20160205 03:38:07.568"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.607" starttime="20160205 03:38:07.603"></status>
</kw>
<msg timestamp="20160205 03:38:07.609" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,333 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.608" starttime="20160205 03:38:07.592"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.623" starttime="20160205 03:38:07.620"></status>
</kw>
<msg timestamp="20160205 03:38:07.625" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,333 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.624" starttime="20160205 03:38:07.611"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.640" starttime="20160205 03:38:07.636"></status>
</kw>
<msg timestamp="20160205 03:38:07.642" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.641" starttime="20160205 03:38:07.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.660" starttime="20160205 03:38:07.657"></status>
</kw>
<msg timestamp="20160205 03:38:07.663" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.662" starttime="20160205 03:38:07.644"></status>
</kw>
<msg timestamp="20160205 03:38:07.666" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.665" starttime="20160205 03:38:07.483"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:07.683" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:38:07.682" starttime="20160205 03:38:07.678"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.689" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:07.688" starttime="20160205 03:38:07.685"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.694" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:07.693" starttime="20160205 03:38:07.690"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.703" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.709" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.710" starttime="20160205 03:38:07.699"></status>
</kw>
<msg timestamp="20160205 03:38:07.713" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.714" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.712" starttime="20160205 03:38:07.696"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.728" starttime="20160205 03:38:07.724"></status>
</kw>
<msg timestamp="20160205 03:38:07.730" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.729" starttime="20160205 03:38:07.716"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.744" starttime="20160205 03:38:07.740"></status>
</kw>
<msg timestamp="20160205 03:38:07.746" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.745" starttime="20160205 03:38:07.732"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.756" starttime="20160205 03:38:07.754"></status>
</kw>
<msg timestamp="20160205 03:38:07.757" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.756" starttime="20160205 03:38:07.748"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.765" starttime="20160205 03:38:07.764"></status>
</kw>
<msg timestamp="20160205 03:38:07.766" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.766" starttime="20160205 03:38:07.758"></status>
</kw>
<msg timestamp="20160205 03:38:07.768" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:07.767" starttime="20160205 03:38:07.668"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:07.776" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:38:07.776" starttime="20160205 03:38:07.774"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.779" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:07.778" starttime="20160205 03:38:07.777"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.781" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:07.781" starttime="20160205 03:38:07.779"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:07.785" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:07.788" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:07.789" starttime="20160205 03:38:07.783"></status>
</kw>
<msg timestamp="20160205 03:38:07.790" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:07.790" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:07.789" starttime="20160205 03:38:07.782"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.796" starttime="20160205 03:38:07.795"></status>
</kw>
<msg timestamp="20160205 03:38:07.797" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:07.797" starttime="20160205 03:38:07.791"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.803" starttime="20160205 03:38:07.802"></status>
</kw>
<msg timestamp="20160205 03:38:07.804" level="INFO">${return_log_entry} = 2016-02-05 03:38:07,334 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:07.804" starttime="20160205 03:38:07.798"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.810" starttime="20160205 03:38:07.809"></status>
</kw>
<msg timestamp="20160205 03:38:07.811" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:07.811" starttime="20160205 03:38:07.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.820" starttime="20160205 03:38:07.818"></status>
</kw>
<msg timestamp="20160205 03:38:07.821" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:07.820" starttime="20160205 03:38:07.812"></status>
</kw>
<msg timestamp="20160205 03:38:07.822" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:07.822" starttime="20160205 03:38:07.769"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.828" starttime="20160205 03:38:07.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.830" starttime="20160205 03:38:07.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.832" starttime="20160205 03:38:07.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:07.842" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:07.843" starttime="20160205 03:38:07.838"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.843" starttime="20160205 03:38:07.837"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.844" starttime="20160205 03:38:07.833"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:07.845" starttime="20160205 03:38:07.823"></status>
</kw>
<msg timestamp="20160205 03:38:07.847" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:38:07.847" level="INFO">${accId} = 2426280</msg>
<msg timestamp="20160205 03:38:07.847" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:38:07.848" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:38:07.848" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:38:07.846" starttime="20160205 03:38:07.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.850" starttime="20160205 03:38:07.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:07.852" starttime="20160205 03:38:07.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:07.854" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:38:07.855" starttime="20160205 03:38:07.853"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:38:07.856" starttime="20160205 03:37:56.815"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:07.862" starttime="20160205 03:37:51.734"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:07.874" starttime="20160205 03:37:51.713"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:07.885" starttime="20160205 03:37:51.693"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s2" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s2-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s2-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s2-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:38:08.124" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:08.127" level="INFO">${date} = Fri Feb  5 03:38:08 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:08.126" starttime="20160205 03:38:08.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:08.129" level="INFO">Date and time: Fri Feb  5 03:38:08 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:08.130" starttime="20160205 03:38:08.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:08.132" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:38:08.133" starttime="20160205 03:38:08.130"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.165" starttime="20160205 03:38:08.164"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.213" starttime="20160205 03:38:08.170"></status>
</kw>
<msg timestamp="20160205 03:38:08.214" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:38:08.214" starttime="20160205 03:38:08.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:08.221" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:08.634" level="INFO">Read output: Last login: Fri Feb  5 02:37:53 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:08.635" starttime="20160205 03:38:08.219"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:08.636" starttime="20160205 03:38:08.215"></status>
</kw>
<msg timestamp="20160205 03:38:08.637" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:38:08.637" starttime="20160205 03:38:08.159"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:08.642" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:08.642" starttime="20160205 03:38:08.638"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:08.644" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:38:08.908" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:08.909" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:08.909" starttime="20160205 03:38:08.643"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.914" starttime="20160205 03:38:08.912"></status>
</kw>
<msg timestamp="20160205 03:38:08.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:08.915" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:08.914" starttime="20160205 03:38:08.910"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.921" starttime="20160205 03:38:08.920"></status>
</kw>
<msg timestamp="20160205 03:38:08.922" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:08.921" starttime="20160205 03:38:08.916"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:38:08.924" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:08.924" starttime="20160205 03:38:08.923"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:08.927" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:08.926" starttime="20160205 03:38:08.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.929" starttime="20160205 03:38:08.928"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.935" starttime="20160205 03:38:08.933"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.939" starttime="20160205 03:38:08.936"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:08.941" starttime="20160205 03:38:08.930"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.956" starttime="20160205 03:38:08.952"></status>
</kw>
<msg timestamp="20160205 03:38:08.958" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:08.957" starttime="20160205 03:38:08.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:08.962" starttime="20160205 03:38:08.959"></status>
</kw>
<msg timestamp="20160205 03:38:08.965" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:38:08.966" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:08.964" starttime="20160205 03:38:08.143"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.034" starttime="20160205 03:38:09.031"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.088" starttime="20160205 03:38:09.044"></status>
</kw>
<msg timestamp="20160205 03:38:09.089" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:38:09.088" starttime="20160205 03:38:09.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:09.096" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:09.519" level="INFO">Read output: Last login: Fri Feb  5 02:37:54 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:09.522" starttime="20160205 03:38:09.094"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:09.523" starttime="20160205 03:38:09.090"></status>
</kw>
<msg timestamp="20160205 03:38:09.526" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:38:09.525" starttime="20160205 03:38:09.020"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:09.536" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:09.535" starttime="20160205 03:38:09.527"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:09.540" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:38:09.915" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:09.917" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:09.916" starttime="20160205 03:38:09.538"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.921" starttime="20160205 03:38:09.919"></status>
</kw>
<msg timestamp="20160205 03:38:09.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:09.922" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:09.922" starttime="20160205 03:38:09.918"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.928" starttime="20160205 03:38:09.927"></status>
</kw>
<msg timestamp="20160205 03:38:09.929" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:09.929" starttime="20160205 03:38:09.923"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:38:09.931" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:09.931" starttime="20160205 03:38:09.930"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:09.934" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:09.934" starttime="20160205 03:38:09.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.936" starttime="20160205 03:38:09.935"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.943" starttime="20160205 03:38:09.941"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.945" starttime="20160205 03:38:09.944"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:09.946" starttime="20160205 03:38:09.937"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:09.952" starttime="20160205 03:38:09.951"></status>
</kw>
<msg timestamp="20160205 03:38:09.953" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:09.953" starttime="20160205 03:38:09.947"></status>
</kw>
<msg timestamp="20160205 03:38:09.960" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:38:09.961" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:09.958" starttime="20160205 03:38:08.987"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.036" starttime="20160205 03:38:10.033"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.101" starttime="20160205 03:38:10.046"></status>
</kw>
<msg timestamp="20160205 03:38:10.103" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:38:10.102" starttime="20160205 03:38:10.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:10.118" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:10.528" level="INFO">Read output: Last login: Fri Feb  5 02:37:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:10.529" starttime="20160205 03:38:10.114"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:10.529" starttime="20160205 03:38:10.105"></status>
</kw>
<msg timestamp="20160205 03:38:10.531" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:38:10.530" starttime="20160205 03:38:10.021"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:10.536" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:10.536" starttime="20160205 03:38:10.532"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:10.538" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:38:10.717" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:10.720" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:10.719" starttime="20160205 03:38:10.537"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.729" starttime="20160205 03:38:10.725"></status>
</kw>
<msg timestamp="20160205 03:38:10.732" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:10.732" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:10.731" starttime="20160205 03:38:10.722"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.745" starttime="20160205 03:38:10.742"></status>
</kw>
<msg timestamp="20160205 03:38:10.747" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:10.746" starttime="20160205 03:38:10.734"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:38:10.753" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:10.751" starttime="20160205 03:38:10.749"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:10.758" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:10.757" starttime="20160205 03:38:10.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.762" starttime="20160205 03:38:10.760"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.776" starttime="20160205 03:38:10.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.780" starttime="20160205 03:38:10.778"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:10.783" starttime="20160205 03:38:10.764"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.795" starttime="20160205 03:38:10.792"></status>
</kw>
<msg timestamp="20160205 03:38:10.797" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:10.796" starttime="20160205 03:38:10.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.801" starttime="20160205 03:38:10.798"></status>
</kw>
<msg timestamp="20160205 03:38:10.805" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:38:10.806" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:10.803" starttime="20160205 03:38:09.985"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.875" starttime="20160205 03:38:10.873"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:10.933" starttime="20160205 03:38:10.881"></status>
</kw>
<msg timestamp="20160205 03:38:10.935" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:38:10.934" starttime="20160205 03:38:10.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:10.950" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:11.338" level="INFO">Read output: Last login: Fri Feb  5 02:37:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:11.340" starttime="20160205 03:38:10.946"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.343" starttime="20160205 03:38:10.937"></status>
</kw>
<msg timestamp="20160205 03:38:11.347" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:38:11.346" starttime="20160205 03:38:10.861"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:11.357" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:11.357" starttime="20160205 03:38:11.349"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:11.362" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:38:11.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:11.460" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:38:11.459" starttime="20160205 03:38:11.359"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.470" starttime="20160205 03:38:11.466"></status>
</kw>
<msg timestamp="20160205 03:38:11.472" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:11.473" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:11.471" starttime="20160205 03:38:11.462"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.485" starttime="20160205 03:38:11.482"></status>
</kw>
<msg timestamp="20160205 03:38:11.487" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:11.486" starttime="20160205 03:38:11.474"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:38:11.492" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:38:11.491" starttime="20160205 03:38:11.488"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:11.497" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:11.497" starttime="20160205 03:38:11.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.502" starttime="20160205 03:38:11.499"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.516" starttime="20160205 03:38:11.513"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.522" starttime="20160205 03:38:11.517"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.524" starttime="20160205 03:38:11.504"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.535" starttime="20160205 03:38:11.533"></status>
</kw>
<msg timestamp="20160205 03:38:11.538" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:11.537" starttime="20160205 03:38:11.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.542" starttime="20160205 03:38:11.540"></status>
</kw>
<msg timestamp="20160205 03:38:11.546" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:38:11.547" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:11.545" starttime="20160205 03:38:10.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:11.552" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:11.554" starttime="20160205 03:38:11.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:11.559" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:11.560" starttime="20160205 03:38:11.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:11.566" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:11.567" starttime="20160205 03:38:11.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:11.573" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:11.574" starttime="20160205 03:38:11.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:38:11.579" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:11.580" starttime="20160205 03:38:11.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:38:11.585" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:11.586" starttime="20160205 03:38:11.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:38:11.590" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:11.591" starttime="20160205 03:38:11.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:38:11.596" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:11.597" starttime="20160205 03:38:11.593"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.613" starttime="20160205 03:38:11.606"></status>
</kw>
<msg timestamp="20160205 03:38:11.615" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:38:11.614" starttime="20160205 03:38:11.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.621" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:38:11.622" starttime="20160205 03:38:11.617"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.623" starttime="20160205 03:38:08.114"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-s1-t1" name="Run MOC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.641" starttime="20160205 03:38:11.639"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:38:11.646" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:11.645" starttime="20160205 03:38:11.643"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.666" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:38:11.667" starttime="20160205 03:38:11.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.671" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:38:11.672" starttime="20160205 03:38:11.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.676" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:38:11.677" starttime="20160205 03:38:11.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.681" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:38:11.682" starttime="20160205 03:38:11.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.686" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:11.687" starttime="20160205 03:38:11.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.691" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:38:11.692" starttime="20160205 03:38:11.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.696" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:11.697" starttime="20160205 03:38:11.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.701" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:38:11.702" starttime="20160205 03:38:11.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.706" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:11.707" starttime="20160205 03:38:11.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.711" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:11.712" starttime="20160205 03:38:11.709"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.732" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:11.733" starttime="20160205 03:38:11.727"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.734" starttime="20160205 03:38:11.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.742" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:11.743" starttime="20160205 03:38:11.738"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.744" starttime="20160205 03:38:11.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.753" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:11.753" starttime="20160205 03:38:11.751"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.754" starttime="20160205 03:38:11.748"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:11.755" starttime="20160205 03:38:11.716"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:11.757" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:11.758" starttime="20160205 03:38:11.755"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.760" starttime="20160205 03:38:11.758"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.762" starttime="20160205 03:38:11.760"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.764" starttime="20160205 03:38:11.762"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.767" starttime="20160205 03:38:11.764"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.768" starttime="20160205 03:38:11.767"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.770" starttime="20160205 03:38:11.769"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.772" starttime="20160205 03:38:11.771"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.774" starttime="20160205 03:38:11.773"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.776" starttime="20160205 03:38:11.775"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.778" starttime="20160205 03:38:11.777"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.780" starttime="20160205 03:38:11.779"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:11.782" starttime="20160205 03:38:11.781"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:11.785" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:38:12.888" level="INFO">03:38:12,886 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:12.889" starttime="20160205 03:38:11.784"></status>
</kw>
<msg timestamp="20160205 03:38:12.891" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:12.892" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:12.890" starttime="20160205 03:38:11.783"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:12.899" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:12.899" starttime="20160205 03:38:12.897"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:12.902" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:12.901" starttime="20160205 03:38:12.900"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:12.904" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:12.903" starttime="20160205 03:38:12.902"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:12.907" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:12.908" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:12.908" starttime="20160205 03:38:12.906"></status>
</kw>
<msg timestamp="20160205 03:38:12.909" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:12.910" level="INFO">${return_log_entry} = 2016-02-05 03:38:12,886 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:12.909" starttime="20160205 03:38:12.905"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.915" starttime="20160205 03:38:12.914"></status>
</kw>
<msg timestamp="20160205 03:38:12.916" level="INFO">${return_log_entry} = 2016-02-05 03:38:12,886 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:12.916" starttime="20160205 03:38:12.910"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.922" starttime="20160205 03:38:12.920"></status>
</kw>
<msg timestamp="20160205 03:38:12.923" level="INFO">${return_log_entry} = 2016-02-05 03:38:12,886 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:12.922" starttime="20160205 03:38:12.917"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.928" starttime="20160205 03:38:12.927"></status>
</kw>
<msg timestamp="20160205 03:38:12.929" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:12.928" starttime="20160205 03:38:12.923"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.936" starttime="20160205 03:38:12.935"></status>
</kw>
<msg timestamp="20160205 03:38:12.937" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:12.936" starttime="20160205 03:38:12.929"></status>
</kw>
<msg timestamp="20160205 03:38:12.938" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:12.937" starttime="20160205 03:38:12.893"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.943" starttime="20160205 03:38:12.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.945" starttime="20160205 03:38:12.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.946" starttime="20160205 03:38:12.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:12.953" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:12.954" starttime="20160205 03:38:12.951"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:12.954" starttime="20160205 03:38:12.950"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:12.955" starttime="20160205 03:38:12.947"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:12.955" starttime="20160205 03:38:12.939"></status>
</kw>
<msg timestamp="20160205 03:38:12.957" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:38:12.956" starttime="20160205 03:38:11.650"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:38:12.959" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:12.959" starttime="20160205 03:38:12.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:12.960" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:38:12.961" starttime="20160205 03:38:12.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.963" starttime="20160205 03:38:12.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:12.964" level="INFO">Running the MOC abandon call...</msg>
<status status="PASS" endtime="20160205 03:38:12.965" starttime="20160205 03:38:12.963"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Abandon">
<doc>Runs an abandoned MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-abandon</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:12.982" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:38:12.981" starttime="20160205 03:38:12.980"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:12.984" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:38:12.984" starttime="20160205 03:38:12.982"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:38:12.986" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:38:12.986" starttime="20160205 03:38:12.985"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:38:12.988" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs</msg>
<status status="PASS" endtime="20160205 03:38:12.988" starttime="20160205 03:38:12.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.990" starttime="20160205 03:38:12.989"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:12.993" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:12.994" starttime="20160205 03:38:12.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:12.995" starttime="20160205 03:38:12.994"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:38:12.997" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:12.998" starttime="20160205 03:38:12.996"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:13.001" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:13.002" starttime="20160205 03:38:12.999"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:13.004" starttime="20160205 03:38:13.003"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:38:13.006" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:13.007" starttime="20160205 03:38:13.004"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:38:13.010" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:13.010" starttime="20160205 03:38:13.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:13.012" starttime="20160205 03:38:13.011"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:38:13.021" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:36.212" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:36.208" starttime="20160205 03:38:13.013"></status>
</kw>
<msg timestamp="20160205 03:38:36.215" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:36.215" starttime="20160205 03:38:12.974"></status>
</kw>
<msg timestamp="20160205 03:38:36.217" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:36.216" starttime="20160205 03:38:12.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:36.219" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:38:36.220" starttime="20160205 03:38:36.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:36.222" starttime="20160205 03:38:36.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.224" starttime="20160205 03:38:36.223"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.238" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.238" starttime="20160205 03:38:36.235"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.239" starttime="20160205 03:38:36.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.242" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.242" starttime="20160205 03:38:36.240"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.243" starttime="20160205 03:38:36.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.246" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.246" starttime="20160205 03:38:36.244"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.247" starttime="20160205 03:38:36.243"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.247" starttime="20160205 03:38:36.231"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.249" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:36.250" starttime="20160205 03:38:36.248"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.251" starttime="20160205 03:38:36.250"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.253" starttime="20160205 03:38:36.252"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.255" starttime="20160205 03:38:36.254"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.257" starttime="20160205 03:38:36.256"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.258" starttime="20160205 03:38:36.257"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.260" starttime="20160205 03:38:36.259"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:36.263" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:38:36.515" level="INFO">03:38:36,509 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426285
03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:38:36,512 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:38:36,513 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:38:36,513 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:38:36.515" starttime="20160205 03:38:36.262"></status>
</kw>
<msg timestamp="20160205 03:38:36.516" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.517" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:36.516" starttime="20160205 03:38:36.261"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.524" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:36.523" starttime="20160205 03:38:36.522"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.526" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.525" starttime="20160205 03:38:36.524"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.528" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.527" starttime="20160205 03:38:36.526"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.531" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.532" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.532" starttime="20160205 03:38:36.529"></status>
</kw>
<msg timestamp="20160205 03:38:36.533" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.533" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,509 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:36.533" starttime="20160205 03:38:36.528"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.538" starttime="20160205 03:38:36.537"></status>
</kw>
<msg timestamp="20160205 03:38:36.539" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,509 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:36.539" starttime="20160205 03:38:36.534"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.544" starttime="20160205 03:38:36.543"></status>
</kw>
<msg timestamp="20160205 03:38:36.545" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,509 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:36.545" starttime="20160205 03:38:36.540"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.550" starttime="20160205 03:38:36.549"></status>
</kw>
<msg timestamp="20160205 03:38:36.551" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:36.551" starttime="20160205 03:38:36.546"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.558" starttime="20160205 03:38:36.557"></status>
</kw>
<msg timestamp="20160205 03:38:36.559" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:36.559" starttime="20160205 03:38:36.552"></status>
</kw>
<msg timestamp="20160205 03:38:36.560" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:36.560" starttime="20160205 03:38:36.518"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.567" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:38:36.566" starttime="20160205 03:38:36.565"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.569" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.569" starttime="20160205 03:38:36.567"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.571" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.571" starttime="20160205 03:38:36.570"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.574" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.575" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.576" starttime="20160205 03:38:36.573"></status>
</kw>
<msg timestamp="20160205 03:38:36.577" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.577" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:36.576" starttime="20160205 03:38:36.572"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.582" starttime="20160205 03:38:36.581"></status>
</kw>
<msg timestamp="20160205 03:38:36.583" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:36.582" starttime="20160205 03:38:36.578"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.588" starttime="20160205 03:38:36.587"></status>
</kw>
<msg timestamp="20160205 03:38:36.589" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:36.588" starttime="20160205 03:38:36.584"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.594" starttime="20160205 03:38:36.593"></status>
</kw>
<msg timestamp="20160205 03:38:36.595" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:36.594" starttime="20160205 03:38:36.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.602" starttime="20160205 03:38:36.600"></status>
</kw>
<msg timestamp="20160205 03:38:36.603" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:36.602" starttime="20160205 03:38:36.595"></status>
</kw>
<msg timestamp="20160205 03:38:36.604" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:36.603" starttime="20160205 03:38:36.561"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.610" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:38:36.610" starttime="20160205 03:38:36.609"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.613" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.612" starttime="20160205 03:38:36.611"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.615" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.614" starttime="20160205 03:38:36.613"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.618" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.619" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.619" starttime="20160205 03:38:36.617"></status>
</kw>
<msg timestamp="20160205 03:38:36.620" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.620" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.620" starttime="20160205 03:38:36.615"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.626" starttime="20160205 03:38:36.625"></status>
</kw>
<msg timestamp="20160205 03:38:36.626" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.626" starttime="20160205 03:38:36.621"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.632" starttime="20160205 03:38:36.631"></status>
</kw>
<msg timestamp="20160205 03:38:36.633" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.632" starttime="20160205 03:38:36.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.638" starttime="20160205 03:38:36.636"></status>
</kw>
<msg timestamp="20160205 03:38:36.639" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.638" starttime="20160205 03:38:36.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.645" starttime="20160205 03:38:36.644"></status>
</kw>
<msg timestamp="20160205 03:38:36.646" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.646" starttime="20160205 03:38:36.639"></status>
</kw>
<msg timestamp="20160205 03:38:36.647" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:36.647" starttime="20160205 03:38:36.605"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.655" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:38:36.654" starttime="20160205 03:38:36.653"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.657" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.656" starttime="20160205 03:38:36.655"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.659" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.658" starttime="20160205 03:38:36.657"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.662" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.663" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.663" starttime="20160205 03:38:36.661"></status>
</kw>
<msg timestamp="20160205 03:38:36.664" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.664" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.664" starttime="20160205 03:38:36.659"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.669" starttime="20160205 03:38:36.668"></status>
</kw>
<msg timestamp="20160205 03:38:36.670" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.670" starttime="20160205 03:38:36.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.676" starttime="20160205 03:38:36.675"></status>
</kw>
<msg timestamp="20160205 03:38:36.677" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,510 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.676" starttime="20160205 03:38:36.671"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.682" starttime="20160205 03:38:36.681"></status>
</kw>
<msg timestamp="20160205 03:38:36.683" level="INFO">${resultCode} = 2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.683" starttime="20160205 03:38:36.678"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.690" starttime="20160205 03:38:36.689"></status>
</kw>
<msg timestamp="20160205 03:38:36.691" level="INFO">${resultCode} = 2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.691" starttime="20160205 03:38:36.684"></status>
</kw>
<msg timestamp="20160205 03:38:36.692" level="INFO">${id} = 2426285</msg>
<status status="PASS" endtime="20160205 03:38:36.692" starttime="20160205 03:38:36.649"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.699" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:38:36.699" starttime="20160205 03:38:36.697"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.701" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.701" starttime="20160205 03:38:36.700"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.703" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.703" starttime="20160205 03:38:36.702"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.706" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.707" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.708" starttime="20160205 03:38:36.705"></status>
</kw>
<msg timestamp="20160205 03:38:36.709" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.709" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.708" starttime="20160205 03:38:36.704"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.714" starttime="20160205 03:38:36.713"></status>
</kw>
<msg timestamp="20160205 03:38:36.715" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.715" starttime="20160205 03:38:36.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.720" starttime="20160205 03:38:36.719"></status>
</kw>
<msg timestamp="20160205 03:38:36.721" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,511 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.721" starttime="20160205 03:38:36.716"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.727" starttime="20160205 03:38:36.725"></status>
</kw>
<msg timestamp="20160205 03:38:36.728" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.727" starttime="20160205 03:38:36.722"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.734" starttime="20160205 03:38:36.733"></status>
</kw>
<msg timestamp="20160205 03:38:36.735" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.735" starttime="20160205 03:38:36.728"></status>
</kw>
<msg timestamp="20160205 03:38:36.736" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:36.736" starttime="20160205 03:38:36.693"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.743" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:38:36.743" starttime="20160205 03:38:36.742"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.745" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.745" starttime="20160205 03:38:36.744"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.747" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.747" starttime="20160205 03:38:36.746"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.750" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.751" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.752" starttime="20160205 03:38:36.749"></status>
</kw>
<msg timestamp="20160205 03:38:36.753" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.753" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,512 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:36.753" starttime="20160205 03:38:36.748"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.758" starttime="20160205 03:38:36.757"></status>
</kw>
<msg timestamp="20160205 03:38:36.759" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,512 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:36.759" starttime="20160205 03:38:36.754"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.764" starttime="20160205 03:38:36.763"></status>
</kw>
<msg timestamp="20160205 03:38:36.765" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,512 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:36.764" starttime="20160205 03:38:36.760"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.770" starttime="20160205 03:38:36.768"></status>
</kw>
<msg timestamp="20160205 03:38:36.771" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:36.770" starttime="20160205 03:38:36.765"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.777" starttime="20160205 03:38:36.776"></status>
</kw>
<msg timestamp="20160205 03:38:36.778" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:36.778" starttime="20160205 03:38:36.771"></status>
</kw>
<msg timestamp="20160205 03:38:36.779" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:36.779" starttime="20160205 03:38:36.737"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:36.786" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:38:36.786" starttime="20160205 03:38:36.784"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.788" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:36.788" starttime="20160205 03:38:36.787"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.790" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:36.790" starttime="20160205 03:38:36.789"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.793" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:36.794" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:36.794" starttime="20160205 03:38:36.792"></status>
</kw>
<msg timestamp="20160205 03:38:36.795" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:36.796" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,513 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.795" starttime="20160205 03:38:36.791"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.800" starttime="20160205 03:38:36.799"></status>
</kw>
<msg timestamp="20160205 03:38:36.801" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,513 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.801" starttime="20160205 03:38:36.796"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.806" starttime="20160205 03:38:36.805"></status>
</kw>
<msg timestamp="20160205 03:38:36.807" level="INFO">${return_log_entry} = 2016-02-05 03:38:36,513 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.806" starttime="20160205 03:38:36.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.812" starttime="20160205 03:38:36.811"></status>
</kw>
<msg timestamp="20160205 03:38:36.813" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.812" starttime="20160205 03:38:36.808"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.819" starttime="20160205 03:38:36.818"></status>
</kw>
<msg timestamp="20160205 03:38:36.820" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.820" starttime="20160205 03:38:36.813"></status>
</kw>
<msg timestamp="20160205 03:38:36.822" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.821" starttime="20160205 03:38:36.781"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.827" starttime="20160205 03:38:36.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.829" starttime="20160205 03:38:36.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.830" starttime="20160205 03:38:36.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:36.836" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:36.837" starttime="20160205 03:38:36.835"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.837" starttime="20160205 03:38:36.834"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.838" starttime="20160205 03:38:36.831"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.838" starttime="20160205 03:38:36.822"></status>
</kw>
<msg timestamp="20160205 03:38:36.841" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:38:36.841" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:38:36.841" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:38:36.842" level="INFO">${id} = 2426285</msg>
<msg timestamp="20160205 03:38:36.842" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:38:36.842" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:38:36.842" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:36.840" starttime="20160205 03:38:36.226"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.855" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.855" starttime="20160205 03:38:36.853"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.856" starttime="20160205 03:38:36.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.859" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.859" starttime="20160205 03:38:36.858"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.860" starttime="20160205 03:38:36.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.863" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:36.864" starttime="20160205 03:38:36.862"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.864" starttime="20160205 03:38:36.860"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:36.865" starttime="20160205 03:38:36.849"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:36.867" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:36.867" starttime="20160205 03:38:36.865"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.869" starttime="20160205 03:38:36.868"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.871" starttime="20160205 03:38:36.870"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.873" starttime="20160205 03:38:36.871"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.874" starttime="20160205 03:38:36.873"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.876" starttime="20160205 03:38:36.875"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:36.878" starttime="20160205 03:38:36.876"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:36.880" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426285']</msg>
<msg timestamp="20160205 03:38:37.026" level="INFO">03:38:37,021 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:38:37,022 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426286
03:38:37,023 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:38:37,024 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:38:37,025 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:37.027" starttime="20160205 03:38:36.879"></status>
</kw>
<msg timestamp="20160205 03:38:37.029" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.030" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:37.028" starttime="20160205 03:38:36.878"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:37.039" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:37.038" starttime="20160205 03:38:37.037"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.041" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:37.040" starttime="20160205 03:38:37.039"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.043" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:37.043" starttime="20160205 03:38:37.041"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.046" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:37.047" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:37.048" starttime="20160205 03:38:37.045"></status>
</kw>
<msg timestamp="20160205 03:38:37.049" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.049" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,021 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:37.048" starttime="20160205 03:38:37.044"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.055" starttime="20160205 03:38:37.053"></status>
</kw>
<msg timestamp="20160205 03:38:37.056" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,021 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:37.055" starttime="20160205 03:38:37.050"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.061" starttime="20160205 03:38:37.059"></status>
</kw>
<msg timestamp="20160205 03:38:37.062" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,021 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:37.061" starttime="20160205 03:38:37.056"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.067" starttime="20160205 03:38:37.066"></status>
</kw>
<msg timestamp="20160205 03:38:37.068" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:37.068" starttime="20160205 03:38:37.062"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.075" starttime="20160205 03:38:37.074"></status>
</kw>
<msg timestamp="20160205 03:38:37.076" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:37.076" starttime="20160205 03:38:37.069"></status>
</kw>
<msg timestamp="20160205 03:38:37.078" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:37.077" starttime="20160205 03:38:37.032"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:37.086" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:38:37.085" starttime="20160205 03:38:37.084"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.088" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:37.088" starttime="20160205 03:38:37.087"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.090" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:37.090" starttime="20160205 03:38:37.089"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.094" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:37.095" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:37.095" starttime="20160205 03:38:37.092"></status>
</kw>
<msg timestamp="20160205 03:38:37.096" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.096" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,022 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.096" starttime="20160205 03:38:37.091"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.102" starttime="20160205 03:38:37.100"></status>
</kw>
<msg timestamp="20160205 03:38:37.103" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,022 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.102" starttime="20160205 03:38:37.097"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.108" starttime="20160205 03:38:37.106"></status>
</kw>
<msg timestamp="20160205 03:38:37.109" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,022 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.108" starttime="20160205 03:38:37.103"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.114" starttime="20160205 03:38:37.113"></status>
</kw>
<msg timestamp="20160205 03:38:37.115" level="INFO">${resultCode} = 2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.115" starttime="20160205 03:38:37.109"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.122" starttime="20160205 03:38:37.121"></status>
</kw>
<msg timestamp="20160205 03:38:37.123" level="INFO">${resultCode} = 2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.123" starttime="20160205 03:38:37.116"></status>
</kw>
<msg timestamp="20160205 03:38:37.124" level="INFO">${accountId} = 2426286</msg>
<status status="PASS" endtime="20160205 03:38:37.124" starttime="20160205 03:38:37.079"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:37.131" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:38:37.131" starttime="20160205 03:38:37.130"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.133" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:37.133" starttime="20160205 03:38:37.132"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.135" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:37.135" starttime="20160205 03:38:37.134"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.138" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:37.139" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:37.139" starttime="20160205 03:38:37.137"></status>
</kw>
<msg timestamp="20160205 03:38:37.140" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.141" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,023 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.140" starttime="20160205 03:38:37.136"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.145" starttime="20160205 03:38:37.144"></status>
</kw>
<msg timestamp="20160205 03:38:37.146" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,023 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.146" starttime="20160205 03:38:37.141"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.151" starttime="20160205 03:38:37.150"></status>
</kw>
<msg timestamp="20160205 03:38:37.152" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,023 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.151" starttime="20160205 03:38:37.147"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.157" starttime="20160205 03:38:37.155"></status>
</kw>
<msg timestamp="20160205 03:38:37.157" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.157" starttime="20160205 03:38:37.152"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.164" starttime="20160205 03:38:37.163"></status>
</kw>
<msg timestamp="20160205 03:38:37.165" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.165" starttime="20160205 03:38:37.158"></status>
</kw>
<msg timestamp="20160205 03:38:37.166" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.166" starttime="20160205 03:38:37.126"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:37.172" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:38:37.172" starttime="20160205 03:38:37.171"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.175" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:37.174" starttime="20160205 03:38:37.173"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.177" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:37.176" starttime="20160205 03:38:37.175"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.180" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:37.181" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:37.181" starttime="20160205 03:38:37.179"></status>
</kw>
<msg timestamp="20160205 03:38:37.183" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.183" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,024 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.182" starttime="20160205 03:38:37.178"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.188" starttime="20160205 03:38:37.187"></status>
</kw>
<msg timestamp="20160205 03:38:37.189" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,024 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.188" starttime="20160205 03:38:37.184"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.194" starttime="20160205 03:38:37.192"></status>
</kw>
<msg timestamp="20160205 03:38:37.194" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,024 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.194" starttime="20160205 03:38:37.189"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.199" starttime="20160205 03:38:37.198"></status>
</kw>
<msg timestamp="20160205 03:38:37.200" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.200" starttime="20160205 03:38:37.195"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.207" starttime="20160205 03:38:37.206"></status>
</kw>
<msg timestamp="20160205 03:38:37.208" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.208" starttime="20160205 03:38:37.201"></status>
</kw>
<msg timestamp="20160205 03:38:37.209" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:37.209" starttime="20160205 03:38:37.167"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:37.217" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:38:37.216" starttime="20160205 03:38:37.215"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.219" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:37.218" starttime="20160205 03:38:37.217"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.221" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:37.220" starttime="20160205 03:38:37.219"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.225" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:37.226" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:37.226" starttime="20160205 03:38:37.224"></status>
</kw>
<msg timestamp="20160205 03:38:37.227" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:37.227" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,025 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:37.227" starttime="20160205 03:38:37.223"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.232" starttime="20160205 03:38:37.231"></status>
</kw>
<msg timestamp="20160205 03:38:37.233" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,025 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:37.232" starttime="20160205 03:38:37.228"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.238" starttime="20160205 03:38:37.237"></status>
</kw>
<msg timestamp="20160205 03:38:37.239" level="INFO">${return_log_entry} = 2016-02-05 03:38:37,025 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:37.238" starttime="20160205 03:38:37.233"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.244" starttime="20160205 03:38:37.243"></status>
</kw>
<msg timestamp="20160205 03:38:37.245" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:37.245" starttime="20160205 03:38:37.239"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.252" starttime="20160205 03:38:37.251"></status>
</kw>
<msg timestamp="20160205 03:38:37.253" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:37.253" starttime="20160205 03:38:37.246"></status>
</kw>
<msg timestamp="20160205 03:38:37.254" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:37.254" starttime="20160205 03:38:37.210"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.259" starttime="20160205 03:38:37.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.261" starttime="20160205 03:38:37.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.262" starttime="20160205 03:38:37.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:37.269" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:37.269" starttime="20160205 03:38:37.267"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:37.270" starttime="20160205 03:38:37.266"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:37.271" starttime="20160205 03:38:37.263"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:37.271" starttime="20160205 03:38:37.255"></status>
</kw>
<msg timestamp="20160205 03:38:37.274" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:38:37.274" level="INFO">${accId} = 2426286</msg>
<msg timestamp="20160205 03:38:37.274" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:38:37.275" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:38:37.275" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:38:37.273" starttime="20160205 03:38:36.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.277" starttime="20160205 03:38:37.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.278" starttime="20160205 03:38:37.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:37.280" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:38:37.280" starttime="20160205 03:38:37.279"></status>
</kw>
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:38:37.281" starttime="20160205 03:38:11.626"></status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:37.286" starttime="20160205 03:38:07.947"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:37.295" starttime="20160205 03:38:07.929"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s2-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s2-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:38:37.474" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:37.481" level="INFO">${date} = Fri Feb  5 03:38:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:37.480" starttime="20160205 03:38:37.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:37.485" level="INFO">Date and time: Fri Feb  5 03:38:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:37.486" starttime="20160205 03:38:37.482"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:37.490" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:38:37.492" starttime="20160205 03:38:37.488"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.550" starttime="20160205 03:38:37.548"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:37.606" starttime="20160205 03:38:37.559"></status>
</kw>
<msg timestamp="20160205 03:38:37.607" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:38:37.607" starttime="20160205 03:38:37.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:37.614" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:38.059" level="INFO">Read output: Last login: Fri Feb  5 02:38:08 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:38.061" starttime="20160205 03:38:37.612"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:38.062" starttime="20160205 03:38:37.608"></status>
</kw>
<msg timestamp="20160205 03:38:38.064" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:38:38.063" starttime="20160205 03:38:37.539"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:38.069" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:38.069" starttime="20160205 03:38:38.065"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:38.071" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:38:38.375" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:38.377" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:38.376" starttime="20160205 03:38:38.070"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.386" starttime="20160205 03:38:38.383"></status>
</kw>
<msg timestamp="20160205 03:38:38.388" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:38.389" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:38.387" starttime="20160205 03:38:38.379"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.399" starttime="20160205 03:38:38.397"></status>
</kw>
<msg timestamp="20160205 03:38:38.401" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:38.400" starttime="20160205 03:38:38.390"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:38:38.406" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:38.405" starttime="20160205 03:38:38.402"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:38.410" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:38.409" starttime="20160205 03:38:38.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.413" starttime="20160205 03:38:38.411"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.425" starttime="20160205 03:38:38.423"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.433" starttime="20160205 03:38:38.427"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:38.434" starttime="20160205 03:38:38.415"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.444" starttime="20160205 03:38:38.442"></status>
</kw>
<msg timestamp="20160205 03:38:38.446" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:38.445" starttime="20160205 03:38:38.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.449" starttime="20160205 03:38:38.447"></status>
</kw>
<msg timestamp="20160205 03:38:38.453" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:38:38.454" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:38.451" starttime="20160205 03:38:37.511"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.510" starttime="20160205 03:38:38.509"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:38.567" starttime="20160205 03:38:38.514"></status>
</kw>
<msg timestamp="20160205 03:38:38.569" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:38:38.568" starttime="20160205 03:38:38.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:38.581" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:39.038" level="INFO">Read output: Last login: Fri Feb  5 02:38:09 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:39.039" starttime="20160205 03:38:38.578"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:39.040" starttime="20160205 03:38:38.570"></status>
</kw>
<msg timestamp="20160205 03:38:39.042" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:38:39.042" starttime="20160205 03:38:38.503"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:39.047" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:39.047" starttime="20160205 03:38:39.043"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:39.049" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:38:39.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:39.437" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:39.437" starttime="20160205 03:38:39.048"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.441" starttime="20160205 03:38:39.439"></status>
</kw>
<msg timestamp="20160205 03:38:39.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:39.442" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:39.441" starttime="20160205 03:38:39.438"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.447" starttime="20160205 03:38:39.446"></status>
</kw>
<msg timestamp="20160205 03:38:39.447" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:39.447" starttime="20160205 03:38:39.442"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:38:39.450" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:39.449" starttime="20160205 03:38:39.448"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:39.452" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:39.451" starttime="20160205 03:38:39.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.453" starttime="20160205 03:38:39.452"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.458" starttime="20160205 03:38:39.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.460" starttime="20160205 03:38:39.459"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:39.462" starttime="20160205 03:38:39.454"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.468" starttime="20160205 03:38:39.467"></status>
</kw>
<msg timestamp="20160205 03:38:39.469" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:39.468" starttime="20160205 03:38:39.464"></status>
</kw>
<msg timestamp="20160205 03:38:39.470" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:38:39.471" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:39.470" starttime="20160205 03:38:38.475"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.505" starttime="20160205 03:38:39.504"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:39.563" starttime="20160205 03:38:39.509"></status>
</kw>
<msg timestamp="20160205 03:38:39.565" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:38:39.564" starttime="20160205 03:38:39.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:39.577" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:40.139" level="INFO">Read output: Last login: Fri Feb  5 02:38:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:40.143" starttime="20160205 03:38:39.574"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:40.145" starttime="20160205 03:38:39.567"></status>
</kw>
<msg timestamp="20160205 03:38:40.150" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:38:40.149" starttime="20160205 03:38:39.499"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:40.161" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:40.161" starttime="20160205 03:38:40.152"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:40.166" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:38:40.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:40.350" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:40.349" starttime="20160205 03:38:40.163"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.359" starttime="20160205 03:38:40.355"></status>
</kw>
<msg timestamp="20160205 03:38:40.361" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:40.362" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:40.360" starttime="20160205 03:38:40.352"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.374" starttime="20160205 03:38:40.372"></status>
</kw>
<msg timestamp="20160205 03:38:40.376" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:40.375" starttime="20160205 03:38:40.364"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:38:40.381" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:40.381" starttime="20160205 03:38:40.378"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:40.387" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:40.386" starttime="20160205 03:38:40.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.391" starttime="20160205 03:38:40.388"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.405" starttime="20160205 03:38:40.402"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.413" starttime="20160205 03:38:40.406"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:40.414" starttime="20160205 03:38:40.394"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.427" starttime="20160205 03:38:40.423"></status>
</kw>
<msg timestamp="20160205 03:38:40.430" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:40.429" starttime="20160205 03:38:40.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.434" starttime="20160205 03:38:40.432"></status>
</kw>
<msg timestamp="20160205 03:38:40.438" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:38:40.438" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:40.436" starttime="20160205 03:38:39.486"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.499" starttime="20160205 03:38:40.497"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:40.557" starttime="20160205 03:38:40.505"></status>
</kw>
<msg timestamp="20160205 03:38:40.560" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:38:40.559" starttime="20160205 03:38:40.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:40.572" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:41.057" level="INFO">Read output: Last login: Fri Feb  5 02:38:11 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:41.059" starttime="20160205 03:38:40.569"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.061" starttime="20160205 03:38:40.561"></status>
</kw>
<msg timestamp="20160205 03:38:41.065" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:38:41.063" starttime="20160205 03:38:40.487"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:41.072" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:41.072" starttime="20160205 03:38:41.066"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:41.076" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:38:41.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:41.158" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:38:41.157" starttime="20160205 03:38:41.074"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.165" starttime="20160205 03:38:41.162"></status>
</kw>
<msg timestamp="20160205 03:38:41.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:41.168" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:41.166" starttime="20160205 03:38:41.159"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.178" starttime="20160205 03:38:41.176"></status>
</kw>
<msg timestamp="20160205 03:38:41.180" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:41.179" starttime="20160205 03:38:41.169"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:38:41.184" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:38:41.184" starttime="20160205 03:38:41.181"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:41.189" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:41.188" starttime="20160205 03:38:41.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.192" starttime="20160205 03:38:41.190"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.204" starttime="20160205 03:38:41.202"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.210" starttime="20160205 03:38:41.206"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.212" starttime="20160205 03:38:41.194"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.222" starttime="20160205 03:38:41.220"></status>
</kw>
<msg timestamp="20160205 03:38:41.224" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:41.223" starttime="20160205 03:38:41.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.228" starttime="20160205 03:38:41.226"></status>
</kw>
<msg timestamp="20160205 03:38:41.231" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:38:41.232" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:41.230" starttime="20160205 03:38:40.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:41.236" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:41.238" starttime="20160205 03:38:41.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:41.242" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:41.243" starttime="20160205 03:38:41.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:41.247" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:41.248" starttime="20160205 03:38:41.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:41.253" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:38:41.254" starttime="20160205 03:38:41.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:38:41.258" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:41.259" starttime="20160205 03:38:41.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:38:41.263" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:41.264" starttime="20160205 03:38:41.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:38:41.267" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:41.268" starttime="20160205 03:38:41.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:38:41.272" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:41.273" starttime="20160205 03:38:41.270"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.287" starttime="20160205 03:38:41.281"></status>
</kw>
<msg timestamp="20160205 03:38:41.289" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:38:41.288" starttime="20160205 03:38:41.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.294" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:38:41.295" starttime="20160205 03:38:41.291"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.296" starttime="20160205 03:38:37.465"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.313" starttime="20160205 03:38:41.311"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:38:41.317" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:41.316" starttime="20160205 03:38:41.314"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.334" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:38:41.335" starttime="20160205 03:38:41.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.339" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:38:41.339" starttime="20160205 03:38:41.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.343" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:38:41.344" starttime="20160205 03:38:41.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.347" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:38:41.348" starttime="20160205 03:38:41.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.352" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:41.353" starttime="20160205 03:38:41.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.356" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:38:41.357" starttime="20160205 03:38:41.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.360" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:41.361" starttime="20160205 03:38:41.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.365" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:38:41.366" starttime="20160205 03:38:41.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.369" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:41.370" starttime="20160205 03:38:41.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.373" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:41.374" starttime="20160205 03:38:41.371"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.390" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:41.391" starttime="20160205 03:38:41.387"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.392" starttime="20160205 03:38:41.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.399" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:41.400" starttime="20160205 03:38:41.396"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.401" starttime="20160205 03:38:41.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.407" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:41.408" starttime="20160205 03:38:41.404"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.409" starttime="20160205 03:38:41.402"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:41.411" starttime="20160205 03:38:41.378"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:41.416" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:41.416" starttime="20160205 03:38:41.412"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.420" starttime="20160205 03:38:41.418"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.424" starttime="20160205 03:38:41.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.428" starttime="20160205 03:38:41.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.431" starttime="20160205 03:38:41.429"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.434" starttime="20160205 03:38:41.433"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.438" starttime="20160205 03:38:41.436"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.442" starttime="20160205 03:38:41.440"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.446" starttime="20160205 03:38:41.444"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.450" starttime="20160205 03:38:41.447"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.454" starttime="20160205 03:38:41.451"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.458" starttime="20160205 03:38:41.455"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:41.462" starttime="20160205 03:38:41.459"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:41.467" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:38:42.428" level="INFO">03:38:42,425 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:42.429" starttime="20160205 03:38:41.465"></status>
</kw>
<msg timestamp="20160205 03:38:42.433" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:42.433" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:42.431" starttime="20160205 03:38:41.463"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:42.444" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:42.444" starttime="20160205 03:38:42.441"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:42.448" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:42.447" starttime="20160205 03:38:42.445"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:42.451" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:42.451" starttime="20160205 03:38:42.449"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:42.457" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:42.458" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:42.458" starttime="20160205 03:38:42.454"></status>
</kw>
<msg timestamp="20160205 03:38:42.460" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:42.460" level="INFO">${return_log_entry} = 2016-02-05 03:38:42,425 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:42.459" starttime="20160205 03:38:42.452"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.469" starttime="20160205 03:38:42.467"></status>
</kw>
<msg timestamp="20160205 03:38:42.471" level="INFO">${return_log_entry} = 2016-02-05 03:38:42,425 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:42.470" starttime="20160205 03:38:42.462"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.479" starttime="20160205 03:38:42.477"></status>
</kw>
<msg timestamp="20160205 03:38:42.481" level="INFO">${return_log_entry} = 2016-02-05 03:38:42,425 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:42.480" starttime="20160205 03:38:42.472"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.489" starttime="20160205 03:38:42.487"></status>
</kw>
<msg timestamp="20160205 03:38:42.491" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:42.490" starttime="20160205 03:38:42.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.502" starttime="20160205 03:38:42.500"></status>
</kw>
<msg timestamp="20160205 03:38:42.504" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:42.503" starttime="20160205 03:38:42.492"></status>
</kw>
<msg timestamp="20160205 03:38:42.505" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:42.505" starttime="20160205 03:38:42.435"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.514" starttime="20160205 03:38:42.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.516" starttime="20160205 03:38:42.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.518" starttime="20160205 03:38:42.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:42.527" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:42.528" starttime="20160205 03:38:42.525"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:42.529" starttime="20160205 03:38:42.523"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:42.530" starttime="20160205 03:38:42.519"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:42.530" starttime="20160205 03:38:42.507"></status>
</kw>
<msg timestamp="20160205 03:38:42.533" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:38:42.532" starttime="20160205 03:38:41.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:38:42.535" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:42.536" starttime="20160205 03:38:42.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:42.538" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:38:42.539" starttime="20160205 03:38:42.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.541" starttime="20160205 03:38:42.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:42.543" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160205 03:38:42.544" starttime="20160205 03:38:42.542"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:42.568" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:38:42.568" starttime="20160205 03:38:42.566"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:38:42.571" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:38:42.571" starttime="20160205 03:38:42.569"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:38:42.575" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:38:42.574" starttime="20160205 03:38:42.572"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:38:42.578" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160205 03:38:42.577" starttime="20160205 03:38:42.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.580" starttime="20160205 03:38:42.579"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:42.584" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:42.585" starttime="20160205 03:38:42.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.587" starttime="20160205 03:38:42.586"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:38:42.591" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:42.596" starttime="20160205 03:38:42.588"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:38:42.600" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:42.601" starttime="20160205 03:38:42.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.603" starttime="20160205 03:38:42.602"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:38:42.606" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:42.607" starttime="20160205 03:38:42.604"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:38:42.611" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:42.612" starttime="20160205 03:38:42.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:42.614" starttime="20160205 03:38:42.613"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:38:42.627" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:54.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:54.702" starttime="20160205 03:38:42.615"></status>
</kw>
<msg timestamp="20160205 03:38:54.705" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:54.704" starttime="20160205 03:38:42.557"></status>
</kw>
<msg timestamp="20160205 03:38:54.706" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:38:54.706" starttime="20160205 03:38:42.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:54.708" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:38:54.709" starttime="20160205 03:38:54.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:38:54.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:38:54.711" starttime="20160205 03:38:54.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.713" starttime="20160205 03:38:54.712"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:54.725" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:54.726" starttime="20160205 03:38:54.724"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:54.726" starttime="20160205 03:38:54.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:54.729" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:54.730" starttime="20160205 03:38:54.728"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:54.730" starttime="20160205 03:38:54.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:54.733" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:54.733" starttime="20160205 03:38:54.732"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:54.734" starttime="20160205 03:38:54.731"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:54.734" starttime="20160205 03:38:54.720"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:54.737" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:54.737" starttime="20160205 03:38:54.735"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.739" starttime="20160205 03:38:54.737"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.740" starttime="20160205 03:38:54.739"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.742" starttime="20160205 03:38:54.741"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.744" starttime="20160205 03:38:54.743"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.745" starttime="20160205 03:38:54.744"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:54.747" starttime="20160205 03:38:54.746"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:54.749" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:38:54.988" level="INFO">03:38:54,972 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:38:54,974 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:38:54,976 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426288
03:38:54,978 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:38:54,980 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:38:54,982 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:38:54,983 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:38:54,985 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:38:54.990" starttime="20160205 03:38:54.748"></status>
</kw>
<msg timestamp="20160205 03:38:54.992" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:54.993" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:54.991" starttime="20160205 03:38:54.747"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.004" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:55.004" starttime="20160205 03:38:55.002"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.006" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.006" starttime="20160205 03:38:55.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.008" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.008" starttime="20160205 03:38:55.007"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.011" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.012" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.012" starttime="20160205 03:38:55.010"></status>
</kw>
<msg timestamp="20160205 03:38:55.013" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.014" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,972 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.013" starttime="20160205 03:38:55.009"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.019" starttime="20160205 03:38:55.018"></status>
</kw>
<msg timestamp="20160205 03:38:55.020" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,972 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.019" starttime="20160205 03:38:55.014"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.024" starttime="20160205 03:38:55.023"></status>
</kw>
<msg timestamp="20160205 03:38:55.025" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,972 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.025" starttime="20160205 03:38:55.020"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.030" starttime="20160205 03:38:55.029"></status>
</kw>
<msg timestamp="20160205 03:38:55.031" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.030" starttime="20160205 03:38:55.026"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.037" starttime="20160205 03:38:55.036"></status>
</kw>
<msg timestamp="20160205 03:38:55.038" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.038" starttime="20160205 03:38:55.031"></status>
</kw>
<msg timestamp="20160205 03:38:55.040" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.039" starttime="20160205 03:38:54.995"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.046" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:38:55.046" starttime="20160205 03:38:55.044"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.048" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.048" starttime="20160205 03:38:55.047"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.050" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.050" starttime="20160205 03:38:55.049"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.053" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.054" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.054" starttime="20160205 03:38:55.052"></status>
</kw>
<msg timestamp="20160205 03:38:55.055" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.055" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,974 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.055" starttime="20160205 03:38:55.051"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.060" starttime="20160205 03:38:55.059"></status>
</kw>
<msg timestamp="20160205 03:38:55.061" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,974 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.060" starttime="20160205 03:38:55.056"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.066" starttime="20160205 03:38:55.064"></status>
</kw>
<msg timestamp="20160205 03:38:55.066" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,974 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.066" starttime="20160205 03:38:55.061"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.071" starttime="20160205 03:38:55.070"></status>
</kw>
<msg timestamp="20160205 03:38:55.072" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.072" starttime="20160205 03:38:55.067"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.079" starttime="20160205 03:38:55.078"></status>
</kw>
<msg timestamp="20160205 03:38:55.080" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.079" starttime="20160205 03:38:55.073"></status>
</kw>
<msg timestamp="20160205 03:38:55.081" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.080" starttime="20160205 03:38:55.041"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.087" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:38:55.086" starttime="20160205 03:38:55.085"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.089" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.088" starttime="20160205 03:38:55.087"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.091" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.090" starttime="20160205 03:38:55.089"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.094" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.094" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.095" starttime="20160205 03:38:55.092"></status>
</kw>
<msg timestamp="20160205 03:38:55.096" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.096" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,978 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.095" starttime="20160205 03:38:55.091"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.101" starttime="20160205 03:38:55.100"></status>
</kw>
<msg timestamp="20160205 03:38:55.101" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,978 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.101" starttime="20160205 03:38:55.097"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.106" starttime="20160205 03:38:55.105"></status>
</kw>
<msg timestamp="20160205 03:38:55.107" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,978 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.107" starttime="20160205 03:38:55.102"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.112" starttime="20160205 03:38:55.110"></status>
</kw>
<msg timestamp="20160205 03:38:55.113" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.112" starttime="20160205 03:38:55.107"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.119" starttime="20160205 03:38:55.118"></status>
</kw>
<msg timestamp="20160205 03:38:55.120" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.119" starttime="20160205 03:38:55.113"></status>
</kw>
<msg timestamp="20160205 03:38:55.121" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:38:55.121" starttime="20160205 03:38:55.082"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.127" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:38:55.127" starttime="20160205 03:38:55.125"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.129" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.129" starttime="20160205 03:38:55.128"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.131" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.131" starttime="20160205 03:38:55.130"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.134" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.135" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.135" starttime="20160205 03:38:55.133"></status>
</kw>
<msg timestamp="20160205 03:38:55.136" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.136" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,976 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.136" starttime="20160205 03:38:55.132"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.141" starttime="20160205 03:38:55.140"></status>
</kw>
<msg timestamp="20160205 03:38:55.142" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,976 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.142" starttime="20160205 03:38:55.137"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.147" starttime="20160205 03:38:55.146"></status>
</kw>
<msg timestamp="20160205 03:38:55.148" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,976 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.147" starttime="20160205 03:38:55.143"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.153" starttime="20160205 03:38:55.152"></status>
</kw>
<msg timestamp="20160205 03:38:55.154" level="INFO">${resultCode} = 2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.154" starttime="20160205 03:38:55.148"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.160" starttime="20160205 03:38:55.159"></status>
</kw>
<msg timestamp="20160205 03:38:55.161" level="INFO">${resultCode} = 2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.161" starttime="20160205 03:38:55.155"></status>
</kw>
<msg timestamp="20160205 03:38:55.162" level="INFO">${id} = 2426288</msg>
<status status="PASS" endtime="20160205 03:38:55.162" starttime="20160205 03:38:55.122"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.168" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:38:55.168" starttime="20160205 03:38:55.167"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.170" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.170" starttime="20160205 03:38:55.169"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.172" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.172" starttime="20160205 03:38:55.171"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.175" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.176" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.176" starttime="20160205 03:38:55.174"></status>
</kw>
<msg timestamp="20160205 03:38:55.177" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.177" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,980 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.177" starttime="20160205 03:38:55.173"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.182" starttime="20160205 03:38:55.181"></status>
</kw>
<msg timestamp="20160205 03:38:55.183" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,980 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.182" starttime="20160205 03:38:55.178"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.187" starttime="20160205 03:38:55.186"></status>
</kw>
<msg timestamp="20160205 03:38:55.188" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,980 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.188" starttime="20160205 03:38:55.183"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.193" starttime="20160205 03:38:55.192"></status>
</kw>
<msg timestamp="20160205 03:38:55.194" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.193" starttime="20160205 03:38:55.189"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.200" starttime="20160205 03:38:55.199"></status>
</kw>
<msg timestamp="20160205 03:38:55.201" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.201" starttime="20160205 03:38:55.194"></status>
</kw>
<msg timestamp="20160205 03:38:55.202" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:38:55.202" starttime="20160205 03:38:55.164"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.208" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:38:55.208" starttime="20160205 03:38:55.207"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.210" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.210" starttime="20160205 03:38:55.209"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.212" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.212" starttime="20160205 03:38:55.211"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.215" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.216" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.216" starttime="20160205 03:38:55.214"></status>
</kw>
<msg timestamp="20160205 03:38:55.217" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.217" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,982 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:55.217" starttime="20160205 03:38:55.213"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.222" starttime="20160205 03:38:55.221"></status>
</kw>
<msg timestamp="20160205 03:38:55.223" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,982 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:55.222" starttime="20160205 03:38:55.218"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.227" starttime="20160205 03:38:55.226"></status>
</kw>
<msg timestamp="20160205 03:38:55.228" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,982 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:38:55.228" starttime="20160205 03:38:55.223"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.233" starttime="20160205 03:38:55.231"></status>
</kw>
<msg timestamp="20160205 03:38:55.233" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:55.233" starttime="20160205 03:38:55.228"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.240" starttime="20160205 03:38:55.239"></status>
</kw>
<msg timestamp="20160205 03:38:55.241" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:55.240" starttime="20160205 03:38:55.234"></status>
</kw>
<msg timestamp="20160205 03:38:55.242" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:38:55.241" starttime="20160205 03:38:55.203"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.248" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:38:55.247" starttime="20160205 03:38:55.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.250" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.249" starttime="20160205 03:38:55.248"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.252" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.251" starttime="20160205 03:38:55.250"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.255" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.255" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.256" starttime="20160205 03:38:55.254"></status>
</kw>
<msg timestamp="20160205 03:38:55.257" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.257" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,983 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.256" starttime="20160205 03:38:55.253"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.261" starttime="20160205 03:38:55.260"></status>
</kw>
<msg timestamp="20160205 03:38:55.262" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,983 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.262" starttime="20160205 03:38:55.258"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.267" starttime="20160205 03:38:55.266"></status>
</kw>
<msg timestamp="20160205 03:38:55.268" level="INFO">${return_log_entry} = 2016-02-05 03:38:54,983 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.267" starttime="20160205 03:38:55.263"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.272" starttime="20160205 03:38:55.271"></status>
</kw>
<msg timestamp="20160205 03:38:55.273" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.273" starttime="20160205 03:38:55.268"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.280" starttime="20160205 03:38:55.279"></status>
</kw>
<msg timestamp="20160205 03:38:55.281" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.280" starttime="20160205 03:38:55.274"></status>
</kw>
<msg timestamp="20160205 03:38:55.282" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.282" starttime="20160205 03:38:55.243"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.287" starttime="20160205 03:38:55.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.288" starttime="20160205 03:38:55.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.290" starttime="20160205 03:38:55.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:55.296" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:55.296" starttime="20160205 03:38:55.294"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.297" starttime="20160205 03:38:55.293"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.297" starttime="20160205 03:38:55.290"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.298" starttime="20160205 03:38:55.283"></status>
</kw>
<msg timestamp="20160205 03:38:55.300" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:38:55.300" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:38:55.301" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:38:55.301" level="INFO">${id} = 2426288</msg>
<msg timestamp="20160205 03:38:55.301" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:38:55.302" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:38:55.302" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:38:55.299" starttime="20160205 03:38:54.715"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.314" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:55.314" starttime="20160205 03:38:55.312"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.315" starttime="20160205 03:38:55.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.317" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:55.318" starttime="20160205 03:38:55.316"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.318" starttime="20160205 03:38:55.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.321" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:38:55.321" starttime="20160205 03:38:55.320"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.322" starttime="20160205 03:38:55.319"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.322" starttime="20160205 03:38:55.308"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.324" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:38:55.325" starttime="20160205 03:38:55.323"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.326" starttime="20160205 03:38:55.325"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.328" starttime="20160205 03:38:55.327"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.330" starttime="20160205 03:38:55.329"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.331" starttime="20160205 03:38:55.330"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.333" starttime="20160205 03:38:55.332"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.334" starttime="20160205 03:38:55.333"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:38:55.337" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426288']</msg>
<msg timestamp="20160205 03:38:55.463" level="INFO">03:38:55,458 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:38:55,459 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426289
03:38:55,460 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:38:55,461 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:38:55,462 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.464" starttime="20160205 03:38:55.336"></status>
</kw>
<msg timestamp="20160205 03:38:55.465" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.465" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:38:55.465" starttime="20160205 03:38:55.335"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.472" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:38:55.471" starttime="20160205 03:38:55.470"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.474" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.473" starttime="20160205 03:38:55.472"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.476" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.475" starttime="20160205 03:38:55.474"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.478" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.479" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.480" starttime="20160205 03:38:55.477"></status>
</kw>
<msg timestamp="20160205 03:38:55.480" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.481" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,458 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.480" starttime="20160205 03:38:55.476"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.486" starttime="20160205 03:38:55.485"></status>
</kw>
<msg timestamp="20160205 03:38:55.487" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,458 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.486" starttime="20160205 03:38:55.481"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.491" starttime="20160205 03:38:55.490"></status>
</kw>
<msg timestamp="20160205 03:38:55.492" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,458 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:38:55.492" starttime="20160205 03:38:55.487"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.497" starttime="20160205 03:38:55.495"></status>
</kw>
<msg timestamp="20160205 03:38:55.498" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.497" starttime="20160205 03:38:55.493"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.504" starttime="20160205 03:38:55.503"></status>
</kw>
<msg timestamp="20160205 03:38:55.505" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.505" starttime="20160205 03:38:55.498"></status>
</kw>
<msg timestamp="20160205 03:38:55.506" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:55.506" starttime="20160205 03:38:55.467"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.513" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:38:55.513" starttime="20160205 03:38:55.511"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.515" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.515" starttime="20160205 03:38:55.514"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.519" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.518" starttime="20160205 03:38:55.516"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.525" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.527" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.528" starttime="20160205 03:38:55.523"></status>
</kw>
<msg timestamp="20160205 03:38:55.530" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.530" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,459 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.529" starttime="20160205 03:38:55.520"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.541" starttime="20160205 03:38:55.538"></status>
</kw>
<msg timestamp="20160205 03:38:55.543" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,459 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.542" starttime="20160205 03:38:55.532"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.553" starttime="20160205 03:38:55.550"></status>
</kw>
<msg timestamp="20160205 03:38:55.555" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,459 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.554" starttime="20160205 03:38:55.544"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.565" starttime="20160205 03:38:55.562"></status>
</kw>
<msg timestamp="20160205 03:38:55.567" level="INFO">${resultCode} = 2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.566" starttime="20160205 03:38:55.556"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.581" starttime="20160205 03:38:55.579"></status>
</kw>
<msg timestamp="20160205 03:38:55.583" level="INFO">${resultCode} = 2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.582" starttime="20160205 03:38:55.568"></status>
</kw>
<msg timestamp="20160205 03:38:55.585" level="INFO">${accountId} = 2426289</msg>
<status status="PASS" endtime="20160205 03:38:55.584" starttime="20160205 03:38:55.508"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.599" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:38:55.598" starttime="20160205 03:38:55.595"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.603" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.602" starttime="20160205 03:38:55.600"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.607" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.606" starttime="20160205 03:38:55.604"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.613" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.615" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.616" starttime="20160205 03:38:55.611"></status>
</kw>
<msg timestamp="20160205 03:38:55.618" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.618" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,460 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.617" starttime="20160205 03:38:55.608"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.629" starttime="20160205 03:38:55.626"></status>
</kw>
<msg timestamp="20160205 03:38:55.631" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,460 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.630" starttime="20160205 03:38:55.620"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.641" starttime="20160205 03:38:55.638"></status>
</kw>
<msg timestamp="20160205 03:38:55.643" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,460 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.642" starttime="20160205 03:38:55.632"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.653" starttime="20160205 03:38:55.650"></status>
</kw>
<msg timestamp="20160205 03:38:55.655" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.654" starttime="20160205 03:38:55.644"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.669" starttime="20160205 03:38:55.667"></status>
</kw>
<msg timestamp="20160205 03:38:55.671" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.670" starttime="20160205 03:38:55.656"></status>
</kw>
<msg timestamp="20160205 03:38:55.673" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.673" starttime="20160205 03:38:55.588"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.687" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:38:55.686" starttime="20160205 03:38:55.683"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.691" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.690" starttime="20160205 03:38:55.688"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.695" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.695" starttime="20160205 03:38:55.693"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.702" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.705" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.705" starttime="20160205 03:38:55.699"></status>
</kw>
<msg timestamp="20160205 03:38:55.708" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.708" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,461 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.707" starttime="20160205 03:38:55.697"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.718" starttime="20160205 03:38:55.716"></status>
</kw>
<msg timestamp="20160205 03:38:55.720" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,461 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.719" starttime="20160205 03:38:55.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.730" starttime="20160205 03:38:55.728"></status>
</kw>
<msg timestamp="20160205 03:38:55.732" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,461 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.731" starttime="20160205 03:38:55.722"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.742" starttime="20160205 03:38:55.740"></status>
</kw>
<msg timestamp="20160205 03:38:55.744" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.744" starttime="20160205 03:38:55.733"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.755" starttime="20160205 03:38:55.754"></status>
</kw>
<msg timestamp="20160205 03:38:55.756" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.755" starttime="20160205 03:38:55.746"></status>
</kw>
<msg timestamp="20160205 03:38:55.757" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:38:55.756" starttime="20160205 03:38:55.676"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:38:55.763" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:38:55.763" starttime="20160205 03:38:55.761"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.765" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:38:55.764" starttime="20160205 03:38:55.764"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.767" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:38:55.766" starttime="20160205 03:38:55.765"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:38:55.770" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:38:55.770" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:38:55.771" starttime="20160205 03:38:55.768"></status>
</kw>
<msg timestamp="20160205 03:38:55.772" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:38:55.772" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,462 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.771" starttime="20160205 03:38:55.767"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.776" starttime="20160205 03:38:55.775"></status>
</kw>
<msg timestamp="20160205 03:38:55.777" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,462 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.777" starttime="20160205 03:38:55.772"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.782" starttime="20160205 03:38:55.780"></status>
</kw>
<msg timestamp="20160205 03:38:55.782" level="INFO">${return_log_entry} = 2016-02-05 03:38:55,462 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:38:55.782" starttime="20160205 03:38:55.778"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.787" starttime="20160205 03:38:55.786"></status>
</kw>
<msg timestamp="20160205 03:38:55.788" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.788" starttime="20160205 03:38:55.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.794" starttime="20160205 03:38:55.793"></status>
</kw>
<msg timestamp="20160205 03:38:55.795" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.795" starttime="20160205 03:38:55.788"></status>
</kw>
<msg timestamp="20160205 03:38:55.796" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.796" starttime="20160205 03:38:55.758"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.801" starttime="20160205 03:38:55.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.803" starttime="20160205 03:38:55.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.804" starttime="20160205 03:38:55.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:38:55.810" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:38:55.810" starttime="20160205 03:38:55.808"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.811" starttime="20160205 03:38:55.807"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.811" starttime="20160205 03:38:55.805"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:55.812" starttime="20160205 03:38:55.797"></status>
</kw>
<msg timestamp="20160205 03:38:55.814" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:38:55.814" level="INFO">${accId} = 2426289</msg>
<msg timestamp="20160205 03:38:55.814" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:38:55.815" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:38:55.815" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:38:55.813" starttime="20160205 03:38:55.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.816" starttime="20160205 03:38:55.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:55.818" starttime="20160205 03:38:55.817"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:55.819" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:38:55.820" starttime="20160205 03:38:55.818"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:38:55.821" starttime="20160205 03:38:41.299"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:55.825" starttime="20160205 03:38:37.319"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:38:55.834" starttime="20160205 03:38:37.302"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s" id="s1-s1-s1-s2-s1-s3" name="MOC PREPAID ONNET-LongDuration136s">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s/MOC_PREPAID_ONNET-LongDuration136s-robot-suite.txt" id="s1-s1-s1-s2-s1-s3-s1" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:38:56.003" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:38:56.011" level="INFO">${date} = Fri Feb  5 03:38:56 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:56.009" starttime="20160205 03:38:55.999"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:56.015" level="INFO">Date and time: Fri Feb  5 03:38:56 CET 2016</msg>
<status status="PASS" endtime="20160205 03:38:56.016" starttime="20160205 03:38:56.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:38:56.020" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:38:56.022" starttime="20160205 03:38:56.018"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:56.080" starttime="20160205 03:38:56.077"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:56.139" starttime="20160205 03:38:56.088"></status>
</kw>
<msg timestamp="20160205 03:38:56.141" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:38:56.140" starttime="20160205 03:38:56.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:56.152" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:56.625" level="INFO">Read output: Last login: Fri Feb  5 02:38:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:56.627" starttime="20160205 03:38:56.149"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:56.628" starttime="20160205 03:38:56.142"></status>
</kw>
<msg timestamp="20160205 03:38:56.632" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:38:56.631" starttime="20160205 03:38:56.068"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:56.642" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:56.642" starttime="20160205 03:38:56.634"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:56.646" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:38:57.045" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:57.049" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:57.047" starttime="20160205 03:38:56.644"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.058" starttime="20160205 03:38:57.054"></status>
</kw>
<msg timestamp="20160205 03:38:57.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:57.060" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:57.059" starttime="20160205 03:38:57.051"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.072" starttime="20160205 03:38:57.070"></status>
</kw>
<msg timestamp="20160205 03:38:57.074" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:57.073" starttime="20160205 03:38:57.062"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:38:57.079" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:38:57.078" starttime="20160205 03:38:57.075"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:57.083" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:57.083" starttime="20160205 03:38:57.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.087" starttime="20160205 03:38:57.085"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.099" starttime="20160205 03:38:57.096"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.103" starttime="20160205 03:38:57.101"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:57.107" starttime="20160205 03:38:57.089"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.118" starttime="20160205 03:38:57.115"></status>
</kw>
<msg timestamp="20160205 03:38:57.119" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:57.119" starttime="20160205 03:38:57.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.123" starttime="20160205 03:38:57.121"></status>
</kw>
<msg timestamp="20160205 03:38:57.127" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:38:57.127" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:38:57.125" starttime="20160205 03:38:56.041"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.191" starttime="20160205 03:38:57.188"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:57.246" starttime="20160205 03:38:57.199"></status>
</kw>
<msg timestamp="20160205 03:38:57.247" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:38:57.246" starttime="20160205 03:38:57.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:57.253" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:57.714" level="INFO">Read output: Last login: Fri Feb  5 02:38:38 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:57.715" starttime="20160205 03:38:57.251"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:57.715" starttime="20160205 03:38:57.247"></status>
</kw>
<msg timestamp="20160205 03:38:57.717" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:38:57.716" starttime="20160205 03:38:57.174"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:57.721" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:57.720" starttime="20160205 03:38:57.717"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:57.722" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:38:58.526" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:58.528" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:58.527" starttime="20160205 03:38:57.721"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.533" starttime="20160205 03:38:58.531"></status>
</kw>
<msg timestamp="20160205 03:38:58.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:58.534" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:58.533" starttime="20160205 03:38:58.529"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.539" starttime="20160205 03:38:58.538"></status>
</kw>
<msg timestamp="20160205 03:38:58.540" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:58.540" starttime="20160205 03:38:58.535"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:38:58.542" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:38:58.542" starttime="20160205 03:38:58.541"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:58.544" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:58.544" starttime="20160205 03:38:58.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.546" starttime="20160205 03:38:58.545"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.552" starttime="20160205 03:38:58.551"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.554" starttime="20160205 03:38:58.552"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:58.555" starttime="20160205 03:38:58.547"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.560" starttime="20160205 03:38:58.559"></status>
</kw>
<msg timestamp="20160205 03:38:58.561" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:58.560" starttime="20160205 03:38:58.556"></status>
</kw>
<msg timestamp="20160205 03:38:58.563" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:38:58.563" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:38:58.562" starttime="20160205 03:38:57.146"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.592" starttime="20160205 03:38:58.591"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:58.641" starttime="20160205 03:38:58.596"></status>
</kw>
<msg timestamp="20160205 03:38:58.643" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:38:58.642" starttime="20160205 03:38:58.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:58.655" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:59.120" level="INFO">Read output: Last login: Fri Feb  5 02:38:39 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:59.122" starttime="20160205 03:38:58.652"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:59.124" starttime="20160205 03:38:58.645"></status>
</kw>
<msg timestamp="20160205 03:38:59.128" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:38:59.127" starttime="20160205 03:38:58.586"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:59.132" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:59.132" starttime="20160205 03:38:59.129"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:59.134" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:38:59.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:38:59.315" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:59.314" starttime="20160205 03:38:59.133"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.322" starttime="20160205 03:38:59.319"></status>
</kw>
<msg timestamp="20160205 03:38:59.324" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:38:59.325" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:38:59.323" starttime="20160205 03:38:59.316"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.334" starttime="20160205 03:38:59.332"></status>
</kw>
<msg timestamp="20160205 03:38:59.336" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:38:59.335" starttime="20160205 03:38:59.326"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:38:59.340" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:38:59.340" starttime="20160205 03:38:59.337"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:38:59.345" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:59.344" starttime="20160205 03:38:59.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.348" starttime="20160205 03:38:59.346"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.360" starttime="20160205 03:38:59.358"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.364" starttime="20160205 03:38:59.362"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:59.367" starttime="20160205 03:38:59.351"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.376" starttime="20160205 03:38:59.374"></status>
</kw>
<msg timestamp="20160205 03:38:59.378" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:59.378" starttime="20160205 03:38:59.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.382" starttime="20160205 03:38:59.380"></status>
</kw>
<msg timestamp="20160205 03:38:59.385" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:38:59.386" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:38:59.384" starttime="20160205 03:38:58.572"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.444" starttime="20160205 03:38:59.442"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:38:59.493" starttime="20160205 03:38:59.452"></status>
</kw>
<msg timestamp="20160205 03:38:59.494" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:38:59.494" starttime="20160205 03:38:59.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:38:59.500" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:38:59.899" level="INFO">Read output: Last login: Fri Feb  5 02:38:40 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:38:59.899" starttime="20160205 03:38:59.499"></status>
</kw>
<status status="PASS" endtime="20160205 03:38:59.900" starttime="20160205 03:38:59.495"></status>
</kw>
<msg timestamp="20160205 03:38:59.901" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:38:59.901" starttime="20160205 03:38:59.433"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:38:59.905" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:38:59.905" starttime="20160205 03:38:59.902"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:38:59.907" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:39:00.059" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:39:00.060" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:39:00.060" starttime="20160205 03:38:59.906"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.064" starttime="20160205 03:39:00.062"></status>
</kw>
<msg timestamp="20160205 03:39:00.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:39:00.065" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:39:00.064" starttime="20160205 03:39:00.061"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.069" starttime="20160205 03:39:00.068"></status>
</kw>
<msg timestamp="20160205 03:39:00.070" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:39:00.070" starttime="20160205 03:39:00.065"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:39:00.072" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:39:00.072" starttime="20160205 03:39:00.071"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:39:00.074" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:39:00.074" starttime="20160205 03:39:00.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.075" starttime="20160205 03:39:00.074"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.092" starttime="20160205 03:39:00.089"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.098" starttime="20160205 03:39:00.093"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.099" starttime="20160205 03:39:00.081"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.109" starttime="20160205 03:39:00.107"></status>
</kw>
<msg timestamp="20160205 03:39:00.111" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:39:00.110" starttime="20160205 03:39:00.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.114" starttime="20160205 03:39:00.112"></status>
</kw>
<msg timestamp="20160205 03:39:00.117" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:39:00.118" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:39:00.116" starttime="20160205 03:38:59.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:00.122" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:39:00.123" starttime="20160205 03:39:00.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:00.128" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:39:00.129" starttime="20160205 03:39:00.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:00.133" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:39:00.134" starttime="20160205 03:39:00.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:00.138" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:39:00.140" starttime="20160205 03:39:00.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:39:00.143" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:39:00.144" starttime="20160205 03:39:00.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:39:00.148" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:39:00.149" starttime="20160205 03:39:00.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:39:00.152" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:39:00.153" starttime="20160205 03:39:00.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:39:00.157" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:39:00.157" starttime="20160205 03:39:00.154"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.170" starttime="20160205 03:39:00.165"></status>
</kw>
<msg timestamp="20160205 03:39:00.172" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:39:00.172" starttime="20160205 03:39:00.159"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.177" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:39:00.178" starttime="20160205 03:39:00.174"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.179" starttime="20160205 03:38:55.996"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s3-s1-t1" name="Run MOC 136s Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.193" starttime="20160205 03:39:00.192"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>100000000</arg>
</arguments>
<msg timestamp="20160205 03:39:00.197" level="INFO">${INITIAL_BALANCE} = 100000000</msg>
<status status="PASS" endtime="20160205 03:39:00.196" starttime="20160205 03:39:00.195"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.214" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:39:00.215" starttime="20160205 03:39:00.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.218" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:39:00.219" starttime="20160205 03:39:00.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.222" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:39:00.223" starttime="20160205 03:39:00.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.227" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:39:00.227" starttime="20160205 03:39:00.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.231" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:39:00.232" starttime="20160205 03:39:00.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.235" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:39:00.236" starttime="20160205 03:39:00.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.239" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:39:00.240" starttime="20160205 03:39:00.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.243" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:39:00.244" starttime="20160205 03:39:00.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.247" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:39:00.248" starttime="20160205 03:39:00.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.251" level="INFO">msg=balance=100000000</msg>
<status status="PASS" endtime="20160205 03:39:00.252" starttime="20160205 03:39:00.249"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.259" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:00.259" starttime="20160205 03:39:00.257"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.260" starttime="20160205 03:39:00.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.263" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:00.263" starttime="20160205 03:39:00.261"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.264" starttime="20160205 03:39:00.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.266" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:00.267" starttime="20160205 03:39:00.265"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.267" starttime="20160205 03:39:00.264"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:00.268" starttime="20160205 03:39:00.253"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:39:00.270" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:39:00.270" starttime="20160205 03:39:00.268"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.272" starttime="20160205 03:39:00.271"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.274" starttime="20160205 03:39:00.273"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.275" starttime="20160205 03:39:00.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.277" starttime="20160205 03:39:00.276"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.278" starttime="20160205 03:39:00.277"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.280" starttime="20160205 03:39:00.279"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.282" starttime="20160205 03:39:00.281"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.283" starttime="20160205 03:39:00.282"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.285" starttime="20160205 03:39:00.284"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.287" starttime="20160205 03:39:00.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.288" starttime="20160205 03:39:00.287"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:00.290" starttime="20160205 03:39:00.289"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:39:00.293" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000']</msg>
<msg timestamp="20160205 03:39:01.491" level="INFO">03:39:01,486 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:39:01.492" starttime="20160205 03:39:00.292"></status>
</kw>
<msg timestamp="20160205 03:39:01.496" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:39:01.497" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:39:01.494" starttime="20160205 03:39:00.291"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:39:01.510" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:39:01.509" starttime="20160205 03:39:01.506"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.514" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:39:01.513" starttime="20160205 03:39:01.511"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.518" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:39:01.518" starttime="20160205 03:39:01.515"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.525" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:39:01.526" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:39:01.527" starttime="20160205 03:39:01.522"></status>
</kw>
<msg timestamp="20160205 03:39:01.529" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:39:01.529" level="INFO">${return_log_entry} = 2016-02-05 03:39:01,486 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:39:01.528" starttime="20160205 03:39:01.520"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.540" starttime="20160205 03:39:01.538"></status>
</kw>
<msg timestamp="20160205 03:39:01.542" level="INFO">${return_log_entry} = 2016-02-05 03:39:01,486 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:39:01.541" starttime="20160205 03:39:01.531"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.552" starttime="20160205 03:39:01.549"></status>
</kw>
<msg timestamp="20160205 03:39:01.554" level="INFO">${return_log_entry} = 2016-02-05 03:39:01,486 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:39:01.553" starttime="20160205 03:39:01.543"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.564" starttime="20160205 03:39:01.561"></status>
</kw>
<msg timestamp="20160205 03:39:01.566" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:39:01.565" starttime="20160205 03:39:01.555"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.579" starttime="20160205 03:39:01.577"></status>
</kw>
<msg timestamp="20160205 03:39:01.581" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:39:01.581" starttime="20160205 03:39:01.567"></status>
</kw>
<msg timestamp="20160205 03:39:01.584" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:39:01.583" starttime="20160205 03:39:01.499"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.595" starttime="20160205 03:39:01.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.598" starttime="20160205 03:39:01.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.601" starttime="20160205 03:39:01.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:39:01.614" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:39:01.615" starttime="20160205 03:39:01.611"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:01.616" starttime="20160205 03:39:01.609"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:01.617" starttime="20160205 03:39:01.602"></status>
</kw>
<status status="PASS" endtime="20160205 03:39:01.618" starttime="20160205 03:39:01.586"></status>
</kw>
<msg timestamp="20160205 03:39:01.622" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:39:01.620" starttime="20160205 03:39:00.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:39:01.625" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:39:01.626" starttime="20160205 03:39:01.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:01.628" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:39:01.629" starttime="20160205 03:39:01.627"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.630" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160205 03:39:01.631" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160205 03:39:01.631" starttime="20160205 03:39:01.629"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160205 03:39:01.635" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:39:01.634" starttime="20160205 03:39:01.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.636" starttime="20160205 03:39:01.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:39:01.637" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160205 03:39:01.638" starttime="20160205 03:39:01.636"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:39:01.653" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:39:01.652" starttime="20160205 03:39:01.651"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:39:01.655" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:39:01.655" starttime="20160205 03:39:01.654"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:39:01.657" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:39:01.657" starttime="20160205 03:39:01.656"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:39:01.659" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20160205 03:39:01.659" starttime="20160205 03:39:01.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.660" starttime="20160205 03:39:01.660"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:39:01.663" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:01.664" starttime="20160205 03:39:01.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.665" starttime="20160205 03:39:01.664"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:39:01.667" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:01.668" starttime="20160205 03:39:01.665"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:39:01.671" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:01.671" starttime="20160205 03:39:01.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.672" starttime="20160205 03:39:01.671"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.674" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:01.675" starttime="20160205 03:39:01.673"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:39:01.678" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:39:01.678" starttime="20160205 03:39:01.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:39:01.679" starttime="20160205 03:39:01.679"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:39:01.689" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:21.920" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:21.918" starttime="20160205 03:39:01.680"></status>
</kw>
<msg timestamp="20160205 03:41:21.924" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:21.924" starttime="20160205 03:39:01.646"></status>
</kw>
<msg timestamp="20160205 03:41:21.926" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:21.925" starttime="20160205 03:39:01.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:21.928" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:41:21.929" starttime="20160205 03:41:21.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:41:21.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:21.932" starttime="20160205 03:41:21.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.933" starttime="20160205 03:41:21.932"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:21.948" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:21.948" starttime="20160205 03:41:21.945"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:21.949" starttime="20160205 03:41:21.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:21.952" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:21.952" starttime="20160205 03:41:21.950"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:21.953" starttime="20160205 03:41:21.949"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:21.955" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:21.956" starttime="20160205 03:41:21.954"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:21.956" starttime="20160205 03:41:21.953"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:21.957" starttime="20160205 03:41:21.942"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:21.959" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:21.959" starttime="20160205 03:41:21.957"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.961" starttime="20160205 03:41:21.960"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.963" starttime="20160205 03:41:21.961"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.964" starttime="20160205 03:41:21.963"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.966" starttime="20160205 03:41:21.965"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.967" starttime="20160205 03:41:21.966"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:21.969" starttime="20160205 03:41:21.968"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:21.971" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:41:22.104" level="INFO">03:41:22,095 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:41:22,096 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:41:22,097 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426291
03:41:22,098 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:41:22,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:41:22,100 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:41:22,101 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:41:22,102 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.105" starttime="20160205 03:41:21.970"></status>
</kw>
<msg timestamp="20160205 03:41:22.106" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.107" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:22.106" starttime="20160205 03:41:21.969"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.113" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:22.113" starttime="20160205 03:41:22.111"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.115" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.115" starttime="20160205 03:41:22.114"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.117" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.117" starttime="20160205 03:41:22.116"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.120" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.121" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.121" starttime="20160205 03:41:22.119"></status>
</kw>
<msg timestamp="20160205 03:41:22.122" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.122" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,095 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.122" starttime="20160205 03:41:22.118"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.128" starttime="20160205 03:41:22.127"></status>
</kw>
<msg timestamp="20160205 03:41:22.129" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,095 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.129" starttime="20160205 03:41:22.123"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.134" starttime="20160205 03:41:22.133"></status>
</kw>
<msg timestamp="20160205 03:41:22.135" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,095 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.134" starttime="20160205 03:41:22.130"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.140" starttime="20160205 03:41:22.138"></status>
</kw>
<msg timestamp="20160205 03:41:22.140" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.140" starttime="20160205 03:41:22.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.147" starttime="20160205 03:41:22.146"></status>
</kw>
<msg timestamp="20160205 03:41:22.148" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.147" starttime="20160205 03:41:22.141"></status>
</kw>
<msg timestamp="20160205 03:41:22.149" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.148" starttime="20160205 03:41:22.108"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.155" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:41:22.155" starttime="20160205 03:41:22.153"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.157" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.157" starttime="20160205 03:41:22.156"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.159" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.159" starttime="20160205 03:41:22.158"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.162" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.163" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.164" starttime="20160205 03:41:22.161"></status>
</kw>
<msg timestamp="20160205 03:41:22.165" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.165" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,096 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.164" starttime="20160205 03:41:22.160"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.170" starttime="20160205 03:41:22.169"></status>
</kw>
<msg timestamp="20160205 03:41:22.171" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,096 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.170" starttime="20160205 03:41:22.166"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.176" starttime="20160205 03:41:22.175"></status>
</kw>
<msg timestamp="20160205 03:41:22.176" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,096 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.176" starttime="20160205 03:41:22.171"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.181" starttime="20160205 03:41:22.180"></status>
</kw>
<msg timestamp="20160205 03:41:22.182" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.182" starttime="20160205 03:41:22.177"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.189" starttime="20160205 03:41:22.188"></status>
</kw>
<msg timestamp="20160205 03:41:22.190" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.189" starttime="20160205 03:41:22.183"></status>
</kw>
<msg timestamp="20160205 03:41:22.191" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.191" starttime="20160205 03:41:22.150"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.198" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:41:22.198" starttime="20160205 03:41:22.196"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.200" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.200" starttime="20160205 03:41:22.199"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.202" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.202" starttime="20160205 03:41:22.201"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.206" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.207" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.207" starttime="20160205 03:41:22.204"></status>
</kw>
<msg timestamp="20160205 03:41:22.208" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.208" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,098 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.207" starttime="20160205 03:41:22.203"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.213" starttime="20160205 03:41:22.212"></status>
</kw>
<msg timestamp="20160205 03:41:22.214" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,098 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.214" starttime="20160205 03:41:22.209"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.218" starttime="20160205 03:41:22.217"></status>
</kw>
<msg timestamp="20160205 03:41:22.219" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,098 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.219" starttime="20160205 03:41:22.215"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.224" starttime="20160205 03:41:22.223"></status>
</kw>
<msg timestamp="20160205 03:41:22.225" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.225" starttime="20160205 03:41:22.220"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.231" starttime="20160205 03:41:22.230"></status>
</kw>
<msg timestamp="20160205 03:41:22.232" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.232" starttime="20160205 03:41:22.225"></status>
</kw>
<msg timestamp="20160205 03:41:22.233" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:22.233" starttime="20160205 03:41:22.192"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.240" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:41:22.240" starttime="20160205 03:41:22.238"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.242" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.241" starttime="20160205 03:41:22.240"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.244" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.243" starttime="20160205 03:41:22.242"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.247" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.247" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.248" starttime="20160205 03:41:22.245"></status>
</kw>
<msg timestamp="20160205 03:41:22.249" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.249" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,097 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.248" starttime="20160205 03:41:22.244"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.254" starttime="20160205 03:41:22.253"></status>
</kw>
<msg timestamp="20160205 03:41:22.254" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,097 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.254" starttime="20160205 03:41:22.249"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.259" starttime="20160205 03:41:22.258"></status>
</kw>
<msg timestamp="20160205 03:41:22.260" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,097 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.259" starttime="20160205 03:41:22.255"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.265" starttime="20160205 03:41:22.263"></status>
</kw>
<msg timestamp="20160205 03:41:22.266" level="INFO">${resultCode} = 2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.265" starttime="20160205 03:41:22.260"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.272" starttime="20160205 03:41:22.271"></status>
</kw>
<msg timestamp="20160205 03:41:22.273" level="INFO">${resultCode} = 2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.273" starttime="20160205 03:41:22.267"></status>
</kw>
<msg timestamp="20160205 03:41:22.275" level="INFO">${id} = 2426291</msg>
<status status="PASS" endtime="20160205 03:41:22.274" starttime="20160205 03:41:22.234"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.281" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:41:22.281" starttime="20160205 03:41:22.279"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.283" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.282" starttime="20160205 03:41:22.282"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.285" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.284" starttime="20160205 03:41:22.283"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.288" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.289" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.290" starttime="20160205 03:41:22.287"></status>
</kw>
<msg timestamp="20160205 03:41:22.291" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.291" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.290" starttime="20160205 03:41:22.286"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.295" starttime="20160205 03:41:22.294"></status>
</kw>
<msg timestamp="20160205 03:41:22.296" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.296" starttime="20160205 03:41:22.291"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.301" starttime="20160205 03:41:22.300"></status>
</kw>
<msg timestamp="20160205 03:41:22.301" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.301" starttime="20160205 03:41:22.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.306" starttime="20160205 03:41:22.305"></status>
</kw>
<msg timestamp="20160205 03:41:22.307" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.307" starttime="20160205 03:41:22.302"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.313" starttime="20160205 03:41:22.312"></status>
</kw>
<msg timestamp="20160205 03:41:22.314" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.314" starttime="20160205 03:41:22.308"></status>
</kw>
<msg timestamp="20160205 03:41:22.315" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:22.315" starttime="20160205 03:41:22.276"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.322" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:41:22.321" starttime="20160205 03:41:22.320"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.323" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.323" starttime="20160205 03:41:22.322"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.325" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.325" starttime="20160205 03:41:22.324"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.328" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.329" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.329" starttime="20160205 03:41:22.327"></status>
</kw>
<msg timestamp="20160205 03:41:22.330" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.331" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,100 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:22.330" starttime="20160205 03:41:22.326"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.335" starttime="20160205 03:41:22.334"></status>
</kw>
<msg timestamp="20160205 03:41:22.336" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,100 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:22.336" starttime="20160205 03:41:22.331"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.341" starttime="20160205 03:41:22.340"></status>
</kw>
<msg timestamp="20160205 03:41:22.342" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,100 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:22.341" starttime="20160205 03:41:22.337"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.347" starttime="20160205 03:41:22.345"></status>
</kw>
<msg timestamp="20160205 03:41:22.347" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:22.347" starttime="20160205 03:41:22.342"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.354" starttime="20160205 03:41:22.353"></status>
</kw>
<msg timestamp="20160205 03:41:22.355" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:22.354" starttime="20160205 03:41:22.348"></status>
</kw>
<msg timestamp="20160205 03:41:22.356" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:22.355" starttime="20160205 03:41:22.317"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.362" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:41:22.361" starttime="20160205 03:41:22.360"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.364" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.363" starttime="20160205 03:41:22.362"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.365" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.365" starttime="20160205 03:41:22.364"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.369" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.369" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.370" starttime="20160205 03:41:22.367"></status>
</kw>
<msg timestamp="20160205 03:41:22.371" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.371" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,101 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.370" starttime="20160205 03:41:22.366"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.376" starttime="20160205 03:41:22.375"></status>
</kw>
<msg timestamp="20160205 03:41:22.376" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,101 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.376" starttime="20160205 03:41:22.372"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.382" starttime="20160205 03:41:22.381"></status>
</kw>
<msg timestamp="20160205 03:41:22.383" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,101 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.382" starttime="20160205 03:41:22.377"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.387" starttime="20160205 03:41:22.386"></status>
</kw>
<msg timestamp="20160205 03:41:22.388" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.388" starttime="20160205 03:41:22.383"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.394" starttime="20160205 03:41:22.393"></status>
</kw>
<msg timestamp="20160205 03:41:22.395" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.395" starttime="20160205 03:41:22.389"></status>
</kw>
<msg timestamp="20160205 03:41:22.396" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.396" starttime="20160205 03:41:22.357"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.402" starttime="20160205 03:41:22.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.403" starttime="20160205 03:41:22.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.404" starttime="20160205 03:41:22.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:22.410" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:22.411" starttime="20160205 03:41:22.409"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.411" starttime="20160205 03:41:22.408"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.412" starttime="20160205 03:41:22.405"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.412" starttime="20160205 03:41:22.397"></status>
</kw>
<msg timestamp="20160205 03:41:22.415" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:41:22.415" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:41:22.416" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:41:22.416" level="INFO">${id} = 2426291</msg>
<msg timestamp="20160205 03:41:22.416" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:41:22.416" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:41:22.417" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:22.414" starttime="20160205 03:41:21.936"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.429" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:22.429" starttime="20160205 03:41:22.427"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.430" starttime="20160205 03:41:22.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.432" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:22.433" starttime="20160205 03:41:22.431"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.433" starttime="20160205 03:41:22.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.436" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:22.437" starttime="20160205 03:41:22.435"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.437" starttime="20160205 03:41:22.434"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.438" starttime="20160205 03:41:22.423"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.440" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:22.441" starttime="20160205 03:41:22.439"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.442" starttime="20160205 03:41:22.441"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.444" starttime="20160205 03:41:22.443"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.446" starttime="20160205 03:41:22.445"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.447" starttime="20160205 03:41:22.446"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.449" starttime="20160205 03:41:22.448"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.450" starttime="20160205 03:41:22.449"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:22.453" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426291']</msg>
<msg timestamp="20160205 03:41:22.578" level="INFO">03:41:22,572 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:41:22,573 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426292
03:41:22,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000
03:41:22,575 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:41:22,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.579" starttime="20160205 03:41:22.452"></status>
</kw>
<msg timestamp="20160205 03:41:22.580" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.581" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:22.580" starttime="20160205 03:41:22.451"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.588" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:22.588" starttime="20160205 03:41:22.586"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.590" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.590" starttime="20160205 03:41:22.589"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.592" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.591" starttime="20160205 03:41:22.590"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.595" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.595" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.596" starttime="20160205 03:41:22.593"></status>
</kw>
<msg timestamp="20160205 03:41:22.597" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.597" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,572 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.596" starttime="20160205 03:41:22.592"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.602" starttime="20160205 03:41:22.601"></status>
</kw>
<msg timestamp="20160205 03:41:22.603" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,572 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.603" starttime="20160205 03:41:22.598"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.608" starttime="20160205 03:41:22.607"></status>
</kw>
<msg timestamp="20160205 03:41:22.608" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,572 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:22.608" starttime="20160205 03:41:22.604"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.613" starttime="20160205 03:41:22.612"></status>
</kw>
<msg timestamp="20160205 03:41:22.614" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.614" starttime="20160205 03:41:22.609"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.620" starttime="20160205 03:41:22.619"></status>
</kw>
<msg timestamp="20160205 03:41:22.621" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.621" starttime="20160205 03:41:22.614"></status>
</kw>
<msg timestamp="20160205 03:41:22.622" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:22.622" starttime="20160205 03:41:22.582"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.629" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:41:22.628" starttime="20160205 03:41:22.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.631" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.630" starttime="20160205 03:41:22.629"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.632" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.632" starttime="20160205 03:41:22.631"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.635" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.636" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.636" starttime="20160205 03:41:22.634"></status>
</kw>
<msg timestamp="20160205 03:41:22.637" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.638" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,573 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.637" starttime="20160205 03:41:22.633"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.642" starttime="20160205 03:41:22.641"></status>
</kw>
<msg timestamp="20160205 03:41:22.643" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,573 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.642" starttime="20160205 03:41:22.638"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.648" starttime="20160205 03:41:22.647"></status>
</kw>
<msg timestamp="20160205 03:41:22.649" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,573 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.648" starttime="20160205 03:41:22.643"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.653" starttime="20160205 03:41:22.652"></status>
</kw>
<msg timestamp="20160205 03:41:22.654" level="INFO">${resultCode} = 2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.654" starttime="20160205 03:41:22.649"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.660" starttime="20160205 03:41:22.659"></status>
</kw>
<msg timestamp="20160205 03:41:22.661" level="INFO">${resultCode} = 2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.661" starttime="20160205 03:41:22.655"></status>
</kw>
<msg timestamp="20160205 03:41:22.662" level="INFO">${accountId} = 2426292</msg>
<status status="PASS" endtime="20160205 03:41:22.662" starttime="20160205 03:41:22.623"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.668" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:41:22.668" starttime="20160205 03:41:22.667"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.670" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.670" starttime="20160205 03:41:22.669"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.672" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.672" starttime="20160205 03:41:22.671"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.676" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.676" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.677" starttime="20160205 03:41:22.674"></status>
</kw>
<msg timestamp="20160205 03:41:22.678" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.678" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.677" starttime="20160205 03:41:22.673"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.682" starttime="20160205 03:41:22.681"></status>
</kw>
<msg timestamp="20160205 03:41:22.683" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.683" starttime="20160205 03:41:22.678"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.688" starttime="20160205 03:41:22.687"></status>
</kw>
<msg timestamp="20160205 03:41:22.689" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.688" starttime="20160205 03:41:22.684"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.693" starttime="20160205 03:41:22.692"></status>
</kw>
<msg timestamp="20160205 03:41:22.694" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.694" starttime="20160205 03:41:22.689"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.701" starttime="20160205 03:41:22.700"></status>
</kw>
<msg timestamp="20160205 03:41:22.701" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.701" starttime="20160205 03:41:22.695"></status>
</kw>
<msg timestamp="20160205 03:41:22.702" level="INFO">${balance} = 99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.702" starttime="20160205 03:41:22.663"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.709" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:41:22.709" starttime="20160205 03:41:22.707"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.711" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.711" starttime="20160205 03:41:22.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.713" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.713" starttime="20160205 03:41:22.712"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.716" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.717" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.717" starttime="20160205 03:41:22.715"></status>
</kw>
<msg timestamp="20160205 03:41:22.718" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.718" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,575 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.717" starttime="20160205 03:41:22.714"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.723" starttime="20160205 03:41:22.722"></status>
</kw>
<msg timestamp="20160205 03:41:22.723" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,575 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.723" starttime="20160205 03:41:22.719"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.728" starttime="20160205 03:41:22.727"></status>
</kw>
<msg timestamp="20160205 03:41:22.729" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,575 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.729" starttime="20160205 03:41:22.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.734" starttime="20160205 03:41:22.733"></status>
</kw>
<msg timestamp="20160205 03:41:22.735" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.735" starttime="20160205 03:41:22.730"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.742" starttime="20160205 03:41:22.741"></status>
</kw>
<msg timestamp="20160205 03:41:22.743" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.742" starttime="20160205 03:41:22.736"></status>
</kw>
<msg timestamp="20160205 03:41:22.744" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:22.743" starttime="20160205 03:41:22.704"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:22.750" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:41:22.750" starttime="20160205 03:41:22.749"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.753" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:22.752" starttime="20160205 03:41:22.751"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.754" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:22.754" starttime="20160205 03:41:22.753"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.757" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:22.758" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:22.758" starttime="20160205 03:41:22.756"></status>
</kw>
<msg timestamp="20160205 03:41:22.759" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:22.759" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.759" starttime="20160205 03:41:22.755"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.764" starttime="20160205 03:41:22.763"></status>
</kw>
<msg timestamp="20160205 03:41:22.765" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.764" starttime="20160205 03:41:22.760"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.769" starttime="20160205 03:41:22.768"></status>
</kw>
<msg timestamp="20160205 03:41:22.770" level="INFO">${return_log_entry} = 2016-02-05 03:41:22,577 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:22.770" starttime="20160205 03:41:22.765"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.775" starttime="20160205 03:41:22.773"></status>
</kw>
<msg timestamp="20160205 03:41:22.776" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.775" starttime="20160205 03:41:22.771"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.783" starttime="20160205 03:41:22.782"></status>
</kw>
<msg timestamp="20160205 03:41:22.784" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.783" starttime="20160205 03:41:22.777"></status>
</kw>
<msg timestamp="20160205 03:41:22.785" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.784" starttime="20160205 03:41:22.745"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.790" starttime="20160205 03:41:22.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.791" starttime="20160205 03:41:22.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:22.793" starttime="20160205 03:41:22.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:22.800" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:22.800" starttime="20160205 03:41:22.798"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.801" starttime="20160205 03:41:22.796"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.801" starttime="20160205 03:41:22.793"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.802" starttime="20160205 03:41:22.786"></status>
</kw>
<msg timestamp="20160205 03:41:22.803" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:41:22.804" level="INFO">${accId} = 2426292</msg>
<msg timestamp="20160205 03:41:22.804" level="INFO">${bal} = 99940000</msg>
<msg timestamp="20160205 03:41:22.804" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:41:22.804" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:41:22.803" starttime="20160205 03:41:22.418"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-3*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.808" level="INFO">${target_bal} = 99940000</msg>
<status status="PASS" endtime="20160205 03:41:22.808" starttime="20160205 03:41:22.805"></status>
</kw>
<kw type="kw" name="${target_bal_mex} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-6*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:22.811" level="INFO">${target_bal_mex} = 99880000</msg>
<status status="PASS" endtime="20160205 03:41:22.811" starttime="20160205 03:41:22.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='VIRGIN_COLUMBIA'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>99920080</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE IF</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>${target_bal_mex}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160205 03:41:22.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:22.818" starttime="20160205 03:41:22.817"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:22.819" starttime="20160205 03:41:22.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:22.820" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160205 03:41:22.821" starttime="20160205 03:41:22.820"></status>
</kw>
<doc>Test will make a MOC call, duration 136s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:41:22.822" starttime="20160205 03:39:00.182"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 136s - longer than one slice (more than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:22.826" starttime="20160205 03:38:55.857"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:22.835" starttime="20160205 03:38:55.840"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s2-s1-s4" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s2-s1-s4-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:41:23.009" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:23.017" level="INFO">${date} = Fri Feb  5 03:41:23 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:23.016" starttime="20160205 03:41:23.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:23.021" level="INFO">Date and time: Fri Feb  5 03:41:23 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:23.023" starttime="20160205 03:41:23.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:23.026" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:41:23.028" starttime="20160205 03:41:23.024"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.087" starttime="20160205 03:41:23.084"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.142" starttime="20160205 03:41:23.095"></status>
</kw>
<msg timestamp="20160205 03:41:23.144" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160205 03:41:23.144" starttime="20160205 03:41:23.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:23.150" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:23.636" level="INFO">Read output: Last login: Fri Feb  5 02:38:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:23.636" starttime="20160205 03:41:23.149"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:23.637" starttime="20160205 03:41:23.145"></status>
</kw>
<msg timestamp="20160205 03:41:23.638" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160205 03:41:23.638" starttime="20160205 03:41:23.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:23.642" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:23.642" starttime="20160205 03:41:23.639"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:23.644" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:41:23.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:23.913" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:23.913" starttime="20160205 03:41:23.643"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.917" starttime="20160205 03:41:23.915"></status>
</kw>
<msg timestamp="20160205 03:41:23.917" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:23.918" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:23.917" starttime="20160205 03:41:23.914"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.922" starttime="20160205 03:41:23.921"></status>
</kw>
<msg timestamp="20160205 03:41:23.923" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:23.922" starttime="20160205 03:41:23.918"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:41:23.925" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:23.924" starttime="20160205 03:41:23.923"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:23.927" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:23.926" starttime="20160205 03:41:23.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.928" starttime="20160205 03:41:23.927"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.933" starttime="20160205 03:41:23.932"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.938" starttime="20160205 03:41:23.934"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:23.938" starttime="20160205 03:41:23.929"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.942" starttime="20160205 03:41:23.941"></status>
</kw>
<msg timestamp="20160205 03:41:23.943" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:23.943" starttime="20160205 03:41:23.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.944" starttime="20160205 03:41:23.943"></status>
</kw>
<msg timestamp="20160205 03:41:23.946" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:41:23.946" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:23.945" starttime="20160205 03:41:23.046"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:23.973" starttime="20160205 03:41:23.972"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.016" starttime="20160205 03:41:23.976"></status>
</kw>
<msg timestamp="20160205 03:41:24.019" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160205 03:41:24.018" starttime="20160205 03:41:23.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:24.024" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:24.490" level="INFO">Read output: Last login: Fri Feb  5 02:38:57 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:24.491" starttime="20160205 03:41:24.022"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:24.491" starttime="20160205 03:41:24.019"></status>
</kw>
<msg timestamp="20160205 03:41:24.493" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160205 03:41:24.492" starttime="20160205 03:41:23.968"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:24.497" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:24.497" starttime="20160205 03:41:24.494"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:24.499" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:41:24.875" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:24.876" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:24.875" starttime="20160205 03:41:24.498"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.880" starttime="20160205 03:41:24.878"></status>
</kw>
<msg timestamp="20160205 03:41:24.880" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:24.881" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:24.880" starttime="20160205 03:41:24.877"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.885" starttime="20160205 03:41:24.884"></status>
</kw>
<msg timestamp="20160205 03:41:24.886" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:24.886" starttime="20160205 03:41:24.881"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:41:24.890" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:24.888" starttime="20160205 03:41:24.887"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:24.892" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:24.892" starttime="20160205 03:41:24.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.894" starttime="20160205 03:41:24.893"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.900" starttime="20160205 03:41:24.899"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.902" starttime="20160205 03:41:24.901"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:24.905" starttime="20160205 03:41:24.895"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.911" starttime="20160205 03:41:24.909"></status>
</kw>
<msg timestamp="20160205 03:41:24.912" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:24.911" starttime="20160205 03:41:24.906"></status>
</kw>
<msg timestamp="20160205 03:41:24.913" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:41:24.914" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:24.912" starttime="20160205 03:41:23.955"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.940" starttime="20160205 03:41:24.939"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:24.985" starttime="20160205 03:41:24.944"></status>
</kw>
<msg timestamp="20160205 03:41:24.986" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160205 03:41:24.985" starttime="20160205 03:41:24.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:24.991" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:25.485" level="INFO">Read output: Last login: Fri Feb  5 02:38:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:25.486" starttime="20160205 03:41:24.989"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:25.487" starttime="20160205 03:41:24.986"></status>
</kw>
<msg timestamp="20160205 03:41:25.489" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160205 03:41:25.489" starttime="20160205 03:41:24.935"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:25.494" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:25.494" starttime="20160205 03:41:25.490"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:25.496" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:41:25.673" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:25.674" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:25.674" starttime="20160205 03:41:25.495"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.678" starttime="20160205 03:41:25.676"></status>
</kw>
<msg timestamp="20160205 03:41:25.679" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:25.679" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:25.678" starttime="20160205 03:41:25.675"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.684" starttime="20160205 03:41:25.683"></status>
</kw>
<msg timestamp="20160205 03:41:25.685" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:25.684" starttime="20160205 03:41:25.680"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:25.687" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:25.686" starttime="20160205 03:41:25.685"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:25.689" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:25.688" starttime="20160205 03:41:25.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.690" starttime="20160205 03:41:25.689"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.696" starttime="20160205 03:41:25.694"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.697" starttime="20160205 03:41:25.696"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:25.699" starttime="20160205 03:41:25.691"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.705" starttime="20160205 03:41:25.704"></status>
</kw>
<msg timestamp="20160205 03:41:25.706" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:25.705" starttime="20160205 03:41:25.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.707" starttime="20160205 03:41:25.706"></status>
</kw>
<msg timestamp="20160205 03:41:25.710" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:41:25.710" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:25.708" starttime="20160205 03:41:24.922"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.736" starttime="20160205 03:41:25.735"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:25.779" starttime="20160205 03:41:25.740"></status>
</kw>
<msg timestamp="20160205 03:41:25.780" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160205 03:41:25.780" starttime="20160205 03:41:25.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:25.785" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:26.184" level="INFO">Read output: Last login: Fri Feb  5 02:38:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:26.184" starttime="20160205 03:41:25.784"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.185" starttime="20160205 03:41:25.781"></status>
</kw>
<msg timestamp="20160205 03:41:26.187" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160205 03:41:26.187" starttime="20160205 03:41:25.731"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:26.192" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:26.192" starttime="20160205 03:41:26.188"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:26.193" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:41:26.270" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:26.271" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:26.270" starttime="20160205 03:41:26.192"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.274" starttime="20160205 03:41:26.273"></status>
</kw>
<msg timestamp="20160205 03:41:26.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:26.275" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:26.275" starttime="20160205 03:41:26.271"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.279" starttime="20160205 03:41:26.279"></status>
</kw>
<msg timestamp="20160205 03:41:26.280" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:26.280" starttime="20160205 03:41:26.276"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:26.282" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:26.282" starttime="20160205 03:41:26.281"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:26.284" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:26.284" starttime="20160205 03:41:26.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.285" starttime="20160205 03:41:26.284"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.291" starttime="20160205 03:41:26.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.294" starttime="20160205 03:41:26.291"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.294" starttime="20160205 03:41:26.286"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.298" starttime="20160205 03:41:26.297"></status>
</kw>
<msg timestamp="20160205 03:41:26.299" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:26.299" starttime="20160205 03:41:26.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.301" starttime="20160205 03:41:26.300"></status>
</kw>
<msg timestamp="20160205 03:41:26.302" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:41:26.302" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:26.301" starttime="20160205 03:41:25.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:26.304" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:26.305" starttime="20160205 03:41:26.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:26.306" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:26.307" starttime="20160205 03:41:26.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:26.309" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:26.309" starttime="20160205 03:41:26.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:26.311" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:26.312" starttime="20160205 03:41:26.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:41:26.313" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:26.314" starttime="20160205 03:41:26.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:41:26.315" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:26.315" starttime="20160205 03:41:26.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:41:26.317" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:26.317" starttime="20160205 03:41:26.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:41:26.319" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:26.319" starttime="20160205 03:41:26.318"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.325" starttime="20160205 03:41:26.323"></status>
</kw>
<msg timestamp="20160205 03:41:26.326" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:26.326" starttime="20160205 03:41:26.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.328" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:26.328" starttime="20160205 03:41:26.327"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.329" starttime="20160205 03:41:22.998"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s4-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.335" starttime="20160205 03:41:26.334"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:41:26.337" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:26.336" starttime="20160205 03:41:26.336"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.344" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:41:26.345" starttime="20160205 03:41:26.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.346" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:41:26.347" starttime="20160205 03:41:26.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.348" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:41:26.348" starttime="20160205 03:41:26.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.350" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:41:26.350" starttime="20160205 03:41:26.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.352" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:26.352" starttime="20160205 03:41:26.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.354" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:41:26.354" starttime="20160205 03:41:26.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.356" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:26.356" starttime="20160205 03:41:26.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.358" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:41:26.358" starttime="20160205 03:41:26.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.360" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:26.360" starttime="20160205 03:41:26.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.361" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:26.362" starttime="20160205 03:41:26.361"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.369" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:26.369" starttime="20160205 03:41:26.367"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.369" starttime="20160205 03:41:26.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.372" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:26.373" starttime="20160205 03:41:26.371"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.373" starttime="20160205 03:41:26.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.376" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:26.376" starttime="20160205 03:41:26.374"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.376" starttime="20160205 03:41:26.374"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:26.377" starttime="20160205 03:41:26.363"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.379" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:26.380" starttime="20160205 03:41:26.378"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.381" starttime="20160205 03:41:26.380"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.383" starttime="20160205 03:41:26.382"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.385" starttime="20160205 03:41:26.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.386" starttime="20160205 03:41:26.385"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.387" starttime="20160205 03:41:26.386"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.389" starttime="20160205 03:41:26.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.390" starttime="20160205 03:41:26.389"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.392" starttime="20160205 03:41:26.391"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.394" starttime="20160205 03:41:26.393"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.395" starttime="20160205 03:41:26.394"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.397" starttime="20160205 03:41:26.396"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:26.398" starttime="20160205 03:41:26.397"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:26.401" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:41:26.979" level="INFO">03:41:26,977 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:26.980" starttime="20160205 03:41:26.400"></status>
</kw>
<msg timestamp="20160205 03:41:26.981" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:26.981" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:26.980" starttime="20160205 03:41:26.399"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:26.987" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:26.987" starttime="20160205 03:41:26.986"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.989" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:26.989" starttime="20160205 03:41:26.988"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.991" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:26.990" starttime="20160205 03:41:26.990"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:26.993" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:26.994" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:26.994" starttime="20160205 03:41:26.992"></status>
</kw>
<msg timestamp="20160205 03:41:26.995" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:26.995" level="INFO">${return_log_entry} = 2016-02-05 03:41:26,977 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:26.995" starttime="20160205 03:41:26.991"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.000" starttime="20160205 03:41:26.999"></status>
</kw>
<msg timestamp="20160205 03:41:27.002" level="INFO">${return_log_entry} = 2016-02-05 03:41:26,977 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:27.001" starttime="20160205 03:41:26.996"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.006" starttime="20160205 03:41:27.005"></status>
</kw>
<msg timestamp="20160205 03:41:27.007" level="INFO">${return_log_entry} = 2016-02-05 03:41:26,977 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:27.007" starttime="20160205 03:41:27.003"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.012" starttime="20160205 03:41:27.011"></status>
</kw>
<msg timestamp="20160205 03:41:27.013" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:27.012" starttime="20160205 03:41:27.008"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.019" starttime="20160205 03:41:27.018"></status>
</kw>
<msg timestamp="20160205 03:41:27.019" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:27.019" starttime="20160205 03:41:27.013"></status>
</kw>
<msg timestamp="20160205 03:41:27.021" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:27.020" starttime="20160205 03:41:26.982"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.026" starttime="20160205 03:41:27.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.027" starttime="20160205 03:41:27.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.028" starttime="20160205 03:41:27.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:27.034" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:27.034" starttime="20160205 03:41:27.032"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:27.035" starttime="20160205 03:41:27.032"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:27.035" starttime="20160205 03:41:27.029"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:27.036" starttime="20160205 03:41:27.022"></status>
</kw>
<msg timestamp="20160205 03:41:27.037" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:41:27.036" starttime="20160205 03:41:26.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:41:27.039" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:27.039" starttime="20160205 03:41:27.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:27.040" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:41:27.041" starttime="20160205 03:41:27.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.042" starttime="20160205 03:41:27.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:27.043" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160205 03:41:27.044" starttime="20160205 03:41:27.043"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:27.058" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:41:27.058" starttime="20160205 03:41:27.057"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:27.060" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:41:27.060" starttime="20160205 03:41:27.059"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:41:27.062" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:41:27.062" starttime="20160205 03:41:27.061"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:41:27.064" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160205 03:41:27.064" starttime="20160205 03:41:27.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.066" starttime="20160205 03:41:27.065"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:27.068" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:27.069" starttime="20160205 03:41:27.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.070" starttime="20160205 03:41:27.069"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:41:27.072" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:27.072" starttime="20160205 03:41:27.070"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:27.075" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:27.075" starttime="20160205 03:41:27.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.077" starttime="20160205 03:41:27.076"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:27.079" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:27.079" starttime="20160205 03:41:27.077"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:41:27.082" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:27.082" starttime="20160205 03:41:27.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:27.084" starttime="20160205 03:41:27.083"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:41:27.091" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:30.246" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:30.243" starttime="20160205 03:41:27.084"></status>
</kw>
<msg timestamp="20160205 03:41:30.247" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:30.247" starttime="20160205 03:41:27.052"></status>
</kw>
<msg timestamp="20160205 03:41:30.249" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:30.248" starttime="20160205 03:41:27.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:30.250" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:41:30.251" starttime="20160205 03:41:30.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:30.254" starttime="20160205 03:41:30.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.255" starttime="20160205 03:41:30.254"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.267" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.267" starttime="20160205 03:41:30.265"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.267" starttime="20160205 03:41:30.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.270" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.271" starttime="20160205 03:41:30.269"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.271" starttime="20160205 03:41:30.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.274" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.274" starttime="20160205 03:41:30.272"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.274" starttime="20160205 03:41:30.271"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.275" starttime="20160205 03:41:30.261"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.277" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:30.277" starttime="20160205 03:41:30.275"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.279" starttime="20160205 03:41:30.278"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.280" starttime="20160205 03:41:30.279"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.282" starttime="20160205 03:41:30.281"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.283" starttime="20160205 03:41:30.282"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.284" starttime="20160205 03:41:30.284"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.286" starttime="20160205 03:41:30.285"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:30.288" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:41:30.417" level="INFO">03:41:30,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:41:30,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:41:30,407 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426298
03:41:30,408 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:41:30,409 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:41:30,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:41:30,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:41:30,415 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:41:30.417" starttime="20160205 03:41:30.287"></status>
</kw>
<msg timestamp="20160205 03:41:30.418" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.418" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:30.418" starttime="20160205 03:41:30.287"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.424" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:30.424" starttime="20160205 03:41:30.423"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.426" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.426" starttime="20160205 03:41:30.425"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.428" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.428" starttime="20160205 03:41:30.427"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.431" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.431" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.432" starttime="20160205 03:41:30.429"></status>
</kw>
<msg timestamp="20160205 03:41:30.432" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.433" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.432" starttime="20160205 03:41:30.428"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.437" starttime="20160205 03:41:30.436"></status>
</kw>
<msg timestamp="20160205 03:41:30.438" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.438" starttime="20160205 03:41:30.433"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.442" starttime="20160205 03:41:30.441"></status>
</kw>
<msg timestamp="20160205 03:41:30.443" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,404 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.443" starttime="20160205 03:41:30.439"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.448" starttime="20160205 03:41:30.447"></status>
</kw>
<msg timestamp="20160205 03:41:30.449" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.448" starttime="20160205 03:41:30.444"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.455" starttime="20160205 03:41:30.454"></status>
</kw>
<msg timestamp="20160205 03:41:30.456" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.455" starttime="20160205 03:41:30.449"></status>
</kw>
<msg timestamp="20160205 03:41:30.457" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.456" starttime="20160205 03:41:30.419"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.462" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:41:30.462" starttime="20160205 03:41:30.461"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.464" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.464" starttime="20160205 03:41:30.463"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.466" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.466" starttime="20160205 03:41:30.465"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.469" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.469" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.470" starttime="20160205 03:41:30.468"></status>
</kw>
<msg timestamp="20160205 03:41:30.471" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.471" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:30.470" starttime="20160205 03:41:30.467"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.475" starttime="20160205 03:41:30.474"></status>
</kw>
<msg timestamp="20160205 03:41:30.476" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:30.476" starttime="20160205 03:41:30.472"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.480" starttime="20160205 03:41:30.479"></status>
</kw>
<msg timestamp="20160205 03:41:30.481" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,405 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:30.481" starttime="20160205 03:41:30.477"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.486" starttime="20160205 03:41:30.485"></status>
</kw>
<msg timestamp="20160205 03:41:30.487" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:30.486" starttime="20160205 03:41:30.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.493" starttime="20160205 03:41:30.492"></status>
</kw>
<msg timestamp="20160205 03:41:30.494" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:30.494" starttime="20160205 03:41:30.487"></status>
</kw>
<msg timestamp="20160205 03:41:30.495" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:30.495" starttime="20160205 03:41:30.458"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.501" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:41:30.501" starttime="20160205 03:41:30.500"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.503" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.503" starttime="20160205 03:41:30.502"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.505" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.505" starttime="20160205 03:41:30.504"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.508" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.508" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.509" starttime="20160205 03:41:30.506"></status>
</kw>
<msg timestamp="20160205 03:41:30.509" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.510" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,408 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.509" starttime="20160205 03:41:30.505"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.514" starttime="20160205 03:41:30.513"></status>
</kw>
<msg timestamp="20160205 03:41:30.515" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,408 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.514" starttime="20160205 03:41:30.510"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.521" starttime="20160205 03:41:30.520"></status>
</kw>
<msg timestamp="20160205 03:41:30.521" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,408 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.521" starttime="20160205 03:41:30.515"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.529" starttime="20160205 03:41:30.528"></status>
</kw>
<msg timestamp="20160205 03:41:30.530" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.529" starttime="20160205 03:41:30.522"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.536" starttime="20160205 03:41:30.535"></status>
</kw>
<msg timestamp="20160205 03:41:30.537" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.536" starttime="20160205 03:41:30.530"></status>
</kw>
<msg timestamp="20160205 03:41:30.538" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:30.537" starttime="20160205 03:41:30.496"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.543" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:41:30.543" starttime="20160205 03:41:30.542"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.545" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.545" starttime="20160205 03:41:30.544"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.547" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.547" starttime="20160205 03:41:30.546"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.550" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.550" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.551" starttime="20160205 03:41:30.548"></status>
</kw>
<msg timestamp="20160205 03:41:30.551" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.552" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,407 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.551" starttime="20160205 03:41:30.548"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.556" starttime="20160205 03:41:30.555"></status>
</kw>
<msg timestamp="20160205 03:41:30.557" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,407 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.557" starttime="20160205 03:41:30.552"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.561" starttime="20160205 03:41:30.560"></status>
</kw>
<msg timestamp="20160205 03:41:30.562" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,407 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.562" starttime="20160205 03:41:30.557"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.567" starttime="20160205 03:41:30.565"></status>
</kw>
<msg timestamp="20160205 03:41:30.567" level="INFO">${resultCode} = 2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.567" starttime="20160205 03:41:30.563"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.573" starttime="20160205 03:41:30.572"></status>
</kw>
<msg timestamp="20160205 03:41:30.574" level="INFO">${resultCode} = 2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.574" starttime="20160205 03:41:30.568"></status>
</kw>
<msg timestamp="20160205 03:41:30.575" level="INFO">${id} = 2426298</msg>
<status status="PASS" endtime="20160205 03:41:30.575" starttime="20160205 03:41:30.539"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.581" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:41:30.581" starttime="20160205 03:41:30.579"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.583" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.582" starttime="20160205 03:41:30.582"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.584" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.584" starttime="20160205 03:41:30.583"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.587" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.588" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.588" starttime="20160205 03:41:30.586"></status>
</kw>
<msg timestamp="20160205 03:41:30.589" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.589" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,409 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.589" starttime="20160205 03:41:30.585"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.594" starttime="20160205 03:41:30.593"></status>
</kw>
<msg timestamp="20160205 03:41:30.594" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,409 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.594" starttime="20160205 03:41:30.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.599" starttime="20160205 03:41:30.598"></status>
</kw>
<msg timestamp="20160205 03:41:30.599" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,409 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.599" starttime="20160205 03:41:30.595"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.604" starttime="20160205 03:41:30.603"></status>
</kw>
<msg timestamp="20160205 03:41:30.605" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.604" starttime="20160205 03:41:30.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.611" starttime="20160205 03:41:30.610"></status>
</kw>
<msg timestamp="20160205 03:41:30.611" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.611" starttime="20160205 03:41:30.605"></status>
</kw>
<msg timestamp="20160205 03:41:30.612" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:30.612" starttime="20160205 03:41:30.576"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.619" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:41:30.618" starttime="20160205 03:41:30.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.620" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.620" starttime="20160205 03:41:30.619"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.622" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.622" starttime="20160205 03:41:30.621"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.625" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.626" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.626" starttime="20160205 03:41:30.624"></status>
</kw>
<msg timestamp="20160205 03:41:30.627" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.627" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:30.626" starttime="20160205 03:41:30.623"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.631" starttime="20160205 03:41:30.631"></status>
</kw>
<msg timestamp="20160205 03:41:30.632" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:30.632" starttime="20160205 03:41:30.628"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.636" starttime="20160205 03:41:30.635"></status>
</kw>
<msg timestamp="20160205 03:41:30.637" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:30.637" starttime="20160205 03:41:30.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.642" starttime="20160205 03:41:30.641"></status>
</kw>
<msg timestamp="20160205 03:41:30.642" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:30.642" starttime="20160205 03:41:30.638"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.649" starttime="20160205 03:41:30.648"></status>
</kw>
<msg timestamp="20160205 03:41:30.649" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:30.649" starttime="20160205 03:41:30.643"></status>
</kw>
<msg timestamp="20160205 03:41:30.650" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:30.650" starttime="20160205 03:41:30.613"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.656" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:41:30.656" starttime="20160205 03:41:30.655"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.658" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.657" starttime="20160205 03:41:30.657"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.660" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.659" starttime="20160205 03:41:30.658"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.662" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.663" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.663" starttime="20160205 03:41:30.661"></status>
</kw>
<msg timestamp="20160205 03:41:30.664" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.664" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.664" starttime="20160205 03:41:30.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.668" starttime="20160205 03:41:30.667"></status>
</kw>
<msg timestamp="20160205 03:41:30.669" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.669" starttime="20160205 03:41:30.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.673" starttime="20160205 03:41:30.673"></status>
</kw>
<msg timestamp="20160205 03:41:30.674" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.674" starttime="20160205 03:41:30.670"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.679" starttime="20160205 03:41:30.678"></status>
</kw>
<msg timestamp="20160205 03:41:30.679" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.679" starttime="20160205 03:41:30.675"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.685" starttime="20160205 03:41:30.684"></status>
</kw>
<msg timestamp="20160205 03:41:30.686" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.686" starttime="20160205 03:41:30.680"></status>
</kw>
<msg timestamp="20160205 03:41:30.687" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.687" starttime="20160205 03:41:30.651"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.692" starttime="20160205 03:41:30.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.693" starttime="20160205 03:41:30.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.695" starttime="20160205 03:41:30.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:30.700" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:30.701" starttime="20160205 03:41:30.699"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.701" starttime="20160205 03:41:30.698"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.701" starttime="20160205 03:41:30.695"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.702" starttime="20160205 03:41:30.688"></status>
</kw>
<msg timestamp="20160205 03:41:30.704" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:41:30.704" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:41:30.704" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:41:30.705" level="INFO">${id} = 2426298</msg>
<msg timestamp="20160205 03:41:30.705" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:41:30.705" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:41:30.705" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:30.704" starttime="20160205 03:41:30.257"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.718" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.718" starttime="20160205 03:41:30.716"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.719" starttime="20160205 03:41:30.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.721" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.722" starttime="20160205 03:41:30.720"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.722" starttime="20160205 03:41:30.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.725" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:30.725" starttime="20160205 03:41:30.723"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.726" starttime="20160205 03:41:30.723"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:30.726" starttime="20160205 03:41:30.712"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.728" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:30.728" starttime="20160205 03:41:30.727"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.730" starttime="20160205 03:41:30.729"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.731" starttime="20160205 03:41:30.730"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.733" starttime="20160205 03:41:30.732"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.734" starttime="20160205 03:41:30.733"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.735" starttime="20160205 03:41:30.735"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.737" starttime="20160205 03:41:30.736"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:30.739" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426298']</msg>
<msg timestamp="20160205 03:41:30.856" level="INFO">03:41:30,849 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:41:30,850 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426299
03:41:30,851 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
03:41:30,853 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:41:30,854 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:30.857" starttime="20160205 03:41:30.739"></status>
</kw>
<msg timestamp="20160205 03:41:30.857" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.858" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:30.857" starttime="20160205 03:41:30.738"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.864" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:30.863" starttime="20160205 03:41:30.862"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.866" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.865" starttime="20160205 03:41:30.864"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.867" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.867" starttime="20160205 03:41:30.866"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.870" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.871" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.871" starttime="20160205 03:41:30.869"></status>
</kw>
<msg timestamp="20160205 03:41:30.872" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.872" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,849 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.871" starttime="20160205 03:41:30.868"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.876" starttime="20160205 03:41:30.876"></status>
</kw>
<msg timestamp="20160205 03:41:30.878" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,849 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.877" starttime="20160205 03:41:30.873"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.882" starttime="20160205 03:41:30.881"></status>
</kw>
<msg timestamp="20160205 03:41:30.882" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,849 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:30.882" starttime="20160205 03:41:30.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.887" starttime="20160205 03:41:30.886"></status>
</kw>
<msg timestamp="20160205 03:41:30.888" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.887" starttime="20160205 03:41:30.883"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.894" starttime="20160205 03:41:30.893"></status>
</kw>
<msg timestamp="20160205 03:41:30.895" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.894" starttime="20160205 03:41:30.888"></status>
</kw>
<msg timestamp="20160205 03:41:30.896" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:30.895" starttime="20160205 03:41:30.859"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.901" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:41:30.901" starttime="20160205 03:41:30.900"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.903" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.903" starttime="20160205 03:41:30.902"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.905" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.904" starttime="20160205 03:41:30.904"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.907" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.908" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.908" starttime="20160205 03:41:30.906"></status>
</kw>
<msg timestamp="20160205 03:41:30.909" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.910" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,850 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.909" starttime="20160205 03:41:30.905"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.914" starttime="20160205 03:41:30.913"></status>
</kw>
<msg timestamp="20160205 03:41:30.914" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,850 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.914" starttime="20160205 03:41:30.910"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.919" starttime="20160205 03:41:30.918"></status>
</kw>
<msg timestamp="20160205 03:41:30.919" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,850 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.919" starttime="20160205 03:41:30.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.924" starttime="20160205 03:41:30.923"></status>
</kw>
<msg timestamp="20160205 03:41:30.925" level="INFO">${resultCode} = 2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.924" starttime="20160205 03:41:30.920"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.931" starttime="20160205 03:41:30.930"></status>
</kw>
<msg timestamp="20160205 03:41:30.931" level="INFO">${resultCode} = 2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.931" starttime="20160205 03:41:30.925"></status>
</kw>
<msg timestamp="20160205 03:41:30.932" level="INFO">${accountId} = 2426299</msg>
<status status="PASS" endtime="20160205 03:41:30.932" starttime="20160205 03:41:30.897"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.938" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:41:30.938" starttime="20160205 03:41:30.937"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.940" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.940" starttime="20160205 03:41:30.939"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.942" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.941" starttime="20160205 03:41:30.941"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.944" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.945" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.945" starttime="20160205 03:41:30.943"></status>
</kw>
<msg timestamp="20160205 03:41:30.946" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.946" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,851 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.946" starttime="20160205 03:41:30.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.951" starttime="20160205 03:41:30.950"></status>
</kw>
<msg timestamp="20160205 03:41:30.951" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,851 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.951" starttime="20160205 03:41:30.947"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.956" starttime="20160205 03:41:30.955"></status>
</kw>
<msg timestamp="20160205 03:41:30.956" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,851 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.956" starttime="20160205 03:41:30.952"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.961" starttime="20160205 03:41:30.960"></status>
</kw>
<msg timestamp="20160205 03:41:30.962" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.961" starttime="20160205 03:41:30.957"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.968" starttime="20160205 03:41:30.967"></status>
</kw>
<msg timestamp="20160205 03:41:30.968" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.968" starttime="20160205 03:41:30.962"></status>
</kw>
<msg timestamp="20160205 03:41:30.969" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:30.969" starttime="20160205 03:41:30.933"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:30.975" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:41:30.975" starttime="20160205 03:41:30.974"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.977" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:30.977" starttime="20160205 03:41:30.976"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.979" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:30.979" starttime="20160205 03:41:30.978"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:30.981" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:30.982" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:30.982" starttime="20160205 03:41:30.980"></status>
</kw>
<msg timestamp="20160205 03:41:30.983" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:30.984" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,853 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:30.983" starttime="20160205 03:41:30.979"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.988" starttime="20160205 03:41:30.987"></status>
</kw>
<msg timestamp="20160205 03:41:30.988" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,853 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:30.988" starttime="20160205 03:41:30.984"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.993" starttime="20160205 03:41:30.992"></status>
</kw>
<msg timestamp="20160205 03:41:30.993" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,853 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:30.993" starttime="20160205 03:41:30.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:30.998" starttime="20160205 03:41:30.997"></status>
</kw>
<msg timestamp="20160205 03:41:30.999" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:30.998" starttime="20160205 03:41:30.994"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.005" starttime="20160205 03:41:31.004"></status>
</kw>
<msg timestamp="20160205 03:41:31.006" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:31.006" starttime="20160205 03:41:30.999"></status>
</kw>
<msg timestamp="20160205 03:41:31.008" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:31.007" starttime="20160205 03:41:30.970"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:31.014" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:41:31.013" starttime="20160205 03:41:31.012"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:31.015" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:31.015" starttime="20160205 03:41:31.014"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:31.017" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:31.017" starttime="20160205 03:41:31.016"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:31.020" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:31.020" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:31.021" starttime="20160205 03:41:31.019"></status>
</kw>
<msg timestamp="20160205 03:41:31.022" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:31.022" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,854 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:31.021" starttime="20160205 03:41:31.018"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.026" starttime="20160205 03:41:31.025"></status>
</kw>
<msg timestamp="20160205 03:41:31.027" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,854 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:31.026" starttime="20160205 03:41:31.022"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.031" starttime="20160205 03:41:31.030"></status>
</kw>
<msg timestamp="20160205 03:41:31.032" level="INFO">${return_log_entry} = 2016-02-05 03:41:30,854 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:31.031" starttime="20160205 03:41:31.027"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.036" starttime="20160205 03:41:31.035"></status>
</kw>
<msg timestamp="20160205 03:41:31.037" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:31.037" starttime="20160205 03:41:31.032"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.043" starttime="20160205 03:41:31.042"></status>
</kw>
<msg timestamp="20160205 03:41:31.044" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:31.044" starttime="20160205 03:41:31.038"></status>
</kw>
<msg timestamp="20160205 03:41:31.045" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:31.045" starttime="20160205 03:41:31.009"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.050" starttime="20160205 03:41:31.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.051" starttime="20160205 03:41:31.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.052" starttime="20160205 03:41:31.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:31.058" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:31.058" starttime="20160205 03:41:31.057"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:31.059" starttime="20160205 03:41:31.056"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:31.059" starttime="20160205 03:41:31.053"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:31.060" starttime="20160205 03:41:31.046"></status>
</kw>
<msg timestamp="20160205 03:41:31.062" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:41:31.062" level="INFO">${accId} = 2426299</msg>
<msg timestamp="20160205 03:41:31.062" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160205 03:41:31.063" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:41:31.063" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:41:31.061" starttime="20160205 03:41:30.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.064" starttime="20160205 03:41:31.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.065" starttime="20160205 03:41:31.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:31.067" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160205 03:41:31.068" starttime="20160205 03:41:31.066"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:41:31.068" starttime="20160205 03:41:26.330"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:31.073" starttime="20160205 03:41:22.857"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:31.081" starttime="20160205 03:41:22.841"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit" id="s1-s1-s1-s2-s1-s5" name="MOC PREPAID ONNET-NoCredit">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit/MOC_PREPAID_ONNET-NoCredit-robot-suite.txt" id="s1-s1-s1-s2-s1-s5-s1" name="MOC PREPAID ONNET-NoCredit-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:41:31.281" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:31.287" level="INFO">${date} = Fri Feb  5 03:41:31 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:31.285" starttime="20160205 03:41:31.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:31.291" level="INFO">Date and time: Fri Feb  5 03:41:31 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:31.293" starttime="20160205 03:41:31.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:31.296" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:41:31.297" starttime="20160205 03:41:31.294"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.355" starttime="20160205 03:41:31.353"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:31.408" starttime="20160205 03:41:31.365"></status>
</kw>
<msg timestamp="20160205 03:41:31.409" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160205 03:41:31.409" starttime="20160205 03:41:31.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:31.415" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:31.834" level="INFO">Read output: Last login: Fri Feb  5 02:41:23 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:31.835" starttime="20160205 03:41:31.414"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:31.836" starttime="20160205 03:41:31.410"></status>
</kw>
<msg timestamp="20160205 03:41:31.837" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160205 03:41:31.836" starttime="20160205 03:41:31.344"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:31.841" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:31.840" starttime="20160205 03:41:31.837"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:31.842" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:41:32.139" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:32.140" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:32.139" starttime="20160205 03:41:31.841"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.143" starttime="20160205 03:41:32.142"></status>
</kw>
<msg timestamp="20160205 03:41:32.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:32.144" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:32.144" starttime="20160205 03:41:32.141"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.149" starttime="20160205 03:41:32.148"></status>
</kw>
<msg timestamp="20160205 03:41:32.149" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:32.149" starttime="20160205 03:41:32.145"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:41:32.151" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:32.151" starttime="20160205 03:41:32.150"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:32.153" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:32.153" starttime="20160205 03:41:32.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.154" starttime="20160205 03:41:32.154"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.159" starttime="20160205 03:41:32.158"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.163" starttime="20160205 03:41:32.160"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:32.163" starttime="20160205 03:41:32.155"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.168" starttime="20160205 03:41:32.167"></status>
</kw>
<msg timestamp="20160205 03:41:32.168" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:32.168" starttime="20160205 03:41:32.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.170" starttime="20160205 03:41:32.169"></status>
</kw>
<msg timestamp="20160205 03:41:32.171" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:41:32.172" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:32.171" starttime="20160205 03:41:31.316"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.197" starttime="20160205 03:41:32.196"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:32.252" starttime="20160205 03:41:32.200"></status>
</kw>
<msg timestamp="20160205 03:41:32.255" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160205 03:41:32.254" starttime="20160205 03:41:32.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:32.265" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:32.682" level="INFO">Read output: Last login: Fri Feb  5 02:41:24 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:32.683" starttime="20160205 03:41:32.263"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:32.683" starttime="20160205 03:41:32.256"></status>
</kw>
<msg timestamp="20160205 03:41:32.685" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160205 03:41:32.684" starttime="20160205 03:41:32.192"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:32.689" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:32.689" starttime="20160205 03:41:32.685"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:32.690" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:41:33.077" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:33.081" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:33.079" starttime="20160205 03:41:32.689"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.087" starttime="20160205 03:41:33.084"></status>
</kw>
<msg timestamp="20160205 03:41:33.089" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:33.090" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:33.088" starttime="20160205 03:41:33.082"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.099" starttime="20160205 03:41:33.097"></status>
</kw>
<msg timestamp="20160205 03:41:33.101" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:33.100" starttime="20160205 03:41:33.091"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:41:33.105" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:33.104" starttime="20160205 03:41:33.102"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:33.109" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:33.108" starttime="20160205 03:41:33.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.111" starttime="20160205 03:41:33.110"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.122" starttime="20160205 03:41:33.120"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.125" starttime="20160205 03:41:33.123"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:33.129" starttime="20160205 03:41:33.113"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.139" starttime="20160205 03:41:33.137"></status>
</kw>
<msg timestamp="20160205 03:41:33.140" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:33.140" starttime="20160205 03:41:33.131"></status>
</kw>
<msg timestamp="20160205 03:41:33.144" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:41:33.144" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:33.142" starttime="20160205 03:41:32.180"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.198" starttime="20160205 03:41:33.196"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.248" starttime="20160205 03:41:33.206"></status>
</kw>
<msg timestamp="20160205 03:41:33.249" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160205 03:41:33.249" starttime="20160205 03:41:33.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:33.255" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:33.671" level="INFO">Read output: Last login: Fri Feb  5 02:41:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:33.671" starttime="20160205 03:41:33.254"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:33.672" starttime="20160205 03:41:33.250"></status>
</kw>
<msg timestamp="20160205 03:41:33.673" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160205 03:41:33.673" starttime="20160205 03:41:33.187"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:33.677" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:33.677" starttime="20160205 03:41:33.674"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:33.678" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:41:33.854" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:33.855" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:33.855" starttime="20160205 03:41:33.677"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.858" starttime="20160205 03:41:33.857"></status>
</kw>
<msg timestamp="20160205 03:41:33.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:33.859" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:33.859" starttime="20160205 03:41:33.856"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.863" starttime="20160205 03:41:33.862"></status>
</kw>
<msg timestamp="20160205 03:41:33.864" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:33.864" starttime="20160205 03:41:33.860"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:33.866" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:33.865" starttime="20160205 03:41:33.865"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:33.868" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:33.867" starttime="20160205 03:41:33.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.869" starttime="20160205 03:41:33.868"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.874" starttime="20160205 03:41:33.873"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.878" starttime="20160205 03:41:33.874"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:33.878" starttime="20160205 03:41:33.869"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.882" starttime="20160205 03:41:33.881"></status>
</kw>
<msg timestamp="20160205 03:41:33.883" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:33.883" starttime="20160205 03:41:33.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.884" starttime="20160205 03:41:33.884"></status>
</kw>
<msg timestamp="20160205 03:41:33.886" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:41:33.886" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:33.885" starttime="20160205 03:41:33.162"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.910" starttime="20160205 03:41:33.909"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:33.968" starttime="20160205 03:41:33.917"></status>
</kw>
<msg timestamp="20160205 03:41:33.970" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160205 03:41:33.969" starttime="20160205 03:41:33.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:33.981" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:34.369" level="INFO">Read output: Last login: Fri Feb  5 02:41:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:34.371" starttime="20160205 03:41:33.979"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.373" starttime="20160205 03:41:33.972"></status>
</kw>
<msg timestamp="20160205 03:41:34.377" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160205 03:41:34.376" starttime="20160205 03:41:33.905"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:34.381" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:34.381" starttime="20160205 03:41:34.378"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:34.383" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:41:34.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:34.460" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:34.459" starttime="20160205 03:41:34.382"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.463" starttime="20160205 03:41:34.461"></status>
</kw>
<msg timestamp="20160205 03:41:34.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:34.464" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:34.463" starttime="20160205 03:41:34.460"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.468" starttime="20160205 03:41:34.467"></status>
</kw>
<msg timestamp="20160205 03:41:34.469" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:34.468" starttime="20160205 03:41:34.464"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:34.471" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:34.470" starttime="20160205 03:41:34.469"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:34.472" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:34.472" starttime="20160205 03:41:34.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.474" starttime="20160205 03:41:34.473"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.479" starttime="20160205 03:41:34.478"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.482" starttime="20160205 03:41:34.479"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.483" starttime="20160205 03:41:34.474"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.487" starttime="20160205 03:41:34.486"></status>
</kw>
<msg timestamp="20160205 03:41:34.488" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:34.487" starttime="20160205 03:41:34.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.489" starttime="20160205 03:41:34.488"></status>
</kw>
<msg timestamp="20160205 03:41:34.491" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:41:34.491" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:34.490" starttime="20160205 03:41:33.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:34.493" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:34.493" starttime="20160205 03:41:34.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:34.495" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:34.495" starttime="20160205 03:41:34.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:34.497" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:34.498" starttime="20160205 03:41:34.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:34.499" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:34.500" starttime="20160205 03:41:34.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:41:34.501" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:34.502" starttime="20160205 03:41:34.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:41:34.505" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:34.506" starttime="20160205 03:41:34.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:41:34.509" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:34.510" starttime="20160205 03:41:34.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:41:34.513" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:34.514" starttime="20160205 03:41:34.511"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.526" starttime="20160205 03:41:34.521"></status>
</kw>
<msg timestamp="20160205 03:41:34.528" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:34.527" starttime="20160205 03:41:34.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.532" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:34.533" starttime="20160205 03:41:34.529"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.534" starttime="20160205 03:41:31.272"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s5-s1-t1" name="Run MOC NoCredit Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.547" starttime="20160205 03:41:34.545"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160205 03:41:34.550" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160205 03:41:34.550" starttime="20160205 03:41:34.548"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.566" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:41:34.567" starttime="20160205 03:41:34.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.570" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:41:34.571" starttime="20160205 03:41:34.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.574" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:41:34.575" starttime="20160205 03:41:34.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.578" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160205 03:41:34.578" starttime="20160205 03:41:34.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.582" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:34.582" starttime="20160205 03:41:34.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.586" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:41:34.586" starttime="20160205 03:41:34.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.589" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:34.590" starttime="20160205 03:41:34.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.593" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:41:34.594" starttime="20160205 03:41:34.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.597" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:34.598" starttime="20160205 03:41:34.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.601" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160205 03:41:34.602" starttime="20160205 03:41:34.599"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.618" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:34.619" starttime="20160205 03:41:34.615"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.620" starttime="20160205 03:41:34.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.626" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:34.627" starttime="20160205 03:41:34.623"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.627" starttime="20160205 03:41:34.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.630" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:34.630" starttime="20160205 03:41:34.629"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.631" starttime="20160205 03:41:34.628"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:34.631" starttime="20160205 03:41:34.604"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:34.634" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:34.634" starttime="20160205 03:41:34.632"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.636" starttime="20160205 03:41:34.635"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.638" starttime="20160205 03:41:34.637"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.639" starttime="20160205 03:41:34.638"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.641" starttime="20160205 03:41:34.640"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.642" starttime="20160205 03:41:34.641"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.644" starttime="20160205 03:41:34.643"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.645" starttime="20160205 03:41:34.644"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.647" starttime="20160205 03:41:34.646"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.648" starttime="20160205 03:41:34.647"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.650" starttime="20160205 03:41:34.649"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.651" starttime="20160205 03:41:34.650"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:34.653" starttime="20160205 03:41:34.652"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:34.655" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160205 03:41:35.239" level="INFO">03:41:35,237 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:35.240" starttime="20160205 03:41:34.654"></status>
</kw>
<msg timestamp="20160205 03:41:35.242" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:35.242" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:35.241" starttime="20160205 03:41:34.653"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:35.248" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:35.248" starttime="20160205 03:41:35.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:35.250" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:35.249" starttime="20160205 03:41:35.248"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:35.251" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:35.251" starttime="20160205 03:41:35.250"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:35.254" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:35.255" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:35.255" starttime="20160205 03:41:35.253"></status>
</kw>
<msg timestamp="20160205 03:41:35.256" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:35.256" level="INFO">${return_log_entry} = 2016-02-05 03:41:35,237 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:35.256" starttime="20160205 03:41:35.252"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.261" starttime="20160205 03:41:35.260"></status>
</kw>
<msg timestamp="20160205 03:41:35.262" level="INFO">${return_log_entry} = 2016-02-05 03:41:35,237 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:35.261" starttime="20160205 03:41:35.257"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.266" starttime="20160205 03:41:35.265"></status>
</kw>
<msg timestamp="20160205 03:41:35.266" level="INFO">${return_log_entry} = 2016-02-05 03:41:35,237 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:35.266" starttime="20160205 03:41:35.262"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.301" starttime="20160205 03:41:35.299"></status>
</kw>
<msg timestamp="20160205 03:41:35.302" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:35.302" starttime="20160205 03:41:35.267"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.308" starttime="20160205 03:41:35.307"></status>
</kw>
<msg timestamp="20160205 03:41:35.309" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:35.309" starttime="20160205 03:41:35.302"></status>
</kw>
<msg timestamp="20160205 03:41:35.310" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:35.310" starttime="20160205 03:41:35.243"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.315" starttime="20160205 03:41:35.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.316" starttime="20160205 03:41:35.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.318" starttime="20160205 03:41:35.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:35.323" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:35.324" starttime="20160205 03:41:35.322"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:35.324" starttime="20160205 03:41:35.321"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:35.324" starttime="20160205 03:41:35.318"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:35.325" starttime="20160205 03:41:35.311"></status>
</kw>
<msg timestamp="20160205 03:41:35.326" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:41:35.326" starttime="20160205 03:41:34.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:41:35.328" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:35.328" starttime="20160205 03:41:35.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:35.329" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:41:35.330" starttime="20160205 03:41:35.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.331" starttime="20160205 03:41:35.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:35.332" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160205 03:41:35.333" starttime="20160205 03:41:35.331"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Final Rerouting">
<doc>Initiates a MOC session that is expected to do a final reroute to another number</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:35.341" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:41:35.340" starttime="20160205 03:41:35.339"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:35.342" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:41:35.342" starttime="20160205 03:41:35.341"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:41:35.344" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:41:35.343" starttime="20160205 03:41:35.343"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</arg>
</arguments>
<msg timestamp="20160205 03:41:35.345" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</msg>
<status status="PASS" endtime="20160205 03:41:35.345" starttime="20160205 03:41:35.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.346" starttime="20160205 03:41:35.346"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:35.349" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:35.349" starttime="20160205 03:41:35.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.351" starttime="20160205 03:41:35.350"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:41:35.353" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:35.353" starttime="20160205 03:41:35.351"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>Mocfinal-rerouting parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:35.355" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:35.356" starttime="20160205 03:41:35.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.357" starttime="20160205 03:41:35.356"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:35.359" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:35.359" starttime="20160205 03:41:35.357"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:41:35.362" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:35.362" starttime="20160205 03:41:35.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:35.364" starttime="20160205 03:41:35.363"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:41:35.371" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:37.472" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:37.470" starttime="20160205 03:41:35.364"></status>
</kw>
<msg timestamp="20160205 03:41:37.476" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:37.474" starttime="20160205 03:41:35.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:37.478" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:41:37.478" starttime="20160205 03:41:37.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:41:37.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:37.481" starttime="20160205 03:41:37.479"></status>
</kw>
<doc>Insufficient funds MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:41:37.481" starttime="20160205 03:41:34.537"></status>
</test>
<doc>Testing the prepaid MOC call from the calling party that has empty account balance. It is expected that calling party will hear
announcement (call is redirected) that it has insufficient funds (call is successful from platform point of view)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:37.486" starttime="20160205 03:41:31.103"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:37.493" starttime="20160205 03:41:31.086"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s2-s1-s6" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s6-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:41:37.655" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:37.659" level="INFO">${date} = Fri Feb  5 03:41:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:37.658" starttime="20160205 03:41:37.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:37.660" level="INFO">Date and time: Fri Feb  5 03:41:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:37.661" starttime="20160205 03:41:37.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:37.662" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:41:37.663" starttime="20160205 03:41:37.661"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:37.687" starttime="20160205 03:41:37.686"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:37.743" starttime="20160205 03:41:37.690"></status>
</kw>
<msg timestamp="20160205 03:41:37.745" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160205 03:41:37.744" starttime="20160205 03:41:37.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:37.756" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:38.165" level="INFO">Read output: Last login: Fri Feb  5 02:41:31 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:38.167" starttime="20160205 03:41:37.754"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:38.167" starttime="20160205 03:41:37.747"></status>
</kw>
<msg timestamp="20160205 03:41:38.169" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160205 03:41:38.169" starttime="20160205 03:41:37.682"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:38.174" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:38.173" starttime="20160205 03:41:38.170"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:38.175" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:41:38.428" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:38.430" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:38.429" starttime="20160205 03:41:38.174"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.437" starttime="20160205 03:41:38.434"></status>
</kw>
<msg timestamp="20160205 03:41:38.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:38.439" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:38.438" starttime="20160205 03:41:38.432"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.448" starttime="20160205 03:41:38.447"></status>
</kw>
<msg timestamp="20160205 03:41:38.450" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:38.449" starttime="20160205 03:41:38.441"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:41:38.454" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:38.453" starttime="20160205 03:41:38.451"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:38.458" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:38.457" starttime="20160205 03:41:38.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.460" starttime="20160205 03:41:38.459"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.472" starttime="20160205 03:41:38.469"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.477" starttime="20160205 03:41:38.473"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:38.479" starttime="20160205 03:41:38.462"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.488" starttime="20160205 03:41:38.486"></status>
</kw>
<msg timestamp="20160205 03:41:38.490" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:38.489" starttime="20160205 03:41:38.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.493" starttime="20160205 03:41:38.491"></status>
</kw>
<msg timestamp="20160205 03:41:38.496" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:41:38.497" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:38.495" starttime="20160205 03:41:37.670"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.550" starttime="20160205 03:41:38.548"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:38.612" starttime="20160205 03:41:38.558"></status>
</kw>
<msg timestamp="20160205 03:41:38.614" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160205 03:41:38.613" starttime="20160205 03:41:38.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:38.624" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:39.028" level="INFO">Read output: Last login: Fri Feb  5 02:41:32 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:39.029" starttime="20160205 03:41:38.622"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:39.030" starttime="20160205 03:41:38.615"></status>
</kw>
<msg timestamp="20160205 03:41:39.032" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160205 03:41:39.031" starttime="20160205 03:41:38.539"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:39.036" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:39.036" starttime="20160205 03:41:39.033"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:39.038" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:41:39.411" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:39.414" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:39.413" starttime="20160205 03:41:39.037"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.420" starttime="20160205 03:41:39.417"></status>
</kw>
<msg timestamp="20160205 03:41:39.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:39.423" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:39.421" starttime="20160205 03:41:39.415"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.432" starttime="20160205 03:41:39.430"></status>
</kw>
<msg timestamp="20160205 03:41:39.434" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:39.433" starttime="20160205 03:41:39.424"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:41:39.438" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:39.437" starttime="20160205 03:41:39.435"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:39.442" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:39.441" starttime="20160205 03:41:39.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.444" starttime="20160205 03:41:39.443"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.455" starttime="20160205 03:41:39.453"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.459" starttime="20160205 03:41:39.457"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:39.462" starttime="20160205 03:41:39.446"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.472" starttime="20160205 03:41:39.470"></status>
</kw>
<msg timestamp="20160205 03:41:39.474" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:39.473" starttime="20160205 03:41:39.464"></status>
</kw>
<msg timestamp="20160205 03:41:39.477" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:41:39.478" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:39.476" starttime="20160205 03:41:38.514"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.532" starttime="20160205 03:41:39.530"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:39.582" starttime="20160205 03:41:39.539"></status>
</kw>
<msg timestamp="20160205 03:41:39.583" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160205 03:41:39.582" starttime="20160205 03:41:39.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:39.588" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:40.029" level="INFO">Read output: Last login: Fri Feb  5 02:41:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:40.030" starttime="20160205 03:41:39.587"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.031" starttime="20160205 03:41:39.583"></status>
</kw>
<msg timestamp="20160205 03:41:40.032" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160205 03:41:40.032" starttime="20160205 03:41:39.520"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:40.036" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:40.036" starttime="20160205 03:41:40.033"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:40.038" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:41:40.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:40.217" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:40.216" starttime="20160205 03:41:40.037"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.220" starttime="20160205 03:41:40.218"></status>
</kw>
<msg timestamp="20160205 03:41:40.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:40.221" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:40.220" starttime="20160205 03:41:40.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.225" starttime="20160205 03:41:40.224"></status>
</kw>
<msg timestamp="20160205 03:41:40.226" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:40.225" starttime="20160205 03:41:40.221"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:40.228" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:40.227" starttime="20160205 03:41:40.226"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:40.229" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:40.229" starttime="20160205 03:41:40.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.231" starttime="20160205 03:41:40.230"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.236" starttime="20160205 03:41:40.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.239" starttime="20160205 03:41:40.236"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.240" starttime="20160205 03:41:40.231"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.244" starttime="20160205 03:41:40.243"></status>
</kw>
<msg timestamp="20160205 03:41:40.245" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:40.244" starttime="20160205 03:41:40.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.246" starttime="20160205 03:41:40.245"></status>
</kw>
<msg timestamp="20160205 03:41:40.248" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:41:40.248" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:40.247" starttime="20160205 03:41:39.495"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.272" starttime="20160205 03:41:40.271"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.313" starttime="20160205 03:41:40.276"></status>
</kw>
<msg timestamp="20160205 03:41:40.315" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160205 03:41:40.314" starttime="20160205 03:41:40.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.319" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:40.770" level="INFO">Read output: Last login: Fri Feb  5 02:41:34 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:40.770" starttime="20160205 03:41:40.318"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.771" starttime="20160205 03:41:40.315"></status>
</kw>
<msg timestamp="20160205 03:41:40.772" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160205 03:41:40.772" starttime="20160205 03:41:40.267"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:40.776" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:40.775" starttime="20160205 03:41:40.773"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:40.777" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:41:40.855" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:40.855" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:40.855" starttime="20160205 03:41:40.776"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.858" starttime="20160205 03:41:40.857"></status>
</kw>
<msg timestamp="20160205 03:41:40.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:40.859" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:40.859" starttime="20160205 03:41:40.856"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.863" starttime="20160205 03:41:40.863"></status>
</kw>
<msg timestamp="20160205 03:41:40.864" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:40.864" starttime="20160205 03:41:40.860"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:40.866" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:40.866" starttime="20160205 03:41:40.865"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:40.868" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:40.867" starttime="20160205 03:41:40.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.869" starttime="20160205 03:41:40.868"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.874" starttime="20160205 03:41:40.873"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.878" starttime="20160205 03:41:40.875"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.878" starttime="20160205 03:41:40.870"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.882" starttime="20160205 03:41:40.882"></status>
</kw>
<msg timestamp="20160205 03:41:40.885" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:40.885" starttime="20160205 03:41:40.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.887" starttime="20160205 03:41:40.886"></status>
</kw>
<msg timestamp="20160205 03:41:40.888" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:41:40.888" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:40.888" starttime="20160205 03:41:40.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:40.890" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:40.891" starttime="20160205 03:41:40.889"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:40.892" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:40.893" starttime="20160205 03:41:40.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:40.894" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:40.895" starttime="20160205 03:41:40.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:40.897" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:40.897" starttime="20160205 03:41:40.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:41:40.899" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:40.899" starttime="20160205 03:41:40.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:41:40.900" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:40.901" starttime="20160205 03:41:40.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:41:40.902" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:40.903" starttime="20160205 03:41:40.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:41:40.904" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:40.904" starttime="20160205 03:41:40.903"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.910" starttime="20160205 03:41:40.908"></status>
</kw>
<msg timestamp="20160205 03:41:40.911" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:40.911" starttime="20160205 03:41:40.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.913" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:40.913" starttime="20160205 03:41:40.911"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.914" starttime="20160205 03:41:37.650"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s6-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.920" starttime="20160205 03:41:40.919"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:41:40.921" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:40.921" starttime="20160205 03:41:40.920"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.929" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:41:40.929" starttime="20160205 03:41:40.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.930" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:41:40.931" starttime="20160205 03:41:40.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.932" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:41:40.932" starttime="20160205 03:41:40.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.934" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:41:40.934" starttime="20160205 03:41:40.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.935" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:40.936" starttime="20160205 03:41:40.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.937" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:41:40.938" starttime="20160205 03:41:40.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.939" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:40.939" starttime="20160205 03:41:40.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.941" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:41:40.941" starttime="20160205 03:41:40.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.942" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:40.943" starttime="20160205 03:41:40.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.944" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:40.944" starttime="20160205 03:41:40.943"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.951" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:40.951" starttime="20160205 03:41:40.949"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.952" starttime="20160205 03:41:40.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.954" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:40.955" starttime="20160205 03:41:40.953"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.955" starttime="20160205 03:41:40.952"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.958" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:40.958" starttime="20160205 03:41:40.956"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.958" starttime="20160205 03:41:40.956"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:40.959" starttime="20160205 03:41:40.946"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:40.961" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:40.961" starttime="20160205 03:41:40.959"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.963" starttime="20160205 03:41:40.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.964" starttime="20160205 03:41:40.963"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.966" starttime="20160205 03:41:40.965"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.967" starttime="20160205 03:41:40.966"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.968" starttime="20160205 03:41:40.968"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.970" starttime="20160205 03:41:40.969"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.971" starttime="20160205 03:41:40.970"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.973" starttime="20160205 03:41:40.972"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.975" starttime="20160205 03:41:40.974"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.976" starttime="20160205 03:41:40.975"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.978" starttime="20160205 03:41:40.977"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:40.979" starttime="20160205 03:41:40.978"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:40.981" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:41:41.996" level="INFO">03:41:41,993 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:41.997" starttime="20160205 03:41:40.981"></status>
</kw>
<msg timestamp="20160205 03:41:41.999" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:41.999" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:41.998" starttime="20160205 03:41:40.980"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:42.006" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:42.006" starttime="20160205 03:41:42.005"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.008" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:42.008" starttime="20160205 03:41:42.007"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.010" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:42.010" starttime="20160205 03:41:42.009"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.013" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:42.014" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:42.014" starttime="20160205 03:41:42.012"></status>
</kw>
<msg timestamp="20160205 03:41:42.015" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:42.015" level="INFO">${return_log_entry} = 2016-02-05 03:41:41,993 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:42.014" starttime="20160205 03:41:42.011"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.020" starttime="20160205 03:41:42.019"></status>
</kw>
<msg timestamp="20160205 03:41:42.021" level="INFO">${return_log_entry} = 2016-02-05 03:41:41,993 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:42.020" starttime="20160205 03:41:42.016"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.025" starttime="20160205 03:41:42.024"></status>
</kw>
<msg timestamp="20160205 03:41:42.026" level="INFO">${return_log_entry} = 2016-02-05 03:41:41,993 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:42.025" starttime="20160205 03:41:42.021"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.030" starttime="20160205 03:41:42.029"></status>
</kw>
<msg timestamp="20160205 03:41:42.031" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:42.031" starttime="20160205 03:41:42.026"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.037" starttime="20160205 03:41:42.036"></status>
</kw>
<msg timestamp="20160205 03:41:42.037" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:42.037" starttime="20160205 03:41:42.031"></status>
</kw>
<msg timestamp="20160205 03:41:42.038" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:42.038" starttime="20160205 03:41:42.001"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.043" starttime="20160205 03:41:42.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.045" starttime="20160205 03:41:42.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.046" starttime="20160205 03:41:42.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:42.051" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:42.052" starttime="20160205 03:41:42.050"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:42.052" starttime="20160205 03:41:42.049"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:42.053" starttime="20160205 03:41:42.046"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:42.053" starttime="20160205 03:41:42.039"></status>
</kw>
<msg timestamp="20160205 03:41:42.055" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:41:42.054" starttime="20160205 03:41:40.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:41:42.056" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:42.057" starttime="20160205 03:41:42.055"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:42.058" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:41:42.058" starttime="20160205 03:41:42.057"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.060" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160205 03:41:42.061" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160205 03:41:42.060" starttime="20160205 03:41:42.059"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160205 03:41:42.064" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:41:42.063" starttime="20160205 03:41:42.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.065" starttime="20160205 03:41:42.064"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:42.080" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:41:42.079" starttime="20160205 03:41:42.078"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:42.081" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:41:42.081" starttime="20160205 03:41:42.080"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:41:42.083" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:41:42.083" starttime="20160205 03:41:42.082"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:41:42.085" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:41:42.085" starttime="20160205 03:41:42.084"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.086" starttime="20160205 03:41:42.086"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:42.089" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:42.089" starttime="20160205 03:41:42.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.091" starttime="20160205 03:41:42.090"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:41:42.093" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:42.093" starttime="20160205 03:41:42.091"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:42.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:42.096" starttime="20160205 03:41:42.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.097" starttime="20160205 03:41:42.096"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.099" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:42.099" starttime="20160205 03:41:42.098"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:41:42.102" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:42.103" starttime="20160205 03:41:42.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:42.104" starttime="20160205 03:41:42.103"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:41:42.112" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:47.306" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:47.305" starttime="20160205 03:41:42.104"></status>
</kw>
<msg timestamp="20160205 03:41:47.307" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:47.307" starttime="20160205 03:41:42.073"></status>
</kw>
<msg timestamp="20160205 03:41:47.309" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:47.308" starttime="20160205 03:41:42.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:47.310" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:41:47.311" starttime="20160205 03:41:47.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:47.313" starttime="20160205 03:41:47.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.314" starttime="20160205 03:41:47.313"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.326" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.326" starttime="20160205 03:41:47.324"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.326" starttime="20160205 03:41:47.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.329" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.329" starttime="20160205 03:41:47.328"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.330" starttime="20160205 03:41:47.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.332" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.333" starttime="20160205 03:41:47.331"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.333" starttime="20160205 03:41:47.330"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.334" starttime="20160205 03:41:47.320"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.335" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:47.336" starttime="20160205 03:41:47.334"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.337" starttime="20160205 03:41:47.336"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.339" starttime="20160205 03:41:47.338"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.340" starttime="20160205 03:41:47.339"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.342" starttime="20160205 03:41:47.341"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.343" starttime="20160205 03:41:47.342"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.344" starttime="20160205 03:41:47.343"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:47.346" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:41:47.464" level="INFO">03:41:47,451 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:41:47,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:41:47,454 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426303
03:41:47,455 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:41:47,457 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:41:47,458 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:41:47,460 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:41:47,462 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:41:47.464" starttime="20160205 03:41:47.346"></status>
</kw>
<msg timestamp="20160205 03:41:47.465" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.465" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:47.465" starttime="20160205 03:41:47.345"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.471" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:47.471" starttime="20160205 03:41:47.470"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.473" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.473" starttime="20160205 03:41:47.472"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.475" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.474" starttime="20160205 03:41:47.474"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.477" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.478" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.478" starttime="20160205 03:41:47.476"></status>
</kw>
<msg timestamp="20160205 03:41:47.479" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.479" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,451 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.479" starttime="20160205 03:41:47.475"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.484" starttime="20160205 03:41:47.483"></status>
</kw>
<msg timestamp="20160205 03:41:47.484" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,451 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.484" starttime="20160205 03:41:47.480"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.489" starttime="20160205 03:41:47.488"></status>
</kw>
<msg timestamp="20160205 03:41:47.489" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,451 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.489" starttime="20160205 03:41:47.485"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.494" starttime="20160205 03:41:47.493"></status>
</kw>
<msg timestamp="20160205 03:41:47.495" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.494" starttime="20160205 03:41:47.490"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.501" starttime="20160205 03:41:47.500"></status>
</kw>
<msg timestamp="20160205 03:41:47.501" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.501" starttime="20160205 03:41:47.495"></status>
</kw>
<msg timestamp="20160205 03:41:47.503" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.502" starttime="20160205 03:41:47.466"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.508" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:41:47.508" starttime="20160205 03:41:47.507"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.510" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.510" starttime="20160205 03:41:47.509"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.512" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.511" starttime="20160205 03:41:47.510"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.514" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.515" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.515" starttime="20160205 03:41:47.513"></status>
</kw>
<msg timestamp="20160205 03:41:47.516" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.516" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:47.516" starttime="20160205 03:41:47.512"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.520" starttime="20160205 03:41:47.519"></status>
</kw>
<msg timestamp="20160205 03:41:47.521" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:47.521" starttime="20160205 03:41:47.517"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.525" starttime="20160205 03:41:47.524"></status>
</kw>
<msg timestamp="20160205 03:41:47.526" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,452 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:47.526" starttime="20160205 03:41:47.522"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.530" starttime="20160205 03:41:47.529"></status>
</kw>
<msg timestamp="20160205 03:41:47.531" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:47.531" starttime="20160205 03:41:47.526"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.537" starttime="20160205 03:41:47.536"></status>
</kw>
<msg timestamp="20160205 03:41:47.538" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:47.537" starttime="20160205 03:41:47.532"></status>
</kw>
<msg timestamp="20160205 03:41:47.539" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:47.538" starttime="20160205 03:41:47.503"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.544" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:41:47.544" starttime="20160205 03:41:47.543"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.546" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.546" starttime="20160205 03:41:47.545"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.548" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.547" starttime="20160205 03:41:47.546"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.550" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.551" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.551" starttime="20160205 03:41:47.549"></status>
</kw>
<msg timestamp="20160205 03:41:47.552" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.552" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,455 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.552" starttime="20160205 03:41:47.548"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.556" starttime="20160205 03:41:47.555"></status>
</kw>
<msg timestamp="20160205 03:41:47.557" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,455 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.557" starttime="20160205 03:41:47.553"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.561" starttime="20160205 03:41:47.560"></status>
</kw>
<msg timestamp="20160205 03:41:47.562" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,455 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.561" starttime="20160205 03:41:47.557"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.566" starttime="20160205 03:41:47.565"></status>
</kw>
<msg timestamp="20160205 03:41:47.567" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.567" starttime="20160205 03:41:47.562"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.573" starttime="20160205 03:41:47.572"></status>
</kw>
<msg timestamp="20160205 03:41:47.574" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.573" starttime="20160205 03:41:47.567"></status>
</kw>
<msg timestamp="20160205 03:41:47.575" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:47.574" starttime="20160205 03:41:47.540"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.581" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:41:47.580" starttime="20160205 03:41:47.579"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.582" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.582" starttime="20160205 03:41:47.581"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.584" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.584" starttime="20160205 03:41:47.583"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.587" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.588" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.588" starttime="20160205 03:41:47.586"></status>
</kw>
<msg timestamp="20160205 03:41:47.589" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.589" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,454 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.589" starttime="20160205 03:41:47.585"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.594" starttime="20160205 03:41:47.593"></status>
</kw>
<msg timestamp="20160205 03:41:47.595" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,454 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.594" starttime="20160205 03:41:47.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.599" starttime="20160205 03:41:47.598"></status>
</kw>
<msg timestamp="20160205 03:41:47.599" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,454 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.599" starttime="20160205 03:41:47.595"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.604" starttime="20160205 03:41:47.603"></status>
</kw>
<msg timestamp="20160205 03:41:47.605" level="INFO">${resultCode} = 2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.604" starttime="20160205 03:41:47.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.610" starttime="20160205 03:41:47.609"></status>
</kw>
<msg timestamp="20160205 03:41:47.611" level="INFO">${resultCode} = 2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.611" starttime="20160205 03:41:47.605"></status>
</kw>
<msg timestamp="20160205 03:41:47.612" level="INFO">${id} = 2426303</msg>
<status status="PASS" endtime="20160205 03:41:47.612" starttime="20160205 03:41:47.576"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.618" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:41:47.618" starttime="20160205 03:41:47.616"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.620" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.619" starttime="20160205 03:41:47.618"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.621" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.621" starttime="20160205 03:41:47.620"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.624" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.625" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.625" starttime="20160205 03:41:47.623"></status>
</kw>
<msg timestamp="20160205 03:41:47.626" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.626" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,457 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.625" starttime="20160205 03:41:47.622"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.630" starttime="20160205 03:41:47.629"></status>
</kw>
<msg timestamp="20160205 03:41:47.631" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,457 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.631" starttime="20160205 03:41:47.626"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.635" starttime="20160205 03:41:47.634"></status>
</kw>
<msg timestamp="20160205 03:41:47.636" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,457 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.636" starttime="20160205 03:41:47.632"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.640" starttime="20160205 03:41:47.639"></status>
</kw>
<msg timestamp="20160205 03:41:47.641" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.641" starttime="20160205 03:41:47.637"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.647" starttime="20160205 03:41:47.646"></status>
</kw>
<msg timestamp="20160205 03:41:47.648" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.647" starttime="20160205 03:41:47.642"></status>
</kw>
<msg timestamp="20160205 03:41:47.649" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:47.648" starttime="20160205 03:41:47.613"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.654" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:41:47.654" starttime="20160205 03:41:47.653"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.656" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.656" starttime="20160205 03:41:47.655"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.658" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.658" starttime="20160205 03:41:47.657"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.660" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.661" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.661" starttime="20160205 03:41:47.659"></status>
</kw>
<msg timestamp="20160205 03:41:47.662" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.663" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,458 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:47.662" starttime="20160205 03:41:47.658"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.666" starttime="20160205 03:41:47.666"></status>
</kw>
<msg timestamp="20160205 03:41:47.667" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,458 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:47.667" starttime="20160205 03:41:47.663"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.671" starttime="20160205 03:41:47.670"></status>
</kw>
<msg timestamp="20160205 03:41:47.672" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,458 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:47.672" starttime="20160205 03:41:47.668"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.676" starttime="20160205 03:41:47.675"></status>
</kw>
<msg timestamp="20160205 03:41:47.677" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:47.677" starttime="20160205 03:41:47.673"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.683" starttime="20160205 03:41:47.682"></status>
</kw>
<msg timestamp="20160205 03:41:47.684" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:47.684" starttime="20160205 03:41:47.678"></status>
</kw>
<msg timestamp="20160205 03:41:47.685" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:47.685" starttime="20160205 03:41:47.650"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.691" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:41:47.690" starttime="20160205 03:41:47.689"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.692" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.692" starttime="20160205 03:41:47.691"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.694" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.694" starttime="20160205 03:41:47.693"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.697" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.697" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.698" starttime="20160205 03:41:47.695"></status>
</kw>
<msg timestamp="20160205 03:41:47.698" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.699" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,460 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.698" starttime="20160205 03:41:47.695"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.703" starttime="20160205 03:41:47.702"></status>
</kw>
<msg timestamp="20160205 03:41:47.703" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,460 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.703" starttime="20160205 03:41:47.699"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.707" starttime="20160205 03:41:47.707"></status>
</kw>
<msg timestamp="20160205 03:41:47.708" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,460 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.708" starttime="20160205 03:41:47.704"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.713" starttime="20160205 03:41:47.711"></status>
</kw>
<msg timestamp="20160205 03:41:47.713" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.713" starttime="20160205 03:41:47.709"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.719" starttime="20160205 03:41:47.718"></status>
</kw>
<msg timestamp="20160205 03:41:47.720" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.720" starttime="20160205 03:41:47.714"></status>
</kw>
<msg timestamp="20160205 03:41:47.721" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.721" starttime="20160205 03:41:47.686"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.726" starttime="20160205 03:41:47.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.727" starttime="20160205 03:41:47.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.728" starttime="20160205 03:41:47.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:47.734" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:47.734" starttime="20160205 03:41:47.732"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.734" starttime="20160205 03:41:47.731"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.735" starttime="20160205 03:41:47.729"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.735" starttime="20160205 03:41:47.722"></status>
</kw>
<msg timestamp="20160205 03:41:47.737" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:41:47.737" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:41:47.738" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:41:47.738" level="INFO">${id} = 2426303</msg>
<msg timestamp="20160205 03:41:47.738" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:41:47.739" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:41:47.739" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:47.737" starttime="20160205 03:41:47.316"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.750" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.750" starttime="20160205 03:41:47.749"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.751" starttime="20160205 03:41:47.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.754" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.755" starttime="20160205 03:41:47.753"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.755" starttime="20160205 03:41:47.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.758" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:47.758" starttime="20160205 03:41:47.757"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.759" starttime="20160205 03:41:47.756"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:47.759" starttime="20160205 03:41:47.745"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.761" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:47.761" starttime="20160205 03:41:47.760"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.763" starttime="20160205 03:41:47.762"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.764" starttime="20160205 03:41:47.763"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.766" starttime="20160205 03:41:47.765"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.767" starttime="20160205 03:41:47.766"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.768" starttime="20160205 03:41:47.767"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.770" starttime="20160205 03:41:47.769"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:47.772" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426303']</msg>
<msg timestamp="20160205 03:41:47.886" level="INFO">03:41:47,877 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:41:47,879 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426304
03:41:47,881 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
03:41:47,882 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:41:47,884 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:47.887" starttime="20160205 03:41:47.771"></status>
</kw>
<msg timestamp="20160205 03:41:47.888" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.888" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:47.887" starttime="20160205 03:41:47.770"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.894" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:47.893" starttime="20160205 03:41:47.892"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.895" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.895" starttime="20160205 03:41:47.894"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.897" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.897" starttime="20160205 03:41:47.896"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.900" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.900" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.901" starttime="20160205 03:41:47.899"></status>
</kw>
<msg timestamp="20160205 03:41:47.902" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.902" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,877 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.901" starttime="20160205 03:41:47.898"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.906" starttime="20160205 03:41:47.905"></status>
</kw>
<msg timestamp="20160205 03:41:47.907" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,877 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.907" starttime="20160205 03:41:47.902"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.911" starttime="20160205 03:41:47.910"></status>
</kw>
<msg timestamp="20160205 03:41:47.912" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,877 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:47.912" starttime="20160205 03:41:47.908"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.916" starttime="20160205 03:41:47.915"></status>
</kw>
<msg timestamp="20160205 03:41:47.917" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.917" starttime="20160205 03:41:47.912"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.923" starttime="20160205 03:41:47.922"></status>
</kw>
<msg timestamp="20160205 03:41:47.924" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.923" starttime="20160205 03:41:47.918"></status>
</kw>
<msg timestamp="20160205 03:41:47.925" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:47.924" starttime="20160205 03:41:47.889"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.930" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:41:47.930" starttime="20160205 03:41:47.929"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.932" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.932" starttime="20160205 03:41:47.931"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.934" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.934" starttime="20160205 03:41:47.933"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.937" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.937" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.937" starttime="20160205 03:41:47.935"></status>
</kw>
<msg timestamp="20160205 03:41:47.938" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.938" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,879 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.938" starttime="20160205 03:41:47.934"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.943" starttime="20160205 03:41:47.942"></status>
</kw>
<msg timestamp="20160205 03:41:47.943" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,879 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.943" starttime="20160205 03:41:47.939"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.948" starttime="20160205 03:41:47.947"></status>
</kw>
<msg timestamp="20160205 03:41:47.948" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,879 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.948" starttime="20160205 03:41:47.944"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.953" starttime="20160205 03:41:47.952"></status>
</kw>
<msg timestamp="20160205 03:41:47.953" level="INFO">${resultCode} = 2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.953" starttime="20160205 03:41:47.949"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.959" starttime="20160205 03:41:47.958"></status>
</kw>
<msg timestamp="20160205 03:41:47.960" level="INFO">${resultCode} = 2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.960" starttime="20160205 03:41:47.954"></status>
</kw>
<msg timestamp="20160205 03:41:47.961" level="INFO">${accountId} = 2426304</msg>
<status status="PASS" endtime="20160205 03:41:47.961" starttime="20160205 03:41:47.926"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:47.967" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:41:47.966" starttime="20160205 03:41:47.965"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.968" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:47.968" starttime="20160205 03:41:47.967"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.970" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:47.970" starttime="20160205 03:41:47.969"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:47.973" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:47.973" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:47.974" starttime="20160205 03:41:47.972"></status>
</kw>
<msg timestamp="20160205 03:41:47.975" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:47.975" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,881 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.974" starttime="20160205 03:41:47.971"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.979" starttime="20160205 03:41:47.978"></status>
</kw>
<msg timestamp="20160205 03:41:47.980" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,881 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.979" starttime="20160205 03:41:47.975"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.984" starttime="20160205 03:41:47.983"></status>
</kw>
<msg timestamp="20160205 03:41:47.985" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,881 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.985" starttime="20160205 03:41:47.980"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.989" starttime="20160205 03:41:47.988"></status>
</kw>
<msg timestamp="20160205 03:41:47.990" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.990" starttime="20160205 03:41:47.986"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:47.996" starttime="20160205 03:41:47.995"></status>
</kw>
<msg timestamp="20160205 03:41:47.997" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.997" starttime="20160205 03:41:47.991"></status>
</kw>
<msg timestamp="20160205 03:41:47.998" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:47.998" starttime="20160205 03:41:47.962"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:48.004" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:41:48.004" starttime="20160205 03:41:48.003"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.006" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:48.005" starttime="20160205 03:41:48.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.007" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:48.007" starttime="20160205 03:41:48.006"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.010" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:48.011" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:48.011" starttime="20160205 03:41:48.009"></status>
</kw>
<msg timestamp="20160205 03:41:48.012" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:48.012" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,882 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.012" starttime="20160205 03:41:48.008"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.017" starttime="20160205 03:41:48.016"></status>
</kw>
<msg timestamp="20160205 03:41:48.017" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,882 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.017" starttime="20160205 03:41:48.013"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.022" starttime="20160205 03:41:48.021"></status>
</kw>
<msg timestamp="20160205 03:41:48.022" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,882 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.022" starttime="20160205 03:41:48.018"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.027" starttime="20160205 03:41:48.026"></status>
</kw>
<msg timestamp="20160205 03:41:48.028" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.027" starttime="20160205 03:41:48.023"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.034" starttime="20160205 03:41:48.033"></status>
</kw>
<msg timestamp="20160205 03:41:48.034" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.034" starttime="20160205 03:41:48.028"></status>
</kw>
<msg timestamp="20160205 03:41:48.036" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:48.035" starttime="20160205 03:41:47.999"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:48.041" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:41:48.041" starttime="20160205 03:41:48.040"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.043" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:48.043" starttime="20160205 03:41:48.042"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.045" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:48.045" starttime="20160205 03:41:48.044"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.048" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:48.048" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:48.049" starttime="20160205 03:41:48.046"></status>
</kw>
<msg timestamp="20160205 03:41:48.049" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:48.050" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,884 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:48.049" starttime="20160205 03:41:48.045"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.054" starttime="20160205 03:41:48.053"></status>
</kw>
<msg timestamp="20160205 03:41:48.054" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,884 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:48.054" starttime="20160205 03:41:48.050"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.059" starttime="20160205 03:41:48.058"></status>
</kw>
<msg timestamp="20160205 03:41:48.059" level="INFO">${return_log_entry} = 2016-02-05 03:41:47,884 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:48.059" starttime="20160205 03:41:48.055"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.064" starttime="20160205 03:41:48.063"></status>
</kw>
<msg timestamp="20160205 03:41:48.065" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:48.064" starttime="20160205 03:41:48.060"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.071" starttime="20160205 03:41:48.070"></status>
</kw>
<msg timestamp="20160205 03:41:48.071" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:48.071" starttime="20160205 03:41:48.065"></status>
</kw>
<msg timestamp="20160205 03:41:48.072" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:48.072" starttime="20160205 03:41:48.037"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.077" starttime="20160205 03:41:48.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.078" starttime="20160205 03:41:48.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.080" starttime="20160205 03:41:48.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:48.086" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:48.087" starttime="20160205 03:41:48.084"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:48.087" starttime="20160205 03:41:48.083"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:48.087" starttime="20160205 03:41:48.080"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:48.088" starttime="20160205 03:41:48.073"></status>
</kw>
<msg timestamp="20160205 03:41:48.090" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:41:48.090" level="INFO">${accId} = 2426304</msg>
<msg timestamp="20160205 03:41:48.091" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160205 03:41:48.091" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:41:48.091" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:41:48.089" starttime="20160205 03:41:47.740"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.094" level="INFO">${target_bal} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:48.094" starttime="20160205 03:41:48.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160205 03:41:48.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:48.097" starttime="20160205 03:41:48.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:48.098" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160205 03:41:48.098" starttime="20160205 03:41:48.097"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:41:48.099" starttime="20160205 03:41:40.915"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:48.103" starttime="20160205 03:41:37.514"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:48.111" starttime="20160205 03:41:37.499"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown" id="s1-s1-s1-s2-s1-s7" name="MOC PREPAID ONNET-ToUnknown">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown/MOC_PREPAID_ONNET-ToUnknown-robot-suite.txt" id="s1-s1-s1-s2-s1-s7-s1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:41:48.273" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:48.281" level="INFO">${date} = Fri Feb  5 03:41:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:48.279" starttime="20160205 03:41:48.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:48.284" level="INFO">Date and time: Fri Feb  5 03:41:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:48.286" starttime="20160205 03:41:48.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:48.289" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:41:48.290" starttime="20160205 03:41:48.287"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.342" starttime="20160205 03:41:48.340"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:48.393" starttime="20160205 03:41:48.350"></status>
</kw>
<msg timestamp="20160205 03:41:48.394" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160205 03:41:48.394" starttime="20160205 03:41:48.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:48.399" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:48.919" level="INFO">Read output: Last login: Fri Feb  5 02:41:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:48.920" starttime="20160205 03:41:48.398"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:48.921" starttime="20160205 03:41:48.395"></status>
</kw>
<msg timestamp="20160205 03:41:48.922" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160205 03:41:48.921" starttime="20160205 03:41:48.331"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:48.926" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:48.925" starttime="20160205 03:41:48.922"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:48.927" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:41:49.177" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:49.179" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:49.178" starttime="20160205 03:41:48.926"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.182" starttime="20160205 03:41:49.181"></status>
</kw>
<msg timestamp="20160205 03:41:49.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:49.183" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:49.182" starttime="20160205 03:41:49.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.187" starttime="20160205 03:41:49.186"></status>
</kw>
<msg timestamp="20160205 03:41:49.188" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:49.187" starttime="20160205 03:41:49.183"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:41:49.190" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:41:49.189" starttime="20160205 03:41:49.188"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:49.191" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:49.191" starttime="20160205 03:41:49.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.192" starttime="20160205 03:41:49.192"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.197" starttime="20160205 03:41:49.196"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.201" starttime="20160205 03:41:49.198"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:49.202" starttime="20160205 03:41:49.193"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.206" starttime="20160205 03:41:49.205"></status>
</kw>
<msg timestamp="20160205 03:41:49.206" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:49.206" starttime="20160205 03:41:49.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.208" starttime="20160205 03:41:49.207"></status>
</kw>
<msg timestamp="20160205 03:41:49.209" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:41:49.209" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:49.208" starttime="20160205 03:41:48.307"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.233" starttime="20160205 03:41:49.232"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:49.287" starttime="20160205 03:41:49.236"></status>
</kw>
<msg timestamp="20160205 03:41:49.290" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160205 03:41:49.289" starttime="20160205 03:41:49.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:49.301" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:49.708" level="INFO">Read output: Last login: Fri Feb  5 02:41:38 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:49.709" starttime="20160205 03:41:49.298"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:49.710" starttime="20160205 03:41:49.291"></status>
</kw>
<msg timestamp="20160205 03:41:49.713" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160205 03:41:49.712" starttime="20160205 03:41:49.228"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:49.721" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:49.720" starttime="20160205 03:41:49.714"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:49.724" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:41:50.101" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:50.105" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:50.103" starttime="20160205 03:41:49.722"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.111" starttime="20160205 03:41:50.108"></status>
</kw>
<msg timestamp="20160205 03:41:50.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:50.114" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:50.112" starttime="20160205 03:41:50.106"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.123" starttime="20160205 03:41:50.121"></status>
</kw>
<msg timestamp="20160205 03:41:50.124" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:50.124" starttime="20160205 03:41:50.115"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:41:50.128" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:41:50.128" starttime="20160205 03:41:50.125"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:50.132" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:50.132" starttime="20160205 03:41:50.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.135" starttime="20160205 03:41:50.134"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.146" starttime="20160205 03:41:50.144"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.151" starttime="20160205 03:41:50.147"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:50.152" starttime="20160205 03:41:50.137"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.163" starttime="20160205 03:41:50.161"></status>
</kw>
<msg timestamp="20160205 03:41:50.164" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:50.163" starttime="20160205 03:41:50.155"></status>
</kw>
<msg timestamp="20160205 03:41:50.167" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:41:50.168" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:50.166" starttime="20160205 03:41:49.217"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.220" starttime="20160205 03:41:50.218"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.327" starttime="20160205 03:41:50.227"></status>
</kw>
<msg timestamp="20160205 03:41:50.329" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160205 03:41:50.328" starttime="20160205 03:41:50.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:50.335" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:50.730" level="INFO">Read output: Last login: Fri Feb  5 02:41:39 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:50.730" starttime="20160205 03:41:50.333"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:50.731" starttime="20160205 03:41:50.329"></status>
</kw>
<msg timestamp="20160205 03:41:50.732" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160205 03:41:50.732" starttime="20160205 03:41:50.209"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:50.736" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:50.736" starttime="20160205 03:41:50.733"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:50.738" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:41:50.913" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:50.915" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:50.914" starttime="20160205 03:41:50.737"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.920" starttime="20160205 03:41:50.918"></status>
</kw>
<msg timestamp="20160205 03:41:50.921" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:50.921" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:50.920" starttime="20160205 03:41:50.916"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.927" starttime="20160205 03:41:50.926"></status>
</kw>
<msg timestamp="20160205 03:41:50.927" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:50.927" starttime="20160205 03:41:50.922"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:50.929" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:41:50.929" starttime="20160205 03:41:50.928"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:50.931" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:50.931" starttime="20160205 03:41:50.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.933" starttime="20160205 03:41:50.932"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.938" starttime="20160205 03:41:50.937"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.942" starttime="20160205 03:41:50.939"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:50.942" starttime="20160205 03:41:50.934"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.947" starttime="20160205 03:41:50.946"></status>
</kw>
<msg timestamp="20160205 03:41:50.947" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:50.947" starttime="20160205 03:41:50.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.949" starttime="20160205 03:41:50.948"></status>
</kw>
<msg timestamp="20160205 03:41:50.950" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:41:50.950" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:50.950" starttime="20160205 03:41:50.185"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:50.975" starttime="20160205 03:41:50.974"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.017" starttime="20160205 03:41:50.978"></status>
</kw>
<msg timestamp="20160205 03:41:51.019" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160205 03:41:51.018" starttime="20160205 03:41:50.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.024" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:41:51.421" level="INFO">Read output: Last login: Fri Feb  5 02:41:40 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:41:51.421" starttime="20160205 03:41:51.023"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.422" starttime="20160205 03:41:51.019"></status>
</kw>
<msg timestamp="20160205 03:41:51.423" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160205 03:41:51.423" starttime="20160205 03:41:50.970"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:41:51.427" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:41:51.427" starttime="20160205 03:41:51.424"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:41:51.429" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:41:51.508" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:41:51.509" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:51.508" starttime="20160205 03:41:51.428"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.512" starttime="20160205 03:41:51.510"></status>
</kw>
<msg timestamp="20160205 03:41:51.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:41:51.513" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:41:51.512" starttime="20160205 03:41:51.509"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.516" starttime="20160205 03:41:51.516"></status>
</kw>
<msg timestamp="20160205 03:41:51.517" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:51.517" starttime="20160205 03:41:51.513"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:41:51.519" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:41:51.519" starttime="20160205 03:41:51.518"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:41:51.521" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:51.521" starttime="20160205 03:41:51.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.522" starttime="20160205 03:41:51.521"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.527" starttime="20160205 03:41:51.526"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.530" starttime="20160205 03:41:51.528"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.531" starttime="20160205 03:41:51.523"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.535" starttime="20160205 03:41:51.534"></status>
</kw>
<msg timestamp="20160205 03:41:51.535" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:51.535" starttime="20160205 03:41:51.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.537" starttime="20160205 03:41:51.536"></status>
</kw>
<msg timestamp="20160205 03:41:51.538" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:41:51.538" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:51.538" starttime="20160205 03:41:50.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:51.540" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:41:51.541" starttime="20160205 03:41:51.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:51.542" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:41:51.543" starttime="20160205 03:41:51.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:51.545" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:41:51.545" starttime="20160205 03:41:51.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:51.547" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:41:51.547" starttime="20160205 03:41:51.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:41:51.549" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:51.549" starttime="20160205 03:41:51.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:41:51.551" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:51.551" starttime="20160205 03:41:51.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:41:51.552" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:51.553" starttime="20160205 03:41:51.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:41:51.554" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:51.555" starttime="20160205 03:41:51.553"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.560" starttime="20160205 03:41:51.558"></status>
</kw>
<msg timestamp="20160205 03:41:51.561" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:51.560" starttime="20160205 03:41:51.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.563" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:41:51.563" starttime="20160205 03:41:51.561"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.563" starttime="20160205 03:41:48.266"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s7-s1-t1" name="Run MOC ToUnknown Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.569" starttime="20160205 03:41:51.569"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:41:51.571" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:41:51.571" starttime="20160205 03:41:51.570"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.578" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:41:51.578" starttime="20160205 03:41:51.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.580" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:41:51.580" starttime="20160205 03:41:51.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.582" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:41:51.582" starttime="20160205 03:41:51.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.583" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:41:51.584" starttime="20160205 03:41:51.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.585" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:51.585" starttime="20160205 03:41:51.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.587" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:41:51.587" starttime="20160205 03:41:51.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.589" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:51.589" starttime="20160205 03:41:51.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.591" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:41:51.591" starttime="20160205 03:41:51.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.593" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:51.593" starttime="20160205 03:41:51.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.595" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:41:51.595" starttime="20160205 03:41:51.594"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.602" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:51.603" starttime="20160205 03:41:51.601"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.603" starttime="20160205 03:41:51.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.606" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:51.606" starttime="20160205 03:41:51.605"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.607" starttime="20160205 03:41:51.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.609" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:51.610" starttime="20160205 03:41:51.608"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.610" starttime="20160205 03:41:51.607"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:51.611" starttime="20160205 03:41:51.596"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:51.613" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:51.613" starttime="20160205 03:41:51.611"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.615" starttime="20160205 03:41:51.614"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.616" starttime="20160205 03:41:51.615"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.618" starttime="20160205 03:41:51.617"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.619" starttime="20160205 03:41:51.618"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.620" starttime="20160205 03:41:51.620"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.622" starttime="20160205 03:41:51.621"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.623" starttime="20160205 03:41:51.622"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.625" starttime="20160205 03:41:51.624"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.627" starttime="20160205 03:41:51.626"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.629" starttime="20160205 03:41:51.628"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.630" starttime="20160205 03:41:51.629"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:51.632" starttime="20160205 03:41:51.631"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:51.634" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:41:52.501" level="INFO">03:41:52,498 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.502" starttime="20160205 03:41:51.633"></status>
</kw>
<msg timestamp="20160205 03:41:52.504" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.504" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:52.503" starttime="20160205 03:41:51.632"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.510" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:52.509" starttime="20160205 03:41:52.508"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.511" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.511" starttime="20160205 03:41:52.510"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.513" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.513" starttime="20160205 03:41:52.512"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.516" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.516" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.517" starttime="20160205 03:41:52.515"></status>
</kw>
<msg timestamp="20160205 03:41:52.517" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.518" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,498 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.517" starttime="20160205 03:41:52.514"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.522" starttime="20160205 03:41:52.521"></status>
</kw>
<msg timestamp="20160205 03:41:52.523" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,498 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.523" starttime="20160205 03:41:52.518"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.527" starttime="20160205 03:41:52.526"></status>
</kw>
<msg timestamp="20160205 03:41:52.528" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,498 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.527" starttime="20160205 03:41:52.523"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.533" starttime="20160205 03:41:52.532"></status>
</kw>
<msg timestamp="20160205 03:41:52.534" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.534" starttime="20160205 03:41:52.528"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.540" starttime="20160205 03:41:52.539"></status>
</kw>
<msg timestamp="20160205 03:41:52.541" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.540" starttime="20160205 03:41:52.535"></status>
</kw>
<msg timestamp="20160205 03:41:52.542" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.541" starttime="20160205 03:41:52.505"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.546" starttime="20160205 03:41:52.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.548" starttime="20160205 03:41:52.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.549" starttime="20160205 03:41:52.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:52.554" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:52.555" starttime="20160205 03:41:52.553"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.555" starttime="20160205 03:41:52.552"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.555" starttime="20160205 03:41:52.549"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.556" starttime="20160205 03:41:52.542"></status>
</kw>
<msg timestamp="20160205 03:41:52.557" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.557" starttime="20160205 03:41:51.572"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:41:52.559" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:41:52.559" starttime="20160205 03:41:52.558"></status>
</kw>
<kw type="kw" name="${unknown_subscriber} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:41:52.562" level="INFO">${unknown_subscriber} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.562" starttime="20160205 03:41:52.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Unknown subscriber's MSISDN: ${unknown_subscriber}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:52.564" level="INFO">Unknown subscriber's MSISDN: 642041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.564" starttime="20160205 03:41:52.563"></status>
</kw>
<kw type="kw" name="${rc}, ${provcId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${unknown_subscriber}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.575" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:52.576" starttime="20160205 03:41:52.574"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.576" starttime="20160205 03:41:52.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.579" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:52.579" starttime="20160205 03:41:52.578"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.580" starttime="20160205 03:41:52.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.582" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:52.583" starttime="20160205 03:41:52.581"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.583" starttime="20160205 03:41:52.580"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.584" starttime="20160205 03:41:52.570"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.586" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:52.586" starttime="20160205 03:41:52.584"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.587" starttime="20160205 03:41:52.586"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.589" starttime="20160205 03:41:52.588"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.591" starttime="20160205 03:41:52.590"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.592" starttime="20160205 03:41:52.591"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.594" starttime="20160205 03:41:52.593"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.595" starttime="20160205 03:41:52.594"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:52.598" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001']</msg>
<msg timestamp="20160205 03:41:52.715" level="INFO">03:41:52,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:41:52,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:41:52,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426310
03:41:52,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001
03:41:52,707 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:41:52,709 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:41:52,711 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:41:52,713 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:41:52.716" starttime="20160205 03:41:52.597"></status>
</kw>
<msg timestamp="20160205 03:41:52.717" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.717" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:52.716" starttime="20160205 03:41:52.596"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.723" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:52.722" starttime="20160205 03:41:52.721"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.724" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.724" starttime="20160205 03:41:52.723"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.726" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.726" starttime="20160205 03:41:52.725"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.729" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.730" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.730" starttime="20160205 03:41:52.728"></status>
</kw>
<msg timestamp="20160205 03:41:52.731" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.731" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.730" starttime="20160205 03:41:52.727"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.735" starttime="20160205 03:41:52.734"></status>
</kw>
<msg timestamp="20160205 03:41:52.736" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.736" starttime="20160205 03:41:52.731"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.740" starttime="20160205 03:41:52.739"></status>
</kw>
<msg timestamp="20160205 03:41:52.741" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,700 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:52.741" starttime="20160205 03:41:52.737"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.745" starttime="20160205 03:41:52.744"></status>
</kw>
<msg timestamp="20160205 03:41:52.746" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.746" starttime="20160205 03:41:52.741"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.752" starttime="20160205 03:41:52.751"></status>
</kw>
<msg timestamp="20160205 03:41:52.753" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.753" starttime="20160205 03:41:52.747"></status>
</kw>
<msg timestamp="20160205 03:41:52.754" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:52.754" starttime="20160205 03:41:52.718"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.759" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:41:52.759" starttime="20160205 03:41:52.758"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.761" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.761" starttime="20160205 03:41:52.760"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.763" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.762" starttime="20160205 03:41:52.762"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.765" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.766" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.766" starttime="20160205 03:41:52.764"></status>
</kw>
<msg timestamp="20160205 03:41:52.767" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.767" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:52.767" starttime="20160205 03:41:52.763"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.771" starttime="20160205 03:41:52.771"></status>
</kw>
<msg timestamp="20160205 03:41:52.772" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:52.772" starttime="20160205 03:41:52.768"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.776" starttime="20160205 03:41:52.775"></status>
</kw>
<msg timestamp="20160205 03:41:52.777" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,702 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:52.777" starttime="20160205 03:41:52.773"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.781" starttime="20160205 03:41:52.780"></status>
</kw>
<msg timestamp="20160205 03:41:52.782" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:52.782" starttime="20160205 03:41:52.778"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.788" starttime="20160205 03:41:52.787"></status>
</kw>
<msg timestamp="20160205 03:41:52.789" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:52.788" starttime="20160205 03:41:52.783"></status>
</kw>
<msg timestamp="20160205 03:41:52.790" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:52.789" starttime="20160205 03:41:52.755"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.795" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:41:52.795" starttime="20160205 03:41:52.794"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.797" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.797" starttime="20160205 03:41:52.796"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.799" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.798" starttime="20160205 03:41:52.797"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.801" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.802" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.802" starttime="20160205 03:41:52.800"></status>
</kw>
<msg timestamp="20160205 03:41:52.803" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.803" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.803" starttime="20160205 03:41:52.799"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.807" starttime="20160205 03:41:52.806"></status>
</kw>
<msg timestamp="20160205 03:41:52.808" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.808" starttime="20160205 03:41:52.804"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.812" starttime="20160205 03:41:52.811"></status>
</kw>
<msg timestamp="20160205 03:41:52.813" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,706 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.813" starttime="20160205 03:41:52.809"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.817" starttime="20160205 03:41:52.816"></status>
</kw>
<msg timestamp="20160205 03:41:52.818" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.818" starttime="20160205 03:41:52.814"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.824" starttime="20160205 03:41:52.823"></status>
</kw>
<msg timestamp="20160205 03:41:52.825" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.824" starttime="20160205 03:41:52.819"></status>
</kw>
<msg timestamp="20160205 03:41:52.826" level="INFO">${imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160205 03:41:52.825" starttime="20160205 03:41:52.791"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.831" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:41:52.831" starttime="20160205 03:41:52.830"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.833" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.833" starttime="20160205 03:41:52.832"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.835" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.834" starttime="20160205 03:41:52.833"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.837" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.838" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.838" starttime="20160205 03:41:52.836"></status>
</kw>
<msg timestamp="20160205 03:41:52.839" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.839" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.839" starttime="20160205 03:41:52.835"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.843" starttime="20160205 03:41:52.842"></status>
</kw>
<msg timestamp="20160205 03:41:52.844" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.844" starttime="20160205 03:41:52.840"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.848" starttime="20160205 03:41:52.847"></status>
</kw>
<msg timestamp="20160205 03:41:52.849" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,704 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.849" starttime="20160205 03:41:52.845"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.853" starttime="20160205 03:41:52.852"></status>
</kw>
<msg timestamp="20160205 03:41:52.854" level="INFO">${resultCode} = 2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.854" starttime="20160205 03:41:52.850"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.860" starttime="20160205 03:41:52.859"></status>
</kw>
<msg timestamp="20160205 03:41:52.861" level="INFO">${resultCode} = 2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.860" starttime="20160205 03:41:52.855"></status>
</kw>
<msg timestamp="20160205 03:41:52.862" level="INFO">${id} = 2426310</msg>
<status status="PASS" endtime="20160205 03:41:52.861" starttime="20160205 03:41:52.827"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.867" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:41:52.867" starttime="20160205 03:41:52.866"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.869" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.869" starttime="20160205 03:41:52.868"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.871" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.870" starttime="20160205 03:41:52.869"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.873" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.874" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.874" starttime="20160205 03:41:52.872"></status>
</kw>
<msg timestamp="20160205 03:41:52.875" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.875" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,707 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.875" starttime="20160205 03:41:52.871"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.880" starttime="20160205 03:41:52.879"></status>
</kw>
<msg timestamp="20160205 03:41:52.880" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,707 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.880" starttime="20160205 03:41:52.876"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.884" starttime="20160205 03:41:52.883"></status>
</kw>
<msg timestamp="20160205 03:41:52.885" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,707 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.885" starttime="20160205 03:41:52.881"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.889" starttime="20160205 03:41:52.888"></status>
</kw>
<msg timestamp="20160205 03:41:52.890" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.890" starttime="20160205 03:41:52.886"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.896" starttime="20160205 03:41:52.895"></status>
</kw>
<msg timestamp="20160205 03:41:52.897" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.896" starttime="20160205 03:41:52.891"></status>
</kw>
<msg timestamp="20160205 03:41:52.898" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:52.897" starttime="20160205 03:41:52.863"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.903" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:41:52.903" starttime="20160205 03:41:52.902"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.905" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.905" starttime="20160205 03:41:52.904"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.907" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.906" starttime="20160205 03:41:52.906"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.909" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.910" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.910" starttime="20160205 03:41:52.908"></status>
</kw>
<msg timestamp="20160205 03:41:52.911" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.911" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,709 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:52.911" starttime="20160205 03:41:52.907"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.915" starttime="20160205 03:41:52.915"></status>
</kw>
<msg timestamp="20160205 03:41:52.916" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,709 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:52.916" starttime="20160205 03:41:52.912"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.920" starttime="20160205 03:41:52.919"></status>
</kw>
<msg timestamp="20160205 03:41:52.921" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,709 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:52.921" starttime="20160205 03:41:52.917"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.925" starttime="20160205 03:41:52.924"></status>
</kw>
<msg timestamp="20160205 03:41:52.926" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:52.926" starttime="20160205 03:41:52.922"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.932" starttime="20160205 03:41:52.931"></status>
</kw>
<msg timestamp="20160205 03:41:52.933" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:52.932" starttime="20160205 03:41:52.927"></status>
</kw>
<msg timestamp="20160205 03:41:52.934" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:52.933" starttime="20160205 03:41:52.899"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:52.939" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:41:52.939" starttime="20160205 03:41:52.938"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.941" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:52.941" starttime="20160205 03:41:52.940"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.943" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:52.943" starttime="20160205 03:41:52.942"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.945" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:52.946" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:52.946" starttime="20160205 03:41:52.944"></status>
</kw>
<msg timestamp="20160205 03:41:52.947" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:52.947" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,711 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.947" starttime="20160205 03:41:52.943"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.952" starttime="20160205 03:41:52.951"></status>
</kw>
<msg timestamp="20160205 03:41:52.952" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,711 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.952" starttime="20160205 03:41:52.948"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.956" starttime="20160205 03:41:52.955"></status>
</kw>
<msg timestamp="20160205 03:41:52.957" level="INFO">${return_log_entry} = 2016-02-05 03:41:52,711 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.957" starttime="20160205 03:41:52.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.961" starttime="20160205 03:41:52.960"></status>
</kw>
<msg timestamp="20160205 03:41:52.962" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.962" starttime="20160205 03:41:52.958"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.968" starttime="20160205 03:41:52.967"></status>
</kw>
<msg timestamp="20160205 03:41:52.969" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.968" starttime="20160205 03:41:52.963"></status>
</kw>
<msg timestamp="20160205 03:41:52.970" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.969" starttime="20160205 03:41:52.935"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.974" starttime="20160205 03:41:52.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.975" starttime="20160205 03:41:52.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:52.977" starttime="20160205 03:41:52.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:52.982" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:52.982" starttime="20160205 03:41:52.981"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.983" starttime="20160205 03:41:52.980"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.983" starttime="20160205 03:41:52.977"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:52.984" starttime="20160205 03:41:52.970"></status>
</kw>
<msg timestamp="20160205 03:41:52.986" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:41:52.986" level="INFO">${provcId} = 1</msg>
<msg timestamp="20160205 03:41:52.986" level="INFO">${imsi} = 530052041010001</msg>
<msg timestamp="20160205 03:41:52.986" level="INFO">${id} = 2426310</msg>
<msg timestamp="20160205 03:41:52.987" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:41:52.987" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:41:52.987" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:52.985" starttime="20160205 03:41:52.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting "unknown" subscriber...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:52.988" level="INFO">Deleting "unknown" subscriber...</msg>
<status status="PASS" endtime="20160205 03:41:52.989" starttime="20160205 03:41:52.988"></status>
</kw>
<kw type="kw" name="${rc} = subscriber-admin-support-resource.CRCE Delete Subscriber">
<doc>This is a delegator to the CRCE webservice operation deleteSubcriber</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:52.999" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.000" starttime="20160205 03:41:52.998"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.001" starttime="20160205 03:41:52.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.004" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.004" starttime="20160205 03:41:53.003"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.005" starttime="20160205 03:41:53.002"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.007" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.008" starttime="20160205 03:41:53.006"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.008" starttime="20160205 03:41:53.005"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.008" starttime="20160205 03:41:52.994"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.011" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:53.011" starttime="20160205 03:41:53.009"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.012" starttime="20160205 03:41:53.011"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.014" starttime="20160205 03:41:53.013"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.016" starttime="20160205 03:41:53.015"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.017" starttime="20160205 03:41:53.016"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>deleteSubscriber</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.018" starttime="20160205 03:41:53.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.input.id=${id}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.020" starttime="20160205 03:41:53.019"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:53.022" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2426310']</msg>
<msg timestamp="20160205 03:41:53.171" level="INFO">03:41:53,169 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:53.172" starttime="20160205 03:41:53.021"></status>
</kw>
<msg timestamp="20160205 03:41:53.173" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:53.173" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:53.172" starttime="20160205 03:41:53.020"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:53.179" level="INFO">${return_marker} = LowLevelOps.deleteSubscriber.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:53.178" starttime="20160205 03:41:53.177"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.180" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:53.180" starttime="20160205 03:41:53.179"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.182" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:53.182" starttime="20160205 03:41:53.181"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.185" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:53.187" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:53.188" starttime="20160205 03:41:53.184"></status>
</kw>
<msg timestamp="20160205 03:41:53.188" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:53.189" level="INFO">${return_log_entry} = 2016-02-05 03:41:53,169 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:53.188" starttime="20160205 03:41:53.183"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.193" starttime="20160205 03:41:53.192"></status>
</kw>
<msg timestamp="20160205 03:41:53.194" level="INFO">${return_log_entry} = 2016-02-05 03:41:53,169 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:53.193" starttime="20160205 03:41:53.189"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.198" starttime="20160205 03:41:53.197"></status>
</kw>
<msg timestamp="20160205 03:41:53.199" level="INFO">${return_log_entry} = 2016-02-05 03:41:53,169 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:53.198" starttime="20160205 03:41:53.194"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.203" starttime="20160205 03:41:53.202"></status>
</kw>
<msg timestamp="20160205 03:41:53.204" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:53.203" starttime="20160205 03:41:53.199"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.209" starttime="20160205 03:41:53.208"></status>
</kw>
<msg timestamp="20160205 03:41:53.210" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:53.210" starttime="20160205 03:41:53.204"></status>
</kw>
<msg timestamp="20160205 03:41:53.211" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:53.211" starttime="20160205 03:41:53.174"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-DeleteSubscriber</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.216" starttime="20160205 03:41:53.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.217" starttime="20160205 03:41:53.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.218" starttime="20160205 03:41:53.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:53.225" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:53.226" starttime="20160205 03:41:53.222"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.226" starttime="20160205 03:41:53.221"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.227" starttime="20160205 03:41:53.219"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.227" starttime="20160205 03:41:53.212"></status>
</kw>
<msg timestamp="20160205 03:41:53.228" level="INFO">${rc} = OK</msg>
<status status="PASS" endtime="20160205 03:41:53.228" starttime="20160205 03:41:52.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting subscriber returned rc= ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:53.230" level="INFO">Deleting subscriber returned rc= OK</msg>
<status status="PASS" endtime="20160205 03:41:53.230" starttime="20160205 03:41:53.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}'=='OK'</arg>
<arg>Log</arg>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>msg=Subscriber preparation failed!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:53.234" level="INFO">Test Subscribers prepared!</msg>
<status status="PASS" endtime="20160205 03:41:53.235" starttime="20160205 03:41:53.234"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:53.235" starttime="20160205 03:41:53.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s to unknown subscriber*******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.236" starttime="20160205 03:41:53.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:53.238" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160205 03:41:53.238" starttime="20160205 03:41:53.237"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${unknown_subscriber}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:53.253" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:41:53.252" starttime="20160205 03:41:53.251"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:41:53.254" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:41:53.254" starttime="20160205 03:41:53.253"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:41:53.256" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:41:53.256" starttime="20160205 03:41:53.255"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:41:53.258" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:41:53.258" starttime="20160205 03:41:53.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.259" starttime="20160205 03:41:53.258"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:53.262" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.262" starttime="20160205 03:41:53.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.263" starttime="20160205 03:41:53.263"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:41:53.265" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.266" starttime="20160205 03:41:53.264"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:41:53.268" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.269" starttime="20160205 03:41:53.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.270" starttime="20160205 03:41:53.269"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.272" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.272" starttime="20160205 03:41:53.270"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:41:53.275" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:53.275" starttime="20160205 03:41:53.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:53.276" starttime="20160205 03:41:53.276"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:41:53.296" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:58.511" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:58.509" starttime="20160205 03:41:53.277"></status>
</kw>
<msg timestamp="20160205 03:41:58.513" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:58.512" starttime="20160205 03:41:53.246"></status>
</kw>
<msg timestamp="20160205 03:41:58.514" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:41:58.514" starttime="20160205 03:41:53.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CG return code is: ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:58.516" level="INFO">CG return code is: 0</msg>
<status status="PASS" endtime="20160205 03:41:58.517" starttime="20160205 03:41:58.515"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.529" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.530" starttime="20160205 03:41:58.528"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.530" starttime="20160205 03:41:58.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.533" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.533" starttime="20160205 03:41:58.531"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.533" starttime="20160205 03:41:58.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.536" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.536" starttime="20160205 03:41:58.535"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.537" starttime="20160205 03:41:58.534"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.537" starttime="20160205 03:41:58.524"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.539" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:58.539" starttime="20160205 03:41:58.537"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.541" starttime="20160205 03:41:58.540"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.542" starttime="20160205 03:41:58.541"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.544" starttime="20160205 03:41:58.543"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.545" starttime="20160205 03:41:58.544"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.546" starttime="20160205 03:41:58.545"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.547" starttime="20160205 03:41:58.546"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:58.549" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2426310', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160205 03:41:58.666" level="INFO">03:41:58,650 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
03:41:58,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
03:41:58,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426308
03:41:58,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
03:41:58,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
03:41:58,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
03:41:58,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
03:41:58,664 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160205 03:41:58.667" starttime="20160205 03:41:58.549"></status>
</kw>
<msg timestamp="20160205 03:41:58.668" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.668" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:58.667" starttime="20160205 03:41:58.548"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.674" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:58.673" starttime="20160205 03:41:58.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.675" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.675" starttime="20160205 03:41:58.674"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.677" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.677" starttime="20160205 03:41:58.676"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.679" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.680" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.680" starttime="20160205 03:41:58.678"></status>
</kw>
<msg timestamp="20160205 03:41:58.681" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.681" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,650 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:58.681" starttime="20160205 03:41:58.677"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.686" starttime="20160205 03:41:58.685"></status>
</kw>
<msg timestamp="20160205 03:41:58.687" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,650 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:58.687" starttime="20160205 03:41:58.682"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.691" starttime="20160205 03:41:58.690"></status>
</kw>
<msg timestamp="20160205 03:41:58.692" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,650 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:58.691" starttime="20160205 03:41:58.687"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.696" starttime="20160205 03:41:58.695"></status>
</kw>
<msg timestamp="20160205 03:41:58.697" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:58.696" starttime="20160205 03:41:58.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.702" starttime="20160205 03:41:58.701"></status>
</kw>
<msg timestamp="20160205 03:41:58.703" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:58.703" starttime="20160205 03:41:58.697"></status>
</kw>
<msg timestamp="20160205 03:41:58.704" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:58.704" starttime="20160205 03:41:58.669"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.710" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160205 03:41:58.709" starttime="20160205 03:41:58.708"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.711" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.711" starttime="20160205 03:41:58.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.713" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.713" starttime="20160205 03:41:58.712"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.715" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.716" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.716" starttime="20160205 03:41:58.714"></status>
</kw>
<msg timestamp="20160205 03:41:58.717" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.717" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:58.717" starttime="20160205 03:41:58.713"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.721" starttime="20160205 03:41:58.720"></status>
</kw>
<msg timestamp="20160205 03:41:58.722" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:58.722" starttime="20160205 03:41:58.718"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.726" starttime="20160205 03:41:58.725"></status>
</kw>
<msg timestamp="20160205 03:41:58.727" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,652 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160205 03:41:58.726" starttime="20160205 03:41:58.723"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.731" starttime="20160205 03:41:58.730"></status>
</kw>
<msg timestamp="20160205 03:41:58.732" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:58.731" starttime="20160205 03:41:58.727"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.737" starttime="20160205 03:41:58.736"></status>
</kw>
<msg timestamp="20160205 03:41:58.738" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:58.738" starttime="20160205 03:41:58.732"></status>
</kw>
<msg timestamp="20160205 03:41:58.739" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:58.739" starttime="20160205 03:41:58.705"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.744" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160205 03:41:58.744" starttime="20160205 03:41:58.743"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.746" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.746" starttime="20160205 03:41:58.745"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.748" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.748" starttime="20160205 03:41:58.747"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.750" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.751" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.751" starttime="20160205 03:41:58.749"></status>
</kw>
<msg timestamp="20160205 03:41:58.752" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.753" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.752" starttime="20160205 03:41:58.748"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.756" starttime="20160205 03:41:58.756"></status>
</kw>
<msg timestamp="20160205 03:41:58.757" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.757" starttime="20160205 03:41:58.753"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.761" starttime="20160205 03:41:58.760"></status>
</kw>
<msg timestamp="20160205 03:41:58.762" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.761" starttime="20160205 03:41:58.758"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.766" starttime="20160205 03:41:58.765"></status>
</kw>
<msg timestamp="20160205 03:41:58.767" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.766" starttime="20160205 03:41:58.762"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.772" starttime="20160205 03:41:58.771"></status>
</kw>
<msg timestamp="20160205 03:41:58.773" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.773" starttime="20160205 03:41:58.767"></status>
</kw>
<msg timestamp="20160205 03:41:58.774" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160205 03:41:58.774" starttime="20160205 03:41:58.740"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.779" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160205 03:41:58.779" starttime="20160205 03:41:58.778"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.781" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.781" starttime="20160205 03:41:58.780"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.783" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.782" starttime="20160205 03:41:58.782"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.785" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.786" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.786" starttime="20160205 03:41:58.784"></status>
</kw>
<msg timestamp="20160205 03:41:58.787" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.787" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.787" starttime="20160205 03:41:58.783"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.791" starttime="20160205 03:41:58.790"></status>
</kw>
<msg timestamp="20160205 03:41:58.792" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.791" starttime="20160205 03:41:58.788"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.796" starttime="20160205 03:41:58.795"></status>
</kw>
<msg timestamp="20160205 03:41:58.796" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,654 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.796" starttime="20160205 03:41:58.792"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.801" starttime="20160205 03:41:58.799"></status>
</kw>
<msg timestamp="20160205 03:41:58.801" level="INFO">${resultCode} = 2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.801" starttime="20160205 03:41:58.797"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.807" starttime="20160205 03:41:58.806"></status>
</kw>
<msg timestamp="20160205 03:41:58.808" level="INFO">${resultCode} = 2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.807" starttime="20160205 03:41:58.802"></status>
</kw>
<msg timestamp="20160205 03:41:58.809" level="INFO">${id} = 2426308</msg>
<status status="PASS" endtime="20160205 03:41:58.808" starttime="20160205 03:41:58.775"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.814" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160205 03:41:58.814" starttime="20160205 03:41:58.813"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.816" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.815" starttime="20160205 03:41:58.815"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.817" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.817" starttime="20160205 03:41:58.816"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.820" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.820" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.821" starttime="20160205 03:41:58.819"></status>
</kw>
<msg timestamp="20160205 03:41:58.822" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.822" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.821" starttime="20160205 03:41:58.818"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.826" starttime="20160205 03:41:58.825"></status>
</kw>
<msg timestamp="20160205 03:41:58.826" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.826" starttime="20160205 03:41:58.822"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.830" starttime="20160205 03:41:58.829"></status>
</kw>
<msg timestamp="20160205 03:41:58.831" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.831" starttime="20160205 03:41:58.827"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.835" starttime="20160205 03:41:58.834"></status>
</kw>
<msg timestamp="20160205 03:41:58.836" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.836" starttime="20160205 03:41:58.832"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.842" starttime="20160205 03:41:58.841"></status>
</kw>
<msg timestamp="20160205 03:41:58.842" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.842" starttime="20160205 03:41:58.837"></status>
</kw>
<msg timestamp="20160205 03:41:58.843" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160205 03:41:58.843" starttime="20160205 03:41:58.809"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.849" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160205 03:41:58.848" starttime="20160205 03:41:58.847"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.850" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.850" starttime="20160205 03:41:58.849"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.852" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.852" starttime="20160205 03:41:58.851"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.855" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.855" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.855" starttime="20160205 03:41:58.853"></status>
</kw>
<msg timestamp="20160205 03:41:58.856" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.856" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:58.856" starttime="20160205 03:41:58.853"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.860" starttime="20160205 03:41:58.859"></status>
</kw>
<msg timestamp="20160205 03:41:58.861" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:58.861" starttime="20160205 03:41:58.857"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.865" starttime="20160205 03:41:58.864"></status>
</kw>
<msg timestamp="20160205 03:41:58.866" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:41:58.865" starttime="20160205 03:41:58.861"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.870" starttime="20160205 03:41:58.869"></status>
</kw>
<msg timestamp="20160205 03:41:58.871" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:58.870" starttime="20160205 03:41:58.866"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.876" starttime="20160205 03:41:58.875"></status>
</kw>
<msg timestamp="20160205 03:41:58.877" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:58.877" starttime="20160205 03:41:58.871"></status>
</kw>
<msg timestamp="20160205 03:41:58.878" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160205 03:41:58.878" starttime="20160205 03:41:58.844"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:58.884" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160205 03:41:58.883" starttime="20160205 03:41:58.882"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.885" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:58.885" starttime="20160205 03:41:58.884"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.887" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:58.887" starttime="20160205 03:41:58.886"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.889" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:58.890" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:58.890" starttime="20160205 03:41:58.888"></status>
</kw>
<msg timestamp="20160205 03:41:58.891" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:58.891" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.891" starttime="20160205 03:41:58.887"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.895" starttime="20160205 03:41:58.894"></status>
</kw>
<msg timestamp="20160205 03:41:58.896" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.896" starttime="20160205 03:41:58.892"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.900" starttime="20160205 03:41:58.899"></status>
</kw>
<msg timestamp="20160205 03:41:58.900" level="INFO">${return_log_entry} = 2016-02-05 03:41:58,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.900" starttime="20160205 03:41:58.896"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.905" starttime="20160205 03:41:58.904"></status>
</kw>
<msg timestamp="20160205 03:41:58.905" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.905" starttime="20160205 03:41:58.901"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.911" starttime="20160205 03:41:58.910"></status>
</kw>
<msg timestamp="20160205 03:41:58.912" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.911" starttime="20160205 03:41:58.906"></status>
</kw>
<msg timestamp="20160205 03:41:58.913" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.912" starttime="20160205 03:41:58.879"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.917" starttime="20160205 03:41:58.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.918" starttime="20160205 03:41:58.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.920" starttime="20160205 03:41:58.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:58.925" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:58.925" starttime="20160205 03:41:58.924"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.926" starttime="20160205 03:41:58.923"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.926" starttime="20160205 03:41:58.920"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.927" starttime="20160205 03:41:58.913"></status>
</kw>
<msg timestamp="20160205 03:41:58.928" level="INFO">${rc} = OK</msg>
<msg timestamp="20160205 03:41:58.929" level="INFO">${provId} = 1</msg>
<msg timestamp="20160205 03:41:58.929" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160205 03:41:58.929" level="INFO">${id} = 2426308</msg>
<msg timestamp="20160205 03:41:58.929" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160205 03:41:58.930" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160205 03:41:58.930" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160205 03:41:58.928" starttime="20160205 03:41:58.519"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.940" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.941" starttime="20160205 03:41:58.939"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.941" starttime="20160205 03:41:58.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.944" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.944" starttime="20160205 03:41:58.943"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.945" starttime="20160205 03:41:58.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.947" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:41:58.947" starttime="20160205 03:41:58.946"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.948" starttime="20160205 03:41:58.945"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:58.948" starttime="20160205 03:41:58.936"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:41:58.950" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:41:58.950" starttime="20160205 03:41:58.949"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.952" starttime="20160205 03:41:58.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.953" starttime="20160205 03:41:58.952"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.955" starttime="20160205 03:41:58.954"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.956" starttime="20160205 03:41:58.955"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.957" starttime="20160205 03:41:58.956"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:58.959" starttime="20160205 03:41:58.958"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:41:58.960" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2426310', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2426308']</msg>
<msg timestamp="20160205 03:41:59.070" level="INFO">03:41:59,059 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
03:41:59,061 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426309
03:41:59,063 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
03:41:59,065 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
03:41:59,067 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:59.071" starttime="20160205 03:41:58.960"></status>
</kw>
<msg timestamp="20160205 03:41:59.072" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.072" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:41:59.072" starttime="20160205 03:41:58.959"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:59.078" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:41:59.078" starttime="20160205 03:41:59.077"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.080" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:59.080" starttime="20160205 03:41:59.079"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.081" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:59.081" starttime="20160205 03:41:59.080"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.084" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:59.085" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:59.085" starttime="20160205 03:41:59.083"></status>
</kw>
<msg timestamp="20160205 03:41:59.086" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.086" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,059 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:59.085" starttime="20160205 03:41:59.082"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.090" starttime="20160205 03:41:59.089"></status>
</kw>
<msg timestamp="20160205 03:41:59.091" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,059 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:59.091" starttime="20160205 03:41:59.087"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.095" starttime="20160205 03:41:59.094"></status>
</kw>
<msg timestamp="20160205 03:41:59.096" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,059 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:41:59.095" starttime="20160205 03:41:59.092"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.100" starttime="20160205 03:41:59.099"></status>
</kw>
<msg timestamp="20160205 03:41:59.101" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:59.100" starttime="20160205 03:41:59.096"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.107" starttime="20160205 03:41:59.106"></status>
</kw>
<msg timestamp="20160205 03:41:59.107" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:59.107" starttime="20160205 03:41:59.101"></status>
</kw>
<msg timestamp="20160205 03:41:59.108" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:41:59.108" starttime="20160205 03:41:59.073"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:59.114" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160205 03:41:59.114" starttime="20160205 03:41:59.112"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.115" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:59.115" starttime="20160205 03:41:59.114"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.117" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:59.117" starttime="20160205 03:41:59.116"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.120" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:59.121" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:59.121" starttime="20160205 03:41:59.119"></status>
</kw>
<msg timestamp="20160205 03:41:59.122" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.122" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,061 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.121" starttime="20160205 03:41:59.118"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.126" starttime="20160205 03:41:59.125"></status>
</kw>
<msg timestamp="20160205 03:41:59.126" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,061 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.126" starttime="20160205 03:41:59.122"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.131" starttime="20160205 03:41:59.130"></status>
</kw>
<msg timestamp="20160205 03:41:59.131" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,061 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.131" starttime="20160205 03:41:59.127"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.136" starttime="20160205 03:41:59.135"></status>
</kw>
<msg timestamp="20160205 03:41:59.136" level="INFO">${resultCode} = 2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.136" starttime="20160205 03:41:59.132"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.142" starttime="20160205 03:41:59.141"></status>
</kw>
<msg timestamp="20160205 03:41:59.143" level="INFO">${resultCode} = 2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.143" starttime="20160205 03:41:59.137"></status>
</kw>
<msg timestamp="20160205 03:41:59.144" level="INFO">${accountId} = 2426309</msg>
<status status="PASS" endtime="20160205 03:41:59.143" starttime="20160205 03:41:59.109"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:59.149" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160205 03:41:59.149" starttime="20160205 03:41:59.148"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.151" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:59.151" starttime="20160205 03:41:59.150"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.153" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:59.152" starttime="20160205 03:41:59.151"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.155" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:59.156" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:59.156" starttime="20160205 03:41:59.154"></status>
</kw>
<msg timestamp="20160205 03:41:59.157" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.157" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,063 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.157" starttime="20160205 03:41:59.153"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.161" starttime="20160205 03:41:59.160"></status>
</kw>
<msg timestamp="20160205 03:41:59.162" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,063 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.161" starttime="20160205 03:41:59.158"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.166" starttime="20160205 03:41:59.165"></status>
</kw>
<msg timestamp="20160205 03:41:59.166" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,063 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.166" starttime="20160205 03:41:59.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.171" starttime="20160205 03:41:59.170"></status>
</kw>
<msg timestamp="20160205 03:41:59.172" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.171" starttime="20160205 03:41:59.167"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.177" starttime="20160205 03:41:59.176"></status>
</kw>
<msg timestamp="20160205 03:41:59.178" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.178" starttime="20160205 03:41:59.172"></status>
</kw>
<msg timestamp="20160205 03:41:59.179" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.179" starttime="20160205 03:41:59.145"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:59.185" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160205 03:41:59.184" starttime="20160205 03:41:59.183"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.186" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:59.186" starttime="20160205 03:41:59.185"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.188" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:59.188" starttime="20160205 03:41:59.187"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.190" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:59.191" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:59.191" starttime="20160205 03:41:59.189"></status>
</kw>
<msg timestamp="20160205 03:41:59.192" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.193" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,065 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.192" starttime="20160205 03:41:59.188"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.197" starttime="20160205 03:41:59.196"></status>
</kw>
<msg timestamp="20160205 03:41:59.197" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,065 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.197" starttime="20160205 03:41:59.193"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.201" starttime="20160205 03:41:59.200"></status>
</kw>
<msg timestamp="20160205 03:41:59.202" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,065 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.202" starttime="20160205 03:41:59.198"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.206" starttime="20160205 03:41:59.205"></status>
</kw>
<msg timestamp="20160205 03:41:59.207" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.207" starttime="20160205 03:41:59.202"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.213" starttime="20160205 03:41:59.212"></status>
</kw>
<msg timestamp="20160205 03:41:59.213" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.213" starttime="20160205 03:41:59.207"></status>
</kw>
<msg timestamp="20160205 03:41:59.214" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160205 03:41:59.214" starttime="20160205 03:41:59.180"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:41:59.220" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160205 03:41:59.219" starttime="20160205 03:41:59.218"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.221" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:41:59.221" starttime="20160205 03:41:59.220"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.223" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:41:59.223" starttime="20160205 03:41:59.222"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.226" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:41:59.226" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160205 03:41:59.227" starttime="20160205 03:41:59.224"></status>
</kw>
<msg timestamp="20160205 03:41:59.227" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:41:59.227" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,067 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:59.227" starttime="20160205 03:41:59.224"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.231" starttime="20160205 03:41:59.230"></status>
</kw>
<msg timestamp="20160205 03:41:59.232" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,067 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:59.232" starttime="20160205 03:41:59.228"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.236" starttime="20160205 03:41:59.235"></status>
</kw>
<msg timestamp="20160205 03:41:59.237" level="INFO">${return_log_entry} = 2016-02-05 03:41:59,067 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160205 03:41:59.236" starttime="20160205 03:41:59.233"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.241" starttime="20160205 03:41:59.240"></status>
</kw>
<msg timestamp="20160205 03:41:59.242" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:59.242" starttime="20160205 03:41:59.237"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.248" starttime="20160205 03:41:59.247"></status>
</kw>
<msg timestamp="20160205 03:41:59.248" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160205 03:41:59.248" starttime="20160205 03:41:59.242"></status>
</kw>
<msg timestamp="20160205 03:41:59.249" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160205 03:41:59.249" starttime="20160205 03:41:59.215"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.254" starttime="20160205 03:41:59.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.255" starttime="20160205 03:41:59.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.256" starttime="20160205 03:41:59.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:41:59.262" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:41:59.262" starttime="20160205 03:41:59.260"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:59.263" starttime="20160205 03:41:59.260"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:59.263" starttime="20160205 03:41:59.257"></status>
</kw>
<status status="PASS" endtime="20160205 03:41:59.263" starttime="20160205 03:41:59.250"></status>
</kw>
<msg timestamp="20160205 03:41:59.265" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160205 03:41:59.266" level="INFO">${accId} = 2426309</msg>
<msg timestamp="20160205 03:41:59.266" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160205 03:41:59.266" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160205 03:41:59.266" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160205 03:41:59.265" starttime="20160205 03:41:58.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance of the calling party is: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:59.268" level="INFO">Balance of the calling party is: 9980000</msg>
<status status="PASS" endtime="20160205 03:41:59.268" starttime="20160205 03:41:59.267"></status>
</kw>
<doc>Test will make a MOC call to unknown subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:41:59.269" starttime="20160205 03:41:51.565"></status>
</test>
<doc>Testing the prepaid MOC call to the unknown subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:59.273" starttime="20160205 03:41:48.133"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:59.281" starttime="20160205 03:41:48.117"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:59.300" starttime="20160205 03:38:07.911"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:41:59.336" starttime="20160205 03:38:07.892"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s3" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s3-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:41:59.529" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:41:59.535" level="INFO">${date} = Fri Feb  5 03:41:59 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:59.533" starttime="20160205 03:41:59.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:59.538" level="INFO">Date and time: Fri Feb  5 03:41:59 CET 2016</msg>
<status status="PASS" endtime="20160205 03:41:59.540" starttime="20160205 03:41:59.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:41:59.543" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:41:59.544" starttime="20160205 03:41:59.541"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.593" starttime="20160205 03:41:59.591"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:41:59.658" starttime="20160205 03:41:59.601"></status>
</kw>
<msg timestamp="20160205 03:41:59.660" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160205 03:41:59.659" starttime="20160205 03:41:59.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:41:59.670" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:00.315" level="INFO">Read output: Last login: Fri Feb  5 02:41:48 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:00.316" starttime="20160205 03:41:59.668"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:00.317" starttime="20160205 03:41:59.661"></status>
</kw>
<msg timestamp="20160205 03:42:00.319" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160205 03:42:00.319" starttime="20160205 03:41:59.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:00.323" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:00.323" starttime="20160205 03:42:00.320"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:00.325" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:42:00.631" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:00.632" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:00.632" starttime="20160205 03:42:00.324"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.635" starttime="20160205 03:42:00.634"></status>
</kw>
<msg timestamp="20160205 03:42:00.636" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:00.636" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:00.635" starttime="20160205 03:42:00.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.640" starttime="20160205 03:42:00.639"></status>
</kw>
<msg timestamp="20160205 03:42:00.641" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:00.640" starttime="20160205 03:42:00.636"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:42:00.642" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:00.642" starttime="20160205 03:42:00.641"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:00.644" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:00.644" starttime="20160205 03:42:00.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.645" starttime="20160205 03:42:00.644"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.650" starttime="20160205 03:42:00.649"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.652" starttime="20160205 03:42:00.651"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:00.653" starttime="20160205 03:42:00.646"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.663" starttime="20160205 03:42:00.661"></status>
</kw>
<msg timestamp="20160205 03:42:00.664" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:00.664" starttime="20160205 03:42:00.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.667" starttime="20160205 03:42:00.665"></status>
</kw>
<msg timestamp="20160205 03:42:00.668" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:42:00.669" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:00.668" starttime="20160205 03:41:59.560"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.716" starttime="20160205 03:42:00.714"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:00.778" starttime="20160205 03:42:00.723"></status>
</kw>
<msg timestamp="20160205 03:42:00.780" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160205 03:42:00.780" starttime="20160205 03:42:00.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:00.791" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:01.294" level="INFO">Read output: Last login: Fri Feb  5 02:41:49 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:01.295" starttime="20160205 03:42:00.788"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:01.297" starttime="20160205 03:42:00.782"></status>
</kw>
<msg timestamp="20160205 03:42:01.301" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160205 03:42:01.299" starttime="20160205 03:42:00.705"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:01.309" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:01.308" starttime="20160205 03:42:01.302"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:01.312" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:42:01.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:01.702" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:01.701" starttime="20160205 03:42:01.310"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.708" starttime="20160205 03:42:01.705"></status>
</kw>
<msg timestamp="20160205 03:42:01.710" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:01.710" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:01.709" starttime="20160205 03:42:01.703"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.719" starttime="20160205 03:42:01.718"></status>
</kw>
<msg timestamp="20160205 03:42:01.721" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:01.720" starttime="20160205 03:42:01.712"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:42:01.724" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:01.724" starttime="20160205 03:42:01.722"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:01.728" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:01.727" starttime="20160205 03:42:01.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.730" starttime="20160205 03:42:01.729"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.741" starttime="20160205 03:42:01.738"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.744" starttime="20160205 03:42:01.742"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:01.747" starttime="20160205 03:42:01.732"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.756" starttime="20160205 03:42:01.754"></status>
</kw>
<msg timestamp="20160205 03:42:01.757" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:01.757" starttime="20160205 03:42:01.748"></status>
</kw>
<msg timestamp="20160205 03:42:01.760" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:42:01.761" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:01.759" starttime="20160205 03:42:00.682"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.813" starttime="20160205 03:42:01.811"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:01.876" starttime="20160205 03:42:01.820"></status>
</kw>
<msg timestamp="20160205 03:42:01.878" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160205 03:42:01.877" starttime="20160205 03:42:01.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:01.888" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:02.305" level="INFO">Read output: Last login: Fri Feb  5 02:41:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:02.306" starttime="20160205 03:42:01.886"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:02.307" starttime="20160205 03:42:01.879"></status>
</kw>
<msg timestamp="20160205 03:42:02.309" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160205 03:42:02.308" starttime="20160205 03:42:01.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:02.312" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:02.312" starttime="20160205 03:42:02.309"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:02.314" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:42:02.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:02.491" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:02.491" starttime="20160205 03:42:02.313"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.494" starttime="20160205 03:42:02.493"></status>
</kw>
<msg timestamp="20160205 03:42:02.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:02.495" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:02.495" starttime="20160205 03:42:02.492"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.499" starttime="20160205 03:42:02.499"></status>
</kw>
<msg timestamp="20160205 03:42:02.500" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:02.500" starttime="20160205 03:42:02.496"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:02.502" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:02.501" starttime="20160205 03:42:02.501"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:02.504" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:02.503" starttime="20160205 03:42:02.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.505" starttime="20160205 03:42:02.504"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.510" starttime="20160205 03:42:02.509"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.512" starttime="20160205 03:42:02.511"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:02.514" starttime="20160205 03:42:02.506"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.517" starttime="20160205 03:42:02.517"></status>
</kw>
<msg timestamp="20160205 03:42:02.518" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:02.518" starttime="20160205 03:42:02.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.519" starttime="20160205 03:42:02.519"></status>
</kw>
<msg timestamp="20160205 03:42:02.521" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:42:02.521" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:02.520" starttime="20160205 03:42:01.778"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.543" starttime="20160205 03:42:02.542"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:02.583" starttime="20160205 03:42:02.547"></status>
</kw>
<msg timestamp="20160205 03:42:02.585" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160205 03:42:02.584" starttime="20160205 03:42:02.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:02.589" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:03.000" level="INFO">Read output: Last login: Fri Feb  5 02:41:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:03.003" starttime="20160205 03:42:02.588"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.005" starttime="20160205 03:42:02.585"></status>
</kw>
<msg timestamp="20160205 03:42:03.009" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160205 03:42:03.008" starttime="20160205 03:42:02.538"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:03.018" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:03.018" starttime="20160205 03:42:03.011"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:03.022" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:42:03.101" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:03.103" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:03.102" starttime="20160205 03:42:03.020"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.110" starttime="20160205 03:42:03.107"></status>
</kw>
<msg timestamp="20160205 03:42:03.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:03.112" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:03.111" starttime="20160205 03:42:03.104"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.121" starttime="20160205 03:42:03.120"></status>
</kw>
<msg timestamp="20160205 03:42:03.123" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:03.122" starttime="20160205 03:42:03.113"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:03.127" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:03.126" starttime="20160205 03:42:03.124"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:03.131" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:03.131" starttime="20160205 03:42:03.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.134" starttime="20160205 03:42:03.133"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.146" starttime="20160205 03:42:03.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.149" starttime="20160205 03:42:03.147"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.150" starttime="20160205 03:42:03.136"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.161" starttime="20160205 03:42:03.157"></status>
</kw>
<msg timestamp="20160205 03:42:03.162" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:03.162" starttime="20160205 03:42:03.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.165" starttime="20160205 03:42:03.164"></status>
</kw>
<msg timestamp="20160205 03:42:03.169" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:42:03.169" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:03.167" starttime="20160205 03:42:02.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:03.173" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:03.174" starttime="20160205 03:42:03.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:03.177" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:03.178" starttime="20160205 03:42:03.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:03.182" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:03.183" starttime="20160205 03:42:03.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:03.187" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:03.188" starttime="20160205 03:42:03.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:42:03.192" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:03.193" starttime="20160205 03:42:03.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:42:03.196" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:03.197" starttime="20160205 03:42:03.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:42:03.200" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:03.200" starttime="20160205 03:42:03.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:42:03.203" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:03.204" starttime="20160205 03:42:03.201"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.216" starttime="20160205 03:42:03.211"></status>
</kw>
<msg timestamp="20160205 03:42:03.218" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:03.217" starttime="20160205 03:42:03.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.222" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:03.222" starttime="20160205 03:42:03.219"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.223" starttime="20160205 03:41:59.520"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.236" starttime="20160205 03:42:03.234"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:42:03.239" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:42:03.238" starttime="20160205 03:42:03.237"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.254" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:42:03.254" starttime="20160205 03:42:03.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.256" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:42:03.257" starttime="20160205 03:42:03.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.258" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:42:03.258" starttime="20160205 03:42:03.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.260" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:42:03.260" starttime="20160205 03:42:03.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.261" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:42:03.262" starttime="20160205 03:42:03.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.263" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:42:03.264" starttime="20160205 03:42:03.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.265" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:42:03.265" starttime="20160205 03:42:03.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.267" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:42:03.267" starttime="20160205 03:42:03.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.268" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:42:03.268" starttime="20160205 03:42:03.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.270" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:42:03.270" starttime="20160205 03:42:03.269"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.278" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:03.279" starttime="20160205 03:42:03.275"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.279" starttime="20160205 03:42:03.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.281" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:03.282" starttime="20160205 03:42:03.280"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.282" starttime="20160205 03:42:03.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.285" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:03.285" starttime="20160205 03:42:03.283"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.285" starttime="20160205 03:42:03.283"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:03.286" starttime="20160205 03:42:03.271"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:42:03.288" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:42:03.288" starttime="20160205 03:42:03.286"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.289" starttime="20160205 03:42:03.288"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.291" starttime="20160205 03:42:03.290"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.292" starttime="20160205 03:42:03.291"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.294" starttime="20160205 03:42:03.293"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.295" starttime="20160205 03:42:03.294"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.296" starttime="20160205 03:42:03.295"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.298" starttime="20160205 03:42:03.297"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.299" starttime="20160205 03:42:03.298"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.301" starttime="20160205 03:42:03.300"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.302" starttime="20160205 03:42:03.301"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.303" starttime="20160205 03:42:03.303"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:03.305" starttime="20160205 03:42:03.304"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:42:03.307" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:42:04.091" level="INFO">03:42:04,088 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:04.091" starttime="20160205 03:42:03.306"></status>
</kw>
<msg timestamp="20160205 03:42:04.093" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:04.093" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:42:04.092" starttime="20160205 03:42:03.305"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:42:04.099" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:42:04.098" starttime="20160205 03:42:04.097"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:04.100" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:42:04.100" starttime="20160205 03:42:04.099"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:04.102" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:42:04.102" starttime="20160205 03:42:04.101"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:42:04.104" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:42:04.105" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:42:04.105" starttime="20160205 03:42:04.103"></status>
</kw>
<msg timestamp="20160205 03:42:04.106" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:04.106" level="INFO">${return_log_entry} = 2016-02-05 03:42:04,088 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:04.106" starttime="20160205 03:42:04.102"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.110" starttime="20160205 03:42:04.110"></status>
</kw>
<msg timestamp="20160205 03:42:04.111" level="INFO">${return_log_entry} = 2016-02-05 03:42:04,088 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:04.111" starttime="20160205 03:42:04.107"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.115" starttime="20160205 03:42:04.114"></status>
</kw>
<msg timestamp="20160205 03:42:04.116" level="INFO">${return_log_entry} = 2016-02-05 03:42:04,088 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:04.116" starttime="20160205 03:42:04.112"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.120" starttime="20160205 03:42:04.119"></status>
</kw>
<msg timestamp="20160205 03:42:04.121" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:04.121" starttime="20160205 03:42:04.116"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.126" starttime="20160205 03:42:04.126"></status>
</kw>
<msg timestamp="20160205 03:42:04.127" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:04.127" starttime="20160205 03:42:04.121"></status>
</kw>
<msg timestamp="20160205 03:42:04.128" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:04.128" starttime="20160205 03:42:04.094"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.133" starttime="20160205 03:42:04.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.134" starttime="20160205 03:42:04.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.135" starttime="20160205 03:42:04.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:42:04.140" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:42:04.141" starttime="20160205 03:42:04.139"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:04.141" starttime="20160205 03:42:04.138"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:04.141" starttime="20160205 03:42:04.136"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:04.142" starttime="20160205 03:42:04.129"></status>
</kw>
<msg timestamp="20160205 03:42:04.143" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:42:04.143" starttime="20160205 03:42:03.242"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:42:04.146" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:42:04.146" starttime="20160205 03:42:04.144"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:42:04.147" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:04.148" starttime="20160205 03:42:04.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:04.149" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:42:04.150" starttime="20160205 03:42:04.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.151" starttime="20160205 03:42:04.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:04.152" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160205 03:42:04.152" starttime="20160205 03:42:04.151"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:04.167" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:42:04.167" starttime="20160205 03:42:04.166"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:04.169" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:42:04.168" starttime="20160205 03:42:04.167"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:42:04.170" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:42:04.170" starttime="20160205 03:42:04.169"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:42:04.172" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160205 03:42:04.172" starttime="20160205 03:42:04.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.173" starttime="20160205 03:42:04.173"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:04.182" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:04.182" starttime="20160205 03:42:04.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.183" starttime="20160205 03:42:04.183"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:42:04.185" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:04.186" starttime="20160205 03:42:04.184"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:04.188" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:04.188" starttime="20160205 03:42:04.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.189" starttime="20160205 03:42:04.189"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:42:04.191" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:04.192" starttime="20160205 03:42:04.190"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:42:04.194" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:04.195" starttime="20160205 03:42:04.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:04.196" starttime="20160205 03:42:04.195"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:42:04.219" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:16.572" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:16.569" starttime="20160205 03:42:04.196"></status>
</kw>
<msg timestamp="20160205 03:42:16.575" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:16.574" starttime="20160205 03:42:04.159"></status>
</kw>
<msg timestamp="20160205 03:42:16.578" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:16.576" starttime="20160205 03:42:04.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:16.581" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:42:16.596" starttime="20160205 03:42:16.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:42:16.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:16.599" starttime="20160205 03:42:16.597"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:16.599" starttime="20160205 03:42:03.226"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:16.604" starttime="20160205 03:41:59.390"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:16.611" starttime="20160205 03:41:59.376"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s3-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s3-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:42:16.779" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:16.784" level="INFO">${date} = Fri Feb  5 03:42:16 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:16.784" starttime="20160205 03:42:16.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:16.786" level="INFO">Date and time: Fri Feb  5 03:42:16 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:16.786" starttime="20160205 03:42:16.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:16.788" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:42:16.788" starttime="20160205 03:42:16.787"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:16.809" starttime="20160205 03:42:16.809"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:16.853" starttime="20160205 03:42:16.813"></status>
</kw>
<msg timestamp="20160205 03:42:16.854" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160205 03:42:16.854" starttime="20160205 03:42:16.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:16.858" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:17.473" level="INFO">Read output: Last login: Fri Feb  5 02:42:00 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:17.474" starttime="20160205 03:42:16.857"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:17.475" starttime="20160205 03:42:16.854"></status>
</kw>
<msg timestamp="20160205 03:42:17.477" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160205 03:42:17.476" starttime="20160205 03:42:16.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:17.481" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:17.480" starttime="20160205 03:42:17.478"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:17.482" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:42:17.836" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:17.838" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:17.837" starttime="20160205 03:42:17.481"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.844" starttime="20160205 03:42:17.842"></status>
</kw>
<msg timestamp="20160205 03:42:17.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:17.847" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:17.845" starttime="20160205 03:42:17.839"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.855" starttime="20160205 03:42:17.854"></status>
</kw>
<msg timestamp="20160205 03:42:17.857" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:17.856" starttime="20160205 03:42:17.848"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:42:17.860" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:17.860" starttime="20160205 03:42:17.858"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:17.864" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:17.863" starttime="20160205 03:42:17.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.866" starttime="20160205 03:42:17.865"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.877" starttime="20160205 03:42:17.874"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.881" starttime="20160205 03:42:17.878"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:17.882" starttime="20160205 03:42:17.868"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.886" starttime="20160205 03:42:17.885"></status>
</kw>
<msg timestamp="20160205 03:42:17.887" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:17.887" starttime="20160205 03:42:17.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.888" starttime="20160205 03:42:17.887"></status>
</kw>
<msg timestamp="20160205 03:42:17.890" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:42:17.890" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:17.889" starttime="20160205 03:42:16.795"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.911" starttime="20160205 03:42:17.910"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:17.956" starttime="20160205 03:42:17.915"></status>
</kw>
<msg timestamp="20160205 03:42:17.957" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160205 03:42:17.957" starttime="20160205 03:42:17.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:17.962" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:18.487" level="INFO">Read output: Last login: Fri Feb  5 02:42:01 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:18.488" starttime="20160205 03:42:17.961"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:18.489" starttime="20160205 03:42:17.958"></status>
</kw>
<msg timestamp="20160205 03:42:18.490" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160205 03:42:18.490" starttime="20160205 03:42:17.906"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:18.494" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:18.494" starttime="20160205 03:42:18.491"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:18.496" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:42:18.865" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:18.866" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:18.865" starttime="20160205 03:42:18.495"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.869" starttime="20160205 03:42:18.867"></status>
</kw>
<msg timestamp="20160205 03:42:18.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:18.870" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:18.869" starttime="20160205 03:42:18.866"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.874" starttime="20160205 03:42:18.873"></status>
</kw>
<msg timestamp="20160205 03:42:18.874" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:18.874" starttime="20160205 03:42:18.870"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:42:18.876" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:18.876" starttime="20160205 03:42:18.875"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:18.878" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:18.878" starttime="20160205 03:42:18.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.879" starttime="20160205 03:42:18.879"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.885" starttime="20160205 03:42:18.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.886" starttime="20160205 03:42:18.885"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:18.890" starttime="20160205 03:42:18.880"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.894" starttime="20160205 03:42:18.893"></status>
</kw>
<msg timestamp="20160205 03:42:18.894" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:18.894" starttime="20160205 03:42:18.890"></status>
</kw>
<msg timestamp="20160205 03:42:18.896" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:42:18.896" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:18.895" starttime="20160205 03:42:17.896"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.917" starttime="20160205 03:42:18.916"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:18.960" starttime="20160205 03:42:18.921"></status>
</kw>
<msg timestamp="20160205 03:42:18.961" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160205 03:42:18.961" starttime="20160205 03:42:18.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:18.965" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:19.388" level="INFO">Read output: Last login: Fri Feb  5 02:42:02 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:19.389" starttime="20160205 03:42:18.964"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:19.389" starttime="20160205 03:42:18.961"></status>
</kw>
<msg timestamp="20160205 03:42:19.391" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160205 03:42:19.391" starttime="20160205 03:42:18.912"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:19.395" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:19.395" starttime="20160205 03:42:19.392"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:19.396" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:42:19.574" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:19.575" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:19.575" starttime="20160205 03:42:19.396"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.578" starttime="20160205 03:42:19.577"></status>
</kw>
<msg timestamp="20160205 03:42:19.579" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:19.579" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:19.579" starttime="20160205 03:42:19.576"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.583" starttime="20160205 03:42:19.582"></status>
</kw>
<msg timestamp="20160205 03:42:19.584" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:19.584" starttime="20160205 03:42:19.580"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:19.586" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:19.585" starttime="20160205 03:42:19.584"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:19.587" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:19.587" starttime="20160205 03:42:19.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.588" starttime="20160205 03:42:19.588"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.594" starttime="20160205 03:42:19.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.598" starttime="20160205 03:42:19.594"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:19.599" starttime="20160205 03:42:19.589"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.603" starttime="20160205 03:42:19.602"></status>
</kw>
<msg timestamp="20160205 03:42:19.604" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:19.603" starttime="20160205 03:42:19.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.605" starttime="20160205 03:42:19.604"></status>
</kw>
<msg timestamp="20160205 03:42:19.606" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:42:19.607" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:19.606" starttime="20160205 03:42:18.902"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.674" starttime="20160205 03:42:19.673"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:19.716" starttime="20160205 03:42:19.678"></status>
</kw>
<msg timestamp="20160205 03:42:19.717" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160205 03:42:19.717" starttime="20160205 03:42:19.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:19.722" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:20.210" level="INFO">Read output: Last login: Fri Feb  5 02:42:02 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:20.211" starttime="20160205 03:42:19.721"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.212" starttime="20160205 03:42:19.718"></status>
</kw>
<msg timestamp="20160205 03:42:20.214" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160205 03:42:20.213" starttime="20160205 03:42:19.668"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:20.218" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:20.218" starttime="20160205 03:42:20.215"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:20.220" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:42:20.295" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:20.296" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:20.296" starttime="20160205 03:42:20.219"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.299" starttime="20160205 03:42:20.298"></status>
</kw>
<msg timestamp="20160205 03:42:20.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:20.301" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:20.300" starttime="20160205 03:42:20.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.305" starttime="20160205 03:42:20.305"></status>
</kw>
<msg timestamp="20160205 03:42:20.306" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:20.306" starttime="20160205 03:42:20.301"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:20.308" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:20.308" starttime="20160205 03:42:20.307"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:20.310" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:20.310" starttime="20160205 03:42:20.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.311" starttime="20160205 03:42:20.311"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.317" starttime="20160205 03:42:20.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.319" starttime="20160205 03:42:20.318"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.322" starttime="20160205 03:42:20.312"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.327" starttime="20160205 03:42:20.326"></status>
</kw>
<msg timestamp="20160205 03:42:20.328" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:20.328" starttime="20160205 03:42:20.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.330" starttime="20160205 03:42:20.329"></status>
</kw>
<msg timestamp="20160205 03:42:20.332" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:42:20.332" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:20.331" starttime="20160205 03:42:19.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:20.334" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:20.335" starttime="20160205 03:42:20.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:20.337" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:20.337" starttime="20160205 03:42:20.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:20.339" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:20.340" starttime="20160205 03:42:20.338"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:20.342" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:20.343" starttime="20160205 03:42:20.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:42:20.345" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:20.345" starttime="20160205 03:42:20.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:42:20.347" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:20.348" starttime="20160205 03:42:20.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:42:20.350" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:20.350" starttime="20160205 03:42:20.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:42:20.352" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:20.353" starttime="20160205 03:42:20.351"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.360" starttime="20160205 03:42:20.357"></status>
</kw>
<msg timestamp="20160205 03:42:20.361" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:20.360" starttime="20160205 03:42:20.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.363" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:20.363" starttime="20160205 03:42:20.361"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.364" starttime="20160205 03:42:16.773"></status>
</kw>
<test id="s1-s1-s1-s3-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.371" starttime="20160205 03:42:20.370"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:42:20.373" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:42:20.373" starttime="20160205 03:42:20.372"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.382" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:42:20.382" starttime="20160205 03:42:20.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.384" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:42:20.384" starttime="20160205 03:42:20.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.385" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:42:20.386" starttime="20160205 03:42:20.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.387" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:42:20.388" starttime="20160205 03:42:20.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.389" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:42:20.390" starttime="20160205 03:42:20.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.391" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:42:20.391" starttime="20160205 03:42:20.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.393" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:42:20.393" starttime="20160205 03:42:20.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.395" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:42:20.395" starttime="20160205 03:42:20.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.397" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:42:20.397" starttime="20160205 03:42:20.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.399" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:42:20.399" starttime="20160205 03:42:20.398"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.408" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:20.408" starttime="20160205 03:42:20.405"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.409" starttime="20160205 03:42:20.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.412" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:20.412" starttime="20160205 03:42:20.410"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.412" starttime="20160205 03:42:20.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.415" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:20.416" starttime="20160205 03:42:20.414"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.416" starttime="20160205 03:42:20.413"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:20.417" starttime="20160205 03:42:20.401"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:42:20.419" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:42:20.419" starttime="20160205 03:42:20.417"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.421" starttime="20160205 03:42:20.420"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.423" starttime="20160205 03:42:20.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.424" starttime="20160205 03:42:20.423"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.426" starttime="20160205 03:42:20.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.427" starttime="20160205 03:42:20.426"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.429" starttime="20160205 03:42:20.428"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.431" starttime="20160205 03:42:20.429"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.432" starttime="20160205 03:42:20.431"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.435" starttime="20160205 03:42:20.433"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.437" starttime="20160205 03:42:20.435"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.438" starttime="20160205 03:42:20.437"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:20.440" starttime="20160205 03:42:20.439"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:42:20.442" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:42:21.309" level="INFO">03:42:21,306 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:21.310" starttime="20160205 03:42:20.441"></status>
</kw>
<msg timestamp="20160205 03:42:21.311" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:21.312" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:42:21.311" starttime="20160205 03:42:20.441"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:42:21.317" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:42:21.317" starttime="20160205 03:42:21.316"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:21.319" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:42:21.319" starttime="20160205 03:42:21.318"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:21.321" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:42:21.320" starttime="20160205 03:42:21.320"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:42:21.327" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:42:21.327" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:42:21.328" starttime="20160205 03:42:21.325"></status>
</kw>
<msg timestamp="20160205 03:42:21.328" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:21.329" level="INFO">${return_log_entry} = 2016-02-05 03:42:21,306 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:21.328" starttime="20160205 03:42:21.321"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.333" starttime="20160205 03:42:21.332"></status>
</kw>
<msg timestamp="20160205 03:42:21.334" level="INFO">${return_log_entry} = 2016-02-05 03:42:21,306 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:21.334" starttime="20160205 03:42:21.329"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.338" starttime="20160205 03:42:21.337"></status>
</kw>
<msg timestamp="20160205 03:42:21.339" level="INFO">${return_log_entry} = 2016-02-05 03:42:21,306 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:21.338" starttime="20160205 03:42:21.335"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.343" starttime="20160205 03:42:21.342"></status>
</kw>
<msg timestamp="20160205 03:42:21.344" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:21.343" starttime="20160205 03:42:21.339"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.349" starttime="20160205 03:42:21.348"></status>
</kw>
<msg timestamp="20160205 03:42:21.350" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:21.350" starttime="20160205 03:42:21.344"></status>
</kw>
<msg timestamp="20160205 03:42:21.351" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:21.351" starttime="20160205 03:42:21.313"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.356" starttime="20160205 03:42:21.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.357" starttime="20160205 03:42:21.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.358" starttime="20160205 03:42:21.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:42:21.364" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:42:21.364" starttime="20160205 03:42:21.363"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:21.365" starttime="20160205 03:42:21.362"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:21.365" starttime="20160205 03:42:21.358"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:21.366" starttime="20160205 03:42:21.352"></status>
</kw>
<msg timestamp="20160205 03:42:21.367" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:42:21.366" starttime="20160205 03:42:20.375"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:42:21.370" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:42:21.369" starttime="20160205 03:42:21.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:42:21.371" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:21.372" starttime="20160205 03:42:21.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:21.373" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:42:21.373" starttime="20160205 03:42:21.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.374" starttime="20160205 03:42:21.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:21.375" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:42:21.376" starttime="20160205 03:42:21.375"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:21.390" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:42:21.389" starttime="20160205 03:42:21.388"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:21.391" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:42:21.391" starttime="20160205 03:42:21.390"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:42:21.393" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:42:21.393" starttime="20160205 03:42:21.392"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:42:21.395" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160205 03:42:21.395" starttime="20160205 03:42:21.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.396" starttime="20160205 03:42:21.395"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:21.398" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:21.399" starttime="20160205 03:42:21.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.400" starttime="20160205 03:42:21.399"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:42:21.402" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:21.402" starttime="20160205 03:42:21.400"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:21.405" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:21.405" starttime="20160205 03:42:21.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.406" starttime="20160205 03:42:21.405"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:42:21.408" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:21.408" starttime="20160205 03:42:21.406"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:42:21.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:21.411" starttime="20160205 03:42:21.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:21.412" starttime="20160205 03:42:21.412"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:42:21.419" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:29.714" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:29.711" starttime="20160205 03:42:21.413"></status>
</kw>
<msg timestamp="20160205 03:42:29.717" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:29.716" starttime="20160205 03:42:21.383"></status>
</kw>
<msg timestamp="20160205 03:42:29.719" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:29.719" starttime="20160205 03:42:21.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:29.721" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:42:29.721" starttime="20160205 03:42:29.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:42:29.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:29.724" starttime="20160205 03:42:29.722"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:29.724" starttime="20160205 03:42:20.365"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:29.728" starttime="20160205 03:42:16.634"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:29.736" starttime="20160205 03:42:16.617"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s3-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:42:29.888" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:29.891" level="INFO">${date} = Fri Feb  5 03:42:29 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:29.891" starttime="20160205 03:42:29.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:29.892" level="INFO">Date and time: Fri Feb  5 03:42:29 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:29.893" starttime="20160205 03:42:29.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:29.894" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:42:29.895" starttime="20160205 03:42:29.893"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:29.917" starttime="20160205 03:42:29.916"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:29.973" starttime="20160205 03:42:29.920"></status>
</kw>
<msg timestamp="20160205 03:42:29.975" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160205 03:42:29.974" starttime="20160205 03:42:29.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:29.985" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:30.391" level="INFO">Read output: Last login: Fri Feb  5 02:42:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:30.392" starttime="20160205 03:42:29.983"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:30.392" starttime="20160205 03:42:29.976"></status>
</kw>
<msg timestamp="20160205 03:42:30.394" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160205 03:42:30.394" starttime="20160205 03:42:29.912"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:30.398" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:30.398" starttime="20160205 03:42:30.395"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:30.400" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:42:30.665" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:30.666" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:30.666" starttime="20160205 03:42:30.399"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.673" starttime="20160205 03:42:30.670"></status>
</kw>
<msg timestamp="20160205 03:42:30.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:30.675" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:30.674" starttime="20160205 03:42:30.668"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.683" starttime="20160205 03:42:30.682"></status>
</kw>
<msg timestamp="20160205 03:42:30.685" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:30.684" starttime="20160205 03:42:30.676"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:42:30.688" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:30.688" starttime="20160205 03:42:30.686"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:30.692" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:30.691" starttime="20160205 03:42:30.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.694" starttime="20160205 03:42:30.693"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.705" starttime="20160205 03:42:30.702"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.711" starttime="20160205 03:42:30.706"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:30.713" starttime="20160205 03:42:30.696"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.721" starttime="20160205 03:42:30.719"></status>
</kw>
<msg timestamp="20160205 03:42:30.723" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:30.722" starttime="20160205 03:42:30.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.726" starttime="20160205 03:42:30.724"></status>
</kw>
<msg timestamp="20160205 03:42:30.729" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:42:30.729" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:30.727" starttime="20160205 03:42:29.902"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.777" starttime="20160205 03:42:30.775"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:30.835" starttime="20160205 03:42:30.784"></status>
</kw>
<msg timestamp="20160205 03:42:30.838" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160205 03:42:30.836" starttime="20160205 03:42:30.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:30.848" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:31.537" level="INFO">Read output: Last login: Fri Feb  5 02:42:18 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:31.538" starttime="20160205 03:42:30.845"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:31.539" starttime="20160205 03:42:30.839"></status>
</kw>
<msg timestamp="20160205 03:42:31.541" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160205 03:42:31.540" starttime="20160205 03:42:30.766"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:31.545" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:31.544" starttime="20160205 03:42:31.541"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:31.546" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:42:31.916" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:31.918" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:31.917" starttime="20160205 03:42:31.545"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.924" starttime="20160205 03:42:31.922"></status>
</kw>
<msg timestamp="20160205 03:42:31.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:31.926" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:31.925" starttime="20160205 03:42:31.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.935" starttime="20160205 03:42:31.934"></status>
</kw>
<msg timestamp="20160205 03:42:31.937" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:31.936" starttime="20160205 03:42:31.928"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:42:31.943" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:31.942" starttime="20160205 03:42:31.940"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:31.946" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:31.946" starttime="20160205 03:42:31.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.949" starttime="20160205 03:42:31.948"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.959" starttime="20160205 03:42:31.957"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.964" starttime="20160205 03:42:31.961"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:31.965" starttime="20160205 03:42:31.950"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:31.970" starttime="20160205 03:42:31.969"></status>
</kw>
<msg timestamp="20160205 03:42:31.971" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:31.970" starttime="20160205 03:42:31.966"></status>
</kw>
<msg timestamp="20160205 03:42:31.979" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:42:31.979" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:31.971" starttime="20160205 03:42:30.744"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.009" starttime="20160205 03:42:32.009"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.052" starttime="20160205 03:42:32.013"></status>
</kw>
<msg timestamp="20160205 03:42:32.053" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160205 03:42:32.053" starttime="20160205 03:42:32.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:32.058" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:32.487" level="INFO">Read output: Last login: Fri Feb  5 02:42:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:32.487" starttime="20160205 03:42:32.057"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:32.488" starttime="20160205 03:42:32.054"></status>
</kw>
<msg timestamp="20160205 03:42:32.489" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160205 03:42:32.489" starttime="20160205 03:42:32.005"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:32.492" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:32.492" starttime="20160205 03:42:32.489"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:32.494" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:42:32.677" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:32.678" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:32.677" starttime="20160205 03:42:32.493"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.681" starttime="20160205 03:42:32.679"></status>
</kw>
<msg timestamp="20160205 03:42:32.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:32.682" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:32.681" starttime="20160205 03:42:32.678"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.686" starttime="20160205 03:42:32.685"></status>
</kw>
<msg timestamp="20160205 03:42:32.686" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:32.686" starttime="20160205 03:42:32.682"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:32.688" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:32.688" starttime="20160205 03:42:32.687"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:32.690" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:32.690" starttime="20160205 03:42:32.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.691" starttime="20160205 03:42:32.690"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.696" starttime="20160205 03:42:32.695"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.697" starttime="20160205 03:42:32.696"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:32.699" starttime="20160205 03:42:32.692"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.703" starttime="20160205 03:42:32.702"></status>
</kw>
<msg timestamp="20160205 03:42:32.704" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:32.704" starttime="20160205 03:42:32.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.705" starttime="20160205 03:42:32.705"></status>
</kw>
<msg timestamp="20160205 03:42:32.707" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:42:32.707" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:32.706" starttime="20160205 03:42:31.994"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.770" starttime="20160205 03:42:32.769"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:32.823" starttime="20160205 03:42:32.774"></status>
</kw>
<msg timestamp="20160205 03:42:32.825" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160205 03:42:32.825" starttime="20160205 03:42:32.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:32.836" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:33.227" level="INFO">Read output: Last login: Fri Feb  5 02:42:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:33.229" starttime="20160205 03:42:32.834"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.231" starttime="20160205 03:42:32.827"></status>
</kw>
<msg timestamp="20160205 03:42:33.235" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160205 03:42:33.233" starttime="20160205 03:42:32.765"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:33.242" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:33.242" starttime="20160205 03:42:33.236"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:33.245" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:42:33.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:33.325" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:33.324" starttime="20160205 03:42:33.243"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.332" starttime="20160205 03:42:33.329"></status>
</kw>
<msg timestamp="20160205 03:42:33.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:33.334" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:33.332" starttime="20160205 03:42:33.326"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.342" starttime="20160205 03:42:33.340"></status>
</kw>
<msg timestamp="20160205 03:42:33.343" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:33.343" starttime="20160205 03:42:33.335"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:33.347" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:33.346" starttime="20160205 03:42:33.344"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:33.351" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:33.350" starttime="20160205 03:42:33.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.353" starttime="20160205 03:42:33.352"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.364" starttime="20160205 03:42:33.361"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.373" starttime="20160205 03:42:33.365"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.375" starttime="20160205 03:42:33.355"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.384" starttime="20160205 03:42:33.382"></status>
</kw>
<msg timestamp="20160205 03:42:33.385" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:33.385" starttime="20160205 03:42:33.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.388" starttime="20160205 03:42:33.386"></status>
</kw>
<msg timestamp="20160205 03:42:33.391" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:42:33.391" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:33.389" starttime="20160205 03:42:32.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:33.394" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:33.396" starttime="20160205 03:42:33.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:33.399" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:33.400" starttime="20160205 03:42:33.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:33.403" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:33.404" starttime="20160205 03:42:33.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:33.407" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:33.408" starttime="20160205 03:42:33.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:42:33.411" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:33.411" starttime="20160205 03:42:33.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:42:33.414" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:33.415" starttime="20160205 03:42:33.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:42:33.417" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:33.418" starttime="20160205 03:42:33.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:42:33.421" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:33.422" starttime="20160205 03:42:33.419"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.432" starttime="20160205 03:42:33.428"></status>
</kw>
<msg timestamp="20160205 03:42:33.434" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:33.433" starttime="20160205 03:42:33.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.437" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:33.438" starttime="20160205 03:42:33.435"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.439" starttime="20160205 03:42:29.883"></status>
</kw>
<test id="s1-s1-s1-s3-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.450" starttime="20160205 03:42:33.448"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:42:33.452" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:42:33.452" starttime="20160205 03:42:33.451"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.466" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:42:33.467" starttime="20160205 03:42:33.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.469" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:42:33.470" starttime="20160205 03:42:33.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.473" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:42:33.473" starttime="20160205 03:42:33.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.476" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:42:33.476" starttime="20160205 03:42:33.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.479" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:42:33.480" starttime="20160205 03:42:33.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.482" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:42:33.483" starttime="20160205 03:42:33.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.485" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:42:33.486" starttime="20160205 03:42:33.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.488" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:42:33.489" starttime="20160205 03:42:33.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.492" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:42:33.492" starttime="20160205 03:42:33.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.495" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:42:33.495" starttime="20160205 03:42:33.493"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.505" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:33.506" starttime="20160205 03:42:33.504"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.506" starttime="20160205 03:42:33.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.508" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:33.509" starttime="20160205 03:42:33.507"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.509" starttime="20160205 03:42:33.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.511" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:33.512" starttime="20160205 03:42:33.510"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.512" starttime="20160205 03:42:33.510"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:33.513" starttime="20160205 03:42:33.498"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:42:33.515" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:42:33.515" starttime="20160205 03:42:33.513"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.516" starttime="20160205 03:42:33.515"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.518" starttime="20160205 03:42:33.517"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.519" starttime="20160205 03:42:33.518"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.520" starttime="20160205 03:42:33.519"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.521" starttime="20160205 03:42:33.521"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.523" starttime="20160205 03:42:33.522"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.524" starttime="20160205 03:42:33.523"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.526" starttime="20160205 03:42:33.525"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.527" starttime="20160205 03:42:33.526"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.528" starttime="20160205 03:42:33.527"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.530" starttime="20160205 03:42:33.529"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:33.531" starttime="20160205 03:42:33.530"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:42:33.533" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:42:34.323" level="INFO">03:42:34,320 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:34.324" starttime="20160205 03:42:33.532"></status>
</kw>
<msg timestamp="20160205 03:42:34.325" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:34.326" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:42:34.325" starttime="20160205 03:42:33.532"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:42:34.331" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:42:34.331" starttime="20160205 03:42:34.330"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:34.333" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:42:34.332" starttime="20160205 03:42:34.332"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:34.334" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:42:34.334" starttime="20160205 03:42:34.333"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:42:34.337" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:42:34.337" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:42:34.338" starttime="20160205 03:42:34.336"></status>
</kw>
<msg timestamp="20160205 03:42:34.338" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:34.339" level="INFO">${return_log_entry} = 2016-02-05 03:42:34,320 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:34.338" starttime="20160205 03:42:34.335"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.343" starttime="20160205 03:42:34.342"></status>
</kw>
<msg timestamp="20160205 03:42:34.343" level="INFO">${return_log_entry} = 2016-02-05 03:42:34,320 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:34.343" starttime="20160205 03:42:34.339"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.348" starttime="20160205 03:42:34.347"></status>
</kw>
<msg timestamp="20160205 03:42:34.348" level="INFO">${return_log_entry} = 2016-02-05 03:42:34,320 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:34.348" starttime="20160205 03:42:34.344"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.353" starttime="20160205 03:42:34.351"></status>
</kw>
<msg timestamp="20160205 03:42:34.353" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:34.353" starttime="20160205 03:42:34.349"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.359" starttime="20160205 03:42:34.358"></status>
</kw>
<msg timestamp="20160205 03:42:34.360" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:34.359" starttime="20160205 03:42:34.354"></status>
</kw>
<msg timestamp="20160205 03:42:34.361" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:34.360" starttime="20160205 03:42:34.327"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.365" starttime="20160205 03:42:34.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.366" starttime="20160205 03:42:34.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.367" starttime="20160205 03:42:34.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:42:34.373" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:42:34.373" starttime="20160205 03:42:34.371"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:34.375" starttime="20160205 03:42:34.370"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:34.375" starttime="20160205 03:42:34.368"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:34.376" starttime="20160205 03:42:34.361"></status>
</kw>
<msg timestamp="20160205 03:42:34.378" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:42:34.377" starttime="20160205 03:42:33.455"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:42:34.381" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:42:34.380" starttime="20160205 03:42:34.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:42:34.382" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:34.382" starttime="20160205 03:42:34.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:34.383" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:42:34.384" starttime="20160205 03:42:34.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.385" starttime="20160205 03:42:34.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:34.386" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:42:34.387" starttime="20160205 03:42:34.386"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:34.400" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:42:34.400" starttime="20160205 03:42:34.399"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:34.402" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:42:34.402" starttime="20160205 03:42:34.401"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:42:34.404" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:42:34.403" starttime="20160205 03:42:34.402"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:42:34.405" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160205 03:42:34.405" starttime="20160205 03:42:34.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.406" starttime="20160205 03:42:34.406"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:34.409" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:34.409" starttime="20160205 03:42:34.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.410" starttime="20160205 03:42:34.410"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:42:34.412" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:34.413" starttime="20160205 03:42:34.411"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:34.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:34.415" starttime="20160205 03:42:34.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.416" starttime="20160205 03:42:34.416"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:42:34.418" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:34.418" starttime="20160205 03:42:34.417"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:42:34.421" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:34.421" starttime="20160205 03:42:34.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:34.422" starttime="20160205 03:42:34.422"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:42:34.429" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:37.640" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:37.639" starttime="20160205 03:42:34.423"></status>
</kw>
<msg timestamp="20160205 03:42:37.641" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:37.641" starttime="20160205 03:42:34.394"></status>
</kw>
<msg timestamp="20160205 03:42:37.643" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:37.642" starttime="20160205 03:42:34.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:37.644" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:42:37.645" starttime="20160205 03:42:37.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:42:37.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:37.647" starttime="20160205 03:42:37.645"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:37.647" starttime="20160205 03:42:33.441"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:37.651" starttime="20160205 03:42:29.756"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:37.658" starttime="20160205 03:42:29.741"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s3-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:42:37.811" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:37.814" level="INFO">${date} = Fri Feb  5 03:42:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:37.814" starttime="20160205 03:42:37.808"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:37.816" level="INFO">Date and time: Fri Feb  5 03:42:37 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:37.816" starttime="20160205 03:42:37.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:37.818" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160205 03:42:37.818" starttime="20160205 03:42:37.817"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:37.839" starttime="20160205 03:42:37.839"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:37.893" starttime="20160205 03:42:37.843"></status>
</kw>
<msg timestamp="20160205 03:42:37.895" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160205 03:42:37.894" starttime="20160205 03:42:37.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:37.905" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:38.678" level="INFO">Read output: Last login: Fri Feb  5 02:42:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:38.679" starttime="20160205 03:42:37.903"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:38.679" starttime="20160205 03:42:37.896"></status>
</kw>
<msg timestamp="20160205 03:42:38.681" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160205 03:42:38.681" starttime="20160205 03:42:37.835"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:38.685" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:38.685" starttime="20160205 03:42:38.682"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:38.687" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160205 03:42:38.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:38.937" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:38.936" starttime="20160205 03:42:38.686"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.944" starttime="20160205 03:42:38.941"></status>
</kw>
<msg timestamp="20160205 03:42:38.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:38.946" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:38.945" starttime="20160205 03:42:38.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.955" starttime="20160205 03:42:38.953"></status>
</kw>
<msg timestamp="20160205 03:42:38.956" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:38.956" starttime="20160205 03:42:38.947"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160205 03:42:38.960" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160205 03:42:38.959" starttime="20160205 03:42:38.957"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:38.963" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:38.963" starttime="20160205 03:42:38.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.966" starttime="20160205 03:42:38.964"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.976" starttime="20160205 03:42:38.974"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.984" starttime="20160205 03:42:38.977"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:38.986" starttime="20160205 03:42:38.967"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.995" starttime="20160205 03:42:38.993"></status>
</kw>
<msg timestamp="20160205 03:42:38.997" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:38.996" starttime="20160205 03:42:38.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:38.999" starttime="20160205 03:42:38.998"></status>
</kw>
<msg timestamp="20160205 03:42:39.003" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160205 03:42:39.004" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:39.001" starttime="20160205 03:42:37.825"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.050" starttime="20160205 03:42:39.048"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.113" starttime="20160205 03:42:39.056"></status>
</kw>
<msg timestamp="20160205 03:42:39.115" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160205 03:42:39.115" starttime="20160205 03:42:39.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:39.126" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:39.549" level="INFO">Read output: Last login: Fri Feb  5 02:42:31 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:39.550" starttime="20160205 03:42:39.124"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:39.550" starttime="20160205 03:42:39.117"></status>
</kw>
<msg timestamp="20160205 03:42:39.552" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160205 03:42:39.551" starttime="20160205 03:42:39.039"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:39.555" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:39.555" starttime="20160205 03:42:39.552"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:39.557" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:42:39.940" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:39.942" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:39.942" starttime="20160205 03:42:39.556"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.949" starttime="20160205 03:42:39.946"></status>
</kw>
<msg timestamp="20160205 03:42:39.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:39.951" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:39.950" starttime="20160205 03:42:39.944"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.960" starttime="20160205 03:42:39.958"></status>
</kw>
<msg timestamp="20160205 03:42:39.961" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:39.961" starttime="20160205 03:42:39.952"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160205 03:42:39.965" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:42:39.964" starttime="20160205 03:42:39.962"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:39.968" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:39.968" starttime="20160205 03:42:39.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.971" starttime="20160205 03:42:39.970"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.981" starttime="20160205 03:42:39.979"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.986" starttime="20160205 03:42:39.983"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:39.988" starttime="20160205 03:42:39.972"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:39.993" starttime="20160205 03:42:39.992"></status>
</kw>
<msg timestamp="20160205 03:42:39.994" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:39.994" starttime="20160205 03:42:39.989"></status>
</kw>
<msg timestamp="20160205 03:42:39.995" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160205 03:42:39.995" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:39.995" starttime="20160205 03:42:39.018"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.017" starttime="20160205 03:42:40.016"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.059" starttime="20160205 03:42:40.021"></status>
</kw>
<msg timestamp="20160205 03:42:40.060" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160205 03:42:40.060" starttime="20160205 03:42:40.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:40.065" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:40.486" level="INFO">Read output: Last login: Fri Feb  5 02:42:32 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:40.487" starttime="20160205 03:42:40.064"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:40.487" starttime="20160205 03:42:40.061"></status>
</kw>
<msg timestamp="20160205 03:42:40.488" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160205 03:42:40.488" starttime="20160205 03:42:40.013"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:40.492" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:40.492" starttime="20160205 03:42:40.489"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:40.494" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160205 03:42:40.700" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:40.701" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:40.701" starttime="20160205 03:42:40.493"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.704" starttime="20160205 03:42:40.703"></status>
</kw>
<msg timestamp="20160205 03:42:40.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:40.705" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:40.705" starttime="20160205 03:42:40.702"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.710" starttime="20160205 03:42:40.709"></status>
</kw>
<msg timestamp="20160205 03:42:40.710" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:40.710" starttime="20160205 03:42:40.706"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:40.712" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160205 03:42:40.712" starttime="20160205 03:42:40.711"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:40.714" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:40.713" starttime="20160205 03:42:40.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.715" starttime="20160205 03:42:40.714"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.720" starttime="20160205 03:42:40.719"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.723" starttime="20160205 03:42:40.720"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:40.725" starttime="20160205 03:42:40.715"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.729" starttime="20160205 03:42:40.728"></status>
</kw>
<msg timestamp="20160205 03:42:40.729" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:40.729" starttime="20160205 03:42:40.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.731" starttime="20160205 03:42:40.730"></status>
</kw>
<msg timestamp="20160205 03:42:40.732" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160205 03:42:40.732" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:40.731" starttime="20160205 03:42:40.002"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.759" starttime="20160205 03:42:40.758"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:40.854" starttime="20160205 03:42:40.762"></status>
</kw>
<msg timestamp="20160205 03:42:40.856" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160205 03:42:40.855" starttime="20160205 03:42:40.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:42:40.865" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:41.335" level="INFO">Read output: Last login: Fri Feb  5 02:42:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:42:41.336" starttime="20160205 03:42:40.863"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.337" starttime="20160205 03:42:40.857"></status>
</kw>
<msg timestamp="20160205 03:42:41.340" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160205 03:42:41.339" starttime="20160205 03:42:40.749"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160205 03:42:41.345" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160205 03:42:41.345" starttime="20160205 03:42:41.341"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160205 03:42:41.347" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160205 03:42:41.423" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:41.424" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:41.423" starttime="20160205 03:42:41.346"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.427" starttime="20160205 03:42:41.425"></status>
</kw>
<msg timestamp="20160205 03:42:41.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20160205 03:42:41.428" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160205 03:42:41.427" starttime="20160205 03:42:41.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.432" starttime="20160205 03:42:41.431"></status>
</kw>
<msg timestamp="20160205 03:42:41.432" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:41.432" starttime="20160205 03:42:41.428"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160205 03:42:41.434" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160205 03:42:41.434" starttime="20160205 03:42:41.433"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160205 03:42:41.436" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:41.435" starttime="20160205 03:42:41.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.437" starttime="20160205 03:42:41.436"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.442" starttime="20160205 03:42:41.441"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.446" starttime="20160205 03:42:41.442"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.447" starttime="20160205 03:42:41.438"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.451" starttime="20160205 03:42:41.450"></status>
</kw>
<msg timestamp="20160205 03:42:41.451" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:41.451" starttime="20160205 03:42:41.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.453" starttime="20160205 03:42:41.452"></status>
</kw>
<msg timestamp="20160205 03:42:41.454" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160205 03:42:41.454" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:41.454" starttime="20160205 03:42:40.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:41.456" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160205 03:42:41.457" starttime="20160205 03:42:41.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:41.458" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160205 03:42:41.459" starttime="20160205 03:42:41.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:41.460" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160205 03:42:41.461" starttime="20160205 03:42:41.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:41.462" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160205 03:42:41.463" starttime="20160205 03:42:41.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160205 03:42:41.464" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:41.464" starttime="20160205 03:42:41.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160205 03:42:41.466" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:41.466" starttime="20160205 03:42:41.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160205 03:42:41.467" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:41.468" starttime="20160205 03:42:41.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160205 03:42:41.469" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:41.469" starttime="20160205 03:42:41.468"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.475" starttime="20160205 03:42:41.472"></status>
</kw>
<msg timestamp="20160205 03:42:41.475" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:41.475" starttime="20160205 03:42:41.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.477" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160205 03:42:41.477" starttime="20160205 03:42:41.476"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.478" starttime="20160205 03:42:37.806"></status>
</kw>
<test id="s1-s1-s1-s3-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.483" starttime="20160205 03:42:41.482"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:42:41.484" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:42:41.484" starttime="20160205 03:42:41.484"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.491" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:42:41.491" starttime="20160205 03:42:41.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.493" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:42:41.493" starttime="20160205 03:42:41.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.494" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:42:41.494" starttime="20160205 03:42:41.493"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.496" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:42:41.496" starttime="20160205 03:42:41.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.497" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:42:41.498" starttime="20160205 03:42:41.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.499" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:42:41.499" starttime="20160205 03:42:41.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.500" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:42:41.501" starttime="20160205 03:42:41.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.502" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:42:41.503" starttime="20160205 03:42:41.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.504" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:42:41.504" starttime="20160205 03:42:41.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.505" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:42:41.506" starttime="20160205 03:42:41.505"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.512" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:41.512" starttime="20160205 03:42:41.510"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.512" starttime="20160205 03:42:41.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.515" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:41.515" starttime="20160205 03:42:41.514"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.516" starttime="20160205 03:42:41.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.518" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:41.518" starttime="20160205 03:42:41.517"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.519" starttime="20160205 03:42:41.516"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:41.519" starttime="20160205 03:42:41.507"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:42:41.521" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:42:41.521" starttime="20160205 03:42:41.520"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.523" starttime="20160205 03:42:41.522"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.524" starttime="20160205 03:42:41.523"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.526" starttime="20160205 03:42:41.525"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.527" starttime="20160205 03:42:41.526"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.528" starttime="20160205 03:42:41.527"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.529" starttime="20160205 03:42:41.528"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.531" starttime="20160205 03:42:41.530"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.532" starttime="20160205 03:42:41.531"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.533" starttime="20160205 03:42:41.532"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.535" starttime="20160205 03:42:41.534"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.536" starttime="20160205 03:42:41.535"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:41.538" starttime="20160205 03:42:41.537"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:42:41.540" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:42:42.282" level="INFO">03:42:42,279 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:42.283" starttime="20160205 03:42:41.539"></status>
</kw>
<msg timestamp="20160205 03:42:42.284" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:42.284" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:42:42.283" starttime="20160205 03:42:41.538"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:42:42.290" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:42:42.290" starttime="20160205 03:42:42.288"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:42.292" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:42:42.291" starttime="20160205 03:42:42.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:42.293" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:42:42.293" starttime="20160205 03:42:42.292"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:42:42.296" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:42:42.296" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:42:42.297" starttime="20160205 03:42:42.295"></status>
</kw>
<msg timestamp="20160205 03:42:42.297" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:42.297" level="INFO">${return_log_entry} = 2016-02-05 03:42:42,279 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:42.297" starttime="20160205 03:42:42.294"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.302" starttime="20160205 03:42:42.301"></status>
</kw>
<msg timestamp="20160205 03:42:42.302" level="INFO">${return_log_entry} = 2016-02-05 03:42:42,279 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:42.302" starttime="20160205 03:42:42.298"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.306" starttime="20160205 03:42:42.305"></status>
</kw>
<msg timestamp="20160205 03:42:42.307" level="INFO">${return_log_entry} = 2016-02-05 03:42:42,279 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:42.307" starttime="20160205 03:42:42.303"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.311" starttime="20160205 03:42:42.310"></status>
</kw>
<msg timestamp="20160205 03:42:42.312" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:42.311" starttime="20160205 03:42:42.307"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.317" starttime="20160205 03:42:42.317"></status>
</kw>
<msg timestamp="20160205 03:42:42.318" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:42.318" starttime="20160205 03:42:42.312"></status>
</kw>
<msg timestamp="20160205 03:42:42.319" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:42.319" starttime="20160205 03:42:42.285"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.323" starttime="20160205 03:42:42.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.325" starttime="20160205 03:42:42.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.326" starttime="20160205 03:42:42.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:42:42.331" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:42:42.331" starttime="20160205 03:42:42.330"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:42.332" starttime="20160205 03:42:42.329"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:42.332" starttime="20160205 03:42:42.326"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:42.332" starttime="20160205 03:42:42.320"></status>
</kw>
<msg timestamp="20160205 03:42:42.334" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:42:42.333" starttime="20160205 03:42:41.486"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:42:42.337" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:42:42.336" starttime="20160205 03:42:42.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:42:42.338" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:42.338" starttime="20160205 03:42:42.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:42.339" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:42:42.340" starttime="20160205 03:42:42.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.341" starttime="20160205 03:42:42.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:42.342" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160205 03:42:42.343" starttime="20160205 03:42:42.342"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:42.356" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160205 03:42:42.356" starttime="20160205 03:42:42.355"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160205 03:42:42.358" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160205 03:42:42.357" starttime="20160205 03:42:42.357"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160205 03:42:42.359" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160205 03:42:42.359" starttime="20160205 03:42:42.358"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160205 03:42:42.361" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160205 03:42:42.361" starttime="20160205 03:42:42.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.362" starttime="20160205 03:42:42.362"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:42.365" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:42.365" starttime="20160205 03:42:42.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.366" starttime="20160205 03:42:42.365"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160205 03:42:42.368" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:42.368" starttime="20160205 03:42:42.367"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160205 03:42:42.371" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:42.371" starttime="20160205 03:42:42.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.372" starttime="20160205 03:42:42.372"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160205 03:42:42.374" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:42.374" starttime="20160205 03:42:42.373"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160205 03:42:42.377" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:42.378" starttime="20160205 03:42:42.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:42.379" starttime="20160205 03:42:42.378"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160205 03:42:42.386" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:47.570" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:47.567" starttime="20160205 03:42:42.379"></status>
</kw>
<msg timestamp="20160205 03:42:47.573" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:47.571" starttime="20160205 03:42:42.350"></status>
</kw>
<msg timestamp="20160205 03:42:47.575" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:47.574" starttime="20160205 03:42:42.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:47.578" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160205 03:42:47.579" starttime="20160205 03:42:47.576"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160205 03:42:47.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:47.584" starttime="20160205 03:42:47.580"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:47.585" starttime="20160205 03:42:41.479"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:47.594" starttime="20160205 03:42:37.678"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:47.610" starttime="20160205 03:42:37.664"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:47.639" starttime="20160205 03:41:59.359"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:47.721" starttime="20160205 03:37:51.672"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:42:47.796" starttime="20160205 03:37:51.648"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ" id="s1-s2-s1" name="TNZ">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:42:48.187" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:42:48.193" level="INFO">${time} = Fri Feb  5 03:42:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:48.193" starttime="20160205 03:42:48.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:48.194" level="INFO">Date and time: Fri Feb  5 03:42:48 CET 2016</msg>
<status status="PASS" endtime="20160205 03:42:48.195" starttime="20160205 03:42:48.193"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160205 03:42:48.237" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160205 03:42:48.237" starttime="20160205 03:42:48.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160205 03:42:48.240" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160205 03:42:48.240" starttime="20160205 03:42:48.238"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160205 03:42:48.242" level="INFO">Logging into '10.105.113.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:42:49.443" level="INFO">Read output: Last login: Fri Feb  5 00:06:20 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m</msg>
<msg timestamp="20160205 03:42:49.445" level="INFO">${output_login} = Last login: Fri Feb  5 00:06:20 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:42:49.444" starttime="20160205 03:42:48.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.447" level="INFO">Last login: Fri Feb  5 00:06:20 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:42:49.447" starttime="20160205 03:42:49.446"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/robot_testsuites/ussd/tool/USSDtest.py</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160205 03:42:49.493" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160205 03:42:49.494" starttime="20160205 03:42:49.448"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.496" starttime="20160205 03:42:49.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160205 03:42:49.507" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160205 03:42:49.508" starttime="20160205 03:42:49.497"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160205 03:42:49.513" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160205 03:42:49.513" starttime="20160205 03:42:49.512"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.525" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160205 03:42:49.526" starttime="20160205 03:42:49.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.528" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160205 03:42:49.528" starttime="20160205 03:42:49.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.530" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160205 03:42:49.530" starttime="20160205 03:42:49.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.532" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160205 03:42:49.533" starttime="20160205 03:42:49.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.534" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160205 03:42:49.535" starttime="20160205 03:42:49.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.537" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160205 03:42:49.537" starttime="20160205 03:42:49.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.539" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160205 03:42:49.539" starttime="20160205 03:42:49.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.541" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160205 03:42:49.541" starttime="20160205 03:42:49.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.543" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160205 03:42:49.544" starttime="20160205 03:42:49.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.546" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160205 03:42:49.546" starttime="20160205 03:42:49.544"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.555" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:49.555" starttime="20160205 03:42:49.553"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:49.556" starttime="20160205 03:42:49.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.559" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:49.559" starttime="20160205 03:42:49.557"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:49.559" starttime="20160205 03:42:49.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.562" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:42:49.563" starttime="20160205 03:42:49.561"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:49.563" starttime="20160205 03:42:49.560"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:49.564" starttime="20160205 03:42:49.547"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160205 03:42:49.566" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160205 03:42:49.566" starttime="20160205 03:42:49.564"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.568" starttime="20160205 03:42:49.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.569" starttime="20160205 03:42:49.568"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.571" starttime="20160205 03:42:49.570"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.572" starttime="20160205 03:42:49.572"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.574" starttime="20160205 03:42:49.573"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.575" starttime="20160205 03:42:49.574"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.577" starttime="20160205 03:42:49.576"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.579" starttime="20160205 03:42:49.578"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.580" starttime="20160205 03:42:49.579"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.582" starttime="20160205 03:42:49.581"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.584" starttime="20160205 03:42:49.583"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:49.585" starttime="20160205 03:42:49.584"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:42:49.587" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160205 03:42:50.640" level="INFO">03:42:50,633 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:50.641" starttime="20160205 03:42:49.586"></status>
</kw>
<msg timestamp="20160205 03:42:50.645" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:50.645" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160205 03:42:50.643" starttime="20160205 03:42:49.586"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160205 03:42:50.658" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160205 03:42:50.657" starttime="20160205 03:42:50.654"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:50.662" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160205 03:42:50.661" starttime="20160205 03:42:50.659"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160205 03:42:50.665" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160205 03:42:50.665" starttime="20160205 03:42:50.663"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160205 03:42:50.671" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:42:50.673" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160205 03:42:50.673" starttime="20160205 03:42:50.669"></status>
</kw>
<msg timestamp="20160205 03:42:50.675" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160205 03:42:50.676" level="INFO">${return_log_entry} = 2016-02-05 03:42:50,633 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:50.674" starttime="20160205 03:42:50.667"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.685" starttime="20160205 03:42:50.683"></status>
</kw>
<msg timestamp="20160205 03:42:50.687" level="INFO">${return_log_entry} = 2016-02-05 03:42:50,633 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:50.686" starttime="20160205 03:42:50.677"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.696" starttime="20160205 03:42:50.694"></status>
</kw>
<msg timestamp="20160205 03:42:50.698" level="INFO">${return_log_entry} = 2016-02-05 03:42:50,633 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160205 03:42:50.697" starttime="20160205 03:42:50.688"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.708" starttime="20160205 03:42:50.705"></status>
</kw>
<msg timestamp="20160205 03:42:50.709" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:50.709" starttime="20160205 03:42:50.699"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.722" starttime="20160205 03:42:50.720"></status>
</kw>
<msg timestamp="20160205 03:42:50.724" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:50.723" starttime="20160205 03:42:50.711"></status>
</kw>
<msg timestamp="20160205 03:42:50.726" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160205 03:42:50.725" starttime="20160205 03:42:50.647"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.736" starttime="20160205 03:42:50.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.739" starttime="20160205 03:42:50.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:50.742" starttime="20160205 03:42:50.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160205 03:42:50.753" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160205 03:42:50.754" starttime="20160205 03:42:50.751"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:50.754" starttime="20160205 03:42:50.749"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:50.755" starttime="20160205 03:42:50.743"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:50.755" starttime="20160205 03:42:50.728"></status>
</kw>
<msg timestamp="20160205 03:42:50.756" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160205 03:42:50.756" starttime="20160205 03:42:49.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160205 03:42:50.758" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:42:50.758" starttime="20160205 03:42:50.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:50.759" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160205 03:42:50.760" starttime="20160205 03:42:50.759"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:50.761" starttime="20160205 03:42:49.508"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:50.761" starttime="20160205 03:42:48.182"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:42:50.775" level="INFO">/home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000</msg>
<status status="PASS" endtime="20160205 03:42:50.776" starttime="20160205 03:42:50.768"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:51.541" level="INFO">=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:42:51.544" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160205 03:42:51.542" starttime="20160205 03:42:50.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:42:51.546" level="INFO">USSD Start: =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:51.546" starttime="20160205 03:42:51.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:42:53.550" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:42:53.551" starttime="20160205 03:42:51.547"></status>
</kw>
<msg timestamp="20160205 03:42:53.556" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160205 03:42:53.554" starttime="20160205 03:42:50.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the number of what you would like to do</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.560" starttime="20160205 03:42:53.557"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.572" starttime="20160205 03:42:53.570"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:42:53.575" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:42:53.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:53.610" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:42:53.609" starttime="20160205 03:42:53.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.613" starttime="20160205 03:42:53.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.616" starttime="20160205 03:42:53.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.619" starttime="20160205 03:42:53.617"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:42:53.623" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:42:53.681" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:53.683" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:42:53.683" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:53.682" starttime="20160205 03:42:53.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.692" starttime="20160205 03:42:53.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.695" starttime="20160205 03:42:53.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.698" starttime="20160205 03:42:53.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.701" starttime="20160205 03:42:53.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.703" starttime="20160205 03:42:53.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.706" starttime="20160205 03:42:53.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.709" starttime="20160205 03:42:53.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.712" starttime="20160205 03:42:53.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.715" starttime="20160205 03:42:53.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.717" starttime="20160205 03:42:53.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:53.720" starttime="20160205 03:42:53.718"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:53.721" starttime="20160205 03:42:53.563"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:53.722" starttime="20160205 03:42:50.762"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD TopUp via CreditCard">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:42:53.743" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:42:53.744" starttime="20160205 03:42:53.739"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:54.283" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:42:54.285" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:42:54.284" starttime="20160205 03:42:53.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:42:54.286" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:54.287" starttime="20160205 03:42:54.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:42:56.289" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:42:56.291" starttime="20160205 03:42:54.287"></status>
</kw>
<msg timestamp="20160205 03:42:56.295" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:42:56.293" starttime="20160205 03:42:53.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Top-Up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:56.298" level="INFO">Pressing 1 for Top-Up</msg>
<status status="PASS" endtime="20160205 03:42:56.299" starttime="20160205 03:42:56.296"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:42:56.306" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:42:56.307" starttime="20160205 03:42:56.300"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:56.324" level="INFO">=====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:42:56.326" level="INFO">${output} = =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:56.325" starttime="20160205 03:42:56.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 1: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:42:56.329" level="INFO">TopUp 1: =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:56.330" starttime="20160205 03:42:56.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for Top-Up with Credit Card</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:56.333" level="INFO">Pressing 2 for Top-Up with Credit Card</msg>
<status status="PASS" endtime="20160205 03:42:56.334" starttime="20160205 03:42:56.331"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160205 03:42:56.340" level="INFO">2</msg>
<status status="PASS" endtime="20160205 03:42:56.341" starttime="20160205 03:42:56.335"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:56.386" level="INFO">=====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:42:56.388" level="INFO">${output} = =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # ...</msg>
<status status="PASS" endtime="20160205 03:42:56.388" starttime="20160205 03:42:56.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 2: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:42:56.392" level="INFO">TopUp 2: =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:56.392" starttime="20160205 03:42:56.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sorry, you must have a registered credit or debit card</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.396" starttime="20160205 03:42:56.394"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.406" starttime="20160205 03:42:56.404"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:42:56.408" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:42:56.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:56.441" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:42:56.440" starttime="20160205 03:42:56.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.443" starttime="20160205 03:42:56.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.446" starttime="20160205 03:42:56.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.449" starttime="20160205 03:42:56.447"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:42:56.453" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:42:56.513" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:56.515" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:42:56.516" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:56.514" starttime="20160205 03:42:56.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.523" starttime="20160205 03:42:56.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.526" starttime="20160205 03:42:56.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.529" starttime="20160205 03:42:56.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.532" starttime="20160205 03:42:56.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.534" starttime="20160205 03:42:56.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.537" starttime="20160205 03:42:56.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.540" starttime="20160205 03:42:56.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.543" starttime="20160205 03:42:56.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.546" starttime="20160205 03:42:56.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.548" starttime="20160205 03:42:56.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:56.551" starttime="20160205 03:42:56.549"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:56.552" starttime="20160205 03:42:56.397"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:56.553" starttime="20160205 03:42:53.725"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:42:56.573" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:42:56.574" starttime="20160205 03:42:56.569"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:57.145" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:42:57.147" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:42:57.146" starttime="20160205 03:42:56.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:42:57.149" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:42:57.150" starttime="20160205 03:42:57.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:42:59.151" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:42:59.154" starttime="20160205 03:42:57.150"></status>
</kw>
<msg timestamp="20160205 03:42:59.160" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:42:59.158" starttime="20160205 03:42:56.563"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:42:59.163" level="INFO">Pressing 2 for checking balance</msg>
<status status="PASS" endtime="20160205 03:42:59.164" starttime="20160205 03:42:59.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160205 03:42:59.171" level="INFO">2</msg>
<status status="PASS" endtime="20160205 03:42:59.172" starttime="20160205 03:42:59.166"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:42:59.289" level="INFO">=====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User input:</msg>
<msg timestamp="20160205 03:42:59.292" level="INFO">${output} = =====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User inp...</msg>
<status status="PASS" endtime="20160205 03:42:59.291" starttime="20160205 03:42:59.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Your balance is $100.00</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.295" starttime="20160205 03:42:59.293"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.306" starttime="20160205 03:42:59.304"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:42:59.309" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:42:59.349" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:59.351" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:42:59.350" starttime="20160205 03:42:59.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.353" starttime="20160205 03:42:59.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.356" starttime="20160205 03:42:59.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.359" starttime="20160205 03:42:59.357"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:42:59.366" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:42:59.422" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:42:59.424" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:42:59.424" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:42:59.423" starttime="20160205 03:42:59.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.432" starttime="20160205 03:42:59.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.435" starttime="20160205 03:42:59.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.438" starttime="20160205 03:42:59.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.440" starttime="20160205 03:42:59.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.443" starttime="20160205 03:42:59.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.446" starttime="20160205 03:42:59.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.449" starttime="20160205 03:42:59.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.452" starttime="20160205 03:42:59.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.454" starttime="20160205 03:42:59.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.457" starttime="20160205 03:42:59.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:42:59.459" starttime="20160205 03:42:59.458"></status>
</kw>
<status status="PASS" endtime="20160205 03:42:59.460" starttime="20160205 03:42:59.298"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:42:59.462" starttime="20160205 03:42:56.556"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:42:59.482" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:42:59.483" starttime="20160205 03:42:59.478"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:00.298" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:43:00.300" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:00.299" starttime="20160205 03:42:59.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:43:00.301" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:00.302" starttime="20160205 03:43:00.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:43:02.303" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:43:02.305" starttime="20160205 03:43:00.302"></status>
</kw>
<msg timestamp="20160205 03:43:02.309" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:02.307" starttime="20160205 03:42:59.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for setup check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:02.312" level="INFO">Pressing 3 for setup check</msg>
<status status="PASS" endtime="20160205 03:43:02.313" starttime="20160205 03:43:02.310"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160205 03:43:02.320" level="INFO">3</msg>
<status status="PASS" endtime="20160205 03:43:02.321" starttime="20160205 03:43:02.314"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:02.338" level="INFO">=====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:02.340" level="INFO">${output} = =====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:02.339" starttime="20160205 03:43:02.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:02.342" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160205 03:43:02.343" starttime="20160205 03:43:02.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:43:02.349" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:43:02.350" starttime="20160205 03:43:02.344"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:02.410" level="INFO">=====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:02.412" level="INFO">${output} = =====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:02.411" starttime="20160205 03:43:02.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You are on standard rates.</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.415" starttime="20160205 03:43:02.413"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.425" starttime="20160205 03:43:02.423"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:02.428" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:02.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:02.460" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:02.459" starttime="20160205 03:43:02.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.463" starttime="20160205 03:43:02.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.465" starttime="20160205 03:43:02.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.468" starttime="20160205 03:43:02.466"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:02.472" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:43:02.531" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:02.533" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:02.533" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:02.532" starttime="20160205 03:43:02.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.541" starttime="20160205 03:43:02.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.543" starttime="20160205 03:43:02.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.546" starttime="20160205 03:43:02.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.549" starttime="20160205 03:43:02.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.552" starttime="20160205 03:43:02.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.555" starttime="20160205 03:43:02.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.558" starttime="20160205 03:43:02.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.560" starttime="20160205 03:43:02.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.563" starttime="20160205 03:43:02.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.566" starttime="20160205 03:43:02.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:02.569" starttime="20160205 03:43:02.567"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:02.570" starttime="20160205 03:43:02.417"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:02.571" starttime="20160205 03:42:59.465"></status>
</test>
<test id="s1-s2-s1-s1-t5" name="Test Buying">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:43:02.591" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:43:02.592" starttime="20160205 03:43:02.587"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:03.168" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:43:03.173" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:03.171" starttime="20160205 03:43:02.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:43:03.177" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:03.178" starttime="20160205 03:43:03.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:43:05.182" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:43:05.183" starttime="20160205 03:43:03.179"></status>
</kw>
<msg timestamp="20160205 03:43:05.187" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:05.186" starttime="20160205 03:43:02.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for buying menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:05.190" level="INFO">Pressing 4 for buying menu</msg>
<status status="PASS" endtime="20160205 03:43:05.192" starttime="20160205 03:43:05.189"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160205 03:43:05.198" level="INFO">4</msg>
<status status="PASS" endtime="20160205 03:43:05.199" starttime="20160205 03:43:05.193"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:05.383" level="INFO">=====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:05.385" level="INFO">${output} = =====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:05.384" starttime="20160205 03:43:05.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:05.386" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160205 03:43:05.387" starttime="20160205 03:43:05.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:43:05.391" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:43:05.391" starttime="20160205 03:43:05.387"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:05.512" level="INFO">=====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:05.513" level="INFO">${output} = =====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:05.512" starttime="20160205 03:43:05.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the Combo number</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.515" starttime="20160205 03:43:05.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying Weekly Combo offer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:05.516" level="INFO">Pressing 2 for buying Weekly Combo offer</msg>
<status status="PASS" endtime="20160205 03:43:05.517" starttime="20160205 03:43:05.515"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160205 03:43:05.520" level="INFO">2</msg>
<status status="PASS" endtime="20160205 03:43:05.520" starttime="20160205 03:43:05.517"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:05.544" level="INFO">=====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:05.545" level="INFO">${output} = =====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:05.545" starttime="20160205 03:43:05.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You have selected the Data Weekly Combo which costs $5.</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.547" starttime="20160205 03:43:05.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:05.548" level="INFO">Pressing 1 for confirmation</msg>
<status status="PASS" endtime="20160205 03:43:05.549" starttime="20160205 03:43:05.547"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:43:05.553" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:43:05.553" starttime="20160205 03:43:05.549"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:05.647" level="INFO">=====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:05.649" level="INFO">${output} = =====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:05.648" starttime="20160205 03:43:05.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Great, you've bought this Combo successfully</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.650" starttime="20160205 03:43:05.649"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.656" starttime="20160205 03:43:05.655"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:05.657" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:05.687" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:05.687" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:05.687" starttime="20160205 03:43:05.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.689" starttime="20160205 03:43:05.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.690" starttime="20160205 03:43:05.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.691" starttime="20160205 03:43:05.690"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:05.693" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:43:05.760" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:05.762" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:05.762" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:05.761" starttime="20160205 03:43:05.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.770" starttime="20160205 03:43:05.763"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.773" starttime="20160205 03:43:05.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.775" starttime="20160205 03:43:05.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.778" starttime="20160205 03:43:05.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.781" starttime="20160205 03:43:05.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.783" starttime="20160205 03:43:05.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.786" starttime="20160205 03:43:05.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.789" starttime="20160205 03:43:05.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.792" starttime="20160205 03:43:05.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.794" starttime="20160205 03:43:05.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:05.797" starttime="20160205 03:43:05.795"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:05.798" starttime="20160205 03:43:05.652"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:05.799" starttime="20160205 03:43:02.574"></status>
</test>
<test id="s1-s2-s1-s1-t6" name="Test What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:43:05.819" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:43:05.820" starttime="20160205 03:43:05.815"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:06.395" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:43:06.397" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:06.396" starttime="20160205 03:43:05.821"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:43:06.399" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:06.399" starttime="20160205 03:43:06.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:43:08.401" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:43:08.403" starttime="20160205 03:43:06.399"></status>
</kw>
<msg timestamp="20160205 03:43:08.407" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:08.406" starttime="20160205 03:43:05.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:08.410" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160205 03:43:08.412" starttime="20160205 03:43:08.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160205 03:43:08.419" level="INFO">8</msg>
<status status="PASS" endtime="20160205 03:43:08.420" starttime="20160205 03:43:08.413"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:08.439" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:08.441" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:08.440" starttime="20160205 03:43:08.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:08.444" level="INFO">Pressing 3 for what is my number service</msg>
<status status="PASS" endtime="20160205 03:43:08.445" starttime="20160205 03:43:08.442"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160205 03:43:08.450" level="INFO">3</msg>
<status status="PASS" endtime="20160205 03:43:08.451" starttime="20160205 03:43:08.446"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:08.474" level="INFO">=====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:08.476" level="INFO">${output} = =====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:08.475" starttime="20160205 03:43:08.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>02041010000</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.479" starttime="20160205 03:43:08.477"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.489" starttime="20160205 03:43:08.487"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:08.492" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:08.523" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:08.524" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:08.524" starttime="20160205 03:43:08.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.527" starttime="20160205 03:43:08.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.530" starttime="20160205 03:43:08.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.532" starttime="20160205 03:43:08.531"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:08.536" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:43:08.595" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:08.597" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:08.597" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:08.596" starttime="20160205 03:43:08.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.604" starttime="20160205 03:43:08.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.607" starttime="20160205 03:43:08.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.610" starttime="20160205 03:43:08.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.613" starttime="20160205 03:43:08.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.615" starttime="20160205 03:43:08.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.618" starttime="20160205 03:43:08.616"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.621" starttime="20160205 03:43:08.619"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.624" starttime="20160205 03:43:08.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.626" starttime="20160205 03:43:08.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.629" starttime="20160205 03:43:08.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:08.632" starttime="20160205 03:43:08.630"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:08.633" starttime="20160205 03:43:08.481"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:08.634" starttime="20160205 03:43:05.802"></status>
</test>
<test id="s1-s2-s1-s1-t7" name="Test USSD Credit Transfer">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160205 03:43:08.654" level="INFO">Killed</msg>
<status status="PASS" endtime="20160205 03:43:08.655" starttime="20160205 03:43:08.651"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:09.234" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160205 03:43:09.239" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:09.236" starttime="20160205 03:43:08.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160205 03:43:09.243" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:09.245" starttime="20160205 03:43:09.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160205 03:43:11.248" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160205 03:43:11.250" starttime="20160205 03:43:09.246"></status>
</kw>
<msg timestamp="20160205 03:43:11.254" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160205 03:43:11.253" starttime="20160205 03:43:08.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:11.257" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160205 03:43:11.260" starttime="20160205 03:43:11.256"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160205 03:43:11.267" level="INFO">8</msg>
<status status="PASS" endtime="20160205 03:43:11.268" starttime="20160205 03:43:11.261"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:11.288" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:11.290" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:11.289" starttime="20160205 03:43:11.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for credit transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:11.292" level="INFO">Pressing 1 for credit transfer</msg>
<status status="PASS" endtime="20160205 03:43:11.294" starttime="20160205 03:43:11.291"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:43:11.300" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:43:11.301" starttime="20160205 03:43:11.295"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:11.343" level="INFO">=====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:11.344" level="INFO">${output} = =====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:11.344" starttime="20160205 03:43:11.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering recipient mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:11.347" level="INFO">Entering recipient mobile number</msg>
<status status="PASS" endtime="20160205 03:43:11.349" starttime="20160205 03:43:11.346"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160205 03:43:11.359" level="INFO">${recipient} = 642041010001</msg>
<status status="PASS" endtime="20160205 03:43:11.358" starttime="20160205 03:43:11.350"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160205 03:43:11.365" level="INFO">642041010001</msg>
<status status="PASS" endtime="20160205 03:43:11.365" starttime="20160205 03:43:11.360"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:11.433" level="INFO">=====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:11.434" level="INFO">${output} = =====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:11.434" starttime="20160205 03:43:11.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering amount to transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:11.436" level="INFO">Entering amount to transfer</msg>
<status status="PASS" endtime="20160205 03:43:11.437" starttime="20160205 03:43:11.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20160205 03:43:11.440" level="INFO">10</msg>
<status status="PASS" endtime="20160205 03:43:11.440" starttime="20160205 03:43:11.437"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:11.494" level="INFO">=====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:11.495" level="INFO">${output} = =====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:11.495" starttime="20160205 03:43:11.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Final confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:11.497" level="INFO">Final confirmation</msg>
<status status="PASS" endtime="20160205 03:43:11.498" starttime="20160205 03:43:11.496"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160205 03:43:11.502" level="INFO">1</msg>
<status status="PASS" endtime="20160205 03:43:11.502" starttime="20160205 03:43:11.498"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160205 03:43:11.597" level="INFO">=====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<msg timestamp="20160205 03:43:11.599" level="INFO">${output} = =====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<status status="PASS" endtime="20160205 03:43:11.599" starttime="20160205 03:43:11.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Nice one.</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.603" starttime="20160205 03:43:11.601"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.614" starttime="20160205 03:43:11.612"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:11.617" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:11.648" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:11.650" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:11.649" starttime="20160205 03:43:11.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.653" starttime="20160205 03:43:11.651"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.655" starttime="20160205 03:43:11.654"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.658" starttime="20160205 03:43:11.656"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:11.662" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160205 03:43:11.723" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:11.724" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:11.725" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:11.724" starttime="20160205 03:43:11.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.732" starttime="20160205 03:43:11.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.735" starttime="20160205 03:43:11.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.737" starttime="20160205 03:43:11.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.740" starttime="20160205 03:43:11.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.743" starttime="20160205 03:43:11.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.745" starttime="20160205 03:43:11.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.748" starttime="20160205 03:43:11.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.751" starttime="20160205 03:43:11.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.754" starttime="20160205 03:43:11.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.757" starttime="20160205 03:43:11.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.759" starttime="20160205 03:43:11.758"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:11.761" starttime="20160205 03:43:11.606"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:11.762" starttime="20160205 03:43:08.637"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:11.806" starttime="20160205 03:43:11.800"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:11.807" starttime="20160205 03:43:11.794"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:43:11.808" starttime="20160205 03:42:47.859"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:43:11.882" starttime="20160205 03:42:47.845"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:43:11.916" starttime="20160205 03:42:47.831"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160205 03:43:12.171" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160205 03:43:12.173" level="INFO">${time} = Fri Feb  5 03:43:12 CET 2016</msg>
<status status="PASS" endtime="20160205 03:43:12.172" starttime="20160205 03:43:12.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:12.176" level="INFO">Date and time: Fri Feb  5 03:43:12 CET 2016</msg>
<status status="PASS" endtime="20160205 03:43:12.177" starttime="20160205 03:43:12.174"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:12.227" starttime="20160205 03:43:12.185"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:43:12.229" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:13.785" level="INFO">Read output: Last login: Fri Feb  5 02:42:39 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160205 03:43:13.786" level="INFO">${output_login} = Last login: Fri Feb  5 02:42:39 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:43:13.786" starttime="20160205 03:43:12.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:43:13.788" level="INFO">Last login: Fri Feb  5 02:42:39 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:43:13.788" starttime="20160205 03:43:13.787"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160205 03:43:13.790" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160205 03:43:13.826" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:13.827" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 48 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160205 03:43:13.826" starttime="20160205 03:43:13.789"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:13.828" starttime="20160205 03:43:13.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:13.831" starttime="20160205 03:43:13.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:13.833" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160205 03:43:13.833" starttime="20160205 03:43:13.832"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:13.834" starttime="20160205 03:43:12.179"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:13.875" starttime="20160205 03:43:13.838"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:43:13.878" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:15.079" level="INFO">Read output: Last login: Fri Feb  5 02:43:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160205 03:43:15.081" level="INFO">${output_login} = Last login: Fri Feb  5 02:43:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:43:15.080" starttime="20160205 03:43:13.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160205 03:43:15.082" level="INFO">Last login: Fri Feb  5 02:43:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:43:15.082" starttime="20160205 03:43:15.081"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160205 03:43:15.084" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160205 03:43:15.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:15.459" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:43:15.459" starttime="20160205 03:43:15.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:15.461" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160205 03:43:15.461" starttime="20160205 03:43:15.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:15.463" starttime="20160205 03:43:15.462"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:15.468" starttime="20160205 03:43:15.463"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:15.468" starttime="20160205 03:43:13.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:15.471" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20160205 03:43:15.473" starttime="20160205 03:43:15.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:15.477" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20160205 03:43:15.478" starttime="20160205 03:43:15.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:15.482" level="INFO">Using R5.3 tickets</msg>
<status status="PASS" endtime="20160205 03:43:15.483" starttime="20160205 03:43:15.480"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:15.534" starttime="20160205 03:43:15.491"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160205 03:43:15.536" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:16.756" level="INFO">Read output: Last login: Fri Feb  5 00:06:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20160205 03:43:16.758" level="INFO">${output_login} = Last login: Fri Feb  5 00:06:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160205 03:43:16.757" starttime="20160205 03:43:15.535"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160205 03:43:16.759" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20160205 03:43:16.847" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:16.847" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.189.230.161:59028 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160205 03:43:16.847" starttime="20160205 03:43:16.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:16.849" starttime="20160205 03:43:16.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:16.850" starttime="20160205 03:43:16.849"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160205 03:43:16.852" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 status'.</msg>
<msg timestamp="20160205 03:43:17.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:17.001" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160205 03:43:17.000" starttime="20160205 03:43:16.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.003" starttime="20160205 03:43:17.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.004" starttime="20160205 03:43:17.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.005" starttime="20160205 03:43:17.004"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.007" starttime="20160205 03:43:17.006"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:17.009" starttime="20160205 03:43:15.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160205 03:43:17.011" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160205 03:43:17.012" starttime="20160205 03:43:17.010"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.059" starttime="20160205 03:43:17.012"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.083" starttime="20160205 03:43:17.068"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:17.084" starttime="20160205 03:43:17.065"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.183" starttime="20160205 03:43:17.092"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:17.184" starttime="20160205 03:43:17.089"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160205 03:43:17.186" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160205 03:43:17.186" starttime="20160205 03:43:17.184"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.586" starttime="20160205 03:43:17.187"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:17.587" starttime="20160205 03:43:12.155"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.636" starttime="20160205 03:43:17.635"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:17.690" starttime="20160205 03:43:17.640"></status>
</kw>
<msg timestamp="20160205 03:43:17.692" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:43:17.692" starttime="20160205 03:43:17.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:43:17.703" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:18.085" level="INFO">Read output: Last login: Fri Feb  5 02:43:14 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:43:18.087" starttime="20160205 03:43:17.700"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:18.089" starttime="20160205 03:43:17.693"></status>
</kw>
<msg timestamp="20160205 03:43:18.093" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:43:18.092" starttime="20160205 03:43:17.631"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:18.106" starttime="20160205 03:43:18.104"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:18.110" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160205 03:43:18.114" starttime="20160205 03:43:18.107"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:18.115" starttime="20160205 03:43:18.096"></status>
</kw>
<msg timestamp="20160205 03:43:18.118" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160205 03:43:18.117" starttime="20160205 03:43:17.623"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:18.144" starttime="20160205 03:43:18.139"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:18.145" starttime="20160205 03:43:18.132"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:18.158" starttime="20160205 03:43:18.149"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:18.167" starttime="20160205 03:43:18.158"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:18.167" starttime="20160205 03:43:18.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.169" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:43:28.170" starttime="20160205 03:43:18.168"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.180" starttime="20160205 03:43:28.179"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:43:28.183" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:43:28.182" starttime="20160205 03:43:28.180"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.187" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:43:28.187" starttime="20160205 03:43:28.183"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.192" starttime="20160205 03:43:28.191"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:28.193" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:28.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:28.231" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:28.231" starttime="20160205 03:43:28.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.232" starttime="20160205 03:43:28.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.233" starttime="20160205 03:43:28.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.234" starttime="20160205 03:43:28.234"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:28.236" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:43:28.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:28.309" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:28.309" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:28.308" starttime="20160205 03:43:28.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.312" starttime="20160205 03:43:28.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.314" starttime="20160205 03:43:28.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.315" starttime="20160205 03:43:28.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.316" starttime="20160205 03:43:28.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.317" starttime="20160205 03:43:28.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.318" starttime="20160205 03:43:28.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.320" starttime="20160205 03:43:28.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.321" starttime="20160205 03:43:28.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.322" starttime="20160205 03:43:28.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.323" starttime="20160205 03:43:28.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.325" starttime="20160205 03:43:28.324"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.325" starttime="20160205 03:43:28.188"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:28.327" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160205 03:43:28.330" starttime="20160205 03:43:28.326"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:43:28.331" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160205 03:43:28.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:28.363" level="INFO">${stdout_string} = [2016-02-05 02:43:18,166][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:28.363" starttime="20160205 03:43:28.331"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:28.365" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160205 03:43:28.437" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:43:28.438" starttime="20160205 03:43:28.364"></status>
</kw>
<msg timestamp="20160205 03:43:28.439" level="INFO">${tailed_text} = [2016-02-05 02:43:18,166][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:28.439" starttime="20160205 03:43:28.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.445" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:43:28.446" starttime="20160205 03:43:28.442"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.446" starttime="20160205 03:43:28.440"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.451" starttime="20160205 03:43:28.450"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.452" starttime="20160205 03:43:28.451"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.455" starttime="20160205 03:43:28.447"></status>
</kw>
<msg timestamp="20160205 03:43:28.457" level="INFO">${tailed_text} = [2016-02-05 02:43:18,166][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:28.457" starttime="20160205 03:43:28.172"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.471" starttime="20160205 03:43:28.471"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.489" starttime="20160205 03:43:28.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.490" starttime="20160205 03:43:28.490"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.492" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:43:28.493" level="INFO">${queryResultSetLines} = 1008785|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessi...</msg>
<status status="PASS" endtime="20160205 03:43:28.493" starttime="20160205 03:43:28.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.494" starttime="20160205 03:43:28.493"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.496" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:43:28.496" level="INFO">@{queryResultSet} = [ 1008785|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160205 03:43:28.496" starttime="20160205 03:43:28.495"></status>
</kw>
<msg timestamp="20160205 03:43:28.498" level="INFO">@{queryRows} = [ 1008785|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160205 03:43:28.498" starttime="20160205 03:43:28.467"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.500" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:43:28.500" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:43:28.500" starttime="20160205 03:43:28.498"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.502" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:43:28.503" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:43:28.502" starttime="20160205 03:43:28.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:43:28.507" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:43:28.507" starttime="20160205 03:43:28.506"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.508" starttime="20160205 03:43:28.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.511" starttime="20160205 03:43:28.508"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.511" starttime="20160205 03:43:28.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.522" starttime="20160205 03:43:28.521"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.523" starttime="20160205 03:43:28.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.525" starttime="20160205 03:43:28.523"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.526" starttime="20160205 03:43:28.514"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.526" starttime="20160205 03:43:28.512"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:28.527" starttime="20160205 03:43:17.601"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:28.528" starttime="20160205 03:43:17.590"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.556" starttime="20160205 03:43:28.555"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:28.611" starttime="20160205 03:43:28.559"></status>
</kw>
<msg timestamp="20160205 03:43:28.613" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:43:28.612" starttime="20160205 03:43:28.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:43:28.625" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:29.004" level="INFO">Read output: Last login: Fri Feb  5 02:43:17 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:43:29.006" starttime="20160205 03:43:28.622"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:29.008" starttime="20160205 03:43:28.614"></status>
</kw>
<msg timestamp="20160205 03:43:29.013" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:43:29.012" starttime="20160205 03:43:28.550"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:29.027" starttime="20160205 03:43:29.024"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:29.031" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:43:29.035" starttime="20160205 03:43:29.028"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:29.036" starttime="20160205 03:43:29.016"></status>
</kw>
<msg timestamp="20160205 03:43:29.039" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160205 03:43:29.038" starttime="20160205 03:43:28.544"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:29.066" starttime="20160205 03:43:29.060"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:29.068" starttime="20160205 03:43:29.052"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:29.079" starttime="20160205 03:43:29.077"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:29.088" starttime="20160205 03:43:29.080"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:29.089" starttime="20160205 03:43:29.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.094" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:43:39.094" starttime="20160205 03:43:29.090"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.117" starttime="20160205 03:43:39.115"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:43:39.125" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:43:39.124" starttime="20160205 03:43:39.118"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.132" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:43:39.133" starttime="20160205 03:43:39.126"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.146" starttime="20160205 03:43:39.143"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:39.149" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:39.188" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:39.190" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:39.189" starttime="20160205 03:43:39.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.193" starttime="20160205 03:43:39.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.195" starttime="20160205 03:43:39.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.198" starttime="20160205 03:43:39.196"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:39.202" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:43:39.266" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:39.268" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:39.268" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:39.267" starttime="20160205 03:43:39.199"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.276" starttime="20160205 03:43:39.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.279" starttime="20160205 03:43:39.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.282" starttime="20160205 03:43:39.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.285" starttime="20160205 03:43:39.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.288" starttime="20160205 03:43:39.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.291" starttime="20160205 03:43:39.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.294" starttime="20160205 03:43:39.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.296" starttime="20160205 03:43:39.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.299" starttime="20160205 03:43:39.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.302" starttime="20160205 03:43:39.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.304" starttime="20160205 03:43:39.303"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.305" starttime="20160205 03:43:39.135"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:39.309" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160205 03:43:39.313" starttime="20160205 03:43:39.307"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:43:39.315" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:43:39.346" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:39.348" level="INFO">${stdout_string} = [2016-02-05 02:43:29,086][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:39.347" starttime="20160205 03:43:39.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:39.352" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160205 03:43:39.422" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:43:39.424" starttime="20160205 03:43:39.349"></status>
</kw>
<msg timestamp="20160205 03:43:39.426" level="INFO">${tailed_text} = [2016-02-05 02:43:29,086][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:39.426" starttime="20160205 03:43:39.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.438" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:43:39.439" starttime="20160205 03:43:39.434"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.440" starttime="20160205 03:43:39.427"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.449" starttime="20160205 03:43:39.448"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.451" starttime="20160205 03:43:39.450"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.455" starttime="20160205 03:43:39.441"></status>
</kw>
<msg timestamp="20160205 03:43:39.456" level="INFO">${tailed_text} = [2016-02-05 02:43:29,086][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:39.456" starttime="20160205 03:43:39.099"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.471" starttime="20160205 03:43:39.471"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.476" starttime="20160205 03:43:39.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.477" starttime="20160205 03:43:39.476"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.479" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:43:39.479" level="INFO">${queryResultSetLines} = 1008786|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|53099204...</msg>
<status status="PASS" endtime="20160205 03:43:39.479" starttime="20160205 03:43:39.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.481" starttime="20160205 03:43:39.480"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.482" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:43:39.483" level="INFO">@{queryResultSet} = [ 1008786|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160205 03:43:39.482" starttime="20160205 03:43:39.481"></status>
</kw>
<msg timestamp="20160205 03:43:39.484" level="INFO">@{queryRows} = [ 1008786|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160205 03:43:39.483" starttime="20160205 03:43:39.467"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.485" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:43:39.486" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:43:39.486" starttime="20160205 03:43:39.484"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.487" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:43:39.488" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:43:39.488" starttime="20160205 03:43:39.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:43:39.493" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:43:39.493" starttime="20160205 03:43:39.492"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.493" starttime="20160205 03:43:39.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.497" starttime="20160205 03:43:39.494"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.497" starttime="20160205 03:43:39.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.510" starttime="20160205 03:43:39.508"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.510" starttime="20160205 03:43:39.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.513" starttime="20160205 03:43:39.511"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.514" starttime="20160205 03:43:39.502"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.514" starttime="20160205 03:43:39.498"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:39.514" starttime="20160205 03:43:28.534"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:39.515" starttime="20160205 03:43:28.530"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.543" starttime="20160205 03:43:39.542"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:39.586" starttime="20160205 03:43:39.546"></status>
</kw>
<msg timestamp="20160205 03:43:39.587" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:43:39.586" starttime="20160205 03:43:39.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:43:39.591" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:40.739" level="INFO">Read output: Last login: Fri Feb  5 02:43:28 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:43:40.740" starttime="20160205 03:43:39.590"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:40.741" starttime="20160205 03:43:39.587"></status>
</kw>
<msg timestamp="20160205 03:43:40.742" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:43:40.742" starttime="20160205 03:43:39.537"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:40.748" starttime="20160205 03:43:40.747"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:40.750" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160205 03:43:40.753" starttime="20160205 03:43:40.748"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:40.753" starttime="20160205 03:43:40.743"></status>
</kw>
<msg timestamp="20160205 03:43:40.754" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160205 03:43:40.754" starttime="20160205 03:43:39.532"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:40.791" starttime="20160205 03:43:40.763"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:40.792" starttime="20160205 03:43:40.760"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:40.797" starttime="20160205 03:43:40.796"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:40.805" starttime="20160205 03:43:40.797"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:40.805" starttime="20160205 03:43:40.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:43:50.807" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:43:50.808" starttime="20160205 03:43:40.805"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.820" starttime="20160205 03:43:50.819"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:43:50.824" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:43:50.824" starttime="20160205 03:43:50.821"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:43:50.829" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:43:50.829" starttime="20160205 03:43:50.825"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.834" starttime="20160205 03:43:50.833"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:43:50.835" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:43:50.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:50.873" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:43:50.873" starttime="20160205 03:43:50.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.874" starttime="20160205 03:43:50.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.876" starttime="20160205 03:43:50.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.877" starttime="20160205 03:43:50.876"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:43:50.879" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:43:50.949" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:50.950" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:43:50.950" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:43:50.949" starttime="20160205 03:43:50.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.953" starttime="20160205 03:43:50.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.955" starttime="20160205 03:43:50.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.956" starttime="20160205 03:43:50.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.958" starttime="20160205 03:43:50.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.959" starttime="20160205 03:43:50.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.961" starttime="20160205 03:43:50.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.962" starttime="20160205 03:43:50.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.963" starttime="20160205 03:43:50.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.965" starttime="20160205 03:43:50.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.966" starttime="20160205 03:43:50.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:50.967" starttime="20160205 03:43:50.966"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:50.968" starttime="20160205 03:43:50.830"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:50.969" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160205 03:43:50.972" starttime="20160205 03:43:50.968"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:43:50.973" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160205 03:43:51.005" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:43:51.007" level="INFO">${stdout_string} = [2016-02-05 02:43:40,802][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:51.006" starttime="20160205 03:43:50.973"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:51.009" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160205 03:43:51.080" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:43:51.081" starttime="20160205 03:43:51.008"></status>
</kw>
<msg timestamp="20160205 03:43:51.082" level="INFO">${tailed_text} = [2016-02-05 02:43:40,802][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:51.081" starttime="20160205 03:43:50.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.087" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:43:51.088" starttime="20160205 03:43:51.086"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.088" starttime="20160205 03:43:51.083"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.093" starttime="20160205 03:43:51.092"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.095" starttime="20160205 03:43:51.094"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.098" starttime="20160205 03:43:51.089"></status>
</kw>
<msg timestamp="20160205 03:43:51.099" level="INFO">${tailed_text} = [2016-02-05 02:43:40,802][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:43:51.099" starttime="20160205 03:43:50.810"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.115" starttime="20160205 03:43:51.114"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.168" starttime="20160205 03:43:51.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.169" starttime="20160205 03:43:51.168"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.171" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:43:51.172" level="INFO">${queryResultSetLines} = 1008787|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSes...</msg>
<status status="PASS" endtime="20160205 03:43:51.171" starttime="20160205 03:43:51.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.173" starttime="20160205 03:43:51.172"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.174" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:43:51.175" level="INFO">@{queryResultSet} = [ 1008787|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160205 03:43:51.175" starttime="20160205 03:43:51.173"></status>
</kw>
<msg timestamp="20160205 03:43:51.176" level="INFO">@{queryRows} = [ 1008787|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160205 03:43:51.176" starttime="20160205 03:43:51.110"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.177" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:43:51.178" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:43:51.178" starttime="20160205 03:43:51.176"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.179" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:43:51.180" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:43:51.180" starttime="20160205 03:43:51.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:43:51.184" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:43:51.185" starttime="20160205 03:43:51.183"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.185" starttime="20160205 03:43:51.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.188" starttime="20160205 03:43:51.186"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.188" starttime="20160205 03:43:51.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.199" starttime="20160205 03:43:51.198"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.199" starttime="20160205 03:43:51.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.202" starttime="20160205 03:43:51.200"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.204" starttime="20160205 03:43:51.192"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.205" starttime="20160205 03:43:51.189"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.205" starttime="20160205 03:43:39.522"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:43:51.206" starttime="20160205 03:43:39.517"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.233" starttime="20160205 03:43:51.232"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.275" starttime="20160205 03:43:51.236"></status>
</kw>
<msg timestamp="20160205 03:43:51.276" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:43:51.276" starttime="20160205 03:43:51.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:43:51.281" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:43:51.675" level="INFO">Read output: Last login: Fri Feb  5 02:43:40 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:43:51.676" starttime="20160205 03:43:51.279"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.676" starttime="20160205 03:43:51.277"></status>
</kw>
<msg timestamp="20160205 03:43:51.677" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:43:51.677" starttime="20160205 03:43:51.228"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:51.683" starttime="20160205 03:43:51.682"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:43:51.684" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160205 03:43:51.687" starttime="20160205 03:43:51.683"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:51.688" starttime="20160205 03:43:51.678"></status>
</kw>
<msg timestamp="20160205 03:43:51.689" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160205 03:43:51.689" starttime="20160205 03:43:51.222"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:52.430" starttime="20160205 03:43:51.698"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:52.432" starttime="20160205 03:43:51.695"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:52.437" starttime="20160205 03:43:52.436"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:43:52.444" starttime="20160205 03:43:52.438"></status>
</kw>
<status status="PASS" endtime="20160205 03:43:52.444" starttime="20160205 03:43:52.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.446" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:44:02.448" starttime="20160205 03:43:52.445"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.459" starttime="20160205 03:44:02.458"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:44:02.462" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:44:02.462" starttime="20160205 03:44:02.459"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.473" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:44:02.473" starttime="20160205 03:44:02.463"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.478" starttime="20160205 03:44:02.477"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:44:02.479" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:44:02.517" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:02.517" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:44:02.517" starttime="20160205 03:44:02.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.519" starttime="20160205 03:44:02.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.520" starttime="20160205 03:44:02.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.521" starttime="20160205 03:44:02.520"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:44:02.523" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:44:02.593" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:02.594" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:44:02.594" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:44:02.594" starttime="20160205 03:44:02.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.597" starttime="20160205 03:44:02.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.599" starttime="20160205 03:44:02.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.600" starttime="20160205 03:44:02.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.601" starttime="20160205 03:44:02.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.602" starttime="20160205 03:44:02.602"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.604" starttime="20160205 03:44:02.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.605" starttime="20160205 03:44:02.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.606" starttime="20160205 03:44:02.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.607" starttime="20160205 03:44:02.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.608" starttime="20160205 03:44:02.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.610" starttime="20160205 03:44:02.609"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.610" starttime="20160205 03:44:02.474"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:02.611" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160205 03:44:02.614" starttime="20160205 03:44:02.611"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:44:02.615" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160205 03:44:02.647" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:02.647" level="INFO">${stdout_string} = [2016-02-05 02:43:52,443][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:02.647" starttime="20160205 03:44:02.615"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:02.649" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160205 03:44:02.720" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:44:02.721" starttime="20160205 03:44:02.648"></status>
</kw>
<msg timestamp="20160205 03:44:02.722" level="INFO">${tailed_text} = [2016-02-05 02:43:52,443][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:02.721" starttime="20160205 03:44:02.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.727" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:44:02.727" starttime="20160205 03:44:02.725"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.728" starttime="20160205 03:44:02.722"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.732" starttime="20160205 03:44:02.731"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.734" starttime="20160205 03:44:02.733"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.737" starttime="20160205 03:44:02.728"></status>
</kw>
<msg timestamp="20160205 03:44:02.738" level="INFO">${tailed_text} = [2016-02-05 02:43:52,443][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:02.737" starttime="20160205 03:44:02.450"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.752" starttime="20160205 03:44:02.752"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.813" starttime="20160205 03:44:02.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.814" starttime="20160205 03:44:02.813"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.815" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:44:02.816" level="INFO">${queryResultSetLines} = 1043852|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|...</msg>
<status status="PASS" endtime="20160205 03:44:02.816" starttime="20160205 03:44:02.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.817" starttime="20160205 03:44:02.817"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.819" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:44:02.820" level="INFO">@{queryResultSet} = [ 1043852|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160205 03:44:02.819" starttime="20160205 03:44:02.818"></status>
</kw>
<msg timestamp="20160205 03:44:02.820" level="INFO">@{queryRows} = [ 1043852|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160205 03:44:02.820" starttime="20160205 03:44:02.748"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.822" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:44:02.823" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:44:02.822" starttime="20160205 03:44:02.821"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.824" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:44:02.825" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:44:02.824" starttime="20160205 03:44:02.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:44:02.829" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:44:02.829" starttime="20160205 03:44:02.828"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.830" starttime="20160205 03:44:02.825"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.832" starttime="20160205 03:44:02.830"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.833" starttime="20160205 03:44:02.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.843" starttime="20160205 03:44:02.842"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.844" starttime="20160205 03:44:02.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.847" starttime="20160205 03:44:02.844"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.847" starttime="20160205 03:44:02.836"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.847" starttime="20160205 03:44:02.833"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:02.848" starttime="20160205 03:43:51.212"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:44:02.849" starttime="20160205 03:43:51.208"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.876" starttime="20160205 03:44:02.875"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:02.920" starttime="20160205 03:44:02.879"></status>
</kw>
<msg timestamp="20160205 03:44:02.920" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:44:02.920" starttime="20160205 03:44:02.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:44:02.925" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:44:03.377" level="INFO">Read output: Last login: Fri Feb  5 02:43:51 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:44:03.378" starttime="20160205 03:44:02.924"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:03.379" starttime="20160205 03:44:02.921"></status>
</kw>
<msg timestamp="20160205 03:44:03.381" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:44:03.380" starttime="20160205 03:44:02.870"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:03.386" starttime="20160205 03:44:03.385"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:03.388" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160205 03:44:03.391" starttime="20160205 03:44:03.387"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:03.392" starttime="20160205 03:44:03.382"></status>
</kw>
<msg timestamp="20160205 03:44:03.393" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160205 03:44:03.392" starttime="20160205 03:44:02.865"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:03.431" starttime="20160205 03:44:03.402"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:03.431" starttime="20160205 03:44:03.399"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:03.436" starttime="20160205 03:44:03.435"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:03.444" starttime="20160205 03:44:03.437"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:03.445" starttime="20160205 03:44:03.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.447" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:44:13.447" starttime="20160205 03:44:03.445"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.457" starttime="20160205 03:44:13.456"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:44:13.461" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:44:13.461" starttime="20160205 03:44:13.458"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.466" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:44:13.466" starttime="20160205 03:44:13.462"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.471" starttime="20160205 03:44:13.470"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:44:13.472" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:44:13.510" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:13.511" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:44:13.510" starttime="20160205 03:44:13.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.512" starttime="20160205 03:44:13.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.513" starttime="20160205 03:44:13.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.515" starttime="20160205 03:44:13.514"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:44:13.517" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:44:13.586" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:13.587" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:44:13.587" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:44:13.586" starttime="20160205 03:44:13.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.590" starttime="20160205 03:44:13.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.591" starttime="20160205 03:44:13.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.593" starttime="20160205 03:44:13.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.594" starttime="20160205 03:44:13.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.595" starttime="20160205 03:44:13.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.596" starttime="20160205 03:44:13.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.598" starttime="20160205 03:44:13.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.599" starttime="20160205 03:44:13.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.600" starttime="20160205 03:44:13.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.601" starttime="20160205 03:44:13.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.602" starttime="20160205 03:44:13.602"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.603" starttime="20160205 03:44:13.467"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:13.604" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160205 03:44:13.607" starttime="20160205 03:44:13.603"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:44:13.608" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160205 03:44:13.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:13.640" level="INFO">${stdout_string} = [2016-02-05 02:44:03,441][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:13.639" starttime="20160205 03:44:13.608"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:13.641" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160205 03:44:13.712" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:44:13.713" starttime="20160205 03:44:13.640"></status>
</kw>
<msg timestamp="20160205 03:44:13.714" level="INFO">${tailed_text} = [2016-02-05 02:44:03,441][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:13.713" starttime="20160205 03:44:13.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.719" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:44:13.719" starttime="20160205 03:44:13.717"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.720" starttime="20160205 03:44:13.714"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.724" starttime="20160205 03:44:13.723"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.726" starttime="20160205 03:44:13.725"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.729" starttime="20160205 03:44:13.720"></status>
</kw>
<msg timestamp="20160205 03:44:13.730" level="INFO">${tailed_text} = [2016-02-05 02:44:03,441][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:13.730" starttime="20160205 03:44:13.449"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.745" starttime="20160205 03:44:13.744"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.764" starttime="20160205 03:44:13.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.765" starttime="20160205 03:44:13.764"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.767" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:44:13.767" level="INFO">${queryResultSetLines} = 2070449|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1...</msg>
<status status="PASS" endtime="20160205 03:44:13.767" starttime="20160205 03:44:13.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.769" starttime="20160205 03:44:13.768"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.770" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:44:13.771" level="INFO">@{queryResultSet} = [ 2070449|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160205 03:44:13.770" starttime="20160205 03:44:13.769"></status>
</kw>
<msg timestamp="20160205 03:44:13.772" level="INFO">@{queryRows} = [ 2070449|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160205 03:44:13.772" starttime="20160205 03:44:13.740"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.774" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:44:13.774" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:44:13.774" starttime="20160205 03:44:13.773"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.776" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:44:13.777" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:44:13.776" starttime="20160205 03:44:13.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:44:13.781" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:44:13.782" starttime="20160205 03:44:13.780"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.782" starttime="20160205 03:44:13.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.785" starttime="20160205 03:44:13.783"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.785" starttime="20160205 03:44:13.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.796" starttime="20160205 03:44:13.794"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.796" starttime="20160205 03:44:13.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.799" starttime="20160205 03:44:13.797"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.800" starttime="20160205 03:44:13.789"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.800" starttime="20160205 03:44:13.786"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:13.800" starttime="20160205 03:44:02.855"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:44:13.801" starttime="20160205 03:44:02.851"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.830" starttime="20160205 03:44:13.829"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:13.874" starttime="20160205 03:44:13.833"></status>
</kw>
<msg timestamp="20160205 03:44:13.875" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:44:13.874" starttime="20160205 03:44:13.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:44:13.880" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:44:14.271" level="INFO">Read output: Last login: Fri Feb  5 02:44:03 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:44:14.272" starttime="20160205 03:44:13.878"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:14.273" starttime="20160205 03:44:13.875"></status>
</kw>
<msg timestamp="20160205 03:44:14.274" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:44:14.274" starttime="20160205 03:44:13.824"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:14.291" starttime="20160205 03:44:14.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:14.293" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160205 03:44:14.300" starttime="20160205 03:44:14.292"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:14.302" starttime="20160205 03:44:14.275"></status>
</kw>
<msg timestamp="20160205 03:44:14.305" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160205 03:44:14.304" starttime="20160205 03:44:13.818"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:14.687" starttime="20160205 03:44:14.328"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:14.688" starttime="20160205 03:44:14.321"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:14.693" starttime="20160205 03:44:14.692"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:14.701" starttime="20160205 03:44:14.694"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:14.702" starttime="20160205 03:44:14.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:44:24.704" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:44:24.705" starttime="20160205 03:44:14.702"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.715" starttime="20160205 03:44:24.714"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:44:24.719" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:44:24.718" starttime="20160205 03:44:24.715"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:44:24.730" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:44:24.730" starttime="20160205 03:44:24.719"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.736" starttime="20160205 03:44:24.735"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:44:24.737" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:44:24.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:24.776" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:44:24.775" starttime="20160205 03:44:24.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.777" starttime="20160205 03:44:24.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.778" starttime="20160205 03:44:24.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.779" starttime="20160205 03:44:24.779"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:44:24.781" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:44:24.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:24.852" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:44:24.852" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:44:24.852" starttime="20160205 03:44:24.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.856" starttime="20160205 03:44:24.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.857" starttime="20160205 03:44:24.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.859" starttime="20160205 03:44:24.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.860" starttime="20160205 03:44:24.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.861" starttime="20160205 03:44:24.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.862" starttime="20160205 03:44:24.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.863" starttime="20160205 03:44:24.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.865" starttime="20160205 03:44:24.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.866" starttime="20160205 03:44:24.865"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.867" starttime="20160205 03:44:24.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.868" starttime="20160205 03:44:24.868"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:24.869" starttime="20160205 03:44:24.731"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:24.871" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160205 03:44:24.874" starttime="20160205 03:44:24.869"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:44:24.875" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160205 03:44:24.907" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:24.908" level="INFO">${stdout_string} = [2016-02-05 02:44:14,699][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:24.907" starttime="20160205 03:44:24.875"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:24.909" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160205 03:44:24.981" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:44:24.981" starttime="20160205 03:44:24.908"></status>
</kw>
<msg timestamp="20160205 03:44:24.983" level="INFO">${tailed_text} = [2016-02-05 02:44:14,699][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:24.982" starttime="20160205 03:44:24.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:44:24.989" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:44:24.990" starttime="20160205 03:44:24.986"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:24.990" starttime="20160205 03:44:24.983"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.995" starttime="20160205 03:44:24.994"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:44:24.996" starttime="20160205 03:44:24.995"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.000" starttime="20160205 03:44:24.991"></status>
</kw>
<msg timestamp="20160205 03:44:25.001" level="INFO">${tailed_text} = [2016-02-05 02:44:14,699][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160205 03:44:25.001" starttime="20160205 03:44:24.707"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.016" starttime="20160205 03:44:25.016"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.048" starttime="20160205 03:44:25.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.049" starttime="20160205 03:44:25.049"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:44:25.051" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:44:25.052" level="INFO">${queryResultSetLines} = 1033304|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t...</msg>
<status status="PASS" endtime="20160205 03:44:25.051" starttime="20160205 03:44:25.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.053" starttime="20160205 03:44:25.052"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:44:25.054" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:44:25.055" level="INFO">@{queryResultSet} = [ 1033304|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160205 03:44:25.055" starttime="20160205 03:44:25.054"></status>
</kw>
<msg timestamp="20160205 03:44:25.056" level="INFO">@{queryRows} = [ 1033304|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160205 03:44:25.056" starttime="20160205 03:44:25.012"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:44:25.058" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:44:25.058" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:44:25.058" starttime="20160205 03:44:25.057"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:44:25.060" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:44:25.060" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:44:25.060" starttime="20160205 03:44:25.059"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:44:25.065" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:44:25.065" starttime="20160205 03:44:25.064"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.065" starttime="20160205 03:44:25.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.068" starttime="20160205 03:44:25.066"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.069" starttime="20160205 03:44:25.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.079" starttime="20160205 03:44:25.078"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.079" starttime="20160205 03:44:25.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.082" starttime="20160205 03:44:25.080"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.083" starttime="20160205 03:44:25.072"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.083" starttime="20160205 03:44:25.069"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.084" starttime="20160205 03:44:13.808"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:44:25.085" starttime="20160205 03:44:13.804"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.115" starttime="20160205 03:44:25.113"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.176" starttime="20160205 03:44:25.121"></status>
</kw>
<msg timestamp="20160205 03:44:25.179" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:44:25.178" starttime="20160205 03:44:25.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:44:25.189" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:44:25.593" level="INFO">Read output: Last login: Fri Feb  5 02:44:14 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:44:25.594" starttime="20160205 03:44:25.187"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.595" starttime="20160205 03:44:25.180"></status>
</kw>
<msg timestamp="20160205 03:44:25.597" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:44:25.597" starttime="20160205 03:44:25.106"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.609" starttime="20160205 03:44:25.607"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:25.612" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160205 03:44:25.616" starttime="20160205 03:44:25.610"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.617" starttime="20160205 03:44:25.599"></status>
</kw>
<msg timestamp="20160205 03:44:25.619" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160205 03:44:25.619" starttime="20160205 03:44:25.100"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.638" starttime="20160205 03:44:25.633"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.639" starttime="20160205 03:44:25.630"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.644" starttime="20160205 03:44:25.643"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:25.652" starttime="20160205 03:44:25.645"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:25.652" starttime="20160205 03:44:25.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.655" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:44:35.656" starttime="20160205 03:44:25.653"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.666" starttime="20160205 03:44:35.665"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:44:35.669" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:44:35.669" starttime="20160205 03:44:35.666"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.674" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:44:35.674" starttime="20160205 03:44:35.670"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.680" starttime="20160205 03:44:35.679"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:44:35.681" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:44:35.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:35.710" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:44:35.710" starttime="20160205 03:44:35.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.711" starttime="20160205 03:44:35.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.712" starttime="20160205 03:44:35.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.713" starttime="20160205 03:44:35.713"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:44:35.715" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:44:35.780" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:35.781" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:44:35.781" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:44:35.780" starttime="20160205 03:44:35.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.784" starttime="20160205 03:44:35.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.785" starttime="20160205 03:44:35.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.786" starttime="20160205 03:44:35.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.788" starttime="20160205 03:44:35.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.789" starttime="20160205 03:44:35.788"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.790" starttime="20160205 03:44:35.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.791" starttime="20160205 03:44:35.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.793" starttime="20160205 03:44:35.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.794" starttime="20160205 03:44:35.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.795" starttime="20160205 03:44:35.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.796" starttime="20160205 03:44:35.795"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.797" starttime="20160205 03:44:35.675"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:35.798" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160205 03:44:35.801" starttime="20160205 03:44:35.797"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:44:35.802" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160205 03:44:35.824" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:44:35.824" level="INFO">${stdout_string} = [2016-02-05 02:44:25,677][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160205 03:44:35.824" starttime="20160205 03:44:35.801"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:35.826" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160205 03:44:35.895" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:44:35.896" starttime="20160205 03:44:35.825"></status>
</kw>
<msg timestamp="20160205 03:44:35.897" level="INFO">${tailed_text} = [2016-02-05 02:44:25,677][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160205 03:44:35.896" starttime="20160205 03:44:35.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.903" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:44:35.903" starttime="20160205 03:44:35.901"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.904" starttime="20160205 03:44:35.897"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.909" starttime="20160205 03:44:35.908"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.911" starttime="20160205 03:44:35.910"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.913" starttime="20160205 03:44:35.905"></status>
</kw>
<msg timestamp="20160205 03:44:35.914" level="INFO">${tailed_text} = [2016-02-05 02:44:25,677][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160205 03:44:35.913" starttime="20160205 03:44:35.658"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.929" starttime="20160205 03:44:35.928"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.932" starttime="20160205 03:44:35.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.933" starttime="20160205 03:44:35.932"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.935" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:44:35.935" level="INFO">${queryResultSetLines} = 1000774|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160205 03:44:35.935" starttime="20160205 03:44:35.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.937" starttime="20160205 03:44:35.936"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.938" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:44:35.939" level="INFO">@{queryResultSet} = [ 1000774|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160205 03:44:35.938" starttime="20160205 03:44:35.937"></status>
</kw>
<msg timestamp="20160205 03:44:35.940" level="INFO">@{queryRows} = [ 1000774|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160205 03:44:35.939" starttime="20160205 03:44:35.924"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.941" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:44:35.942" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:44:35.942" starttime="20160205 03:44:35.940"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:44:35.943" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:44:35.944" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:44:35.944" starttime="20160205 03:44:35.942"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:44:35.948" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:44:35.949" starttime="20160205 03:44:35.947"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.949" starttime="20160205 03:44:35.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.952" starttime="20160205 03:44:35.949"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.952" starttime="20160205 03:44:35.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.963" starttime="20160205 03:44:35.961"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.963" starttime="20160205 03:44:35.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.966" starttime="20160205 03:44:35.964"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.967" starttime="20160205 03:44:35.955"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.967" starttime="20160205 03:44:35.953"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:35.967" starttime="20160205 03:44:25.091"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:44:35.968" starttime="20160205 03:44:25.087"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:35.995" starttime="20160205 03:44:35.994"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:36.047" starttime="20160205 03:44:35.998"></status>
</kw>
<msg timestamp="20160205 03:44:36.051" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:44:36.049" starttime="20160205 03:44:35.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:44:36.061" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:44:36.389" level="INFO">Read output: Last login: Fri Feb  5 02:44:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:44:36.390" starttime="20160205 03:44:36.059"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:36.390" starttime="20160205 03:44:36.052"></status>
</kw>
<msg timestamp="20160205 03:44:36.392" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:44:36.391" starttime="20160205 03:44:35.990"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:36.397" starttime="20160205 03:44:36.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:44:36.399" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160205 03:44:36.402" starttime="20160205 03:44:36.398"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:36.402" starttime="20160205 03:44:36.393"></status>
</kw>
<msg timestamp="20160205 03:44:36.404" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160205 03:44:36.403" starttime="20160205 03:44:35.984"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:50.700" starttime="20160205 03:44:36.413"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:50.702" starttime="20160205 03:44:36.409"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:50.707" starttime="20160205 03:44:50.706"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:44:50.714" starttime="20160205 03:44:50.708"></status>
</kw>
<status status="PASS" endtime="20160205 03:44:50.715" starttime="20160205 03:44:50.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:45:00.718" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:45:00.720" starttime="20160205 03:44:50.715"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.731" starttime="20160205 03:45:00.730"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:45:00.735" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:45:00.734" starttime="20160205 03:45:00.732"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:45:00.739" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:45:00.739" starttime="20160205 03:45:00.735"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.744" starttime="20160205 03:45:00.743"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:45:00.745" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:45:00.784" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:00.785" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:45:00.785" starttime="20160205 03:45:00.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.786" starttime="20160205 03:45:00.785"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.787" starttime="20160205 03:45:00.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.788" starttime="20160205 03:45:00.788"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:45:00.790" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:45:00.864" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:00.865" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:45:00.865" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:45:00.865" starttime="20160205 03:45:00.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.868" starttime="20160205 03:45:00.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.869" starttime="20160205 03:45:00.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.870" starttime="20160205 03:45:00.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.872" starttime="20160205 03:45:00.871"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.873" starttime="20160205 03:45:00.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.874" starttime="20160205 03:45:00.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.875" starttime="20160205 03:45:00.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.877" starttime="20160205 03:45:00.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.878" starttime="20160205 03:45:00.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.879" starttime="20160205 03:45:00.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:00.881" starttime="20160205 03:45:00.880"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:00.881" starttime="20160205 03:45:00.740"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:00.883" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160205 03:45:00.886" starttime="20160205 03:45:00.882"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:45:00.887" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160205 03:45:00.917" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:00.918" level="INFO">${stdout_string} = [2016-02-05 02:44:50,713][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:45:00.918" starttime="20160205 03:45:00.886"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:00.919" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160205 03:45:00.992" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:45:00.993" starttime="20160205 03:45:00.919"></status>
</kw>
<msg timestamp="20160205 03:45:00.994" level="INFO">${tailed_text} = [2016-02-05 02:44:50,713][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:45:00.994" starttime="20160205 03:45:00.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:45:00.999" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:45:01.000" starttime="20160205 03:45:00.997"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:01.000" starttime="20160205 03:45:00.994"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:01.006" starttime="20160205 03:45:01.005"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:45:01.008" starttime="20160205 03:45:01.007"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:01.008" starttime="20160205 03:45:01.001"></status>
</kw>
<msg timestamp="20160205 03:45:01.011" level="INFO">${tailed_text} = [2016-02-05 02:44:50,713][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160205 03:45:01.011" starttime="20160205 03:45:00.722"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:01.026" starttime="20160205 03:45:01.025"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.252" starttime="20160205 03:45:01.026"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.256" starttime="20160205 03:45:14.255"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:45:14.258" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:45:14.259" level="INFO">${queryResultSetLines} = 5556179|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160205 03:45:14.258" starttime="20160205 03:45:14.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.260" starttime="20160205 03:45:14.259"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:45:14.263" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:45:14.265" level="INFO">@{queryResultSet} = [ 5556179|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160205 03:45:14.264" starttime="20160205 03:45:14.261"></status>
</kw>
<msg timestamp="20160205 03:45:14.269" level="INFO">@{queryRows} = [ 5556179|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160205 03:45:14.267" starttime="20160205 03:45:01.021"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:45:14.273" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:45:14.275" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:45:14.274" starttime="20160205 03:45:14.270"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:45:14.278" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:45:14.280" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:45:14.279" starttime="20160205 03:45:14.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:45:14.292" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:45:14.293" starttime="20160205 03:45:14.290"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.294" starttime="20160205 03:45:14.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.300" starttime="20160205 03:45:14.295"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.301" starttime="20160205 03:45:01.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.328" starttime="20160205 03:45:14.325"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.329" starttime="20160205 03:45:14.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.336" starttime="20160205 03:45:14.331"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.337" starttime="20160205 03:45:14.310"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.338" starttime="20160205 03:45:14.303"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.339" starttime="20160205 03:44:35.974"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:45:14.342" starttime="20160205 03:44:35.970"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.374" starttime="20160205 03:45:14.373"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.430" starttime="20160205 03:45:14.378"></status>
</kw>
<msg timestamp="20160205 03:45:14.432" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:45:14.431" starttime="20160205 03:45:14.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:45:14.443" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:45:14.858" level="INFO">Read output: Last login: Fri Feb  5 02:44:36 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:45:14.859" starttime="20160205 03:45:14.441"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.860" starttime="20160205 03:45:14.434"></status>
</kw>
<msg timestamp="20160205 03:45:14.863" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:45:14.862" starttime="20160205 03:45:14.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.875" starttime="20160205 03:45:14.872"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:14.878" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160205 03:45:14.881" starttime="20160205 03:45:14.876"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.882" starttime="20160205 03:45:14.865"></status>
</kw>
<msg timestamp="20160205 03:45:14.883" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160205 03:45:14.882" starttime="20160205 03:45:14.362"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.903" starttime="20160205 03:45:14.892"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.904" starttime="20160205 03:45:14.889"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.909" starttime="20160205 03:45:14.908"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:14.916" starttime="20160205 03:45:14.910"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:14.916" starttime="20160205 03:45:14.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:45:24.918" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:45:24.919" starttime="20160205 03:45:14.917"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:24.928" starttime="20160205 03:45:24.927"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:45:24.932" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:45:24.932" starttime="20160205 03:45:24.929"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:45:24.942" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:45:24.942" starttime="20160205 03:45:24.932"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:24.948" starttime="20160205 03:45:24.947"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:45:24.949" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:45:24.985" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:24.986" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:45:24.986" starttime="20160205 03:45:24.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:24.988" starttime="20160205 03:45:24.987"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:24.989" starttime="20160205 03:45:24.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:24.991" starttime="20160205 03:45:24.990"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:45:24.993" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:45:25.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:25.064" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:45:25.064" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:45:25.063" starttime="20160205 03:45:24.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.068" starttime="20160205 03:45:25.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.069" starttime="20160205 03:45:25.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.070" starttime="20160205 03:45:25.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.071" starttime="20160205 03:45:25.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.073" starttime="20160205 03:45:25.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.074" starttime="20160205 03:45:25.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.075" starttime="20160205 03:45:25.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.077" starttime="20160205 03:45:25.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.078" starttime="20160205 03:45:25.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.079" starttime="20160205 03:45:25.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.080" starttime="20160205 03:45:25.079"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.081" starttime="20160205 03:45:24.943"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:25.082" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160205 03:45:25.085" starttime="20160205 03:45:25.081"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:45:25.087" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160205 03:45:25.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:25.118" level="INFO">${stdout_string} = [2016-02-05 02:45:14,915][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:25.118" starttime="20160205 03:45:25.086"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:25.120" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160205 03:45:25.192" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:45:25.192" starttime="20160205 03:45:25.119"></status>
</kw>
<msg timestamp="20160205 03:45:25.194" level="INFO">${tailed_text} = [2016-02-05 02:45:14,915][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:25.193" starttime="20160205 03:45:24.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.200" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:45:25.200" starttime="20160205 03:45:25.197"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.200" starttime="20160205 03:45:25.194"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.205" starttime="20160205 03:45:25.204"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.207" starttime="20160205 03:45:25.206"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.208" starttime="20160205 03:45:25.201"></status>
</kw>
<msg timestamp="20160205 03:45:25.210" level="INFO">${tailed_text} = [2016-02-05 02:45:14,915][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=1.0|601|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:25.209" starttime="20160205 03:45:24.920"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.224" starttime="20160205 03:45:25.223"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.295" starttime="20160205 03:45:25.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.297" starttime="20160205 03:45:25.296"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.298" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:45:25.299" level="INFO">${queryResultSetLines} = 1000767|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160205 03:45:25.299" starttime="20160205 03:45:25.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.300" starttime="20160205 03:45:25.299"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.301" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:45:25.302" level="INFO">@{queryResultSet} = [ 1000767|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160205 03:45:25.302" starttime="20160205 03:45:25.301"></status>
</kw>
<msg timestamp="20160205 03:45:25.303" level="INFO">@{queryRows} = [ 1000767|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160205 03:45:25.303" starttime="20160205 03:45:25.220"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.305" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:45:25.305" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:45:25.305" starttime="20160205 03:45:25.304"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.307" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:45:25.307" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:45:25.307" starttime="20160205 03:45:25.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:45:25.311" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:45:25.312" starttime="20160205 03:45:25.310"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.312" starttime="20160205 03:45:25.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.315" starttime="20160205 03:45:25.313"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.315" starttime="20160205 03:45:25.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.326" starttime="20160205 03:45:25.324"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.326" starttime="20160205 03:45:25.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.329" starttime="20160205 03:45:25.327"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.329" starttime="20160205 03:45:25.318"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.330" starttime="20160205 03:45:25.316"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.330" starttime="20160205 03:45:14.350"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:45:25.331" starttime="20160205 03:45:14.345"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.357" starttime="20160205 03:45:25.356"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.404" starttime="20160205 03:45:25.361"></status>
</kw>
<msg timestamp="20160205 03:45:25.405" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:45:25.405" starttime="20160205 03:45:25.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:45:25.409" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:45:25.833" level="INFO">Read output: Last login: Fri Feb  5 02:45:14 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:45:25.834" starttime="20160205 03:45:25.408"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.834" starttime="20160205 03:45:25.406"></status>
</kw>
<msg timestamp="20160205 03:45:25.835" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:45:25.835" starttime="20160205 03:45:25.352"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.841" starttime="20160205 03:45:25.840"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:25.842" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160205 03:45:25.845" starttime="20160205 03:45:25.841"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.846" starttime="20160205 03:45:25.836"></status>
</kw>
<msg timestamp="20160205 03:45:25.847" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160205 03:45:25.846" starttime="20160205 03:45:25.347"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.874" starttime="20160205 03:45:25.856"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.874" starttime="20160205 03:45:25.852"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.879" starttime="20160205 03:45:25.878"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:25.886" starttime="20160205 03:45:25.880"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:25.887" starttime="20160205 03:45:25.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:45:35.889" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:45:35.890" starttime="20160205 03:45:25.887"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:35.899" starttime="20160205 03:45:35.898"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:45:35.902" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:45:35.902" starttime="20160205 03:45:35.900"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:45:35.907" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:45:35.907" starttime="20160205 03:45:35.903"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:35.912" starttime="20160205 03:45:35.911"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:45:35.913" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:45:35.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:35.949" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:45:35.949" starttime="20160205 03:45:35.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:35.951" starttime="20160205 03:45:35.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:35.952" starttime="20160205 03:45:35.951"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:35.954" starttime="20160205 03:45:35.953"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:45:35.956" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:45:36.024" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:36.026" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:45:36.026" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:45:36.025" starttime="20160205 03:45:35.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.030" starttime="20160205 03:45:36.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.031" starttime="20160205 03:45:36.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.032" starttime="20160205 03:45:36.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.033" starttime="20160205 03:45:36.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.034" starttime="20160205 03:45:36.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.036" starttime="20160205 03:45:36.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.037" starttime="20160205 03:45:36.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.038" starttime="20160205 03:45:36.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.040" starttime="20160205 03:45:36.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.041" starttime="20160205 03:45:36.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.042" starttime="20160205 03:45:36.041"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.042" starttime="20160205 03:45:35.908"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:36.044" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160205 03:45:36.047" starttime="20160205 03:45:36.043"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:45:36.048" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160205 03:45:36.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:36.079" level="INFO">${stdout_string} = [2016-02-05 02:45:25,884][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:36.078" starttime="20160205 03:45:36.048"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:36.080" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160205 03:45:36.152" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:45:36.152" starttime="20160205 03:45:36.079"></status>
</kw>
<msg timestamp="20160205 03:45:36.153" level="INFO">${tailed_text} = [2016-02-05 02:45:25,884][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:36.153" starttime="20160205 03:45:35.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.158" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:45:36.159" starttime="20160205 03:45:36.156"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.159" starttime="20160205 03:45:36.154"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.164" starttime="20160205 03:45:36.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.166" starttime="20160205 03:45:36.165"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.168" starttime="20160205 03:45:36.160"></status>
</kw>
<msg timestamp="20160205 03:45:36.169" level="INFO">${tailed_text} = [2016-02-05 02:45:25,884][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160205 03:45:36.169" starttime="20160205 03:45:35.891"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.184" starttime="20160205 03:45:36.183"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.194" starttime="20160205 03:45:36.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.196" starttime="20160205 03:45:36.195"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.197" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:45:36.198" level="INFO">${queryResultSetLines} = 1012177|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160205 03:45:36.198" starttime="20160205 03:45:36.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.199" starttime="20160205 03:45:36.199"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.201" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:45:36.201" level="INFO">@{queryResultSet} = [ 1012177|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160205 03:45:36.201" starttime="20160205 03:45:36.200"></status>
</kw>
<msg timestamp="20160205 03:45:36.202" level="INFO">@{queryRows} = [ 1012177|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160205 03:45:36.202" starttime="20160205 03:45:36.179"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.204" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:45:36.204" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:45:36.204" starttime="20160205 03:45:36.203"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.206" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:45:36.206" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:45:36.206" starttime="20160205 03:45:36.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:45:36.210" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:45:36.211" starttime="20160205 03:45:36.209"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.211" starttime="20160205 03:45:36.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.214" starttime="20160205 03:45:36.212"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.214" starttime="20160205 03:45:36.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.225" starttime="20160205 03:45:36.223"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.225" starttime="20160205 03:45:36.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.228" starttime="20160205 03:45:36.226"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.228" starttime="20160205 03:45:36.218"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.229" starttime="20160205 03:45:36.215"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.229" starttime="20160205 03:45:25.337"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:45:36.230" starttime="20160205 03:45:25.333"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.261" starttime="20160205 03:45:36.260"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.302" starttime="20160205 03:45:36.264"></status>
</kw>
<msg timestamp="20160205 03:45:36.303" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:45:36.303" starttime="20160205 03:45:36.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:45:36.307" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:45:36.704" level="INFO">Read output: Last login: Fri Feb  5 02:45:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:45:36.705" starttime="20160205 03:45:36.306"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.705" starttime="20160205 03:45:36.304"></status>
</kw>
<msg timestamp="20160205 03:45:36.706" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:45:36.706" starttime="20160205 03:45:36.256"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.712" starttime="20160205 03:45:36.711"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:36.713" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160205 03:45:36.716" starttime="20160205 03:45:36.712"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.717" starttime="20160205 03:45:36.707"></status>
</kw>
<msg timestamp="20160205 03:45:36.718" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160205 03:45:36.718" starttime="20160205 03:45:36.250"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.732" starttime="20160205 03:45:36.727"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.733" starttime="20160205 03:45:36.724"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.737" starttime="20160205 03:45:36.736"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:36.745" starttime="20160205 03:45:36.738"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:36.745" starttime="20160205 03:45:36.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:45:46.748" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:45:46.749" starttime="20160205 03:45:36.746"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.760" starttime="20160205 03:45:46.759"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:45:46.763" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:45:46.763" starttime="20160205 03:45:46.760"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:45:46.768" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:45:46.768" starttime="20160205 03:45:46.764"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.773" starttime="20160205 03:45:46.772"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:45:46.774" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:45:46.811" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:46.812" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:45:46.811" starttime="20160205 03:45:46.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.813" starttime="20160205 03:45:46.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.814" starttime="20160205 03:45:46.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.815" starttime="20160205 03:45:46.815"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:45:46.817" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:45:46.890" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:46.891" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:45:46.891" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:45:46.890" starttime="20160205 03:45:46.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.894" starttime="20160205 03:45:46.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.895" starttime="20160205 03:45:46.895"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.897" starttime="20160205 03:45:46.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.898" starttime="20160205 03:45:46.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.899" starttime="20160205 03:45:46.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.901" starttime="20160205 03:45:46.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.902" starttime="20160205 03:45:46.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.904" starttime="20160205 03:45:46.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.905" starttime="20160205 03:45:46.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.907" starttime="20160205 03:45:46.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:46.908" starttime="20160205 03:45:46.907"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:46.908" starttime="20160205 03:45:46.769"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:46.910" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160205 03:45:46.913" starttime="20160205 03:45:46.909"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:45:46.914" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160205 03:45:46.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:46.946" level="INFO">${stdout_string} = [2016-02-05 02:45:36,777][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160205 03:45:46.946" starttime="20160205 03:45:46.913"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:46.947" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160205 03:45:47.021" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:45:47.021" starttime="20160205 03:45:46.946"></status>
</kw>
<msg timestamp="20160205 03:45:47.023" level="INFO">${tailed_text} = [2016-02-05 02:45:36,777][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160205 03:45:47.022" starttime="20160205 03:45:46.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.029" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:45:47.029" starttime="20160205 03:45:47.027"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.030" starttime="20160205 03:45:47.023"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.035" starttime="20160205 03:45:47.034"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.037" starttime="20160205 03:45:47.036"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.043" starttime="20160205 03:45:47.030"></status>
</kw>
<msg timestamp="20160205 03:45:47.044" level="INFO">${tailed_text} = [2016-02-05 02:45:36,777][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160205 03:45:47.044" starttime="20160205 03:45:46.751"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.060" starttime="20160205 03:45:47.059"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.065" starttime="20160205 03:45:47.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.066" starttime="20160205 03:45:47.066"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.068" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:45:47.069" level="INFO">${queryResultSetLines} = 1000856|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160205 03:45:47.069" starttime="20160205 03:45:47.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.070" starttime="20160205 03:45:47.069"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.071" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:45:47.072" level="INFO">@{queryResultSet} = [ 1000856|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160205 03:45:47.072" starttime="20160205 03:45:47.071"></status>
</kw>
<msg timestamp="20160205 03:45:47.073" level="INFO">@{queryRows} = [ 1000856|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160205 03:45:47.073" starttime="20160205 03:45:47.055"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.075" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:45:47.075" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:45:47.075" starttime="20160205 03:45:47.074"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.077" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:45:47.077" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:45:47.077" starttime="20160205 03:45:47.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:45:47.082" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:45:47.082" starttime="20160205 03:45:47.081"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.082" starttime="20160205 03:45:47.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.085" starttime="20160205 03:45:47.083"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.086" starttime="20160205 03:45:47.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.096" starttime="20160205 03:45:47.095"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.096" starttime="20160205 03:45:47.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.099" starttime="20160205 03:45:47.097"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.100" starttime="20160205 03:45:47.089"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.100" starttime="20160205 03:45:47.086"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.101" starttime="20160205 03:45:36.241"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:45:47.101" starttime="20160205 03:45:36.237"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.128" starttime="20160205 03:45:47.127"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.177" starttime="20160205 03:45:47.131"></status>
</kw>
<msg timestamp="20160205 03:45:47.178" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:45:47.178" starttime="20160205 03:45:47.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:45:47.182" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:45:47.640" level="INFO">Read output: Last login: Fri Feb  5 02:45:36 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:45:47.641" starttime="20160205 03:45:47.181"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.641" starttime="20160205 03:45:47.179"></status>
</kw>
<msg timestamp="20160205 03:45:47.643" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:45:47.642" starttime="20160205 03:45:47.122"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.649" starttime="20160205 03:45:47.648"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:47.651" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160205 03:45:47.654" starttime="20160205 03:45:47.650"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.655" starttime="20160205 03:45:47.644"></status>
</kw>
<msg timestamp="20160205 03:45:47.656" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160205 03:45:47.655" starttime="20160205 03:45:47.117"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.670" starttime="20160205 03:45:47.665"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.670" starttime="20160205 03:45:47.662"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.675" starttime="20160205 03:45:47.674"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:47.682" starttime="20160205 03:45:47.675"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:47.682" starttime="20160205 03:45:47.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:45:57.685" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:45:57.686" starttime="20160205 03:45:47.683"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.695" starttime="20160205 03:45:57.694"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:45:57.699" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:45:57.699" starttime="20160205 03:45:57.696"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:45:57.703" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:45:57.703" starttime="20160205 03:45:57.699"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.708" starttime="20160205 03:45:57.707"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:45:57.709" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:45:57.746" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:57.747" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:45:57.746" starttime="20160205 03:45:57.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.748" starttime="20160205 03:45:57.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.749" starttime="20160205 03:45:57.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.750" starttime="20160205 03:45:57.750"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:45:57.752" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:45:57.826" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:57.826" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:45:57.827" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:45:57.826" starttime="20160205 03:45:57.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.830" starttime="20160205 03:45:57.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.831" starttime="20160205 03:45:57.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.832" starttime="20160205 03:45:57.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.833" starttime="20160205 03:45:57.832"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.834" starttime="20160205 03:45:57.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.836" starttime="20160205 03:45:57.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.837" starttime="20160205 03:45:57.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.838" starttime="20160205 03:45:57.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.839" starttime="20160205 03:45:57.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.840" starttime="20160205 03:45:57.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:57.842" starttime="20160205 03:45:57.841"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:57.842" starttime="20160205 03:45:57.704"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:57.844" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160205 03:45:57.846" starttime="20160205 03:45:57.843"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:45:57.847" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160205 03:45:57.879" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:45:57.879" level="INFO">${stdout_string} = [2016-02-05 02:45:47,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|160|...</msg>
<status status="PASS" endtime="20160205 03:45:57.879" starttime="20160205 03:45:57.847"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:57.881" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160205 03:45:58.242" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:45:58.244" starttime="20160205 03:45:57.880"></status>
</kw>
<msg timestamp="20160205 03:45:58.249" level="INFO">${tailed_text} = [2016-02-05 02:45:47,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|160|...</msg>
<status status="PASS" endtime="20160205 03:45:58.247" starttime="20160205 03:45:57.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.256" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:45:58.257" starttime="20160205 03:45:58.255"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.257" starttime="20160205 03:45:58.250"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.262" starttime="20160205 03:45:58.261"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.264" starttime="20160205 03:45:58.263"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.265" starttime="20160205 03:45:58.258"></status>
</kw>
<msg timestamp="20160205 03:45:58.266" level="INFO">${tailed_text} = [2016-02-05 02:45:47,707][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|160|...</msg>
<status status="PASS" endtime="20160205 03:45:58.266" starttime="20160205 03:45:57.687"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.281" starttime="20160205 03:45:58.280"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.285" starttime="20160205 03:45:58.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.286" starttime="20160205 03:45:58.286"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.288" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:45:58.289" level="INFO">${queryResultSetLines} = 1000708|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160205 03:45:58.288" starttime="20160205 03:45:58.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.290" starttime="20160205 03:45:58.289"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.291" level="INFO">1 lines returned</msg>
<msg timestamp="20160205 03:45:58.292" level="INFO">@{queryResultSet} = [ 1000708|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160205 03:45:58.292" starttime="20160205 03:45:58.291"></status>
</kw>
<msg timestamp="20160205 03:45:58.293" level="INFO">@{queryRows} = [ 1000708|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160205 03:45:58.293" starttime="20160205 03:45:58.277"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.295" level="INFO">Length is 1</msg>
<msg timestamp="20160205 03:45:58.295" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160205 03:45:58.295" starttime="20160205 03:45:58.293"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.296" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:45:58.297" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160205 03:45:58.297" starttime="20160205 03:45:58.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:45:58.301" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:45:58.302" starttime="20160205 03:45:58.300"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.302" starttime="20160205 03:45:58.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.305" starttime="20160205 03:45:58.303"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.305" starttime="20160205 03:45:58.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.316" starttime="20160205 03:45:58.314"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.316" starttime="20160205 03:45:58.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.319" starttime="20160205 03:45:58.317"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.319" starttime="20160205 03:45:58.308"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.320" starttime="20160205 03:45:58.306"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.320" starttime="20160205 03:45:47.107"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:45:58.321" starttime="20160205 03:45:47.103"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:45:58.332" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:45:58.358" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:45:58.358" starttime="20160205 03:45:58.331"></status>
</kw>
<status status="FAIL" endtime="20160205 03:45:58.359" starttime="20160205 03:45:58.328"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:45:58.360" starttime="20160205 03:45:58.323">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:45:58.372" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:45:58.373" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:45:58.374" starttime="20160205 03:45:58.371"></status>
</kw>
<status status="FAIL" endtime="20160205 03:45:58.374" starttime="20160205 03:45:58.367"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:45:58.375" starttime="20160205 03:45:58.362">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160205 03:45:58.395" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160205 03:45:58.397" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160205 03:45:58.398" starttime="20160205 03:45:58.393"></status>
</kw>
<status status="FAIL" endtime="20160205 03:45:58.398" starttime="20160205 03:45:58.386"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160205 03:45:58.400" starttime="20160205 03:45:58.377">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.457" starttime="20160205 03:45:58.455"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.518" starttime="20160205 03:45:58.464"></status>
</kw>
<msg timestamp="20160205 03:45:58.520" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:45:58.519" starttime="20160205 03:45:58.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160205 03:45:58.530" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160205 03:45:58.978" level="INFO">Read output: Last login: Fri Feb  5 02:45:47 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160205 03:45:58.979" starttime="20160205 03:45:58.528"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:58.980" starttime="20160205 03:45:58.521"></status>
</kw>
<msg timestamp="20160205 03:45:58.982" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:45:58.982" starttime="20160205 03:45:58.445"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:58.994" starttime="20160205 03:45:58.992"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:45:58.997" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160205 03:45:59.001" starttime="20160205 03:45:58.995"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:59.003" starttime="20160205 03:45:58.984"></status>
</kw>
<msg timestamp="20160205 03:45:59.004" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160205 03:45:59.004" starttime="20160205 03:45:58.434"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:59.016" starttime="20160205 03:45:59.013"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:59.017" starttime="20160205 03:45:59.010"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:59.022" starttime="20160205 03:45:59.021"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:45:59.030" starttime="20160205 03:45:59.023"></status>
</kw>
<status status="PASS" endtime="20160205 03:45:59.030" starttime="20160205 03:45:59.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.033" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160205 03:46:09.033" starttime="20160205 03:45:59.031"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.043" starttime="20160205 03:46:09.042"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160205 03:46:09.046" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160205 03:46:09.046" starttime="20160205 03:46:09.044"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.051" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160205 03:46:09.052" starttime="20160205 03:46:09.047"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.056" starttime="20160205 03:46:09.055"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160205 03:46:09.058" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160205 03:46:09.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:46:09.096" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160205 03:46:09.096" starttime="20160205 03:46:09.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.098" starttime="20160205 03:46:09.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.099" starttime="20160205 03:46:09.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.100" starttime="20160205 03:46:09.099"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160205 03:46:09.102" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160205 03:46:09.173" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:46:09.173" level="INFO">${stderr} = </msg>
<msg timestamp="20160205 03:46:09.174" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160205 03:46:09.173" starttime="20160205 03:46:09.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.177" starttime="20160205 03:46:09.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.178" starttime="20160205 03:46:09.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.179" starttime="20160205 03:46:09.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.180" starttime="20160205 03:46:09.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.181" starttime="20160205 03:46:09.181"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.182" starttime="20160205 03:46:09.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.184" starttime="20160205 03:46:09.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.185" starttime="20160205 03:46:09.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.186" starttime="20160205 03:46:09.185"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.187" starttime="20160205 03:46:09.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.188" starttime="20160205 03:46:09.187"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.189" starttime="20160205 03:46:09.052"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:46:09.190" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160205 03:46:09.193" starttime="20160205 03:46:09.189"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:46:09.194" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160205 03:46:09.226" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160205 03:46:09.226" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160205 03:46:09.226" starttime="20160205 03:46:09.194"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160205 03:46:09.228" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160205 03:46:09.300" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160205 03:46:09.300" starttime="20160205 03:46:09.227"></status>
</kw>
<msg timestamp="20160205 03:46:09.301" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160205 03:46:09.301" starttime="20160205 03:46:09.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.306" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160205 03:46:09.306" starttime="20160205 03:46:09.304"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.307" starttime="20160205 03:46:09.302"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.311" starttime="20160205 03:46:09.310"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.313" starttime="20160205 03:46:09.312"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.314" starttime="20160205 03:46:09.307"></status>
</kw>
<msg timestamp="20160205 03:46:09.315" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160205 03:46:09.315" starttime="20160205 03:46:09.035"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.330" starttime="20160205 03:46:09.329"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.334" starttime="20160205 03:46:09.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.335" starttime="20160205 03:46:09.334"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.336" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160205 03:46:09.337" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160205 03:46:09.337" starttime="20160205 03:46:09.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.338" starttime="20160205 03:46:09.338"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.340" level="INFO">0 lines returned</msg>
<msg timestamp="20160205 03:46:09.340" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160205 03:46:09.340" starttime="20160205 03:46:09.339"></status>
</kw>
<msg timestamp="20160205 03:46:09.341" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160205 03:46:09.341" starttime="20160205 03:46:09.325"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.343" level="INFO">Length is 0</msg>
<msg timestamp="20160205 03:46:09.343" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160205 03:46:09.343" starttime="20160205 03:46:09.341"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160205 03:46:09.344" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160205 03:46:09.345" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160205 03:46:09.345" starttime="20160205 03:46:09.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.348" starttime="20160205 03:46:09.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160205 03:46:09.352" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160205 03:46:09.353" starttime="20160205 03:46:09.351"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.353" starttime="20160205 03:46:09.349"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.354" starttime="20160205 03:46:09.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.371" starttime="20160205 03:46:09.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.376" starttime="20160205 03:46:09.374"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.376" starttime="20160205 03:46:09.372"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.377" starttime="20160205 03:46:09.357"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.377" starttime="20160205 03:46:09.354"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.378" starttime="20160205 03:45:58.413"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160205 03:46:09.379" starttime="20160205 03:45:58.404"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160205 03:46:09.410" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160205 03:46:09.410" starttime="20160205 03:46:09.409"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160205 03:46:09.412" starttime="20160205 03:46:09.411"></status>
</kw>
<status status="PASS" endtime="20160205 03:46:09.412" starttime="20160205 03:46:09.406"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:46:09.412" starttime="20160205 03:43:11.968"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:46:09.477" starttime="20160205 03:43:11.954"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:46:09.540" starttime="20160205 03:43:11.937"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160205 03:46:09.641" starttime="20160205 03:37:51.431"></status>
</suite>
<statistics>
<total>
<stat pass="32" fail="0">Critical Tests</stat>
<stat pass="32" fail="3">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="12" info="" doc="" combined="" fail="0" links="">calls</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="32" info="" doc="" combined="" fail="3" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">MOC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="24" info="" doc="" combined="" fail="3" links="">MTEL_supported</stat>
<stat pass="22" info="" doc="" combined="" fail="3" links="">MVNA_MEX_supported</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">TNZ_specific</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">TNZ_supported</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="14" info="" doc="" combined="" fail="3" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="32" id="s1" fail="3" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="12" id="s1-s1" fail="0" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="12" id="s1-s1-s1" fail="0" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="1" id="s1-s1-s1-s1" fail="0" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="1" id="s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s1-s1-s2" fail="0" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="7" id="s1-s1-s1-s2-s1" fail="0" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3" fail="0" name="MOC PREPAID ONNET-LongDuration136s">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s.MOC PREPAID ONNET-LongDuration136s-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5" fail="0" name="MOC PREPAID ONNET-NoCredit">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5-s1" fail="0" name="MOC PREPAID ONNET-NoCredit-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit.MOC PREPAID ONNET-NoCredit-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7" fail="0" name="MOC PREPAID ONNET-ToUnknown">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7-s1" fail="0" name="MOC PREPAID ONNET-ToUnknown-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown.MOC PREPAID ONNET-ToUnknown-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s3" fail="0" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="1" id="s1-s1-s1-s3-s1" fail="0" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s2" fail="0" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s1-s1-s3-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s3-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s3-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="7" id="s1-s2-s1" fail="0" name="TNZ">Robot Testsuites.Ussd.TNZ</stat>
<stat pass="7" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.TNZ.Ussd-Robot-Suite</stat>
<stat pass="13" id="s1-s3" fail="3" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="13" id="s1-s3-s1" fail="3" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="13" id="s1-s3-s1-s1" fail="3" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
