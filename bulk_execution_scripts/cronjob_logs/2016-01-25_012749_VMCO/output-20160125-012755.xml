<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160125 01:28:44.018">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s1" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s1-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s1-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s1-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:28:45.290" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:28:45.302" level="INFO">${date} = Mon Jan 25 01:28:45 CET 2016</msg>
<status status="PASS" endtime="20160125 01:28:45.299" starttime="20160125 01:28:45.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:45.311" level="INFO">Date and time: Mon Jan 25 01:28:45 CET 2016</msg>
<status status="PASS" endtime="20160125 01:28:45.314" starttime="20160125 01:28:45.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:45.322" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:28:45.325" starttime="20160125 01:28:45.317"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:45.458" starttime="20160125 01:28:45.454"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:45.623" starttime="20160125 01:28:45.477"></status>
</kw>
<msg timestamp="20160125 01:28:45.625" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160125 01:28:45.624" starttime="20160125 01:28:45.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:28:45.634" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:28:46.135" level="INFO">Read output: Last login: Sun Jan 24 02:48:41 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:28:46.137" starttime="20160125 01:28:45.632"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:46.138" starttime="20160125 01:28:45.626"></status>
</kw>
<msg timestamp="20160125 01:28:46.141" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160125 01:28:46.140" starttime="20160125 01:28:45.428"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:28:46.148" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:28:46.147" starttime="20160125 01:28:46.143"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:28:46.151" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:28:46.532" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:28:46.534" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:28:46.533" starttime="20160125 01:28:46.149"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.541" starttime="20160125 01:28:46.538"></status>
</kw>
<msg timestamp="20160125 01:28:46.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:28:46.543" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:28:46.541" starttime="20160125 01:28:46.535"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.551" starttime="20160125 01:28:46.549"></status>
</kw>
<msg timestamp="20160125 01:28:46.552" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:46.551" starttime="20160125 01:28:46.544"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:28:46.556" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:28:46.556" starttime="20160125 01:28:46.553"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:28:46.560" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:28:46.559" starttime="20160125 01:28:46.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.563" starttime="20160125 01:28:46.561"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.574" starttime="20160125 01:28:46.571"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.580" starttime="20160125 01:28:46.575"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:46.581" starttime="20160125 01:28:46.564"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.588" starttime="20160125 01:28:46.586"></status>
</kw>
<msg timestamp="20160125 01:28:46.589" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:28:46.589" starttime="20160125 01:28:46.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.592" starttime="20160125 01:28:46.590"></status>
</kw>
<msg timestamp="20160125 01:28:46.595" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:28:46.596" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:28:46.594" starttime="20160125 01:28:45.364"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.641" starttime="20160125 01:28:46.639"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:46.706" starttime="20160125 01:28:46.647"></status>
</kw>
<msg timestamp="20160125 01:28:46.710" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160125 01:28:46.708" starttime="20160125 01:28:46.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:28:46.729" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:28:47.241" level="INFO">Read output: Last login: Sun Jan 24 02:50:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:28:47.243" starttime="20160125 01:28:46.724"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:47.244" starttime="20160125 01:28:46.712"></status>
</kw>
<msg timestamp="20160125 01:28:47.247" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160125 01:28:47.246" starttime="20160125 01:28:46.630"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:28:47.253" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:28:47.252" starttime="20160125 01:28:47.248"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:28:47.256" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:28:47.638" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:28:47.639" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:28:47.639" starttime="20160125 01:28:47.254"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.645" starttime="20160125 01:28:47.642"></status>
</kw>
<msg timestamp="20160125 01:28:47.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:28:47.647" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:28:47.646" starttime="20160125 01:28:47.640"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.654" starttime="20160125 01:28:47.652"></status>
</kw>
<msg timestamp="20160125 01:28:47.655" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:47.655" starttime="20160125 01:28:47.648"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:28:47.658" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:28:47.658" starttime="20160125 01:28:47.656"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:28:47.662" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:28:47.661" starttime="20160125 01:28:47.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.664" starttime="20160125 01:28:47.663"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.674" starttime="20160125 01:28:47.672"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.677" starttime="20160125 01:28:47.675"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:47.680" starttime="20160125 01:28:47.665"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.687" starttime="20160125 01:28:47.685"></status>
</kw>
<msg timestamp="20160125 01:28:47.688" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:28:47.688" starttime="20160125 01:28:47.681"></status>
</kw>
<msg timestamp="20160125 01:28:47.691" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:28:47.692" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:28:47.690" starttime="20160125 01:28:46.609"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.734" starttime="20160125 01:28:47.732"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:47.795" starttime="20160125 01:28:47.739"></status>
</kw>
<msg timestamp="20160125 01:28:47.798" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160125 01:28:47.797" starttime="20160125 01:28:47.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:28:47.816" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:28:48.299" level="INFO">Read output: Last login: Sun Jan 24 02:48:43 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:28:48.301" starttime="20160125 01:28:47.812"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:48.304" starttime="20160125 01:28:47.800"></status>
</kw>
<msg timestamp="20160125 01:28:48.309" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160125 01:28:48.307" starttime="20160125 01:28:47.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:28:48.321" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:28:48.320" starttime="20160125 01:28:48.312"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:28:48.328" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:28:48.506" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:28:48.509" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:28:48.508" starttime="20160125 01:28:48.324"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.521" starttime="20160125 01:28:48.516"></status>
</kw>
<msg timestamp="20160125 01:28:48.525" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:28:48.526" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:28:48.523" starttime="20160125 01:28:48.512"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.541" starttime="20160125 01:28:48.538"></status>
</kw>
<msg timestamp="20160125 01:28:48.543" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:48.542" starttime="20160125 01:28:48.528"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:28:48.551" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:28:48.550" starttime="20160125 01:28:48.546"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:28:48.558" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:28:48.557" starttime="20160125 01:28:48.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.563" starttime="20160125 01:28:48.560"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.583" starttime="20160125 01:28:48.579"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.590" starttime="20160125 01:28:48.585"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:48.594" starttime="20160125 01:28:48.565"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.608" starttime="20160125 01:28:48.604"></status>
</kw>
<msg timestamp="20160125 01:28:48.610" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:28:48.609" starttime="20160125 01:28:48.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.616" starttime="20160125 01:28:48.613"></status>
</kw>
<msg timestamp="20160125 01:28:48.621" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:28:48.622" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:28:48.619" starttime="20160125 01:28:47.704"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.712" starttime="20160125 01:28:48.709"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:48.762" starttime="20160125 01:28:48.722"></status>
</kw>
<msg timestamp="20160125 01:28:48.764" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160125 01:28:48.763" starttime="20160125 01:28:48.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:28:48.772" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:28:49.270" level="INFO">Read output: Last login: Sun Jan 24 02:48:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:28:49.272" starttime="20160125 01:28:48.770"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.273" starttime="20160125 01:28:48.765"></status>
</kw>
<msg timestamp="20160125 01:28:49.275" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160125 01:28:49.274" starttime="20160125 01:28:48.691"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:28:49.281" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:28:49.281" starttime="20160125 01:28:49.276"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:28:49.284" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:28:49.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:28:49.392" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:28:49.391" starttime="20160125 01:28:49.282"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.398" starttime="20160125 01:28:49.395"></status>
</kw>
<msg timestamp="20160125 01:28:49.399" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:28:49.399" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:28:49.398" starttime="20160125 01:28:49.393"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.406" starttime="20160125 01:28:49.405"></status>
</kw>
<msg timestamp="20160125 01:28:49.407" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:49.407" starttime="20160125 01:28:49.400"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:28:49.410" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:28:49.410" starttime="20160125 01:28:49.408"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:28:49.413" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:28:49.413" starttime="20160125 01:28:49.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.416" starttime="20160125 01:28:49.414"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.425" starttime="20160125 01:28:49.423"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.430" starttime="20160125 01:28:49.426"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.431" starttime="20160125 01:28:49.417"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.437" starttime="20160125 01:28:49.436"></status>
</kw>
<msg timestamp="20160125 01:28:49.439" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:28:49.438" starttime="20160125 01:28:49.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.441" starttime="20160125 01:28:49.439"></status>
</kw>
<msg timestamp="20160125 01:28:49.443" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:28:49.444" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:28:49.442" starttime="20160125 01:28:48.649"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:49.447" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:28:49.447" starttime="20160125 01:28:49.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:49.450" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:28:49.451" starttime="20160125 01:28:49.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:49.454" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:28:49.454" starttime="20160125 01:28:49.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:49.457" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:28:49.458" starttime="20160125 01:28:49.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:28:49.461" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:28:49.461" starttime="20160125 01:28:49.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:28:49.464" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:28:49.464" starttime="20160125 01:28:49.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:28:49.467" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:28:49.468" starttime="20160125 01:28:49.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:28:49.471" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:28:49.471" starttime="20160125 01:28:49.469"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.480" starttime="20160125 01:28:49.476"></status>
</kw>
<msg timestamp="20160125 01:28:49.482" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:28:49.482" starttime="20160125 01:28:49.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.485" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:28:49.486" starttime="20160125 01:28:49.483"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.487" starttime="20160125 01:28:45.174"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s1-s1-t1" name="Run MOC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.498" starttime="20160125 01:28:49.496"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:28:49.500" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:28:49.500" starttime="20160125 01:28:49.499"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.513" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:28:49.514" starttime="20160125 01:28:49.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.516" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:28:49.517" starttime="20160125 01:28:49.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.519" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:28:49.520" starttime="20160125 01:28:49.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.522" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160125 01:28:49.523" starttime="20160125 01:28:49.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.525" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:28:49.526" starttime="20160125 01:28:49.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.528" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:28:49.529" starttime="20160125 01:28:49.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.531" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:28:49.532" starttime="20160125 01:28:49.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.534" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:28:49.535" starttime="20160125 01:28:49.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.537" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:28:49.537" starttime="20160125 01:28:49.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.540" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:28:49.540" starttime="20160125 01:28:49.538"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.551" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:49.552" starttime="20160125 01:28:49.549"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.553" starttime="20160125 01:28:49.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.557" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:49.558" starttime="20160125 01:28:49.555"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.559" starttime="20160125 01:28:49.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.563" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:49.564" starttime="20160125 01:28:49.561"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.564" starttime="20160125 01:28:49.560"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:49.565" starttime="20160125 01:28:49.542"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:28:49.569" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:28:49.569" starttime="20160125 01:28:49.566"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.572" starttime="20160125 01:28:49.570"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.575" starttime="20160125 01:28:49.573"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.577" starttime="20160125 01:28:49.575"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.579" starttime="20160125 01:28:49.578"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.583" starttime="20160125 01:28:49.580"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.585" starttime="20160125 01:28:49.584"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.588" starttime="20160125 01:28:49.586"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.591" starttime="20160125 01:28:49.589"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.593" starttime="20160125 01:28:49.592"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.596" starttime="20160125 01:28:49.594"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.599" starttime="20160125 01:28:49.597"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:49.601" starttime="20160125 01:28:49.600"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:28:49.605" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:28:55.648" level="INFO">01:28:49,778 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/ext] for external libraries
01:28:49,779 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
01:28:51,455 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
01:28:51,472 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.170.125]
01:28:51,472 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [1]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [732123710001000]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [573190001000]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
01:28:51,473 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
01:28:51,474 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101002]
01:28:51,474 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
01:28:51,474 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
01:28:51,474 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
01:28:51,483 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
01:28:51,489 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
01:28:51,914 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:28:51,976 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:28:52,172 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:52,172 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:28:52,219 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:52,226 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:52,377 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:52,377 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:52,377 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:52,377 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:28:52,442 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:28:52,737 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:28:52,768 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:28:52,770 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:28:52,771 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:52,771 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:28:53,529 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:53,529 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:53,537 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:53,537 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:53,540 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:53,540 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:28:53,614 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:28:53,620 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:28:53,671 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:28:53,675 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:28:53,677 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:53,677 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:28:53,694 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:53,694 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:53,700 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:53,701 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:53,701 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:53,701 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:28:53,772 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:28:53,783 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:28:53,836 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:28:53,840 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:28:53,841 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:53,841 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:28:54,308 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:54,308 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:54,315 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:54,315 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:54,315 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:54,315 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:28:54,385 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:28:54,391 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:28:54,433 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:28:54,436 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:28:54,438 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:54,438 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:28:54,868 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:54,868 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:54,882 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:54,882 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:54,882 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:54,882 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:28:54,949 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:28:54,970 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:28:55,016 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:28:55,020 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:28:55,022 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:28:55,022 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:28:55,435 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:28:55,435 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:28:55,447 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:28:55,447 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:28:55,448 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:28:55,448 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:28:55,517 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:28:55,527 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:28:55,571 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:28:55,612 INFO  [SoapUITestCaseRunner] running step [finish_successful]
01:28:55,644 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
01:28:55,645 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 4123ms, status: FINISHED
01:28:55,645 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 4123ms</msg>
<status status="PASS" endtime="20160125 01:28:55.652" starttime="20160125 01:28:49.604"></status>
</kw>
<msg timestamp="20160125 01:28:55.655" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:28:55.656" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:28:55.653" starttime="20160125 01:28:49.602"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:28:55.669" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:28:55.668" starttime="20160125 01:28:55.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:28:55.672" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:28:55.672" starttime="20160125 01:28:55.670"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:28:55.675" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:28:55.675" starttime="20160125 01:28:55.673"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:28:55.681" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:28:55.685" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:28:55.686" starttime="20160125 01:28:55.679"></status>
</kw>
<msg timestamp="20160125 01:28:55.687" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:28:55.688" level="INFO">${return_log_entry} = 2016-01-25 01:28:55,644 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:28:55.687" starttime="20160125 01:28:55.677"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.696" starttime="20160125 01:28:55.695"></status>
</kw>
<msg timestamp="20160125 01:28:55.697" level="INFO">${return_log_entry} = 2016-01-25 01:28:55,644 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:28:55.697" starttime="20160125 01:28:55.689"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.704" starttime="20160125 01:28:55.703"></status>
</kw>
<msg timestamp="20160125 01:28:55.705" level="INFO">${return_log_entry} = 2016-01-25 01:28:55,644 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:28:55.705" starttime="20160125 01:28:55.698"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.713" starttime="20160125 01:28:55.711"></status>
</kw>
<msg timestamp="20160125 01:28:55.714" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:55.713" starttime="20160125 01:28:55.706"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.723" starttime="20160125 01:28:55.722"></status>
</kw>
<msg timestamp="20160125 01:28:55.725" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:55.724" starttime="20160125 01:28:55.715"></status>
</kw>
<msg timestamp="20160125 01:28:55.726" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:28:55.726" starttime="20160125 01:28:55.658"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.735" starttime="20160125 01:28:55.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.737" starttime="20160125 01:28:55.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.739" starttime="20160125 01:28:55.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:28:55.751" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:28:55.751" starttime="20160125 01:28:55.746"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:55.752" starttime="20160125 01:28:55.744"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:55.753" starttime="20160125 01:28:55.740"></status>
</kw>
<status status="PASS" endtime="20160125 01:28:55.754" starttime="20160125 01:28:55.727"></status>
</kw>
<msg timestamp="20160125 01:28:55.756" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:28:55.755" starttime="20160125 01:28:49.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:28:55.758" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:28:55.759" starttime="20160125 01:28:55.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:55.761" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:28:55.762" starttime="20160125 01:28:55.760"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.764" starttime="20160125 01:28:55.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:28:55.766" level="INFO">Running the MOC abandon call...</msg>
<status status="PASS" endtime="20160125 01:28:55.766" starttime="20160125 01:28:55.764"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Abandon">
<doc>Runs an abandoned MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-abandon</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:28:55.791" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:28:55.791" starttime="20160125 01:28:55.789"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:28:55.794" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:28:55.794" starttime="20160125 01:28:55.792"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:28:55.797" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:28:55.796" starttime="20160125 01:28:55.795"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:28:55.800" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs</msg>
<status status="PASS" endtime="20160125 01:28:55.799" starttime="20160125 01:28:55.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.802" starttime="20160125 01:28:55.801"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:28:55.806" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:55.807" starttime="20160125 01:28:55.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.809" starttime="20160125 01:28:55.808"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:28:55.813" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:55.813" starttime="20160125 01:28:55.810"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:28:55.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:55.818" starttime="20160125 01:28:55.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.820" starttime="20160125 01:28:55.818"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:28:55.823" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:55.823" starttime="20160125 01:28:55.820"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:28:55.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:28:55.828" starttime="20160125 01:28:55.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:28:55.830" starttime="20160125 01:28:55.829"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:28:55.841" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:18.839" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:18.835" starttime="20160125 01:28:55.831"></status>
</kw>
<msg timestamp="20160125 01:29:18.847" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:18.845" starttime="20160125 01:28:55.780"></status>
</kw>
<msg timestamp="20160125 01:29:18.850" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:18.849" starttime="20160125 01:28:55.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:18.855" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:29:18.857" starttime="20160125 01:29:18.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:29:18.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:18.865" starttime="20160125 01:29:18.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.869" starttime="20160125 01:29:18.866"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:18.908" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:18.910" starttime="20160125 01:29:18.904"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:18.911" starttime="20160125 01:29:18.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:18.920" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:18.922" starttime="20160125 01:29:18.916"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:18.923" starttime="20160125 01:29:18.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:18.932" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:18.934" starttime="20160125 01:29:18.928"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:18.935" starttime="20160125 01:29:18.925"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:18.937" starttime="20160125 01:29:18.890"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:18.943" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:18.944" starttime="20160125 01:29:18.938"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.949" starttime="20160125 01:29:18.946"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.955" starttime="20160125 01:29:18.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.960" starttime="20160125 01:29:18.957"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.965" starttime="20160125 01:29:18.962"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.970" starttime="20160125 01:29:18.967"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:18.975" starttime="20160125 01:29:18.971"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:18.981" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000']</msg>
<msg timestamp="20160125 01:29:19.295" level="INFO">01:29:19,290 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490243
01:29:19,292 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000
01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:29:19,294 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:29:19,294 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:29:19.296" starttime="20160125 01:29:18.979"></status>
</kw>
<msg timestamp="20160125 01:29:19.298" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.299" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:19.297" starttime="20160125 01:29:18.976"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.308" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:19.307" starttime="20160125 01:29:19.305"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.311" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.310" starttime="20160125 01:29:19.309"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.313" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.313" starttime="20160125 01:29:19.311"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.318" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.321" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.321" starttime="20160125 01:29:19.316"></status>
</kw>
<msg timestamp="20160125 01:29:19.323" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.323" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,290 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:19.322" starttime="20160125 01:29:19.314"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.330" starttime="20160125 01:29:19.328"></status>
</kw>
<msg timestamp="20160125 01:29:19.331" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,290 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:19.330" starttime="20160125 01:29:19.324"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.337" starttime="20160125 01:29:19.336"></status>
</kw>
<msg timestamp="20160125 01:29:19.339" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,290 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:19.338" starttime="20160125 01:29:19.332"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.346" starttime="20160125 01:29:19.344"></status>
</kw>
<msg timestamp="20160125 01:29:19.347" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:19.347" starttime="20160125 01:29:19.339"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.356" starttime="20160125 01:29:19.355"></status>
</kw>
<msg timestamp="20160125 01:29:19.357" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:19.357" starttime="20160125 01:29:19.348"></status>
</kw>
<msg timestamp="20160125 01:29:19.359" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:19.358" starttime="20160125 01:29:19.300"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.368" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:29:19.367" starttime="20160125 01:29:19.365"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.370" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.370" starttime="20160125 01:29:19.368"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.373" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.372" starttime="20160125 01:29:19.371"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.377" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.381" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.381" starttime="20160125 01:29:19.375"></status>
</kw>
<msg timestamp="20160125 01:29:19.382" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.383" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:19.382" starttime="20160125 01:29:19.374"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.389" starttime="20160125 01:29:19.388"></status>
</kw>
<msg timestamp="20160125 01:29:19.390" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:19.390" starttime="20160125 01:29:19.383"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.397" starttime="20160125 01:29:19.395"></status>
</kw>
<msg timestamp="20160125 01:29:19.398" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:19.397" starttime="20160125 01:29:19.391"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.405" starttime="20160125 01:29:19.403"></status>
</kw>
<msg timestamp="20160125 01:29:19.406" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:19.405" starttime="20160125 01:29:19.399"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.415" starttime="20160125 01:29:19.413"></status>
</kw>
<msg timestamp="20160125 01:29:19.416" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:19.416" starttime="20160125 01:29:19.407"></status>
</kw>
<msg timestamp="20160125 01:29:19.417" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:19.417" starttime="20160125 01:29:19.360"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.426" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:29:19.426" starttime="20160125 01:29:19.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.429" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.428" starttime="20160125 01:29:19.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.432" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.431" starttime="20160125 01:29:19.430"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.436" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.439" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.440" starttime="20160125 01:29:19.434"></status>
</kw>
<msg timestamp="20160125 01:29:19.441" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.441" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,292 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.440" starttime="20160125 01:29:19.432"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.447" starttime="20160125 01:29:19.446"></status>
</kw>
<msg timestamp="20160125 01:29:19.448" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,292 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.448" starttime="20160125 01:29:19.442"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.455" starttime="20160125 01:29:19.453"></status>
</kw>
<msg timestamp="20160125 01:29:19.456" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,292 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.456" starttime="20160125 01:29:19.449"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.463" starttime="20160125 01:29:19.461"></status>
</kw>
<msg timestamp="20160125 01:29:19.464" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.464" starttime="20160125 01:29:19.457"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.473" starttime="20160125 01:29:19.472"></status>
</kw>
<msg timestamp="20160125 01:29:19.474" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.474" starttime="20160125 01:29:19.465"></status>
</kw>
<msg timestamp="20160125 01:29:19.476" level="INFO">${imsi} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:19.476" starttime="20160125 01:29:19.419"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.485" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:29:19.484" starttime="20160125 01:29:19.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.488" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.487" starttime="20160125 01:29:19.486"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.490" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.490" starttime="20160125 01:29:19.488"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.495" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.498" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.498" starttime="20160125 01:29:19.493"></status>
</kw>
<msg timestamp="20160125 01:29:19.499" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.500" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.499" starttime="20160125 01:29:19.491"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.507" starttime="20160125 01:29:19.505"></status>
</kw>
<msg timestamp="20160125 01:29:19.508" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.507" starttime="20160125 01:29:19.501"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.514" starttime="20160125 01:29:19.513"></status>
</kw>
<msg timestamp="20160125 01:29:19.515" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,291 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.515" starttime="20160125 01:29:19.509"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.522" starttime="20160125 01:29:19.520"></status>
</kw>
<msg timestamp="20160125 01:29:19.523" level="INFO">${resultCode} = 7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.523" starttime="20160125 01:29:19.516"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.532" starttime="20160125 01:29:19.530"></status>
</kw>
<msg timestamp="20160125 01:29:19.533" level="INFO">${resultCode} = 7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.533" starttime="20160125 01:29:19.524"></status>
</kw>
<msg timestamp="20160125 01:29:19.534" level="INFO">${id} = 7490243</msg>
<status status="PASS" endtime="20160125 01:29:19.534" starttime="20160125 01:29:19.477"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.543" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:29:19.542" starttime="20160125 01:29:19.540"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.545" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.545" starttime="20160125 01:29:19.544"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.548" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.548" starttime="20160125 01:29:19.546"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.553" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.556" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.556" starttime="20160125 01:29:19.550"></status>
</kw>
<msg timestamp="20160125 01:29:19.557" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.558" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.557" starttime="20160125 01:29:19.549"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.564" starttime="20160125 01:29:19.562"></status>
</kw>
<msg timestamp="20160125 01:29:19.565" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.565" starttime="20160125 01:29:19.559"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.572" starttime="20160125 01:29:19.570"></status>
</kw>
<msg timestamp="20160125 01:29:19.573" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.572" starttime="20160125 01:29:19.566"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.580" starttime="20160125 01:29:19.578"></status>
</kw>
<msg timestamp="20160125 01:29:19.581" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.580" starttime="20160125 01:29:19.574"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.589" starttime="20160125 01:29:19.588"></status>
</kw>
<msg timestamp="20160125 01:29:19.591" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.590" starttime="20160125 01:29:19.582"></status>
</kw>
<msg timestamp="20160125 01:29:19.592" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:19.592" starttime="20160125 01:29:19.536"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.601" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:29:19.600" starttime="20160125 01:29:19.598"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.603" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.603" starttime="20160125 01:29:19.601"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.606" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.605" starttime="20160125 01:29:19.604"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.610" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.613" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.614" starttime="20160125 01:29:19.608"></status>
</kw>
<msg timestamp="20160125 01:29:19.615" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.615" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:19.614" starttime="20160125 01:29:19.607"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.621" starttime="20160125 01:29:19.620"></status>
</kw>
<msg timestamp="20160125 01:29:19.622" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:19.622" starttime="20160125 01:29:19.616"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.629" starttime="20160125 01:29:19.627"></status>
</kw>
<msg timestamp="20160125 01:29:19.630" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,293 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:19.629" starttime="20160125 01:29:19.623"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.637" starttime="20160125 01:29:19.635"></status>
</kw>
<msg timestamp="20160125 01:29:19.638" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:19.637" starttime="20160125 01:29:19.631"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.646" starttime="20160125 01:29:19.645"></status>
</kw>
<msg timestamp="20160125 01:29:19.647" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:19.647" starttime="20160125 01:29:19.639"></status>
</kw>
<msg timestamp="20160125 01:29:19.649" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:19.648" starttime="20160125 01:29:19.594"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:19.657" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:29:19.657" starttime="20160125 01:29:19.655"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.660" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:19.659" starttime="20160125 01:29:19.658"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.662" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:19.662" starttime="20160125 01:29:19.661"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.667" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:19.669" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:19.670" starttime="20160125 01:29:19.665"></status>
</kw>
<msg timestamp="20160125 01:29:19.671" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:19.672" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,294 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.671" starttime="20160125 01:29:19.663"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.678" starttime="20160125 01:29:19.676"></status>
</kw>
<msg timestamp="20160125 01:29:19.679" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,294 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.678" starttime="20160125 01:29:19.672"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.685" starttime="20160125 01:29:19.684"></status>
</kw>
<msg timestamp="20160125 01:29:19.686" level="INFO">${return_log_entry} = 2016-01-25 01:29:19,294 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.686" starttime="20160125 01:29:19.680"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.693" starttime="20160125 01:29:19.691"></status>
</kw>
<msg timestamp="20160125 01:29:19.694" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.694" starttime="20160125 01:29:19.687"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.703" starttime="20160125 01:29:19.701"></status>
</kw>
<msg timestamp="20160125 01:29:19.704" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.703" starttime="20160125 01:29:19.695"></status>
</kw>
<msg timestamp="20160125 01:29:19.705" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.705" starttime="20160125 01:29:19.650"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.712" starttime="20160125 01:29:19.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.714" starttime="20160125 01:29:19.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.716" starttime="20160125 01:29:19.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:19.727" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:19.727" starttime="20160125 01:29:19.723"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.728" starttime="20160125 01:29:19.721"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.729" starttime="20160125 01:29:19.717"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.729" starttime="20160125 01:29:19.706"></status>
</kw>
<msg timestamp="20160125 01:29:19.733" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:29:19.734" level="INFO">${provId} = 1</msg>
<msg timestamp="20160125 01:29:19.734" level="INFO">${imsi} = 732123710001000</msg>
<msg timestamp="20160125 01:29:19.735" level="INFO">${id} = 7490243</msg>
<msg timestamp="20160125 01:29:19.735" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:29:19.735" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:29:19.736" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:19.732" starttime="20160125 01:29:18.874"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.751" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:19.752" starttime="20160125 01:29:19.749"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.752" starttime="20160125 01:29:19.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.756" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:19.757" starttime="20160125 01:29:19.755"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.757" starttime="20160125 01:29:19.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.761" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:19.762" starttime="20160125 01:29:19.760"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.763" starttime="20160125 01:29:19.758"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:19.763" starttime="20160125 01:29:19.744"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:19.766" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:19.766" starttime="20160125 01:29:19.764"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.769" starttime="20160125 01:29:19.767"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.771" starttime="20160125 01:29:19.769"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.774" starttime="20160125 01:29:19.772"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.776" starttime="20160125 01:29:19.774"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.778" starttime="20160125 01:29:19.776"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:19.780" starttime="20160125 01:29:19.778"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:19.783" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=7490243']</msg>
<msg timestamp="20160125 01:29:20.393" level="INFO">01:29:20,390 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490245
01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:20.394" starttime="20160125 01:29:19.782"></status>
</kw>
<msg timestamp="20160125 01:29:20.396" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.397" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:20.395" starttime="20160125 01:29:19.781"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:20.405" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:20.404" starttime="20160125 01:29:20.403"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.407" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:20.407" starttime="20160125 01:29:20.406"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.410" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:20.410" starttime="20160125 01:29:20.408"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.414" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:20.417" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:20.417" starttime="20160125 01:29:20.412"></status>
</kw>
<msg timestamp="20160125 01:29:20.419" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.419" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,390 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:20.418" starttime="20160125 01:29:20.411"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.425" starttime="20160125 01:29:20.424"></status>
</kw>
<msg timestamp="20160125 01:29:20.426" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,390 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:20.426" starttime="20160125 01:29:20.420"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.433" starttime="20160125 01:29:20.431"></status>
</kw>
<msg timestamp="20160125 01:29:20.434" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,390 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:20.433" starttime="20160125 01:29:20.427"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.440" starttime="20160125 01:29:20.439"></status>
</kw>
<msg timestamp="20160125 01:29:20.441" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:20.441" starttime="20160125 01:29:20.435"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.450" starttime="20160125 01:29:20.448"></status>
</kw>
<msg timestamp="20160125 01:29:20.451" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:20.450" starttime="20160125 01:29:20.442"></status>
</kw>
<msg timestamp="20160125 01:29:20.452" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:20.452" starttime="20160125 01:29:20.398"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:20.460" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160125 01:29:20.460" starttime="20160125 01:29:20.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.463" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:20.462" starttime="20160125 01:29:20.461"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.465" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:20.465" starttime="20160125 01:29:20.464"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.470" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:20.473" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:20.473" starttime="20160125 01:29:20.468"></status>
</kw>
<msg timestamp="20160125 01:29:20.474" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.475" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.474" starttime="20160125 01:29:20.466"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.481" starttime="20160125 01:29:20.479"></status>
</kw>
<msg timestamp="20160125 01:29:20.485" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.482" starttime="20160125 01:29:20.476"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.491" starttime="20160125 01:29:20.490"></status>
</kw>
<msg timestamp="20160125 01:29:20.492" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.492" starttime="20160125 01:29:20.486"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.499" starttime="20160125 01:29:20.497"></status>
</kw>
<msg timestamp="20160125 01:29:20.500" level="INFO">${resultCode} = 7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.500" starttime="20160125 01:29:20.493"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.512" starttime="20160125 01:29:20.507"></status>
</kw>
<msg timestamp="20160125 01:29:20.513" level="INFO">${resultCode} = 7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.513" starttime="20160125 01:29:20.501"></status>
</kw>
<msg timestamp="20160125 01:29:20.515" level="INFO">${accountId} = 7490245</msg>
<status status="PASS" endtime="20160125 01:29:20.514" starttime="20160125 01:29:20.453"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:20.522" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160125 01:29:20.522" starttime="20160125 01:29:20.520"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.525" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:20.524" starttime="20160125 01:29:20.523"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.528" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:20.527" starttime="20160125 01:29:20.526"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.532" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:20.534" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:20.535" starttime="20160125 01:29:20.530"></status>
</kw>
<msg timestamp="20160125 01:29:20.536" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.537" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.536" starttime="20160125 01:29:20.528"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.543" starttime="20160125 01:29:20.541"></status>
</kw>
<msg timestamp="20160125 01:29:20.544" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.543" starttime="20160125 01:29:20.537"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.550" starttime="20160125 01:29:20.548"></status>
</kw>
<msg timestamp="20160125 01:29:20.551" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,391 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.550" starttime="20160125 01:29:20.545"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.557" starttime="20160125 01:29:20.556"></status>
</kw>
<msg timestamp="20160125 01:29:20.558" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.558" starttime="20160125 01:29:20.552"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.566" starttime="20160125 01:29:20.565"></status>
</kw>
<msg timestamp="20160125 01:29:20.567" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.567" starttime="20160125 01:29:20.559"></status>
</kw>
<msg timestamp="20160125 01:29:20.569" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.568" starttime="20160125 01:29:20.516"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:20.577" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160125 01:29:20.576" starttime="20160125 01:29:20.574"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.579" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:20.579" starttime="20160125 01:29:20.577"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.582" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:20.581" starttime="20160125 01:29:20.580"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.586" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:20.588" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:20.589" starttime="20160125 01:29:20.584"></status>
</kw>
<msg timestamp="20160125 01:29:20.590" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.590" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.590" starttime="20160125 01:29:20.583"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.597" starttime="20160125 01:29:20.595"></status>
</kw>
<msg timestamp="20160125 01:29:20.598" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.597" starttime="20160125 01:29:20.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.604" starttime="20160125 01:29:20.602"></status>
</kw>
<msg timestamp="20160125 01:29:20.605" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.604" starttime="20160125 01:29:20.598"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.611" starttime="20160125 01:29:20.609"></status>
</kw>
<msg timestamp="20160125 01:29:20.612" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.612" starttime="20160125 01:29:20.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.620" starttime="20160125 01:29:20.619"></status>
</kw>
<msg timestamp="20160125 01:29:20.621" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.621" starttime="20160125 01:29:20.613"></status>
</kw>
<msg timestamp="20160125 01:29:20.623" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:20.622" starttime="20160125 01:29:20.570"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:20.630" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160125 01:29:20.630" starttime="20160125 01:29:20.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.633" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:20.633" starttime="20160125 01:29:20.631"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.636" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:20.635" starttime="20160125 01:29:20.634"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:20.639" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:20.642" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:20.643" starttime="20160125 01:29:20.638"></status>
</kw>
<msg timestamp="20160125 01:29:20.644" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:20.644" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:20.643" starttime="20160125 01:29:20.636"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.650" starttime="20160125 01:29:20.649"></status>
</kw>
<msg timestamp="20160125 01:29:20.651" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:20.651" starttime="20160125 01:29:20.645"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.657" starttime="20160125 01:29:20.656"></status>
</kw>
<msg timestamp="20160125 01:29:20.658" level="INFO">${return_log_entry} = 2016-01-25 01:29:20,392 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:20.658" starttime="20160125 01:29:20.652"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.665" starttime="20160125 01:29:20.663"></status>
</kw>
<msg timestamp="20160125 01:29:20.666" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:20.665" starttime="20160125 01:29:20.659"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.674" starttime="20160125 01:29:20.673"></status>
</kw>
<msg timestamp="20160125 01:29:20.675" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:20.675" starttime="20160125 01:29:20.667"></status>
</kw>
<msg timestamp="20160125 01:29:20.676" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:20.676" starttime="20160125 01:29:20.624"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.683" starttime="20160125 01:29:20.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.685" starttime="20160125 01:29:20.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.687" starttime="20160125 01:29:20.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:20.696" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:20.697" starttime="20160125 01:29:20.692"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:20.697" starttime="20160125 01:29:20.691"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:20.698" starttime="20160125 01:29:20.687"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:20.699" starttime="20160125 01:29:20.677"></status>
</kw>
<msg timestamp="20160125 01:29:20.701" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160125 01:29:20.702" level="INFO">${accId} = 7490245</msg>
<msg timestamp="20160125 01:29:20.702" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160125 01:29:20.702" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160125 01:29:20.703" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160125 01:29:20.700" starttime="20160125 01:29:19.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.705" starttime="20160125 01:29:20.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:20.707" starttime="20160125 01:29:20.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:20.709" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160125 01:29:20.709" starttime="20160125 01:29:20.707"></status>
</kw>
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:29:20.710" starttime="20160125 01:28:49.488"></status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:20.716" starttime="20160125 01:28:44.369"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:20.728" starttime="20160125 01:28:44.348"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s1-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s1-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:29:21.286" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:21.291" level="INFO">${date} = Mon Jan 25 01:29:21 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:21.290" starttime="20160125 01:29:21.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:21.297" level="INFO">Date and time: Mon Jan 25 01:29:21 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:21.298" starttime="20160125 01:29:21.293"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:21.304" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:29:21.305" starttime="20160125 01:29:21.300"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:21.374" starttime="20160125 01:29:21.371"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:21.429" starttime="20160125 01:29:21.386"></status>
</kw>
<msg timestamp="20160125 01:29:21.431" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160125 01:29:21.430" starttime="20160125 01:29:21.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:21.438" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:21.946" level="INFO">Read output: Last login: Mon Jan 25 00:28:45 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:21.947" starttime="20160125 01:29:21.436"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:21.947" starttime="20160125 01:29:21.431"></status>
</kw>
<msg timestamp="20160125 01:29:21.949" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160125 01:29:21.948" starttime="20160125 01:29:21.359"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:21.954" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:21.954" starttime="20160125 01:29:21.950"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:21.956" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:29:22.330" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:22.332" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:22.331" starttime="20160125 01:29:21.955"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.337" starttime="20160125 01:29:22.335"></status>
</kw>
<msg timestamp="20160125 01:29:22.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:22.338" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:22.337" starttime="20160125 01:29:22.333"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.344" starttime="20160125 01:29:22.343"></status>
</kw>
<msg timestamp="20160125 01:29:22.345" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:22.345" starttime="20160125 01:29:22.339"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:29:22.348" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:22.347" starttime="20160125 01:29:22.346"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:22.350" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:22.350" starttime="20160125 01:29:22.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.352" starttime="20160125 01:29:22.351"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.359" starttime="20160125 01:29:22.358"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.363" starttime="20160125 01:29:22.360"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:22.363" starttime="20160125 01:29:22.354"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.369" starttime="20160125 01:29:22.367"></status>
</kw>
<msg timestamp="20160125 01:29:22.370" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:22.369" starttime="20160125 01:29:22.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.372" starttime="20160125 01:29:22.370"></status>
</kw>
<msg timestamp="20160125 01:29:22.373" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:29:22.374" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:22.373" starttime="20160125 01:29:21.328"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.405" starttime="20160125 01:29:22.404"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:22.464" starttime="20160125 01:29:22.409"></status>
</kw>
<msg timestamp="20160125 01:29:22.467" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160125 01:29:22.466" starttime="20160125 01:29:22.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:22.481" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:22.989" level="INFO">Read output: Last login: Mon Jan 25 00:28:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:22.990" starttime="20160125 01:29:22.478"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:22.991" starttime="20160125 01:29:22.469"></status>
</kw>
<msg timestamp="20160125 01:29:22.992" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160125 01:29:22.992" starttime="20160125 01:29:22.398"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:22.997" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:22.997" starttime="20160125 01:29:22.993"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:22.999" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:29:23.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:23.382" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:23.380" starttime="20160125 01:29:22.998"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.392" starttime="20160125 01:29:23.387"></status>
</kw>
<msg timestamp="20160125 01:29:23.394" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:23.395" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:23.393" starttime="20160125 01:29:23.384"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.407" starttime="20160125 01:29:23.405"></status>
</kw>
<msg timestamp="20160125 01:29:23.409" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:23.409" starttime="20160125 01:29:23.396"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:29:23.415" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:23.414" starttime="20160125 01:29:23.411"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:23.421" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:23.420" starttime="20160125 01:29:23.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.424" starttime="20160125 01:29:23.422"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.438" starttime="20160125 01:29:23.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.443" starttime="20160125 01:29:23.440"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:23.446" starttime="20160125 01:29:23.426"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.459" starttime="20160125 01:29:23.456"></status>
</kw>
<msg timestamp="20160125 01:29:23.461" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:23.460" starttime="20160125 01:29:23.447"></status>
</kw>
<msg timestamp="20160125 01:29:23.465" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:29:23.466" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:23.463" starttime="20160125 01:29:22.384"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.538" starttime="20160125 01:29:23.535"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:23.595" starttime="20160125 01:29:23.550"></status>
</kw>
<msg timestamp="20160125 01:29:23.596" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160125 01:29:23.595" starttime="20160125 01:29:23.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:23.602" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:24.102" level="INFO">Read output: Last login: Mon Jan 25 00:28:48 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:24.104" starttime="20160125 01:29:23.601"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:24.105" starttime="20160125 01:29:23.597"></status>
</kw>
<msg timestamp="20160125 01:29:24.107" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160125 01:29:24.107" starttime="20160125 01:29:23.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:24.113" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:24.113" starttime="20160125 01:29:24.108"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:24.115" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:29:24.292" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:24.294" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:24.293" starttime="20160125 01:29:24.114"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.301" starttime="20160125 01:29:24.299"></status>
</kw>
<msg timestamp="20160125 01:29:24.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:24.302" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:24.301" starttime="20160125 01:29:24.296"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.311" starttime="20160125 01:29:24.310"></status>
</kw>
<msg timestamp="20160125 01:29:24.312" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:24.311" starttime="20160125 01:29:24.305"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:24.314" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:24.314" starttime="20160125 01:29:24.312"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:24.316" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:24.316" starttime="20160125 01:29:24.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.318" starttime="20160125 01:29:24.317"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.325" starttime="20160125 01:29:24.323"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.327" starttime="20160125 01:29:24.326"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:24.330" starttime="20160125 01:29:24.319"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.342" starttime="20160125 01:29:24.339"></status>
</kw>
<msg timestamp="20160125 01:29:24.344" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:24.343" starttime="20160125 01:29:24.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.348" starttime="20160125 01:29:24.346"></status>
</kw>
<msg timestamp="20160125 01:29:24.352" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:29:24.353" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:24.351" starttime="20160125 01:29:23.491"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.422" starttime="20160125 01:29:24.419"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:24.490" starttime="20160125 01:29:24.432"></status>
</kw>
<msg timestamp="20160125 01:29:24.493" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160125 01:29:24.491" starttime="20160125 01:29:24.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:24.508" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:25.004" level="INFO">Read output: Last login: Mon Jan 25 00:28:49 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:25.005" starttime="20160125 01:29:24.504"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.006" starttime="20160125 01:29:24.495"></status>
</kw>
<msg timestamp="20160125 01:29:25.008" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160125 01:29:25.007" starttime="20160125 01:29:24.408"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:25.014" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:25.013" starttime="20160125 01:29:25.009"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:25.016" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:29:25.107" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:25.109" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:25.108" starttime="20160125 01:29:25.014"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.114" starttime="20160125 01:29:25.112"></status>
</kw>
<msg timestamp="20160125 01:29:25.115" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:25.115" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:25.114" starttime="20160125 01:29:25.110"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.121" starttime="20160125 01:29:25.120"></status>
</kw>
<msg timestamp="20160125 01:29:25.122" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:25.121" starttime="20160125 01:29:25.116"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:25.124" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:25.124" starttime="20160125 01:29:25.122"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:25.127" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:25.126" starttime="20160125 01:29:25.125"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.128" starttime="20160125 01:29:25.127"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.135" starttime="20160125 01:29:25.133"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.137" starttime="20160125 01:29:25.135"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.139" starttime="20160125 01:29:25.129"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.144" starttime="20160125 01:29:25.142"></status>
</kw>
<msg timestamp="20160125 01:29:25.145" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:25.144" starttime="20160125 01:29:25.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.146" starttime="20160125 01:29:25.145"></status>
</kw>
<msg timestamp="20160125 01:29:25.148" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:29:25.149" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:25.147" starttime="20160125 01:29:24.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:25.151" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:25.151" starttime="20160125 01:29:25.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:25.154" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:25.154" starttime="20160125 01:29:25.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:25.156" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:25.157" starttime="20160125 01:29:25.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:25.159" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:25.160" starttime="20160125 01:29:25.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:29:25.162" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:25.162" starttime="20160125 01:29:25.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:29:25.178" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:25.179" starttime="20160125 01:29:25.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:29:25.182" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:25.183" starttime="20160125 01:29:25.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:29:25.195" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:25.196" starttime="20160125 01:29:25.184"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.204" starttime="20160125 01:29:25.201"></status>
</kw>
<msg timestamp="20160125 01:29:25.205" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:25.204" starttime="20160125 01:29:25.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.207" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:25.208" starttime="20160125 01:29:25.206"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.208" starttime="20160125 01:29:21.276"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.217" starttime="20160125 01:29:25.216"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:29:25.219" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:25.219" starttime="20160125 01:29:25.218"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.228" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:29:25.229" starttime="20160125 01:29:25.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.230" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:29:25.231" starttime="20160125 01:29:25.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.233" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:29:25.233" starttime="20160125 01:29:25.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.235" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160125 01:29:25.235" starttime="20160125 01:29:25.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.237" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:25.238" starttime="20160125 01:29:25.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.239" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:29:25.240" starttime="20160125 01:29:25.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.242" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:25.242" starttime="20160125 01:29:25.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.244" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:29:25.244" starttime="20160125 01:29:25.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.246" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:25.247" starttime="20160125 01:29:25.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.248" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:25.249" starttime="20160125 01:29:25.247"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.257" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:25.258" starttime="20160125 01:29:25.255"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.258" starttime="20160125 01:29:25.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.262" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:25.262" starttime="20160125 01:29:25.260"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.265" starttime="20160125 01:29:25.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.268" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:25.269" starttime="20160125 01:29:25.267"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.269" starttime="20160125 01:29:25.265"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:25.270" starttime="20160125 01:29:25.250"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:25.272" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:25.273" starttime="20160125 01:29:25.270"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.275" starttime="20160125 01:29:25.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.277" starttime="20160125 01:29:25.276"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.279" starttime="20160125 01:29:25.278"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.281" starttime="20160125 01:29:25.280"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.283" starttime="20160125 01:29:25.282"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.285" starttime="20160125 01:29:25.284"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.287" starttime="20160125 01:29:25.285"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.289" starttime="20160125 01:29:25.287"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.291" starttime="20160125 01:29:25.289"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.293" starttime="20160125 01:29:25.291"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.295" starttime="20160125 01:29:25.293"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:25.296" starttime="20160125 01:29:25.295"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:25.299" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:29:27.607" level="INFO">01:29:27,605 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:27.608" starttime="20160125 01:29:25.298"></status>
</kw>
<msg timestamp="20160125 01:29:27.610" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:27.610" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:27.609" starttime="20160125 01:29:25.297"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:27.618" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:27.618" starttime="20160125 01:29:27.616"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:27.620" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:27.620" starttime="20160125 01:29:27.619"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:27.622" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:27.622" starttime="20160125 01:29:27.621"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:27.626" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:27.627" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:27.627" starttime="20160125 01:29:27.624"></status>
</kw>
<msg timestamp="20160125 01:29:27.628" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:27.628" level="INFO">${return_log_entry} = 2016-01-25 01:29:27,605 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:27.628" starttime="20160125 01:29:27.623"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.634" starttime="20160125 01:29:27.632"></status>
</kw>
<msg timestamp="20160125 01:29:27.635" level="INFO">${return_log_entry} = 2016-01-25 01:29:27,605 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:27.634" starttime="20160125 01:29:27.629"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.640" starttime="20160125 01:29:27.639"></status>
</kw>
<msg timestamp="20160125 01:29:27.641" level="INFO">${return_log_entry} = 2016-01-25 01:29:27,605 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:27.640" starttime="20160125 01:29:27.635"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.646" starttime="20160125 01:29:27.645"></status>
</kw>
<msg timestamp="20160125 01:29:27.647" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:27.647" starttime="20160125 01:29:27.641"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.654" starttime="20160125 01:29:27.653"></status>
</kw>
<msg timestamp="20160125 01:29:27.655" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:27.655" starttime="20160125 01:29:27.648"></status>
</kw>
<msg timestamp="20160125 01:29:27.657" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:27.656" starttime="20160125 01:29:27.612"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.663" starttime="20160125 01:29:27.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.664" starttime="20160125 01:29:27.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.666" starttime="20160125 01:29:27.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:27.672" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:27.673" starttime="20160125 01:29:27.671"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:27.673" starttime="20160125 01:29:27.670"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:27.674" starttime="20160125 01:29:27.666"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:27.675" starttime="20160125 01:29:27.658"></status>
</kw>
<msg timestamp="20160125 01:29:27.676" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:29:27.675" starttime="20160125 01:29:25.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:29:27.678" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:27.678" starttime="20160125 01:29:27.677"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:27.681" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:29:27.682" starttime="20160125 01:29:27.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.683" starttime="20160125 01:29:27.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:27.685" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160125 01:29:27.685" starttime="20160125 01:29:27.684"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:29:27.702" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:29:27.702" starttime="20160125 01:29:27.701"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:29:27.704" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:29:27.704" starttime="20160125 01:29:27.703"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:29:27.707" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:29:27.706" starttime="20160125 01:29:27.705"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:29:27.709" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160125 01:29:27.709" starttime="20160125 01:29:27.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.710" starttime="20160125 01:29:27.710"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:29:27.713" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:27.714" starttime="20160125 01:29:27.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.715" starttime="20160125 01:29:27.714"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:29:27.719" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:27.719" starttime="20160125 01:29:27.716"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:29:27.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:27.723" starttime="20160125 01:29:27.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.725" starttime="20160125 01:29:27.724"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:29:27.727" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:27.728" starttime="20160125 01:29:27.726"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:29:27.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:27.731" starttime="20160125 01:29:27.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:27.736" starttime="20160125 01:29:27.735"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:29:27.744" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:41.031" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:41.028" starttime="20160125 01:29:27.736"></status>
</kw>
<msg timestamp="20160125 01:29:41.034" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:41.033" starttime="20160125 01:29:27.694"></status>
</kw>
<msg timestamp="20160125 01:29:41.036" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:41.035" starttime="20160125 01:29:27.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:41.038" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:29:41.039" starttime="20160125 01:29:41.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:41.042" starttime="20160125 01:29:41.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.043" starttime="20160125 01:29:41.042"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.057" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.057" starttime="20160125 01:29:41.055"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.058" starttime="20160125 01:29:41.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.061" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.061" starttime="20160125 01:29:41.059"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.062" starttime="20160125 01:29:41.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.065" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.066" starttime="20160125 01:29:41.064"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.066" starttime="20160125 01:29:41.062"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.067" starttime="20160125 01:29:41.050"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.070" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:41.070" starttime="20160125 01:29:41.068"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.072" starttime="20160125 01:29:41.071"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.074" starttime="20160125 01:29:41.072"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.076" starttime="20160125 01:29:41.074"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.077" starttime="20160125 01:29:41.076"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.079" starttime="20160125 01:29:41.078"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.081" starttime="20160125 01:29:41.079"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:41.083" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000']</msg>
<msg timestamp="20160125 01:29:41.256" level="INFO">01:29:41,250 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:29:41,251 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490247
01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000
01:29:41,253 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:29:41,255 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:29:41.257" starttime="20160125 01:29:41.083"></status>
</kw>
<msg timestamp="20160125 01:29:41.258" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.258" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:41.257" starttime="20160125 01:29:41.081"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.265" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:41.265" starttime="20160125 01:29:41.263"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.267" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.267" starttime="20160125 01:29:41.266"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.269" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.269" starttime="20160125 01:29:41.268"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.272" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.273" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.273" starttime="20160125 01:29:41.271"></status>
</kw>
<msg timestamp="20160125 01:29:41.274" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.275" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,250 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:41.274" starttime="20160125 01:29:41.270"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.280" starttime="20160125 01:29:41.279"></status>
</kw>
<msg timestamp="20160125 01:29:41.281" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,250 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:41.280" starttime="20160125 01:29:41.275"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.286" starttime="20160125 01:29:41.285"></status>
</kw>
<msg timestamp="20160125 01:29:41.287" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,250 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:41.286" starttime="20160125 01:29:41.281"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.292" starttime="20160125 01:29:41.290"></status>
</kw>
<msg timestamp="20160125 01:29:41.293" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:41.292" starttime="20160125 01:29:41.287"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.300" starttime="20160125 01:29:41.299"></status>
</kw>
<msg timestamp="20160125 01:29:41.301" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:41.300" starttime="20160125 01:29:41.293"></status>
</kw>
<msg timestamp="20160125 01:29:41.302" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:41.301" starttime="20160125 01:29:41.259"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.309" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:29:41.308" starttime="20160125 01:29:41.307"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.311" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.310" starttime="20160125 01:29:41.309"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.313" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.312" starttime="20160125 01:29:41.311"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.316" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.317" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.317" starttime="20160125 01:29:41.314"></status>
</kw>
<msg timestamp="20160125 01:29:41.318" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.319" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,251 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:41.318" starttime="20160125 01:29:41.313"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.324" starttime="20160125 01:29:41.322"></status>
</kw>
<msg timestamp="20160125 01:29:41.324" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,251 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:41.324" starttime="20160125 01:29:41.319"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.329" starttime="20160125 01:29:41.328"></status>
</kw>
<msg timestamp="20160125 01:29:41.330" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,251 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:41.330" starttime="20160125 01:29:41.325"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.335" starttime="20160125 01:29:41.334"></status>
</kw>
<msg timestamp="20160125 01:29:41.336" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:41.336" starttime="20160125 01:29:41.331"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.343" starttime="20160125 01:29:41.342"></status>
</kw>
<msg timestamp="20160125 01:29:41.344" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:41.344" starttime="20160125 01:29:41.337"></status>
</kw>
<msg timestamp="20160125 01:29:41.345" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:41.345" starttime="20160125 01:29:41.303"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.352" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:29:41.352" starttime="20160125 01:29:41.350"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.354" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.354" starttime="20160125 01:29:41.353"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.356" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.356" starttime="20160125 01:29:41.355"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.359" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.360" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.361" starttime="20160125 01:29:41.358"></status>
</kw>
<msg timestamp="20160125 01:29:41.361" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.362" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.361" starttime="20160125 01:29:41.357"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.366" starttime="20160125 01:29:41.365"></status>
</kw>
<msg timestamp="20160125 01:29:41.367" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.367" starttime="20160125 01:29:41.362"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.372" starttime="20160125 01:29:41.371"></status>
</kw>
<msg timestamp="20160125 01:29:41.373" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.373" starttime="20160125 01:29:41.368"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.378" starttime="20160125 01:29:41.377"></status>
</kw>
<msg timestamp="20160125 01:29:41.379" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.379" starttime="20160125 01:29:41.374"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.386" starttime="20160125 01:29:41.385"></status>
</kw>
<msg timestamp="20160125 01:29:41.388" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.387" starttime="20160125 01:29:41.380"></status>
</kw>
<msg timestamp="20160125 01:29:41.389" level="INFO">${imsi} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:41.388" starttime="20160125 01:29:41.347"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.396" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:29:41.395" starttime="20160125 01:29:41.394"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.398" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.397" starttime="20160125 01:29:41.396"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.400" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.399" starttime="20160125 01:29:41.398"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.403" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.404" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.404" starttime="20160125 01:29:41.402"></status>
</kw>
<msg timestamp="20160125 01:29:41.405" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.405" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.405" starttime="20160125 01:29:41.400"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.410" starttime="20160125 01:29:41.409"></status>
</kw>
<msg timestamp="20160125 01:29:41.411" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.411" starttime="20160125 01:29:41.406"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.416" starttime="20160125 01:29:41.415"></status>
</kw>
<msg timestamp="20160125 01:29:41.417" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,252 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.417" starttime="20160125 01:29:41.412"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.422" starttime="20160125 01:29:41.421"></status>
</kw>
<msg timestamp="20160125 01:29:41.423" level="INFO">${resultCode} = 7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.423" starttime="20160125 01:29:41.418"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.430" starttime="20160125 01:29:41.429"></status>
</kw>
<msg timestamp="20160125 01:29:41.431" level="INFO">${resultCode} = 7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.430" starttime="20160125 01:29:41.424"></status>
</kw>
<msg timestamp="20160125 01:29:41.432" level="INFO">${id} = 7490247</msg>
<status status="PASS" endtime="20160125 01:29:41.431" starttime="20160125 01:29:41.390"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.439" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:29:41.438" starttime="20160125 01:29:41.437"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.441" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.440" starttime="20160125 01:29:41.439"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.443" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.442" starttime="20160125 01:29:41.441"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.446" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.447" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.447" starttime="20160125 01:29:41.445"></status>
</kw>
<msg timestamp="20160125 01:29:41.448" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.448" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,253 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.448" starttime="20160125 01:29:41.443"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.453" starttime="20160125 01:29:41.452"></status>
</kw>
<msg timestamp="20160125 01:29:41.454" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,253 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.454" starttime="20160125 01:29:41.449"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.459" starttime="20160125 01:29:41.458"></status>
</kw>
<msg timestamp="20160125 01:29:41.460" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,253 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.459" starttime="20160125 01:29:41.455"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.465" starttime="20160125 01:29:41.464"></status>
</kw>
<msg timestamp="20160125 01:29:41.466" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.465" starttime="20160125 01:29:41.461"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.473" starttime="20160125 01:29:41.472"></status>
</kw>
<msg timestamp="20160125 01:29:41.474" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.473" starttime="20160125 01:29:41.467"></status>
</kw>
<msg timestamp="20160125 01:29:41.475" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:41.475" starttime="20160125 01:29:41.433"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.482" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:29:41.481" starttime="20160125 01:29:41.480"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.484" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.483" starttime="20160125 01:29:41.482"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.486" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.486" starttime="20160125 01:29:41.484"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.489" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.490" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.490" starttime="20160125 01:29:41.488"></status>
</kw>
<msg timestamp="20160125 01:29:41.491" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.491" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:41.491" starttime="20160125 01:29:41.487"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.496" starttime="20160125 01:29:41.495"></status>
</kw>
<msg timestamp="20160125 01:29:41.497" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:41.497" starttime="20160125 01:29:41.492"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.502" starttime="20160125 01:29:41.501"></status>
</kw>
<msg timestamp="20160125 01:29:41.503" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:41.502" starttime="20160125 01:29:41.498"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.508" starttime="20160125 01:29:41.507"></status>
</kw>
<msg timestamp="20160125 01:29:41.509" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:41.509" starttime="20160125 01:29:41.503"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.517" starttime="20160125 01:29:41.516"></status>
</kw>
<msg timestamp="20160125 01:29:41.518" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:41.517" starttime="20160125 01:29:41.510"></status>
</kw>
<msg timestamp="20160125 01:29:41.519" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:41.518" starttime="20160125 01:29:41.476"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:41.525" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:29:41.525" starttime="20160125 01:29:41.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.527" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:41.527" starttime="20160125 01:29:41.526"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.529" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:41.529" starttime="20160125 01:29:41.528"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.532" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:41.533" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:41.534" starttime="20160125 01:29:41.531"></status>
</kw>
<msg timestamp="20160125 01:29:41.534" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:41.535" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.534" starttime="20160125 01:29:41.530"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.540" starttime="20160125 01:29:41.538"></status>
</kw>
<msg timestamp="20160125 01:29:41.541" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.540" starttime="20160125 01:29:41.536"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.545" starttime="20160125 01:29:41.544"></status>
</kw>
<msg timestamp="20160125 01:29:41.546" level="INFO">${return_log_entry} = 2016-01-25 01:29:41,254 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.546" starttime="20160125 01:29:41.541"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.551" starttime="20160125 01:29:41.550"></status>
</kw>
<msg timestamp="20160125 01:29:41.552" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.552" starttime="20160125 01:29:41.547"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.559" starttime="20160125 01:29:41.558"></status>
</kw>
<msg timestamp="20160125 01:29:41.560" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.559" starttime="20160125 01:29:41.553"></status>
</kw>
<msg timestamp="20160125 01:29:41.561" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.561" starttime="20160125 01:29:41.520"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.567" starttime="20160125 01:29:41.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.569" starttime="20160125 01:29:41.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.570" starttime="20160125 01:29:41.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:41.576" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:41.577" starttime="20160125 01:29:41.575"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.577" starttime="20160125 01:29:41.574"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.578" starttime="20160125 01:29:41.571"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.579" starttime="20160125 01:29:41.562"></status>
</kw>
<msg timestamp="20160125 01:29:41.581" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:29:41.581" level="INFO">${provId} = 1</msg>
<msg timestamp="20160125 01:29:41.581" level="INFO">${imsi} = 732123710001000</msg>
<msg timestamp="20160125 01:29:41.582" level="INFO">${id} = 7490247</msg>
<msg timestamp="20160125 01:29:41.582" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:29:41.582" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:29:41.583" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:41.580" starttime="20160125 01:29:41.045"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.595" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.596" starttime="20160125 01:29:41.594"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.596" starttime="20160125 01:29:41.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.599" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.600" starttime="20160125 01:29:41.598"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.600" starttime="20160125 01:29:41.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.603" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:41.604" starttime="20160125 01:29:41.602"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.604" starttime="20160125 01:29:41.601"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:41.605" starttime="20160125 01:29:41.589"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:41.607" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:41.607" starttime="20160125 01:29:41.606"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.609" starttime="20160125 01:29:41.608"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.611" starttime="20160125 01:29:41.610"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.613" starttime="20160125 01:29:41.612"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.614" starttime="20160125 01:29:41.613"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.616" starttime="20160125 01:29:41.615"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:41.618" starttime="20160125 01:29:41.617"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:41.620" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=7490247']</msg>
<msg timestamp="20160125 01:29:42.178" level="INFO">01:29:42,174 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490249
01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:29:42,176 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:29:42,177 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:42.179" starttime="20160125 01:29:41.619"></status>
</kw>
<msg timestamp="20160125 01:29:42.181" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.181" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:42.180" starttime="20160125 01:29:41.618"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:42.189" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:42.188" starttime="20160125 01:29:42.187"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.191" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:42.191" starttime="20160125 01:29:42.189"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.193" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:42.193" starttime="20160125 01:29:42.191"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.196" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:42.197" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:42.197" starttime="20160125 01:29:42.195"></status>
</kw>
<msg timestamp="20160125 01:29:42.198" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.198" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,174 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:42.198" starttime="20160125 01:29:42.194"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.203" starttime="20160125 01:29:42.202"></status>
</kw>
<msg timestamp="20160125 01:29:42.204" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,174 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:42.204" starttime="20160125 01:29:42.199"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.209" starttime="20160125 01:29:42.208"></status>
</kw>
<msg timestamp="20160125 01:29:42.210" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,174 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:42.210" starttime="20160125 01:29:42.205"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.215" starttime="20160125 01:29:42.214"></status>
</kw>
<msg timestamp="20160125 01:29:42.216" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:42.216" starttime="20160125 01:29:42.211"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.223" starttime="20160125 01:29:42.222"></status>
</kw>
<msg timestamp="20160125 01:29:42.224" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:42.224" starttime="20160125 01:29:42.217"></status>
</kw>
<msg timestamp="20160125 01:29:42.225" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:42.225" starttime="20160125 01:29:42.183"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:42.232" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160125 01:29:42.232" starttime="20160125 01:29:42.230"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.234" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:42.234" starttime="20160125 01:29:42.233"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.236" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:42.236" starttime="20160125 01:29:42.235"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.239" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:42.240" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:42.240" starttime="20160125 01:29:42.238"></status>
</kw>
<msg timestamp="20160125 01:29:42.241" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.241" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.241" starttime="20160125 01:29:42.237"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.246" starttime="20160125 01:29:42.245"></status>
</kw>
<msg timestamp="20160125 01:29:42.247" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.247" starttime="20160125 01:29:42.242"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.252" starttime="20160125 01:29:42.251"></status>
</kw>
<msg timestamp="20160125 01:29:42.253" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.252" starttime="20160125 01:29:42.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.258" starttime="20160125 01:29:42.256"></status>
</kw>
<msg timestamp="20160125 01:29:42.259" level="INFO">${resultCode} = 7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.258" starttime="20160125 01:29:42.253"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.265" starttime="20160125 01:29:42.264"></status>
</kw>
<msg timestamp="20160125 01:29:42.266" level="INFO">${resultCode} = 7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.266" starttime="20160125 01:29:42.259"></status>
</kw>
<msg timestamp="20160125 01:29:42.267" level="INFO">${accountId} = 7490249</msg>
<status status="PASS" endtime="20160125 01:29:42.267" starttime="20160125 01:29:42.226"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:42.274" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160125 01:29:42.274" starttime="20160125 01:29:42.272"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.276" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:42.276" starttime="20160125 01:29:42.275"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.278" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:42.278" starttime="20160125 01:29:42.277"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.281" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:42.282" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:42.282" starttime="20160125 01:29:42.280"></status>
</kw>
<msg timestamp="20160125 01:29:42.283" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.283" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.283" starttime="20160125 01:29:42.279"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.288" starttime="20160125 01:29:42.287"></status>
</kw>
<msg timestamp="20160125 01:29:42.289" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.289" starttime="20160125 01:29:42.284"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.294" starttime="20160125 01:29:42.293"></status>
</kw>
<msg timestamp="20160125 01:29:42.295" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,175 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.294" starttime="20160125 01:29:42.290"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.300" starttime="20160125 01:29:42.299"></status>
</kw>
<msg timestamp="20160125 01:29:42.301" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.300" starttime="20160125 01:29:42.295"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.307" starttime="20160125 01:29:42.306"></status>
</kw>
<msg timestamp="20160125 01:29:42.308" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.308" starttime="20160125 01:29:42.301"></status>
</kw>
<msg timestamp="20160125 01:29:42.309" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.309" starttime="20160125 01:29:42.268"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:42.316" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160125 01:29:42.316" starttime="20160125 01:29:42.314"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.318" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:42.318" starttime="20160125 01:29:42.317"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.320" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:42.320" starttime="20160125 01:29:42.319"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.323" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:42.324" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:42.324" starttime="20160125 01:29:42.322"></status>
</kw>
<msg timestamp="20160125 01:29:42.325" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.325" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,176 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.325" starttime="20160125 01:29:42.321"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.330" starttime="20160125 01:29:42.329"></status>
</kw>
<msg timestamp="20160125 01:29:42.331" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,176 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.331" starttime="20160125 01:29:42.326"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.336" starttime="20160125 01:29:42.335"></status>
</kw>
<msg timestamp="20160125 01:29:42.337" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,176 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.336" starttime="20160125 01:29:42.332"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.342" starttime="20160125 01:29:42.340"></status>
</kw>
<msg timestamp="20160125 01:29:42.343" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.342" starttime="20160125 01:29:42.337"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.350" starttime="20160125 01:29:42.348"></status>
</kw>
<msg timestamp="20160125 01:29:42.350" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.350" starttime="20160125 01:29:42.343"></status>
</kw>
<msg timestamp="20160125 01:29:42.352" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:42.351" starttime="20160125 01:29:42.311"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:42.358" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160125 01:29:42.358" starttime="20160125 01:29:42.356"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.360" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:42.360" starttime="20160125 01:29:42.359"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.362" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:42.362" starttime="20160125 01:29:42.361"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.365" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:42.366" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:42.366" starttime="20160125 01:29:42.364"></status>
</kw>
<msg timestamp="20160125 01:29:42.367" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:42.367" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,177 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:42.367" starttime="20160125 01:29:42.363"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.372" starttime="20160125 01:29:42.371"></status>
</kw>
<msg timestamp="20160125 01:29:42.373" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,177 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:42.373" starttime="20160125 01:29:42.368"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.378" starttime="20160125 01:29:42.377"></status>
</kw>
<msg timestamp="20160125 01:29:42.379" level="INFO">${return_log_entry} = 2016-01-25 01:29:42,177 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:42.378" starttime="20160125 01:29:42.374"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.384" starttime="20160125 01:29:42.382"></status>
</kw>
<msg timestamp="20160125 01:29:42.385" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:42.384" starttime="20160125 01:29:42.379"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.392" starttime="20160125 01:29:42.391"></status>
</kw>
<msg timestamp="20160125 01:29:42.393" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:42.392" starttime="20160125 01:29:42.385"></status>
</kw>
<msg timestamp="20160125 01:29:42.394" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:42.393" starttime="20160125 01:29:42.353"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.400" starttime="20160125 01:29:42.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.402" starttime="20160125 01:29:42.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.403" starttime="20160125 01:29:42.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:42.410" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:42.411" starttime="20160125 01:29:42.408"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:42.411" starttime="20160125 01:29:42.407"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:42.412" starttime="20160125 01:29:42.404"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:42.412" starttime="20160125 01:29:42.395"></status>
</kw>
<msg timestamp="20160125 01:29:42.415" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160125 01:29:42.415" level="INFO">${accId} = 7490249</msg>
<msg timestamp="20160125 01:29:42.416" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160125 01:29:42.416" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160125 01:29:42.416" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160125 01:29:42.414" starttime="20160125 01:29:41.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.418" starttime="20160125 01:29:42.417"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.419" starttime="20160125 01:29:42.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:42.421" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160125 01:29:42.422" starttime="20160125 01:29:42.420"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:29:42.422" starttime="20160125 01:29:25.210"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:42.427" starttime="20160125 01:29:20.753"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:42.438" starttime="20160125 01:29:20.735"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s1-s1-s3" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s1-s1-s3-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:29:42.623" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:42.630" level="INFO">${date} = Mon Jan 25 01:29:42 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:42.629" starttime="20160125 01:29:42.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:42.635" level="INFO">Date and time: Mon Jan 25 01:29:42 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:42.636" starttime="20160125 01:29:42.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:42.640" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:29:42.641" starttime="20160125 01:29:42.637"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.707" starttime="20160125 01:29:42.705"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:42.798" starttime="20160125 01:29:42.716"></status>
</kw>
<msg timestamp="20160125 01:29:42.799" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160125 01:29:42.798" starttime="20160125 01:29:42.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:42.804" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:43.307" level="INFO">Read output: Last login: Mon Jan 25 00:29:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:43.308" starttime="20160125 01:29:42.803"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:43.309" starttime="20160125 01:29:42.800"></status>
</kw>
<msg timestamp="20160125 01:29:43.311" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160125 01:29:43.310" starttime="20160125 01:29:42.695"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:43.315" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:43.315" starttime="20160125 01:29:43.312"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:43.317" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:29:43.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:43.723" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:43.722" starttime="20160125 01:29:43.316"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.728" starttime="20160125 01:29:43.726"></status>
</kw>
<msg timestamp="20160125 01:29:43.729" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:43.729" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:43.729" starttime="20160125 01:29:43.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.735" starttime="20160125 01:29:43.734"></status>
</kw>
<msg timestamp="20160125 01:29:43.736" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:43.735" starttime="20160125 01:29:43.730"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:29:43.738" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:43.738" starttime="20160125 01:29:43.737"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:43.740" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:43.740" starttime="20160125 01:29:43.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.742" starttime="20160125 01:29:43.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.748" starttime="20160125 01:29:43.747"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.750" starttime="20160125 01:29:43.749"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:43.752" starttime="20160125 01:29:43.743"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.756" starttime="20160125 01:29:43.755"></status>
</kw>
<msg timestamp="20160125 01:29:43.757" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:43.757" starttime="20160125 01:29:43.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.759" starttime="20160125 01:29:43.758"></status>
</kw>
<msg timestamp="20160125 01:29:43.760" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:29:43.761" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:43.760" starttime="20160125 01:29:42.662"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.789" starttime="20160125 01:29:43.788"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:43.849" starttime="20160125 01:29:43.793"></status>
</kw>
<msg timestamp="20160125 01:29:43.851" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160125 01:29:43.851" starttime="20160125 01:29:43.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:43.864" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:44.359" level="INFO">Read output: Last login: Mon Jan 25 00:29:22 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:44.361" starttime="20160125 01:29:43.861"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:44.363" starttime="20160125 01:29:43.853"></status>
</kw>
<msg timestamp="20160125 01:29:44.367" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160125 01:29:44.366" starttime="20160125 01:29:43.784"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:44.379" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:44.378" starttime="20160125 01:29:44.369"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:44.383" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:29:44.752" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:44.753" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:44.753" starttime="20160125 01:29:44.380"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.757" starttime="20160125 01:29:44.755"></status>
</kw>
<msg timestamp="20160125 01:29:44.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:44.758" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:44.757" starttime="20160125 01:29:44.754"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.763" starttime="20160125 01:29:44.762"></status>
</kw>
<msg timestamp="20160125 01:29:44.764" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:44.763" starttime="20160125 01:29:44.759"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:29:44.766" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:44.765" starttime="20160125 01:29:44.764"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:44.768" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:44.767" starttime="20160125 01:29:44.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.769" starttime="20160125 01:29:44.768"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.774" starttime="20160125 01:29:44.773"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.776" starttime="20160125 01:29:44.775"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:44.779" starttime="20160125 01:29:44.770"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.784" starttime="20160125 01:29:44.782"></status>
</kw>
<msg timestamp="20160125 01:29:44.784" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:44.784" starttime="20160125 01:29:44.780"></status>
</kw>
<msg timestamp="20160125 01:29:44.786" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:29:44.786" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:44.785" starttime="20160125 01:29:43.770"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.814" starttime="20160125 01:29:44.813"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:44.859" starttime="20160125 01:29:44.818"></status>
</kw>
<msg timestamp="20160125 01:29:44.860" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160125 01:29:44.859" starttime="20160125 01:29:44.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:44.864" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:45.377" level="INFO">Read output: Last login: Mon Jan 25 00:29:23 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:45.378" starttime="20160125 01:29:44.863"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:45.379" starttime="20160125 01:29:44.860"></status>
</kw>
<msg timestamp="20160125 01:29:45.381" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160125 01:29:45.381" starttime="20160125 01:29:44.809"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:45.386" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:45.385" starttime="20160125 01:29:45.382"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:45.387" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:29:45.557" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:45.558" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:45.557" starttime="20160125 01:29:45.386"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.561" starttime="20160125 01:29:45.560"></status>
</kw>
<msg timestamp="20160125 01:29:45.562" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:45.562" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:45.562" starttime="20160125 01:29:45.559"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.567" starttime="20160125 01:29:45.566"></status>
</kw>
<msg timestamp="20160125 01:29:45.568" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:45.567" starttime="20160125 01:29:45.563"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:45.570" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:45.569" starttime="20160125 01:29:45.568"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:45.572" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:45.572" starttime="20160125 01:29:45.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.573" starttime="20160125 01:29:45.573"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.579" starttime="20160125 01:29:45.577"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.580" starttime="20160125 01:29:45.579"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:45.583" starttime="20160125 01:29:45.574"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.587" starttime="20160125 01:29:45.586"></status>
</kw>
<msg timestamp="20160125 01:29:45.588" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:45.588" starttime="20160125 01:29:45.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.589" starttime="20160125 01:29:45.589"></status>
</kw>
<msg timestamp="20160125 01:29:45.591" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:29:45.591" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:45.590" starttime="20160125 01:29:44.796"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.620" starttime="20160125 01:29:45.619"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:45.679" starttime="20160125 01:29:45.624"></status>
</kw>
<msg timestamp="20160125 01:29:45.681" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160125 01:29:45.680" starttime="20160125 01:29:45.621"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:45.694" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:46.178" level="INFO">Read output: Last login: Mon Jan 25 00:29:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:46.180" starttime="20160125 01:29:45.691"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.181" starttime="20160125 01:29:45.683"></status>
</kw>
<msg timestamp="20160125 01:29:46.183" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160125 01:29:46.182" starttime="20160125 01:29:45.615"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:46.187" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:46.187" starttime="20160125 01:29:46.183"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:46.189" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:29:46.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:46.284" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:46.283" starttime="20160125 01:29:46.188"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.291" starttime="20160125 01:29:46.288"></status>
</kw>
<msg timestamp="20160125 01:29:46.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:46.294" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:46.293" starttime="20160125 01:29:46.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.304" starttime="20160125 01:29:46.302"></status>
</kw>
<msg timestamp="20160125 01:29:46.306" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:46.305" starttime="20160125 01:29:46.295"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:46.311" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:46.310" starttime="20160125 01:29:46.307"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:46.315" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:46.314" starttime="20160125 01:29:46.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.318" starttime="20160125 01:29:46.316"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.329" starttime="20160125 01:29:46.327"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.336" starttime="20160125 01:29:46.331"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.338" starttime="20160125 01:29:46.320"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.348" starttime="20160125 01:29:46.346"></status>
</kw>
<msg timestamp="20160125 01:29:46.350" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:46.349" starttime="20160125 01:29:46.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.353" starttime="20160125 01:29:46.351"></status>
</kw>
<msg timestamp="20160125 01:29:46.357" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:29:46.358" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:46.355" starttime="20160125 01:29:45.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:46.362" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:46.363" starttime="20160125 01:29:46.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:46.367" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:46.368" starttime="20160125 01:29:46.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:46.372" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:46.373" starttime="20160125 01:29:46.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:46.377" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:46.378" starttime="20160125 01:29:46.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:29:46.382" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:46.383" starttime="20160125 01:29:46.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:29:46.386" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:46.387" starttime="20160125 01:29:46.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:29:46.391" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:46.392" starttime="20160125 01:29:46.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:29:46.395" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:46.396" starttime="20160125 01:29:46.393"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.411" starttime="20160125 01:29:46.404"></status>
</kw>
<msg timestamp="20160125 01:29:46.413" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:46.412" starttime="20160125 01:29:46.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.418" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:46.419" starttime="20160125 01:29:46.415"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.420" starttime="20160125 01:29:42.616"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s3-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.434" starttime="20160125 01:29:46.432"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:29:46.439" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:46.438" starttime="20160125 01:29:46.436"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.455" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:29:46.456" starttime="20160125 01:29:46.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.459" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:29:46.460" starttime="20160125 01:29:46.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.464" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:29:46.464" starttime="20160125 01:29:46.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.468" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160125 01:29:46.469" starttime="20160125 01:29:46.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.470" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:46.471" starttime="20160125 01:29:46.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.472" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:29:46.473" starttime="20160125 01:29:46.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.474" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:46.474" starttime="20160125 01:29:46.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.476" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:29:46.476" starttime="20160125 01:29:46.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.478" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:46.478" starttime="20160125 01:29:46.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.480" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:46.480" starttime="20160125 01:29:46.479"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.487" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:46.488" starttime="20160125 01:29:46.486"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.488" starttime="20160125 01:29:46.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.491" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:46.491" starttime="20160125 01:29:46.490"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.492" starttime="20160125 01:29:46.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.495" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:46.495" starttime="20160125 01:29:46.493"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.496" starttime="20160125 01:29:46.493"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:46.496" starttime="20160125 01:29:46.482"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:46.499" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:46.499" starttime="20160125 01:29:46.497"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.501" starttime="20160125 01:29:46.500"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.503" starttime="20160125 01:29:46.502"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.504" starttime="20160125 01:29:46.503"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.506" starttime="20160125 01:29:46.505"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.507" starttime="20160125 01:29:46.506"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.509" starttime="20160125 01:29:46.508"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.511" starttime="20160125 01:29:46.510"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.512" starttime="20160125 01:29:46.511"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.514" starttime="20160125 01:29:46.513"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.516" starttime="20160125 01:29:46.515"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.518" starttime="20160125 01:29:46.516"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:46.519" starttime="20160125 01:29:46.518"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:46.522" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:29:48.936" level="INFO">01:29:48,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:48.938" starttime="20160125 01:29:46.521"></status>
</kw>
<msg timestamp="20160125 01:29:48.942" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:48.943" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:48.941" starttime="20160125 01:29:46.520"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:48.957" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:48.956" starttime="20160125 01:29:48.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:48.961" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:48.961" starttime="20160125 01:29:48.958"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:48.966" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:48.965" starttime="20160125 01:29:48.963"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:48.971" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:48.972" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:48.972" starttime="20160125 01:29:48.969"></status>
</kw>
<msg timestamp="20160125 01:29:48.974" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:48.974" level="INFO">${return_log_entry} = 2016-01-25 01:29:48,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:48.973" starttime="20160125 01:29:48.967"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:48.981" starttime="20160125 01:29:48.980"></status>
</kw>
<msg timestamp="20160125 01:29:48.982" level="INFO">${return_log_entry} = 2016-01-25 01:29:48,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:48.982" starttime="20160125 01:29:48.975"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:48.988" starttime="20160125 01:29:48.987"></status>
</kw>
<msg timestamp="20160125 01:29:48.989" level="INFO">${return_log_entry} = 2016-01-25 01:29:48,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:48.989" starttime="20160125 01:29:48.983"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:48.996" starttime="20160125 01:29:48.994"></status>
</kw>
<msg timestamp="20160125 01:29:48.997" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:48.996" starttime="20160125 01:29:48.990"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.005" starttime="20160125 01:29:49.003"></status>
</kw>
<msg timestamp="20160125 01:29:49.006" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:49.005" starttime="20160125 01:29:48.997"></status>
</kw>
<msg timestamp="20160125 01:29:49.008" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:49.007" starttime="20160125 01:29:48.946"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.014" starttime="20160125 01:29:49.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.016" starttime="20160125 01:29:49.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.018" starttime="20160125 01:29:49.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:49.025" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:49.026" starttime="20160125 01:29:49.023"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:49.026" starttime="20160125 01:29:49.022"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:49.027" starttime="20160125 01:29:49.018"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:49.027" starttime="20160125 01:29:49.009"></status>
</kw>
<msg timestamp="20160125 01:29:49.029" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:29:49.028" starttime="20160125 01:29:46.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:29:49.031" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:49.032" starttime="20160125 01:29:49.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:49.033" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:29:49.034" starttime="20160125 01:29:49.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.036" starttime="20160125 01:29:49.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:49.037" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160125 01:29:49.038" starttime="20160125 01:29:49.036"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:29:49.056" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:29:49.056" starttime="20160125 01:29:49.054"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:29:49.058" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:29:49.058" starttime="20160125 01:29:49.057"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:29:49.061" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:29:49.061" starttime="20160125 01:29:49.059"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:29:49.063" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160125 01:29:49.063" starttime="20160125 01:29:49.062"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.065" starttime="20160125 01:29:49.064"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:29:49.068" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:49.069" starttime="20160125 01:29:49.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.071" starttime="20160125 01:29:49.070"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:29:49.073" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:49.074" starttime="20160125 01:29:49.071"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:29:49.077" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:49.078" starttime="20160125 01:29:49.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.079" starttime="20160125 01:29:49.078"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:29:49.082" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:49.082" starttime="20160125 01:29:49.080"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:29:49.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:49.086" starttime="20160125 01:29:49.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:49.088" starttime="20160125 01:29:49.087"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:29:49.097" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:53.320" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:53.317" starttime="20160125 01:29:49.089"></status>
</kw>
<msg timestamp="20160125 01:29:53.325" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:53.323" starttime="20160125 01:29:49.048"></status>
</kw>
<msg timestamp="20160125 01:29:53.328" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:29:53.327" starttime="20160125 01:29:49.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:53.333" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:29:53.334" starttime="20160125 01:29:53.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:53.339" starttime="20160125 01:29:53.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.343" starttime="20160125 01:29:53.341"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.370" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.371" starttime="20160125 01:29:53.367"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.372" starttime="20160125 01:29:53.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.379" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.380" starttime="20160125 01:29:53.376"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.381" starttime="20160125 01:29:53.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.387" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.388" starttime="20160125 01:29:53.384"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.389" starttime="20160125 01:29:53.382"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.390" starttime="20160125 01:29:53.358"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.395" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:53.395" starttime="20160125 01:29:53.392"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.399" starttime="20160125 01:29:53.397"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.403" starttime="20160125 01:29:53.400"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.407" starttime="20160125 01:29:53.404"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.410" starttime="20160125 01:29:53.408"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.413" starttime="20160125 01:29:53.411"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.417" starttime="20160125 01:29:53.414"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:53.422" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000']</msg>
<msg timestamp="20160125 01:29:53.592" level="INFO">01:29:53,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490251
01:29:53,587 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000
01:29:53,588 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:29:53,589 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:29:53,590 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:29:53,591 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:29:53.593" starttime="20160125 01:29:53.420"></status>
</kw>
<msg timestamp="20160125 01:29:53.594" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.594" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:53.594" starttime="20160125 01:29:53.418"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.601" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:53.601" starttime="20160125 01:29:53.599"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.603" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.603" starttime="20160125 01:29:53.602"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.606" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.605" starttime="20160125 01:29:53.604"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.608" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.609" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.610" starttime="20160125 01:29:53.607"></status>
</kw>
<msg timestamp="20160125 01:29:53.610" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.611" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:53.610" starttime="20160125 01:29:53.606"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.616" starttime="20160125 01:29:53.615"></status>
</kw>
<msg timestamp="20160125 01:29:53.617" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:53.616" starttime="20160125 01:29:53.611"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.621" starttime="20160125 01:29:53.620"></status>
</kw>
<msg timestamp="20160125 01:29:53.622" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:53.622" starttime="20160125 01:29:53.617"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.627" starttime="20160125 01:29:53.626"></status>
</kw>
<msg timestamp="20160125 01:29:53.628" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:53.627" starttime="20160125 01:29:53.623"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.634" starttime="20160125 01:29:53.633"></status>
</kw>
<msg timestamp="20160125 01:29:53.635" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:53.634" starttime="20160125 01:29:53.628"></status>
</kw>
<msg timestamp="20160125 01:29:53.636" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:53.636" starttime="20160125 01:29:53.596"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.642" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:29:53.642" starttime="20160125 01:29:53.640"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.644" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.644" starttime="20160125 01:29:53.643"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.646" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.646" starttime="20160125 01:29:53.645"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.649" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.649" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.650" starttime="20160125 01:29:53.647"></status>
</kw>
<msg timestamp="20160125 01:29:53.651" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.651" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:53.650" starttime="20160125 01:29:53.646"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.655" starttime="20160125 01:29:53.654"></status>
</kw>
<msg timestamp="20160125 01:29:53.656" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:53.656" starttime="20160125 01:29:53.652"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.662" starttime="20160125 01:29:53.661"></status>
</kw>
<msg timestamp="20160125 01:29:53.663" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:29:53.663" starttime="20160125 01:29:53.657"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.668" starttime="20160125 01:29:53.667"></status>
</kw>
<msg timestamp="20160125 01:29:53.669" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:53.668" starttime="20160125 01:29:53.664"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.675" starttime="20160125 01:29:53.674"></status>
</kw>
<msg timestamp="20160125 01:29:53.676" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:53.676" starttime="20160125 01:29:53.669"></status>
</kw>
<msg timestamp="20160125 01:29:53.677" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:53.677" starttime="20160125 01:29:53.637"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.683" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:29:53.683" starttime="20160125 01:29:53.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.685" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.684" starttime="20160125 01:29:53.683"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.687" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.686" starttime="20160125 01:29:53.685"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.690" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.690" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.691" starttime="20160125 01:29:53.688"></status>
</kw>
<msg timestamp="20160125 01:29:53.692" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.692" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,587 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.691" starttime="20160125 01:29:53.687"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.696" starttime="20160125 01:29:53.695"></status>
</kw>
<msg timestamp="20160125 01:29:53.697" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,587 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.697" starttime="20160125 01:29:53.692"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.701" starttime="20160125 01:29:53.700"></status>
</kw>
<msg timestamp="20160125 01:29:53.702" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,587 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.702" starttime="20160125 01:29:53.698"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.707" starttime="20160125 01:29:53.706"></status>
</kw>
<msg timestamp="20160125 01:29:53.708" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.708" starttime="20160125 01:29:53.703"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.715" starttime="20160125 01:29:53.714"></status>
</kw>
<msg timestamp="20160125 01:29:53.715" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.715" starttime="20160125 01:29:53.709"></status>
</kw>
<msg timestamp="20160125 01:29:53.717" level="INFO">${imsi} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:53.716" starttime="20160125 01:29:53.678"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.723" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:29:53.722" starttime="20160125 01:29:53.721"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.725" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.724" starttime="20160125 01:29:53.723"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.727" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.726" starttime="20160125 01:29:53.725"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.730" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.730" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.731" starttime="20160125 01:29:53.728"></status>
</kw>
<msg timestamp="20160125 01:29:53.732" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.732" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.731" starttime="20160125 01:29:53.727"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.736" starttime="20160125 01:29:53.735"></status>
</kw>
<msg timestamp="20160125 01:29:53.737" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.737" starttime="20160125 01:29:53.733"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.742" starttime="20160125 01:29:53.741"></status>
</kw>
<msg timestamp="20160125 01:29:53.743" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.743" starttime="20160125 01:29:53.738"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.748" starttime="20160125 01:29:53.747"></status>
</kw>
<msg timestamp="20160125 01:29:53.749" level="INFO">${resultCode} = 7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.748" starttime="20160125 01:29:53.744"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.755" starttime="20160125 01:29:53.754"></status>
</kw>
<msg timestamp="20160125 01:29:53.757" level="INFO">${resultCode} = 7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.756" starttime="20160125 01:29:53.749"></status>
</kw>
<msg timestamp="20160125 01:29:53.758" level="INFO">${id} = 7490251</msg>
<status status="PASS" endtime="20160125 01:29:53.757" starttime="20160125 01:29:53.718"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.764" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:29:53.764" starttime="20160125 01:29:53.762"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.766" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.766" starttime="20160125 01:29:53.765"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.768" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.768" starttime="20160125 01:29:53.767"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.771" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.772" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.772" starttime="20160125 01:29:53.770"></status>
</kw>
<msg timestamp="20160125 01:29:53.773" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.773" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,588 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.773" starttime="20160125 01:29:53.769"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.778" starttime="20160125 01:29:53.777"></status>
</kw>
<msg timestamp="20160125 01:29:53.779" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,588 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.778" starttime="20160125 01:29:53.774"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.783" starttime="20160125 01:29:53.782"></status>
</kw>
<msg timestamp="20160125 01:29:53.784" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,588 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.784" starttime="20160125 01:29:53.779"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.789" starttime="20160125 01:29:53.788"></status>
</kw>
<msg timestamp="20160125 01:29:53.790" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.790" starttime="20160125 01:29:53.785"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.796" starttime="20160125 01:29:53.795"></status>
</kw>
<msg timestamp="20160125 01:29:53.797" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.797" starttime="20160125 01:29:53.791"></status>
</kw>
<msg timestamp="20160125 01:29:53.798" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:29:53.798" starttime="20160125 01:29:53.759"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.804" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:29:53.804" starttime="20160125 01:29:53.803"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.807" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.806" starttime="20160125 01:29:53.805"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.809" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.808" starttime="20160125 01:29:53.807"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.811" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.812" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.813" starttime="20160125 01:29:53.810"></status>
</kw>
<msg timestamp="20160125 01:29:53.813" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.814" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,589 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:53.813" starttime="20160125 01:29:53.809"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.818" starttime="20160125 01:29:53.817"></status>
</kw>
<msg timestamp="20160125 01:29:53.819" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,589 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:53.819" starttime="20160125 01:29:53.814"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.824" starttime="20160125 01:29:53.823"></status>
</kw>
<msg timestamp="20160125 01:29:53.824" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,589 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:53.824" starttime="20160125 01:29:53.820"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.829" starttime="20160125 01:29:53.828"></status>
</kw>
<msg timestamp="20160125 01:29:53.830" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:53.830" starttime="20160125 01:29:53.825"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.836" starttime="20160125 01:29:53.835"></status>
</kw>
<msg timestamp="20160125 01:29:53.837" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:53.837" starttime="20160125 01:29:53.831"></status>
</kw>
<msg timestamp="20160125 01:29:53.838" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:29:53.838" starttime="20160125 01:29:53.799"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:53.845" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:29:53.844" starttime="20160125 01:29:53.843"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.847" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:53.846" starttime="20160125 01:29:53.845"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.848" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:53.848" starttime="20160125 01:29:53.847"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.851" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:53.852" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:53.852" starttime="20160125 01:29:53.850"></status>
</kw>
<msg timestamp="20160125 01:29:53.853" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:53.854" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,590 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.853" starttime="20160125 01:29:53.849"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.858" starttime="20160125 01:29:53.857"></status>
</kw>
<msg timestamp="20160125 01:29:53.859" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,590 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.858" starttime="20160125 01:29:53.854"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.863" starttime="20160125 01:29:53.862"></status>
</kw>
<msg timestamp="20160125 01:29:53.864" level="INFO">${return_log_entry} = 2016-01-25 01:29:53,590 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.864" starttime="20160125 01:29:53.859"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.869" starttime="20160125 01:29:53.868"></status>
</kw>
<msg timestamp="20160125 01:29:53.870" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.870" starttime="20160125 01:29:53.865"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.876" starttime="20160125 01:29:53.875"></status>
</kw>
<msg timestamp="20160125 01:29:53.877" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.877" starttime="20160125 01:29:53.871"></status>
</kw>
<msg timestamp="20160125 01:29:53.878" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.878" starttime="20160125 01:29:53.839"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.883" starttime="20160125 01:29:53.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.885" starttime="20160125 01:29:53.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.886" starttime="20160125 01:29:53.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:53.892" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:53.893" starttime="20160125 01:29:53.891"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.893" starttime="20160125 01:29:53.890"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.894" starttime="20160125 01:29:53.887"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.894" starttime="20160125 01:29:53.879"></status>
</kw>
<msg timestamp="20160125 01:29:53.896" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:29:53.897" level="INFO">${provId} = 1</msg>
<msg timestamp="20160125 01:29:53.897" level="INFO">${imsi} = 732123710001000</msg>
<msg timestamp="20160125 01:29:53.897" level="INFO">${id} = 7490251</msg>
<msg timestamp="20160125 01:29:53.897" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:29:53.898" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:29:53.898" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:53.896" starttime="20160125 01:29:53.348"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.910" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.910" starttime="20160125 01:29:53.908"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.910" starttime="20160125 01:29:53.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.913" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.914" starttime="20160125 01:29:53.912"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.914" starttime="20160125 01:29:53.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.917" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:53.917" starttime="20160125 01:29:53.916"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.918" starttime="20160125 01:29:53.915"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:53.918" starttime="20160125 01:29:53.904"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:53.920" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:53.921" starttime="20160125 01:29:53.919"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.922" starttime="20160125 01:29:53.921"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.924" starttime="20160125 01:29:53.923"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.926" starttime="20160125 01:29:53.925"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.927" starttime="20160125 01:29:53.926"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.929" starttime="20160125 01:29:53.928"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:53.931" starttime="20160125 01:29:53.929"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:53.933" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=7490251']</msg>
<msg timestamp="20160125 01:29:54.439" level="INFO">01:29:54,433 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:29:54,434 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490253
01:29:54,435 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:29:54,436 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:29:54,437 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:54.439" starttime="20160125 01:29:53.932"></status>
</kw>
<msg timestamp="20160125 01:29:54.441" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.442" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:29:54.440" starttime="20160125 01:29:53.931"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:54.449" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:29:54.448" starttime="20160125 01:29:54.447"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.451" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:54.450" starttime="20160125 01:29:54.449"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.453" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:54.452" starttime="20160125 01:29:54.451"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.456" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:54.456" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:54.457" starttime="20160125 01:29:54.454"></status>
</kw>
<msg timestamp="20160125 01:29:54.458" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.458" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,433 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:54.457" starttime="20160125 01:29:54.453"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.463" starttime="20160125 01:29:54.462"></status>
</kw>
<msg timestamp="20160125 01:29:54.463" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,433 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:54.463" starttime="20160125 01:29:54.458"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.468" starttime="20160125 01:29:54.467"></status>
</kw>
<msg timestamp="20160125 01:29:54.469" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,433 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:29:54.469" starttime="20160125 01:29:54.464"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.474" starttime="20160125 01:29:54.473"></status>
</kw>
<msg timestamp="20160125 01:29:54.475" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:54.474" starttime="20160125 01:29:54.470"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.481" starttime="20160125 01:29:54.480"></status>
</kw>
<msg timestamp="20160125 01:29:54.482" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:54.481" starttime="20160125 01:29:54.475"></status>
</kw>
<msg timestamp="20160125 01:29:54.483" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:54.482" starttime="20160125 01:29:54.443"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:54.489" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160125 01:29:54.488" starttime="20160125 01:29:54.487"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.491" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:54.490" starttime="20160125 01:29:54.489"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.493" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:54.492" starttime="20160125 01:29:54.491"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.495" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:54.496" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:54.497" starttime="20160125 01:29:54.494"></status>
</kw>
<msg timestamp="20160125 01:29:54.497" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.498" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,434 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.497" starttime="20160125 01:29:54.493"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.502" starttime="20160125 01:29:54.501"></status>
</kw>
<msg timestamp="20160125 01:29:54.503" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,434 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.503" starttime="20160125 01:29:54.498"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.508" starttime="20160125 01:29:54.506"></status>
</kw>
<msg timestamp="20160125 01:29:54.508" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,434 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.508" starttime="20160125 01:29:54.504"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.513" starttime="20160125 01:29:54.512"></status>
</kw>
<msg timestamp="20160125 01:29:54.514" level="INFO">${resultCode} = 7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.514" starttime="20160125 01:29:54.509"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.520" starttime="20160125 01:29:54.519"></status>
</kw>
<msg timestamp="20160125 01:29:54.521" level="INFO">${resultCode} = 7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.521" starttime="20160125 01:29:54.515"></status>
</kw>
<msg timestamp="20160125 01:29:54.522" level="INFO">${accountId} = 7490253</msg>
<status status="PASS" endtime="20160125 01:29:54.522" starttime="20160125 01:29:54.484"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:54.528" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160125 01:29:54.528" starttime="20160125 01:29:54.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.530" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:54.530" starttime="20160125 01:29:54.529"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.532" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:54.532" starttime="20160125 01:29:54.531"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.535" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:54.535" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:54.536" starttime="20160125 01:29:54.533"></status>
</kw>
<msg timestamp="20160125 01:29:54.537" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.537" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,435 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.536" starttime="20160125 01:29:54.533"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.541" starttime="20160125 01:29:54.540"></status>
</kw>
<msg timestamp="20160125 01:29:54.542" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,435 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.542" starttime="20160125 01:29:54.538"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.547" starttime="20160125 01:29:54.546"></status>
</kw>
<msg timestamp="20160125 01:29:54.548" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,435 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.547" starttime="20160125 01:29:54.543"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.552" starttime="20160125 01:29:54.551"></status>
</kw>
<msg timestamp="20160125 01:29:54.553" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.553" starttime="20160125 01:29:54.548"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.559" starttime="20160125 01:29:54.558"></status>
</kw>
<msg timestamp="20160125 01:29:54.560" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.560" starttime="20160125 01:29:54.554"></status>
</kw>
<msg timestamp="20160125 01:29:54.561" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.561" starttime="20160125 01:29:54.523"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:54.567" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160125 01:29:54.567" starttime="20160125 01:29:54.566"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.569" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:54.569" starttime="20160125 01:29:54.568"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.571" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:54.571" starttime="20160125 01:29:54.570"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.574" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:54.574" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:54.575" starttime="20160125 01:29:54.573"></status>
</kw>
<msg timestamp="20160125 01:29:54.576" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.576" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,436 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.575" starttime="20160125 01:29:54.572"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.580" starttime="20160125 01:29:54.579"></status>
</kw>
<msg timestamp="20160125 01:29:54.581" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,436 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.581" starttime="20160125 01:29:54.577"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.586" starttime="20160125 01:29:54.585"></status>
</kw>
<msg timestamp="20160125 01:29:54.587" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,436 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.586" starttime="20160125 01:29:54.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.591" starttime="20160125 01:29:54.590"></status>
</kw>
<msg timestamp="20160125 01:29:54.592" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.592" starttime="20160125 01:29:54.587"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.599" starttime="20160125 01:29:54.598"></status>
</kw>
<msg timestamp="20160125 01:29:54.600" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.599" starttime="20160125 01:29:54.593"></status>
</kw>
<msg timestamp="20160125 01:29:54.601" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160125 01:29:54.600" starttime="20160125 01:29:54.562"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:29:54.607" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160125 01:29:54.606" starttime="20160125 01:29:54.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.609" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:29:54.608" starttime="20160125 01:29:54.607"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.610" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:29:54.610" starttime="20160125 01:29:54.609"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.613" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:29:54.614" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:29:54.614" starttime="20160125 01:29:54.612"></status>
</kw>
<msg timestamp="20160125 01:29:54.615" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:29:54.615" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,437 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:54.615" starttime="20160125 01:29:54.611"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.620" starttime="20160125 01:29:54.619"></status>
</kw>
<msg timestamp="20160125 01:29:54.621" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,437 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:54.620" starttime="20160125 01:29:54.616"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.625" starttime="20160125 01:29:54.624"></status>
</kw>
<msg timestamp="20160125 01:29:54.626" level="INFO">${return_log_entry} = 2016-01-25 01:29:54,437 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:29:54.626" starttime="20160125 01:29:54.621"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.631" starttime="20160125 01:29:54.629"></status>
</kw>
<msg timestamp="20160125 01:29:54.632" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:54.631" starttime="20160125 01:29:54.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.638" starttime="20160125 01:29:54.637"></status>
</kw>
<msg timestamp="20160125 01:29:54.639" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:29:54.639" starttime="20160125 01:29:54.632"></status>
</kw>
<msg timestamp="20160125 01:29:54.640" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160125 01:29:54.640" starttime="20160125 01:29:54.602"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.645" starttime="20160125 01:29:54.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.646" starttime="20160125 01:29:54.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.648" starttime="20160125 01:29:54.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:29:54.653" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:29:54.654" starttime="20160125 01:29:54.652"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:54.654" starttime="20160125 01:29:54.651"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:54.655" starttime="20160125 01:29:54.648"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:54.655" starttime="20160125 01:29:54.641"></status>
</kw>
<msg timestamp="20160125 01:29:54.658" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160125 01:29:54.658" level="INFO">${accId} = 7490253</msg>
<msg timestamp="20160125 01:29:54.658" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160125 01:29:54.658" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160125 01:29:54.659" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160125 01:29:54.657" starttime="20160125 01:29:53.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.660" starttime="20160125 01:29:54.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.662" starttime="20160125 01:29:54.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:54.663" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160125 01:29:54.664" starttime="20160125 01:29:54.662"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:29:54.664" starttime="20160125 01:29:46.423"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:54.669" starttime="20160125 01:29:42.465"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:29:54.677" starttime="20160125 01:29:42.446"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit" id="s1-s1-s1-s1-s1-s4" name="MOC PREPAID ONNET-NoCredit">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit/MOC_PREPAID_ONNET-NoCredit-robot-suite.txt" id="s1-s1-s1-s1-s1-s4-s1" name="MOC PREPAID ONNET-NoCredit-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:29:54.845" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:29:54.852" level="INFO">${date} = Mon Jan 25 01:29:54 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:54.850" starttime="20160125 01:29:54.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:54.855" level="INFO">Date and time: Mon Jan 25 01:29:54 CET 2016</msg>
<status status="PASS" endtime="20160125 01:29:54.857" starttime="20160125 01:29:54.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:54.861" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:29:54.862" starttime="20160125 01:29:54.858"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.922" starttime="20160125 01:29:54.920"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:54.974" starttime="20160125 01:29:54.931"></status>
</kw>
<msg timestamp="20160125 01:29:54.976" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160125 01:29:54.975" starttime="20160125 01:29:54.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:54.981" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:55.460" level="INFO">Read output: Last login: Mon Jan 25 00:29:43 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:55.460" starttime="20160125 01:29:54.980"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:55.461" starttime="20160125 01:29:54.976"></status>
</kw>
<msg timestamp="20160125 01:29:55.463" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160125 01:29:55.463" starttime="20160125 01:29:54.911"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:55.467" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:55.467" starttime="20160125 01:29:55.464"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:55.469" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:29:55.841" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:55.842" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:55.841" starttime="20160125 01:29:55.468"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.845" starttime="20160125 01:29:55.844"></status>
</kw>
<msg timestamp="20160125 01:29:55.846" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:55.846" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:55.846" starttime="20160125 01:29:55.842"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.851" starttime="20160125 01:29:55.850"></status>
</kw>
<msg timestamp="20160125 01:29:55.852" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:55.851" starttime="20160125 01:29:55.847"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:29:55.853" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:29:55.853" starttime="20160125 01:29:55.852"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:55.855" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:55.855" starttime="20160125 01:29:55.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.857" starttime="20160125 01:29:55.856"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.862" starttime="20160125 01:29:55.861"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.864" starttime="20160125 01:29:55.863"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:55.866" starttime="20160125 01:29:55.858"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.870" starttime="20160125 01:29:55.869"></status>
</kw>
<msg timestamp="20160125 01:29:55.871" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:55.871" starttime="20160125 01:29:55.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.873" starttime="20160125 01:29:55.872"></status>
</kw>
<msg timestamp="20160125 01:29:55.874" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:29:55.874" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:55.873" starttime="20160125 01:29:54.883"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.901" starttime="20160125 01:29:55.900"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:55.957" starttime="20160125 01:29:55.905"></status>
</kw>
<msg timestamp="20160125 01:29:55.960" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160125 01:29:55.959" starttime="20160125 01:29:55.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:55.971" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:56.422" level="INFO">Read output: Last login: Mon Jan 25 00:29:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:56.423" starttime="20160125 01:29:55.969"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:56.424" starttime="20160125 01:29:55.961"></status>
</kw>
<msg timestamp="20160125 01:29:56.426" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160125 01:29:56.425" starttime="20160125 01:29:55.896"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:56.430" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:56.430" starttime="20160125 01:29:56.426"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:56.432" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:29:56.799" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:56.801" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:56.800" starttime="20160125 01:29:56.431"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.808" starttime="20160125 01:29:56.805"></status>
</kw>
<msg timestamp="20160125 01:29:56.810" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:56.810" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:56.809" starttime="20160125 01:29:56.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.820" starttime="20160125 01:29:56.818"></status>
</kw>
<msg timestamp="20160125 01:29:56.822" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:56.821" starttime="20160125 01:29:56.812"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:29:56.826" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:29:56.826" starttime="20160125 01:29:56.823"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:56.831" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:56.830" starttime="20160125 01:29:56.828"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.833" starttime="20160125 01:29:56.832"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.845" starttime="20160125 01:29:56.842"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.849" starttime="20160125 01:29:56.846"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:56.852" starttime="20160125 01:29:56.835"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.861" starttime="20160125 01:29:56.859"></status>
</kw>
<msg timestamp="20160125 01:29:56.863" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:56.862" starttime="20160125 01:29:56.853"></status>
</kw>
<msg timestamp="20160125 01:29:56.867" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:29:56.868" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:56.865" starttime="20160125 01:29:55.884"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:56.926" starttime="20160125 01:29:56.923"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.017" starttime="20160125 01:29:56.934"></status>
</kw>
<msg timestamp="20160125 01:29:57.023" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160125 01:29:57.021" starttime="20160125 01:29:56.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:57.036" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:57.468" level="INFO">Read output: Last login: Mon Jan 25 00:29:45 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:57.469" starttime="20160125 01:29:57.034"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:57.470" starttime="20160125 01:29:57.025"></status>
</kw>
<msg timestamp="20160125 01:29:57.472" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160125 01:29:57.471" starttime="20160125 01:29:56.914"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:57.476" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:57.476" starttime="20160125 01:29:57.472"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:57.478" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:29:57.615" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:57.617" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:57.617" starttime="20160125 01:29:57.477"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.625" starttime="20160125 01:29:57.622"></status>
</kw>
<msg timestamp="20160125 01:29:57.627" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:57.628" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:57.626" starttime="20160125 01:29:57.619"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.638" starttime="20160125 01:29:57.636"></status>
</kw>
<msg timestamp="20160125 01:29:57.640" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:57.639" starttime="20160125 01:29:57.629"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:57.644" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:29:57.643" starttime="20160125 01:29:57.641"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:57.648" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:57.647" starttime="20160125 01:29:57.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.651" starttime="20160125 01:29:57.649"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.664" starttime="20160125 01:29:57.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.668" starttime="20160125 01:29:57.665"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:57.672" starttime="20160125 01:29:57.655"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.681" starttime="20160125 01:29:57.679"></status>
</kw>
<msg timestamp="20160125 01:29:57.683" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:57.682" starttime="20160125 01:29:57.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.686" starttime="20160125 01:29:57.684"></status>
</kw>
<msg timestamp="20160125 01:29:57.690" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:29:57.690" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:57.688" starttime="20160125 01:29:56.887"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.749" starttime="20160125 01:29:57.746"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:57.801" starttime="20160125 01:29:57.757"></status>
</kw>
<msg timestamp="20160125 01:29:57.802" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160125 01:29:57.802" starttime="20160125 01:29:57.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:29:57.807" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:29:58.250" level="INFO">Read output: Last login: Mon Jan 25 00:29:45 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:29:58.251" starttime="20160125 01:29:57.806"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.252" starttime="20160125 01:29:57.803"></status>
</kw>
<msg timestamp="20160125 01:29:58.254" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160125 01:29:58.253" starttime="20160125 01:29:57.737"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:29:58.258" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:29:58.257" starttime="20160125 01:29:58.254"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:29:58.259" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:29:58.352" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:29:58.353" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:58.352" starttime="20160125 01:29:58.258"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.356" starttime="20160125 01:29:58.354"></status>
</kw>
<msg timestamp="20160125 01:29:58.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:29:58.357" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:29:58.356" starttime="20160125 01:29:58.353"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.361" starttime="20160125 01:29:58.360"></status>
</kw>
<msg timestamp="20160125 01:29:58.362" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:29:58.361" starttime="20160125 01:29:58.357"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:29:58.364" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:29:58.363" starttime="20160125 01:29:58.362"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:29:58.366" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:58.365" starttime="20160125 01:29:58.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.367" starttime="20160125 01:29:58.366"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.372" starttime="20160125 01:29:58.371"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.374" starttime="20160125 01:29:58.373"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.376" starttime="20160125 01:29:58.368"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.383" starttime="20160125 01:29:58.382"></status>
</kw>
<msg timestamp="20160125 01:29:58.383" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:58.383" starttime="20160125 01:29:58.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.385" starttime="20160125 01:29:58.384"></status>
</kw>
<msg timestamp="20160125 01:29:58.386" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:29:58.387" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:58.386" starttime="20160125 01:29:57.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:58.388" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:29:58.389" starttime="20160125 01:29:58.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:58.391" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:29:58.391" starttime="20160125 01:29:58.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:58.393" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:29:58.393" starttime="20160125 01:29:58.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:29:58.395" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:29:58.395" starttime="20160125 01:29:58.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:29:58.397" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:58.397" starttime="20160125 01:29:58.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:29:58.399" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:58.399" starttime="20160125 01:29:58.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:29:58.401" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:58.401" starttime="20160125 01:29:58.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:29:58.403" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:29:58.403" starttime="20160125 01:29:58.402"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.409" starttime="20160125 01:29:58.406"></status>
</kw>
<msg timestamp="20160125 01:29:58.410" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:58.410" starttime="20160125 01:29:58.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.412" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:29:58.412" starttime="20160125 01:29:58.410"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.413" starttime="20160125 01:29:54.837"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s4-s1-t1" name="Run MOC NoCredit Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.419" starttime="20160125 01:29:58.418"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160125 01:29:58.431" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160125 01:29:58.430" starttime="20160125 01:29:58.429"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.438" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:29:58.438" starttime="20160125 01:29:58.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.440" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:29:58.440" starttime="20160125 01:29:58.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.442" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:29:58.442" starttime="20160125 01:29:58.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.444" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160125 01:29:58.444" starttime="20160125 01:29:58.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.445" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:29:58.446" starttime="20160125 01:29:58.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.447" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:29:58.448" starttime="20160125 01:29:58.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.449" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:29:58.449" starttime="20160125 01:29:58.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.451" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:29:58.451" starttime="20160125 01:29:58.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.453" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:29:58.453" starttime="20160125 01:29:58.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.455" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160125 01:29:58.455" starttime="20160125 01:29:58.454"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.462" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:58.462" starttime="20160125 01:29:58.460"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.463" starttime="20160125 01:29:58.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.465" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:58.466" starttime="20160125 01:29:58.464"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.466" starttime="20160125 01:29:58.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.474" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:29:58.474" starttime="20160125 01:29:58.472"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.474" starttime="20160125 01:29:58.467"></status>
</kw>
<status status="PASS" endtime="20160125 01:29:58.475" starttime="20160125 01:29:58.456"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:29:58.477" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:29:58.477" starttime="20160125 01:29:58.476"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.479" starttime="20160125 01:29:58.478"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.481" starttime="20160125 01:29:58.480"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.482" starttime="20160125 01:29:58.481"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.484" starttime="20160125 01:29:58.483"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.485" starttime="20160125 01:29:58.484"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.487" starttime="20160125 01:29:58.486"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.488" starttime="20160125 01:29:58.487"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.490" starttime="20160125 01:29:58.489"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.492" starttime="20160125 01:29:58.491"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.493" starttime="20160125 01:29:58.492"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.495" starttime="20160125 01:29:58.494"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:29:58.497" starttime="20160125 01:29:58.496"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:29:58.499" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160125 01:30:00.934" level="INFO">01:30:00,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:00.934" starttime="20160125 01:29:58.498"></status>
</kw>
<msg timestamp="20160125 01:30:00.936" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:00.936" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:00.935" starttime="20160125 01:29:58.497"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:00.943" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:00.942" starttime="20160125 01:30:00.941"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:00.945" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:00.944" starttime="20160125 01:30:00.943"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:00.948" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:00.947" starttime="20160125 01:30:00.945"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:00.954" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:00.955" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:00.956" starttime="20160125 01:30:00.951"></status>
</kw>
<msg timestamp="20160125 01:30:00.958" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:00.959" level="INFO">${return_log_entry} = 2016-01-25 01:30:00,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:00.957" starttime="20160125 01:30:00.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:00.969" starttime="20160125 01:30:00.966"></status>
</kw>
<msg timestamp="20160125 01:30:00.970" level="INFO">${return_log_entry} = 2016-01-25 01:30:00,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:00.969" starttime="20160125 01:30:00.960"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:00.975" starttime="20160125 01:30:00.974"></status>
</kw>
<msg timestamp="20160125 01:30:00.977" level="INFO">${return_log_entry} = 2016-01-25 01:30:00,932 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:00.976" starttime="20160125 01:30:00.971"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:00.982" starttime="20160125 01:30:00.981"></status>
</kw>
<msg timestamp="20160125 01:30:00.983" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:00.983" starttime="20160125 01:30:00.977"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:00.991" starttime="20160125 01:30:00.990"></status>
</kw>
<msg timestamp="20160125 01:30:00.992" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:00.992" starttime="20160125 01:30:00.984"></status>
</kw>
<msg timestamp="20160125 01:30:00.995" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:00.993" starttime="20160125 01:30:00.938"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.007" starttime="20160125 01:30:01.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.010" starttime="20160125 01:30:01.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.013" starttime="20160125 01:30:01.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:01.026" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:01.027" starttime="20160125 01:30:01.023"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:01.028" starttime="20160125 01:30:01.021"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:01.029" starttime="20160125 01:30:01.014"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:01.030" starttime="20160125 01:30:00.997"></status>
</kw>
<msg timestamp="20160125 01:30:01.034" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:30:01.033" starttime="20160125 01:29:58.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:30:01.038" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:01.039" starttime="20160125 01:30:01.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:01.042" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:30:01.043" starttime="20160125 01:30:01.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.046" starttime="20160125 01:30:01.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:01.049" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160125 01:30:01.050" starttime="20160125 01:30:01.047"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Final Rerouting">
<doc>Initiates a MOC session that is expected to do a final reroute to another number</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:01.067" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:30:01.066" starttime="20160125 01:30:01.064"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:01.071" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:30:01.070" starttime="20160125 01:30:01.068"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:30:01.075" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:30:01.074" starttime="20160125 01:30:01.072"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</arg>
</arguments>
<msg timestamp="20160125 01:30:01.078" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</msg>
<status status="PASS" endtime="20160125 01:30:01.078" starttime="20160125 01:30:01.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.081" starttime="20160125 01:30:01.080"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:01.087" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:01.088" starttime="20160125 01:30:01.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.090" starttime="20160125 01:30:01.089"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:30:01.095" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:01.096" starttime="20160125 01:30:01.092"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>Mocfinal-rerouting parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:01.100" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:01.101" starttime="20160125 01:30:01.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.103" starttime="20160125 01:30:01.102"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:30:01.107" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:01.107" starttime="20160125 01:30:01.104"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:30:01.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:01.113" starttime="20160125 01:30:01.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:01.115" starttime="20160125 01:30:01.114"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:30:01.127" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:04.185" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:04.182" starttime="20160125 01:30:01.116"></status>
</kw>
<msg timestamp="20160125 01:30:04.188" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:04.187" starttime="20160125 01:30:01.053"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:04.192" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:30:04.193" starttime="20160125 01:30:04.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:30:04.197" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:04.198" starttime="20160125 01:30:04.194"></status>
</kw>
<doc>Insufficient funds MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:30:04.200" starttime="20160125 01:29:58.414"></status>
</test>
<doc>Testing the prepaid MOC call from the calling party that has empty account balance. It is expected that calling party will hear
announcement (call is redirected) that it has insufficient funds (call is successful from platform point of view)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:04.208" starttime="20160125 01:29:54.698"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:04.226" starttime="20160125 01:29:54.682"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s1-s1-s5" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s1-s1-s5-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:30:04.501" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:04.503" level="INFO">${date} = Mon Jan 25 01:30:04 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:04.502" starttime="20160125 01:30:04.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:04.507" level="INFO">Date and time: Mon Jan 25 01:30:04 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:04.508" starttime="20160125 01:30:04.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:04.511" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:30:04.512" starttime="20160125 01:30:04.509"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:04.568" starttime="20160125 01:30:04.566"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:04.629" starttime="20160125 01:30:04.576"></status>
</kw>
<msg timestamp="20160125 01:30:04.631" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160125 01:30:04.630" starttime="20160125 01:30:04.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:04.641" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:05.094" level="INFO">Read output: Last login: Mon Jan 25 00:29:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:05.095" starttime="20160125 01:30:04.639"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:05.096" starttime="20160125 01:30:04.632"></status>
</kw>
<msg timestamp="20160125 01:30:05.099" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160125 01:30:05.097" starttime="20160125 01:30:04.557"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:05.103" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:05.103" starttime="20160125 01:30:05.100"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:05.105" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:30:05.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:05.486" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:05.485" starttime="20160125 01:30:05.104"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.494" starttime="20160125 01:30:05.491"></status>
</kw>
<msg timestamp="20160125 01:30:05.496" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:05.497" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:05.495" starttime="20160125 01:30:05.488"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.506" starttime="20160125 01:30:05.504"></status>
</kw>
<msg timestamp="20160125 01:30:05.508" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:05.507" starttime="20160125 01:30:05.498"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:30:05.512" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:05.512" starttime="20160125 01:30:05.509"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:05.516" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:05.516" starttime="20160125 01:30:05.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.519" starttime="20160125 01:30:05.518"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.530" starttime="20160125 01:30:05.528"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.534" starttime="20160125 01:30:05.532"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:05.537" starttime="20160125 01:30:05.521"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.546" starttime="20160125 01:30:05.544"></status>
</kw>
<msg timestamp="20160125 01:30:05.548" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:05.547" starttime="20160125 01:30:05.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.551" starttime="20160125 01:30:05.549"></status>
</kw>
<msg timestamp="20160125 01:30:05.554" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:30:05.555" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:05.553" starttime="20160125 01:30:04.530"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.611" starttime="20160125 01:30:05.609"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:05.662" starttime="20160125 01:30:05.619"></status>
</kw>
<msg timestamp="20160125 01:30:05.663" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160125 01:30:05.663" starttime="20160125 01:30:05.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:05.669" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:06.123" level="INFO">Read output: Last login: Mon Jan 25 00:29:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:06.124" starttime="20160125 01:30:05.668"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:06.125" starttime="20160125 01:30:05.664"></status>
</kw>
<msg timestamp="20160125 01:30:06.128" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160125 01:30:06.127" starttime="20160125 01:30:05.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:06.132" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:06.132" starttime="20160125 01:30:06.128"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:06.134" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:30:06.504" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:06.505" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:06.505" starttime="20160125 01:30:06.133"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.509" starttime="20160125 01:30:06.507"></status>
</kw>
<msg timestamp="20160125 01:30:06.510" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:06.510" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:06.509" starttime="20160125 01:30:06.506"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.515" starttime="20160125 01:30:06.514"></status>
</kw>
<msg timestamp="20160125 01:30:06.516" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:06.515" starttime="20160125 01:30:06.511"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:30:06.517" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:06.517" starttime="20160125 01:30:06.516"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:06.519" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:06.519" starttime="20160125 01:30:06.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.521" starttime="20160125 01:30:06.520"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.526" starttime="20160125 01:30:06.525"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.527" starttime="20160125 01:30:06.526"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:06.529" starttime="20160125 01:30:06.522"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.533" starttime="20160125 01:30:06.532"></status>
</kw>
<msg timestamp="20160125 01:30:06.534" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:06.534" starttime="20160125 01:30:06.530"></status>
</kw>
<msg timestamp="20160125 01:30:06.536" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:30:06.536" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:06.535" starttime="20160125 01:30:05.573"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.562" starttime="20160125 01:30:06.561"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:06.605" starttime="20160125 01:30:06.565"></status>
</kw>
<msg timestamp="20160125 01:30:06.607" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160125 01:30:06.606" starttime="20160125 01:30:06.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:06.611" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:07.067" level="INFO">Read output: Last login: Mon Jan 25 00:29:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:07.068" starttime="20160125 01:30:06.610"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:07.069" starttime="20160125 01:30:06.607"></status>
</kw>
<msg timestamp="20160125 01:30:07.071" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160125 01:30:07.070" starttime="20160125 01:30:06.557"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:07.075" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:07.075" starttime="20160125 01:30:07.072"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:07.077" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:30:07.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:07.251" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:07.251" starttime="20160125 01:30:07.076"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.254" starttime="20160125 01:30:07.253"></status>
</kw>
<msg timestamp="20160125 01:30:07.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:07.255" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:07.255" starttime="20160125 01:30:07.252"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.260" starttime="20160125 01:30:07.259"></status>
</kw>
<msg timestamp="20160125 01:30:07.261" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:07.260" starttime="20160125 01:30:07.256"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:07.262" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:07.262" starttime="20160125 01:30:07.261"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:07.264" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:07.264" starttime="20160125 01:30:07.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.266" starttime="20160125 01:30:07.265"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.271" starttime="20160125 01:30:07.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.277" starttime="20160125 01:30:07.271"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:07.278" starttime="20160125 01:30:07.266"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.282" starttime="20160125 01:30:07.281"></status>
</kw>
<msg timestamp="20160125 01:30:07.283" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:07.282" starttime="20160125 01:30:07.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.284" starttime="20160125 01:30:07.283"></status>
</kw>
<msg timestamp="20160125 01:30:07.286" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:30:07.286" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:07.285" starttime="20160125 01:30:06.544"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.312" starttime="20160125 01:30:07.311"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.372" starttime="20160125 01:30:07.316"></status>
</kw>
<msg timestamp="20160125 01:30:07.374" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160125 01:30:07.373" starttime="20160125 01:30:07.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:07.386" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:07.835" level="INFO">Read output: Last login: Mon Jan 25 00:29:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:07.836" starttime="20160125 01:30:07.384"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:07.837" starttime="20160125 01:30:07.376"></status>
</kw>
<msg timestamp="20160125 01:30:07.840" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160125 01:30:07.839" starttime="20160125 01:30:07.307"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:07.846" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:07.846" starttime="20160125 01:30:07.841"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:07.848" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:30:07.941" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:07.942" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:07.942" starttime="20160125 01:30:07.847"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.945" starttime="20160125 01:30:07.944"></status>
</kw>
<msg timestamp="20160125 01:30:07.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:07.947" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:07.946" starttime="20160125 01:30:07.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.951" starttime="20160125 01:30:07.950"></status>
</kw>
<msg timestamp="20160125 01:30:07.952" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:07.951" starttime="20160125 01:30:07.947"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:07.954" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:07.953" starttime="20160125 01:30:07.952"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:07.955" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:07.955" starttime="20160125 01:30:07.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.957" starttime="20160125 01:30:07.956"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.963" starttime="20160125 01:30:07.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.968" starttime="20160125 01:30:07.964"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:07.972" starttime="20160125 01:30:07.958"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.981" starttime="20160125 01:30:07.979"></status>
</kw>
<msg timestamp="20160125 01:30:07.983" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:07.983" starttime="20160125 01:30:07.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:07.986" starttime="20160125 01:30:07.984"></status>
</kw>
<msg timestamp="20160125 01:30:07.989" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:30:07.990" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:07.988" starttime="20160125 01:30:07.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:07.993" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:07.994" starttime="20160125 01:30:07.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:07.998" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:07.999" starttime="20160125 01:30:07.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:08.003" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:08.004" starttime="20160125 01:30:08.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:08.008" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:08.009" starttime="20160125 01:30:08.005"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:30:08.012" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:08.013" starttime="20160125 01:30:08.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:30:08.017" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:08.018" starttime="20160125 01:30:08.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:30:08.021" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:08.022" starttime="20160125 01:30:08.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:30:08.025" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:08.026" starttime="20160125 01:30:08.023"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.039" starttime="20160125 01:30:08.034"></status>
</kw>
<msg timestamp="20160125 01:30:08.041" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:08.040" starttime="20160125 01:30:08.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.045" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:08.046" starttime="20160125 01:30:08.042"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:08.047" starttime="20160125 01:30:04.489"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s5-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.060" starttime="20160125 01:30:08.058"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:30:08.064" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:30:08.063" starttime="20160125 01:30:08.061"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.079" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:30:08.080" starttime="20160125 01:30:08.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.083" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:30:08.084" starttime="20160125 01:30:08.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.087" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:30:08.088" starttime="20160125 01:30:08.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.091" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:30:08.092" starttime="20160125 01:30:08.089"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.095" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:08.096" starttime="20160125 01:30:08.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.099" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:30:08.100" starttime="20160125 01:30:08.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.103" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:08.103" starttime="20160125 01:30:08.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.106" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:30:08.107" starttime="20160125 01:30:08.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.110" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:08.111" starttime="20160125 01:30:08.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.114" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:30:08.115" starttime="20160125 01:30:08.112"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.128" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:08.129" starttime="20160125 01:30:08.125"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:08.130" starttime="20160125 01:30:08.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.135" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:08.136" starttime="20160125 01:30:08.133"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:08.137" starttime="20160125 01:30:08.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.142" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:08.150" starttime="20160125 01:30:08.140"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:08.151" starttime="20160125 01:30:08.138"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:08.152" starttime="20160125 01:30:08.117"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:08.156" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:08.156" starttime="20160125 01:30:08.153"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.160" starttime="20160125 01:30:08.158"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.163" starttime="20160125 01:30:08.161"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.166" starttime="20160125 01:30:08.164"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.169" starttime="20160125 01:30:08.167"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.172" starttime="20160125 01:30:08.170"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.175" starttime="20160125 01:30:08.173"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.178" starttime="20160125 01:30:08.176"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.182" starttime="20160125 01:30:08.179"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.185" starttime="20160125 01:30:08.183"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.188" starttime="20160125 01:30:08.186"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.191" starttime="20160125 01:30:08.189"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:08.195" starttime="20160125 01:30:08.193"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:08.199" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:30:12.174" level="INFO">01:30:12,172 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:12.175" starttime="20160125 01:30:08.198"></status>
</kw>
<msg timestamp="20160125 01:30:12.177" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:12.177" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:12.176" starttime="20160125 01:30:08.196"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:12.183" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:12.183" starttime="20160125 01:30:12.181"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.185" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:12.184" starttime="20160125 01:30:12.183"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.186" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:12.186" starttime="20160125 01:30:12.185"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.189" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:12.190" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:12.190" starttime="20160125 01:30:12.188"></status>
</kw>
<msg timestamp="20160125 01:30:12.191" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:12.191" level="INFO">${return_log_entry} = 2016-01-25 01:30:12,172 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:12.191" starttime="20160125 01:30:12.187"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.196" starttime="20160125 01:30:12.195"></status>
</kw>
<msg timestamp="20160125 01:30:12.197" level="INFO">${return_log_entry} = 2016-01-25 01:30:12,172 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:12.196" starttime="20160125 01:30:12.192"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.201" starttime="20160125 01:30:12.200"></status>
</kw>
<msg timestamp="20160125 01:30:12.202" level="INFO">${return_log_entry} = 2016-01-25 01:30:12,172 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:12.202" starttime="20160125 01:30:12.197"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.207" starttime="20160125 01:30:12.205"></status>
</kw>
<msg timestamp="20160125 01:30:12.207" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:12.207" starttime="20160125 01:30:12.203"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.213" starttime="20160125 01:30:12.212"></status>
</kw>
<msg timestamp="20160125 01:30:12.214" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:12.214" starttime="20160125 01:30:12.208"></status>
</kw>
<msg timestamp="20160125 01:30:12.215" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:12.215" starttime="20160125 01:30:12.178"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.220" starttime="20160125 01:30:12.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.222" starttime="20160125 01:30:12.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.223" starttime="20160125 01:30:12.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:12.229" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:12.229" starttime="20160125 01:30:12.227"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:12.230" starttime="20160125 01:30:12.226"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:12.230" starttime="20160125 01:30:12.224"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:12.231" starttime="20160125 01:30:12.216"></status>
</kw>
<msg timestamp="20160125 01:30:12.232" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:30:12.231" starttime="20160125 01:30:08.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:30:12.234" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:12.234" starttime="20160125 01:30:12.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:12.235" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:30:12.236" starttime="20160125 01:30:12.234"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.237" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160125 01:30:12.238" level="INFO">${calling_int} = 573190001000</msg>
<status status="PASS" endtime="20160125 01:30:12.238" starttime="20160125 01:30:12.236"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160125 01:30:12.242" level="INFO">${called_party} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:30:12.241" starttime="20160125 01:30:12.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.243" starttime="20160125 01:30:12.242"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:12.257" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:30:12.257" starttime="20160125 01:30:12.256"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:12.259" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:30:12.259" starttime="20160125 01:30:12.258"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:30:12.261" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:30:12.261" starttime="20160125 01:30:12.260"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:30:12.263" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160125 01:30:12.263" starttime="20160125 01:30:12.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.264" starttime="20160125 01:30:12.263"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:12.267" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:12.267" starttime="20160125 01:30:12.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.269" starttime="20160125 01:30:12.268"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:30:12.271" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:12.271" starttime="20160125 01:30:12.269"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:12.273" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:12.274" starttime="20160125 01:30:12.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.275" starttime="20160125 01:30:12.274"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.277" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:12.278" starttime="20160125 01:30:12.276"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:30:12.280" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:12.281" starttime="20160125 01:30:12.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:12.282" starttime="20160125 01:30:12.281"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:30:12.289" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:17.401" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:17.398" starttime="20160125 01:30:12.283"></status>
</kw>
<msg timestamp="20160125 01:30:17.405" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:17.403" starttime="20160125 01:30:12.251"></status>
</kw>
<msg timestamp="20160125 01:30:17.408" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:17.407" starttime="20160125 01:30:12.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:17.411" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:30:17.412" starttime="20160125 01:30:17.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:17.417" starttime="20160125 01:30:17.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.420" starttime="20160125 01:30:17.418"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.444" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:17.445" starttime="20160125 01:30:17.441"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.446" starttime="20160125 01:30:17.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.452" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:17.453" starttime="20160125 01:30:17.450"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.454" starttime="20160125 01:30:17.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.460" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:17.461" starttime="20160125 01:30:17.457"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.462" starttime="20160125 01:30:17.455"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.463" starttime="20160125 01:30:17.433"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.467" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:17.468" starttime="20160125 01:30:17.464"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.471" starttime="20160125 01:30:17.469"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.475" starttime="20160125 01:30:17.473"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.478" starttime="20160125 01:30:17.476"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.481" starttime="20160125 01:30:17.479"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.484" starttime="20160125 01:30:17.482"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.487" starttime="20160125 01:30:17.485"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:17.492" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000']</msg>
<msg timestamp="20160125 01:30:17.665" level="INFO">01:30:17,655 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:30:17,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:30:17,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490258
01:30:17,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000
01:30:17,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:30:17,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:30:17,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:30:17,663 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:30:17.665" starttime="20160125 01:30:17.490"></status>
</kw>
<msg timestamp="20160125 01:30:17.666" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.666" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:17.666" starttime="20160125 01:30:17.488"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.672" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:17.672" starttime="20160125 01:30:17.671"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.674" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.674" starttime="20160125 01:30:17.673"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.676" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.676" starttime="20160125 01:30:17.675"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.679" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.679" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.680" starttime="20160125 01:30:17.677"></status>
</kw>
<msg timestamp="20160125 01:30:17.681" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.681" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,655 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:17.680" starttime="20160125 01:30:17.677"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.685" starttime="20160125 01:30:17.684"></status>
</kw>
<msg timestamp="20160125 01:30:17.686" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,655 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:17.686" starttime="20160125 01:30:17.681"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.691" starttime="20160125 01:30:17.690"></status>
</kw>
<msg timestamp="20160125 01:30:17.691" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,655 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:17.691" starttime="20160125 01:30:17.687"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.696" starttime="20160125 01:30:17.695"></status>
</kw>
<msg timestamp="20160125 01:30:17.697" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:17.697" starttime="20160125 01:30:17.692"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.703" starttime="20160125 01:30:17.702"></status>
</kw>
<msg timestamp="20160125 01:30:17.704" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:17.703" starttime="20160125 01:30:17.697"></status>
</kw>
<msg timestamp="20160125 01:30:17.705" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:17.705" starttime="20160125 01:30:17.667"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.711" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:30:17.710" starttime="20160125 01:30:17.709"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.712" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.712" starttime="20160125 01:30:17.711"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.714" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.714" starttime="20160125 01:30:17.713"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.717" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.718" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.719" starttime="20160125 01:30:17.716"></status>
</kw>
<msg timestamp="20160125 01:30:17.719" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.720" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:17.719" starttime="20160125 01:30:17.715"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.724" starttime="20160125 01:30:17.723"></status>
</kw>
<msg timestamp="20160125 01:30:17.725" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:17.724" starttime="20160125 01:30:17.720"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.729" starttime="20160125 01:30:17.728"></status>
</kw>
<msg timestamp="20160125 01:30:17.730" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,656 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:17.729" starttime="20160125 01:30:17.725"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.734" starttime="20160125 01:30:17.733"></status>
</kw>
<msg timestamp="20160125 01:30:17.735" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:17.735" starttime="20160125 01:30:17.730"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.741" starttime="20160125 01:30:17.740"></status>
</kw>
<msg timestamp="20160125 01:30:17.742" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:17.742" starttime="20160125 01:30:17.736"></status>
</kw>
<msg timestamp="20160125 01:30:17.743" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:30:17.743" starttime="20160125 01:30:17.706"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.749" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:30:17.749" starttime="20160125 01:30:17.748"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.751" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.751" starttime="20160125 01:30:17.750"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.753" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.752" starttime="20160125 01:30:17.751"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.755" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.756" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.757" starttime="20160125 01:30:17.754"></status>
</kw>
<msg timestamp="20160125 01:30:17.757" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.758" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.757" starttime="20160125 01:30:17.753"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.762" starttime="20160125 01:30:17.761"></status>
</kw>
<msg timestamp="20160125 01:30:17.763" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.762" starttime="20160125 01:30:17.758"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.767" starttime="20160125 01:30:17.766"></status>
</kw>
<msg timestamp="20160125 01:30:17.768" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,658 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.768" starttime="20160125 01:30:17.763"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.773" starttime="20160125 01:30:17.771"></status>
</kw>
<msg timestamp="20160125 01:30:17.773" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.773" starttime="20160125 01:30:17.769"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.779" starttime="20160125 01:30:17.779"></status>
</kw>
<msg timestamp="20160125 01:30:17.780" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.780" starttime="20160125 01:30:17.774"></status>
</kw>
<msg timestamp="20160125 01:30:17.781" level="INFO">${imsi} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:17.781" starttime="20160125 01:30:17.744"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.787" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:30:17.787" starttime="20160125 01:30:17.786"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.789" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.789" starttime="20160125 01:30:17.788"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.791" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.790" starttime="20160125 01:30:17.789"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.794" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.794" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.795" starttime="20160125 01:30:17.792"></status>
</kw>
<msg timestamp="20160125 01:30:17.795" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.796" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.795" starttime="20160125 01:30:17.791"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.800" starttime="20160125 01:30:17.799"></status>
</kw>
<msg timestamp="20160125 01:30:17.801" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.800" starttime="20160125 01:30:17.796"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.805" starttime="20160125 01:30:17.804"></status>
</kw>
<msg timestamp="20160125 01:30:17.806" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,657 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.806" starttime="20160125 01:30:17.801"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.810" starttime="20160125 01:30:17.809"></status>
</kw>
<msg timestamp="20160125 01:30:17.811" level="INFO">${resultCode} = 7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.811" starttime="20160125 01:30:17.806"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.853" starttime="20160125 01:30:17.852"></status>
</kw>
<msg timestamp="20160125 01:30:17.854" level="INFO">${resultCode} = 7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.854" starttime="20160125 01:30:17.812"></status>
</kw>
<msg timestamp="20160125 01:30:17.856" level="INFO">${id} = 7490258</msg>
<status status="PASS" endtime="20160125 01:30:17.855" starttime="20160125 01:30:17.782"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.862" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:30:17.862" starttime="20160125 01:30:17.861"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.864" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.864" starttime="20160125 01:30:17.863"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.866" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.866" starttime="20160125 01:30:17.865"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.869" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.870" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.870" starttime="20160125 01:30:17.868"></status>
</kw>
<msg timestamp="20160125 01:30:17.871" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.871" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.871" starttime="20160125 01:30:17.867"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.876" starttime="20160125 01:30:17.875"></status>
</kw>
<msg timestamp="20160125 01:30:17.877" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.877" starttime="20160125 01:30:17.872"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.881" starttime="20160125 01:30:17.880"></status>
</kw>
<msg timestamp="20160125 01:30:17.882" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,659 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.882" starttime="20160125 01:30:17.877"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.886" starttime="20160125 01:30:17.885"></status>
</kw>
<msg timestamp="20160125 01:30:17.887" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.887" starttime="20160125 01:30:17.882"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.893" starttime="20160125 01:30:17.892"></status>
</kw>
<msg timestamp="20160125 01:30:17.894" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.894" starttime="20160125 01:30:17.888"></status>
</kw>
<msg timestamp="20160125 01:30:17.895" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:17.895" starttime="20160125 01:30:17.857"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.901" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:30:17.900" starttime="20160125 01:30:17.899"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.903" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.902" starttime="20160125 01:30:17.901"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.904" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.904" starttime="20160125 01:30:17.903"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.907" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.908" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.908" starttime="20160125 01:30:17.906"></status>
</kw>
<msg timestamp="20160125 01:30:17.909" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.909" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:17.908" starttime="20160125 01:30:17.905"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.913" starttime="20160125 01:30:17.912"></status>
</kw>
<msg timestamp="20160125 01:30:17.914" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:17.914" starttime="20160125 01:30:17.910"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.918" starttime="20160125 01:30:17.917"></status>
</kw>
<msg timestamp="20160125 01:30:17.919" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,660 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:17.919" starttime="20160125 01:30:17.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.924" starttime="20160125 01:30:17.923"></status>
</kw>
<msg timestamp="20160125 01:30:17.924" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:17.924" starttime="20160125 01:30:17.920"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.931" starttime="20160125 01:30:17.930"></status>
</kw>
<msg timestamp="20160125 01:30:17.931" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:17.931" starttime="20160125 01:30:17.925"></status>
</kw>
<msg timestamp="20160125 01:30:17.932" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:17.932" starttime="20160125 01:30:17.896"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:17.938" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:30:17.938" starttime="20160125 01:30:17.937"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.940" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:17.940" starttime="20160125 01:30:17.939"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.942" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:17.941" starttime="20160125 01:30:17.940"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:17.944" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:17.945" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:17.945" starttime="20160125 01:30:17.943"></status>
</kw>
<msg timestamp="20160125 01:30:17.946" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:17.946" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.946" starttime="20160125 01:30:17.942"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.951" starttime="20160125 01:30:17.950"></status>
</kw>
<msg timestamp="20160125 01:30:17.951" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.951" starttime="20160125 01:30:17.947"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.956" starttime="20160125 01:30:17.955"></status>
</kw>
<msg timestamp="20160125 01:30:17.956" level="INFO">${return_log_entry} = 2016-01-25 01:30:17,662 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.956" starttime="20160125 01:30:17.952"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.961" starttime="20160125 01:30:17.960"></status>
</kw>
<msg timestamp="20160125 01:30:17.962" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.961" starttime="20160125 01:30:17.957"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.968" starttime="20160125 01:30:17.967"></status>
</kw>
<msg timestamp="20160125 01:30:17.969" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.969" starttime="20160125 01:30:17.962"></status>
</kw>
<msg timestamp="20160125 01:30:17.970" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.970" starttime="20160125 01:30:17.933"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.975" starttime="20160125 01:30:17.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.976" starttime="20160125 01:30:17.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:17.978" starttime="20160125 01:30:17.977"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:17.983" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:17.983" starttime="20160125 01:30:17.982"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.984" starttime="20160125 01:30:17.981"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.984" starttime="20160125 01:30:17.978"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:17.985" starttime="20160125 01:30:17.971"></status>
</kw>
<msg timestamp="20160125 01:30:17.987" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:30:17.987" level="INFO">${provId} = 1</msg>
<msg timestamp="20160125 01:30:17.987" level="INFO">${imsi} = 732123710001000</msg>
<msg timestamp="20160125 01:30:17.988" level="INFO">${id} = 7490258</msg>
<msg timestamp="20160125 01:30:17.988" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:30:17.988" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:30:17.988" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:17.986" starttime="20160125 01:30:17.424"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.000" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:18.000" starttime="20160125 01:30:17.998"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.001" starttime="20160125 01:30:17.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.006" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:18.006" starttime="20160125 01:30:18.005"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.007" starttime="20160125 01:30:18.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.010" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:18.010" starttime="20160125 01:30:18.008"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.010" starttime="20160125 01:30:18.007"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.011" starttime="20160125 01:30:17.994"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.013" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:18.014" starttime="20160125 01:30:18.012"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.015" starttime="20160125 01:30:18.014"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.017" starttime="20160125 01:30:18.016"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.018" starttime="20160125 01:30:18.017"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.020" starttime="20160125 01:30:18.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.021" starttime="20160125 01:30:18.020"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.023" starttime="20160125 01:30:18.022"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:18.025" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=7490258']</msg>
<msg timestamp="20160125 01:30:18.507" level="INFO">01:30:18,500 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:30:18,501 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490260
01:30:18,503 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667
01:30:18,504 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:30:18,505 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:18.507" starttime="20160125 01:30:18.024"></status>
</kw>
<msg timestamp="20160125 01:30:18.508" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.509" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:18.508" starttime="20160125 01:30:18.023"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:18.515" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:18.515" starttime="20160125 01:30:18.514"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.517" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:18.517" starttime="20160125 01:30:18.516"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.519" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:18.518" starttime="20160125 01:30:18.518"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.522" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:18.522" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:18.523" starttime="20160125 01:30:18.520"></status>
</kw>
<msg timestamp="20160125 01:30:18.523" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.524" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,500 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:18.523" starttime="20160125 01:30:18.519"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.528" starttime="20160125 01:30:18.527"></status>
</kw>
<msg timestamp="20160125 01:30:18.529" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,500 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:18.529" starttime="20160125 01:30:18.524"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.533" starttime="20160125 01:30:18.532"></status>
</kw>
<msg timestamp="20160125 01:30:18.534" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,500 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:18.534" starttime="20160125 01:30:18.530"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.539" starttime="20160125 01:30:18.537"></status>
</kw>
<msg timestamp="20160125 01:30:18.539" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:18.539" starttime="20160125 01:30:18.535"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.546" starttime="20160125 01:30:18.545"></status>
</kw>
<msg timestamp="20160125 01:30:18.546" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:18.546" starttime="20160125 01:30:18.540"></status>
</kw>
<msg timestamp="20160125 01:30:18.547" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:18.547" starttime="20160125 01:30:18.510"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:18.553" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160125 01:30:18.553" starttime="20160125 01:30:18.552"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.555" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:18.555" starttime="20160125 01:30:18.554"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.557" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:18.557" starttime="20160125 01:30:18.556"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.560" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:18.560" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:18.561" starttime="20160125 01:30:18.558"></status>
</kw>
<msg timestamp="20160125 01:30:18.561" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.562" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,501 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.561" starttime="20160125 01:30:18.558"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.566" starttime="20160125 01:30:18.565"></status>
</kw>
<msg timestamp="20160125 01:30:18.567" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,501 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.566" starttime="20160125 01:30:18.562"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.571" starttime="20160125 01:30:18.570"></status>
</kw>
<msg timestamp="20160125 01:30:18.572" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,501 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.571" starttime="20160125 01:30:18.567"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.576" starttime="20160125 01:30:18.575"></status>
</kw>
<msg timestamp="20160125 01:30:18.577" level="INFO">${resultCode} = 7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.577" starttime="20160125 01:30:18.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.583" starttime="20160125 01:30:18.582"></status>
</kw>
<msg timestamp="20160125 01:30:18.584" level="INFO">${resultCode} = 7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.584" starttime="20160125 01:30:18.578"></status>
</kw>
<msg timestamp="20160125 01:30:18.585" level="INFO">${accountId} = 7490260</msg>
<status status="PASS" endtime="20160125 01:30:18.585" starttime="20160125 01:30:18.548"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:18.591" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160125 01:30:18.590" starttime="20160125 01:30:18.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.593" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:18.592" starttime="20160125 01:30:18.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.595" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:18.594" starttime="20160125 01:30:18.593"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.597" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:18.598" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:18.598" starttime="20160125 01:30:18.596"></status>
</kw>
<msg timestamp="20160125 01:30:18.599" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.599" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,503 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.599" starttime="20160125 01:30:18.595"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.604" starttime="20160125 01:30:18.603"></status>
</kw>
<msg timestamp="20160125 01:30:18.604" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,503 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.604" starttime="20160125 01:30:18.600"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.609" starttime="20160125 01:30:18.608"></status>
</kw>
<msg timestamp="20160125 01:30:18.610" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,503 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.609" starttime="20160125 01:30:18.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.614" starttime="20160125 01:30:18.613"></status>
</kw>
<msg timestamp="20160125 01:30:18.615" level="INFO">${resultCode} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.615" starttime="20160125 01:30:18.610"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.621" starttime="20160125 01:30:18.620"></status>
</kw>
<msg timestamp="20160125 01:30:18.622" level="INFO">${resultCode} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.622" starttime="20160125 01:30:18.616"></status>
</kw>
<msg timestamp="20160125 01:30:18.623" level="INFO">${balance} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.623" starttime="20160125 01:30:18.586"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:18.629" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160125 01:30:18.629" starttime="20160125 01:30:18.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.631" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:18.630" starttime="20160125 01:30:18.629"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.632" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:18.632" starttime="20160125 01:30:18.631"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.635" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:18.636" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:18.636" starttime="20160125 01:30:18.634"></status>
</kw>
<msg timestamp="20160125 01:30:18.637" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.637" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,504 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.637" starttime="20160125 01:30:18.633"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.642" starttime="20160125 01:30:18.641"></status>
</kw>
<msg timestamp="20160125 01:30:18.642" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,504 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.642" starttime="20160125 01:30:18.638"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.647" starttime="20160125 01:30:18.646"></status>
</kw>
<msg timestamp="20160125 01:30:18.647" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,504 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.647" starttime="20160125 01:30:18.643"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.652" starttime="20160125 01:30:18.651"></status>
</kw>
<msg timestamp="20160125 01:30:18.653" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.652" starttime="20160125 01:30:18.648"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.659" starttime="20160125 01:30:18.658"></status>
</kw>
<msg timestamp="20160125 01:30:18.660" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.659" starttime="20160125 01:30:18.653"></status>
</kw>
<msg timestamp="20160125 01:30:18.661" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:18.660" starttime="20160125 01:30:18.624"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:18.667" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160125 01:30:18.667" starttime="20160125 01:30:18.665"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.669" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:18.668" starttime="20160125 01:30:18.667"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.670" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:18.670" starttime="20160125 01:30:18.669"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.673" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:18.674" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:18.674" starttime="20160125 01:30:18.672"></status>
</kw>
<msg timestamp="20160125 01:30:18.675" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:18.675" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,505 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:18.675" starttime="20160125 01:30:18.671"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.680" starttime="20160125 01:30:18.679"></status>
</kw>
<msg timestamp="20160125 01:30:18.680" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,505 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:18.680" starttime="20160125 01:30:18.676"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.685" starttime="20160125 01:30:18.684"></status>
</kw>
<msg timestamp="20160125 01:30:18.686" level="INFO">${return_log_entry} = 2016-01-25 01:30:18,505 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:18.685" starttime="20160125 01:30:18.681"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.690" starttime="20160125 01:30:18.689"></status>
</kw>
<msg timestamp="20160125 01:30:18.691" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:18.691" starttime="20160125 01:30:18.686"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.697" starttime="20160125 01:30:18.696"></status>
</kw>
<msg timestamp="20160125 01:30:18.698" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:18.697" starttime="20160125 01:30:18.691"></status>
</kw>
<msg timestamp="20160125 01:30:18.699" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160125 01:30:18.698" starttime="20160125 01:30:18.662"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.704" starttime="20160125 01:30:18.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.705" starttime="20160125 01:30:18.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.706" starttime="20160125 01:30:18.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:18.712" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:18.713" starttime="20160125 01:30:18.711"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.713" starttime="20160125 01:30:18.710"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.714" starttime="20160125 01:30:18.707"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:18.714" starttime="20160125 01:30:18.700"></status>
</kw>
<msg timestamp="20160125 01:30:18.716" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160125 01:30:18.716" level="INFO">${accId} = 7490260</msg>
<msg timestamp="20160125 01:30:18.717" level="INFO">${bal} = 9999667</msg>
<msg timestamp="20160125 01:30:18.717" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160125 01:30:18.717" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160125 01:30:18.715" starttime="20160125 01:30:17.990"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160125 01:30:18.721" level="INFO">${target_bal} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:18.721" starttime="20160125 01:30:18.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160125 01:30:18.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:18.723" starttime="20160125 01:30:18.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:18.725" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160125 01:30:18.725" starttime="20160125 01:30:18.724"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:30:18.726" starttime="20160125 01:30:08.050"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:18.730" starttime="20160125 01:30:04.273"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:18.737" starttime="20160125 01:30:04.238"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown" id="s1-s1-s1-s1-s1-s6" name="MOC PREPAID ONNET-ToUnknown">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown/MOC_PREPAID_ONNET-ToUnknown-robot-suite.txt" id="s1-s1-s1-s1-s1-s6-s1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:30:18.903" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:18.910" level="INFO">${date} = Mon Jan 25 01:30:18 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:18.909" starttime="20160125 01:30:18.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:18.914" level="INFO">Date and time: Mon Jan 25 01:30:18 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:18.915" starttime="20160125 01:30:18.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:18.918" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:30:18.919" starttime="20160125 01:30:18.916"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:18.977" starttime="20160125 01:30:18.974"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.030" starttime="20160125 01:30:18.986"></status>
</kw>
<msg timestamp="20160125 01:30:19.033" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160125 01:30:19.032" starttime="20160125 01:30:18.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:19.039" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:19.507" level="INFO">Read output: Last login: Mon Jan 25 00:30:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:19.508" starttime="20160125 01:30:19.038"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:19.509" starttime="20160125 01:30:19.033"></status>
</kw>
<msg timestamp="20160125 01:30:19.512" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160125 01:30:19.510" starttime="20160125 01:30:18.965"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:19.516" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:19.516" starttime="20160125 01:30:19.513"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:19.518" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:30:19.889" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:19.890" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:19.889" starttime="20160125 01:30:19.517"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.893" starttime="20160125 01:30:19.892"></status>
</kw>
<msg timestamp="20160125 01:30:19.894" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:19.894" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:19.893" starttime="20160125 01:30:19.891"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.898" starttime="20160125 01:30:19.898"></status>
</kw>
<msg timestamp="20160125 01:30:19.899" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:19.899" starttime="20160125 01:30:19.895"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:30:19.901" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:19.901" starttime="20160125 01:30:19.900"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:19.903" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:19.903" starttime="20160125 01:30:19.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.904" starttime="20160125 01:30:19.903"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.909" starttime="20160125 01:30:19.908"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.914" starttime="20160125 01:30:19.910"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:19.915" starttime="20160125 01:30:19.905"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.919" starttime="20160125 01:30:19.918"></status>
</kw>
<msg timestamp="20160125 01:30:19.920" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:19.919" starttime="20160125 01:30:19.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.921" starttime="20160125 01:30:19.920"></status>
</kw>
<msg timestamp="20160125 01:30:19.922" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:30:19.923" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:19.922" starttime="20160125 01:30:18.938"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:19.948" starttime="20160125 01:30:19.947"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.009" starttime="20160125 01:30:19.952"></status>
</kw>
<msg timestamp="20160125 01:30:20.013" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160125 01:30:20.011" starttime="20160125 01:30:19.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:20.024" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:20.477" level="INFO">Read output: Last login: Mon Jan 25 00:30:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:20.478" starttime="20160125 01:30:20.021"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:20.478" starttime="20160125 01:30:20.014"></status>
</kw>
<msg timestamp="20160125 01:30:20.480" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160125 01:30:20.479" starttime="20160125 01:30:19.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:20.484" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:20.484" starttime="20160125 01:30:20.480"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:20.486" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:30:20.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:20.863" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:20.862" starttime="20160125 01:30:20.485"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.870" starttime="20160125 01:30:20.867"></status>
</kw>
<msg timestamp="20160125 01:30:20.872" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:20.872" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:20.871" starttime="20160125 01:30:20.865"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.881" starttime="20160125 01:30:20.880"></status>
</kw>
<msg timestamp="20160125 01:30:20.882" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:20.882" starttime="20160125 01:30:20.874"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:30:20.884" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:20.884" starttime="20160125 01:30:20.883"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:20.886" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:20.886" starttime="20160125 01:30:20.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.887" starttime="20160125 01:30:20.887"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.892" starttime="20160125 01:30:20.891"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.894" starttime="20160125 01:30:20.893"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:20.897" starttime="20160125 01:30:20.888"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.902" starttime="20160125 01:30:20.901"></status>
</kw>
<msg timestamp="20160125 01:30:20.903" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:20.903" starttime="20160125 01:30:20.898"></status>
</kw>
<msg timestamp="20160125 01:30:20.904" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:30:20.905" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:20.904" starttime="20160125 01:30:19.931"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.929" starttime="20160125 01:30:20.928"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:20.986" starttime="20160125 01:30:20.932"></status>
</kw>
<msg timestamp="20160125 01:30:20.989" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160125 01:30:20.988" starttime="20160125 01:30:20.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:21.000" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:21.427" level="INFO">Read output: Last login: Mon Jan 25 00:30:06 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:21.428" starttime="20160125 01:30:20.997"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:21.430" starttime="20160125 01:30:20.990"></status>
</kw>
<msg timestamp="20160125 01:30:21.434" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160125 01:30:21.432" starttime="20160125 01:30:20.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:21.442" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:21.441" starttime="20160125 01:30:21.435"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:21.445" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:30:21.611" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:21.612" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:21.612" starttime="20160125 01:30:21.443"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.615" starttime="20160125 01:30:21.614"></status>
</kw>
<msg timestamp="20160125 01:30:21.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:21.616" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:21.616" starttime="20160125 01:30:21.613"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.621" starttime="20160125 01:30:21.620"></status>
</kw>
<msg timestamp="20160125 01:30:21.622" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:21.621" starttime="20160125 01:30:21.617"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:21.623" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:21.623" starttime="20160125 01:30:21.622"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:21.625" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:21.625" starttime="20160125 01:30:21.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.626" starttime="20160125 01:30:21.626"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.631" starttime="20160125 01:30:21.630"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.633" starttime="20160125 01:30:21.632"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:21.636" starttime="20160125 01:30:21.627"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.640" starttime="20160125 01:30:21.639"></status>
</kw>
<msg timestamp="20160125 01:30:21.641" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:21.641" starttime="20160125 01:30:21.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.642" starttime="20160125 01:30:21.642"></status>
</kw>
<msg timestamp="20160125 01:30:21.644" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:30:21.644" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:21.643" starttime="20160125 01:30:20.912"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.668" starttime="20160125 01:30:21.668"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:21.713" starttime="20160125 01:30:21.672"></status>
</kw>
<msg timestamp="20160125 01:30:21.714" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160125 01:30:21.713" starttime="20160125 01:30:21.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:21.718" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:22.173" level="INFO">Read output: Last login: Mon Jan 25 00:30:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:22.174" starttime="20160125 01:30:21.717"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.175" starttime="20160125 01:30:21.714"></status>
</kw>
<msg timestamp="20160125 01:30:22.177" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160125 01:30:22.177" starttime="20160125 01:30:21.663"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:22.182" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:22.182" starttime="20160125 01:30:22.178"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:22.184" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:30:22.275" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:22.276" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:22.275" starttime="20160125 01:30:22.183"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.279" starttime="20160125 01:30:22.278"></status>
</kw>
<msg timestamp="20160125 01:30:22.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:22.280" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:22.280" starttime="20160125 01:30:22.277"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.285" starttime="20160125 01:30:22.284"></status>
</kw>
<msg timestamp="20160125 01:30:22.286" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:22.285" starttime="20160125 01:30:22.281"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:22.288" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:22.287" starttime="20160125 01:30:22.286"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:22.290" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:22.289" starttime="20160125 01:30:22.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.291" starttime="20160125 01:30:22.290"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.296" starttime="20160125 01:30:22.295"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.300" starttime="20160125 01:30:22.297"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.301" starttime="20160125 01:30:22.292"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.305" starttime="20160125 01:30:22.304"></status>
</kw>
<msg timestamp="20160125 01:30:22.306" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:22.306" starttime="20160125 01:30:22.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.307" starttime="20160125 01:30:22.307"></status>
</kw>
<msg timestamp="20160125 01:30:22.309" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:30:22.309" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:22.308" starttime="20160125 01:30:21.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:22.311" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:22.311" starttime="20160125 01:30:22.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:22.313" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:22.313" starttime="20160125 01:30:22.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:22.315" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:22.315" starttime="20160125 01:30:22.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:22.317" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:22.317" starttime="20160125 01:30:22.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:30:22.319" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:22.319" starttime="20160125 01:30:22.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:30:22.321" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:22.321" starttime="20160125 01:30:22.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:30:22.322" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:22.323" starttime="20160125 01:30:22.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:30:22.324" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:22.325" starttime="20160125 01:30:22.323"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.330" starttime="20160125 01:30:22.328"></status>
</kw>
<msg timestamp="20160125 01:30:22.331" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:22.331" starttime="20160125 01:30:22.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.333" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:22.333" starttime="20160125 01:30:22.332"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.334" starttime="20160125 01:30:18.896"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s6-s1-t1" name="Run MOC ToUnknown Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.340" starttime="20160125 01:30:22.339"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:30:22.341" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:30:22.341" starttime="20160125 01:30:22.340"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.348" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:30:22.349" starttime="20160125 01:30:22.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.350" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:30:22.350" starttime="20160125 01:30:22.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.352" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:30:22.352" starttime="20160125 01:30:22.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.354" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:30:22.354" starttime="20160125 01:30:22.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.355" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:22.356" starttime="20160125 01:30:22.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.357" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:30:22.357" starttime="20160125 01:30:22.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.359" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:22.359" starttime="20160125 01:30:22.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.360" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:30:22.361" starttime="20160125 01:30:22.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.362" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:22.362" starttime="20160125 01:30:22.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.364" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:30:22.364" starttime="20160125 01:30:22.363"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.371" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:22.371" starttime="20160125 01:30:22.369"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.371" starttime="20160125 01:30:22.368"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.374" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:22.374" starttime="20160125 01:30:22.373"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.375" starttime="20160125 01:30:22.372"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.377" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:22.378" starttime="20160125 01:30:22.376"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.378" starttime="20160125 01:30:22.375"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:22.379" starttime="20160125 01:30:22.365"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:22.381" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:22.381" starttime="20160125 01:30:22.379"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.383" starttime="20160125 01:30:22.382"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.384" starttime="20160125 01:30:22.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.386" starttime="20160125 01:30:22.385"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.387" starttime="20160125 01:30:22.386"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.388" starttime="20160125 01:30:22.388"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.390" starttime="20160125 01:30:22.389"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.391" starttime="20160125 01:30:22.390"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.393" starttime="20160125 01:30:22.392"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.394" starttime="20160125 01:30:22.393"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.396" starttime="20160125 01:30:22.395"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.397" starttime="20160125 01:30:22.396"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:22.399" starttime="20160125 01:30:22.398"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:22.401" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:30:26.701" level="INFO">01:30:26,698 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.701" starttime="20160125 01:30:22.400"></status>
</kw>
<msg timestamp="20160125 01:30:26.703" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:26.703" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:26.702" starttime="20160125 01:30:22.400"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:26.709" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:26.709" starttime="20160125 01:30:26.708"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.711" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:26.711" starttime="20160125 01:30:26.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.713" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:26.712" starttime="20160125 01:30:26.711"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.715" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:26.716" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:26.716" starttime="20160125 01:30:26.714"></status>
</kw>
<msg timestamp="20160125 01:30:26.717" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:26.717" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,698 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.717" starttime="20160125 01:30:26.713"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.722" starttime="20160125 01:30:26.721"></status>
</kw>
<msg timestamp="20160125 01:30:26.723" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,698 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.723" starttime="20160125 01:30:26.718"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.727" starttime="20160125 01:30:26.726"></status>
</kw>
<msg timestamp="20160125 01:30:26.728" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,698 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.728" starttime="20160125 01:30:26.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.732" starttime="20160125 01:30:26.731"></status>
</kw>
<msg timestamp="20160125 01:30:26.733" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.733" starttime="20160125 01:30:26.729"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.739" starttime="20160125 01:30:26.738"></status>
</kw>
<msg timestamp="20160125 01:30:26.740" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.740" starttime="20160125 01:30:26.734"></status>
</kw>
<msg timestamp="20160125 01:30:26.741" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.741" starttime="20160125 01:30:26.704"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.746" starttime="20160125 01:30:26.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.747" starttime="20160125 01:30:26.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.748" starttime="20160125 01:30:26.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:26.754" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:26.754" starttime="20160125 01:30:26.752"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.755" starttime="20160125 01:30:26.752"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.755" starttime="20160125 01:30:26.749"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.756" starttime="20160125 01:30:26.742"></status>
</kw>
<msg timestamp="20160125 01:30:26.757" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.756" starttime="20160125 01:30:22.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:30:26.758" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:26.759" starttime="20160125 01:30:26.757"></status>
</kw>
<kw type="kw" name="${unknown_subscriber} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:30:26.762" level="INFO">${unknown_subscriber} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:30:26.761" starttime="20160125 01:30:26.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Unknown subscriber's MSISDN: ${unknown_subscriber}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:26.764" level="INFO">Unknown subscriber's MSISDN: 573190001001</msg>
<status status="PASS" endtime="20160125 01:30:26.764" starttime="20160125 01:30:26.762"></status>
</kw>
<kw type="kw" name="${rc}, ${provcId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${unknown_subscriber}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.775" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:26.776" starttime="20160125 01:30:26.774"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.776" starttime="20160125 01:30:26.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.779" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:26.779" starttime="20160125 01:30:26.778"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.780" starttime="20160125 01:30:26.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.782" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:26.783" starttime="20160125 01:30:26.781"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.783" starttime="20160125 01:30:26.780"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:26.784" starttime="20160125 01:30:26.770"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.785" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:26.786" starttime="20160125 01:30:26.784"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.787" starttime="20160125 01:30:26.786"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.789" starttime="20160125 01:30:26.788"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.790" starttime="20160125 01:30:26.789"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.792" starttime="20160125 01:30:26.791"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.793" starttime="20160125 01:30:26.792"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.794" starttime="20160125 01:30:26.793"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:26.797" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001001']</msg>
<msg timestamp="20160125 01:30:26.918" level="INFO">01:30:26,907 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:30:26,908 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:30:26,910 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490268
01:30:26,911 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001001
01:30:26,912 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:30:26,914 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:30:26,915 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:30:26,916 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:30:26.919" starttime="20160125 01:30:26.796"></status>
</kw>
<msg timestamp="20160125 01:30:26.920" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:26.920" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:26.919" starttime="20160125 01:30:26.795"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:26.926" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:26.926" starttime="20160125 01:30:26.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.928" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:26.927" starttime="20160125 01:30:26.927"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.929" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:26.929" starttime="20160125 01:30:26.928"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.932" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:26.933" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:26.933" starttime="20160125 01:30:26.931"></status>
</kw>
<msg timestamp="20160125 01:30:26.934" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:26.934" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,907 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.934" starttime="20160125 01:30:26.930"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.939" starttime="20160125 01:30:26.938"></status>
</kw>
<msg timestamp="20160125 01:30:26.940" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,907 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.939" starttime="20160125 01:30:26.935"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.944" starttime="20160125 01:30:26.943"></status>
</kw>
<msg timestamp="20160125 01:30:26.945" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,907 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:26.944" starttime="20160125 01:30:26.940"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.949" starttime="20160125 01:30:26.948"></status>
</kw>
<msg timestamp="20160125 01:30:26.950" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.950" starttime="20160125 01:30:26.945"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.956" starttime="20160125 01:30:26.955"></status>
</kw>
<msg timestamp="20160125 01:30:26.957" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.956" starttime="20160125 01:30:26.950"></status>
</kw>
<msg timestamp="20160125 01:30:26.958" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:26.957" starttime="20160125 01:30:26.921"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:26.963" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:30:26.963" starttime="20160125 01:30:26.962"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.965" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:26.965" starttime="20160125 01:30:26.964"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.967" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:26.967" starttime="20160125 01:30:26.966"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:26.970" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:26.971" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:26.971" starttime="20160125 01:30:26.969"></status>
</kw>
<msg timestamp="20160125 01:30:26.972" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:26.972" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,908 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:26.971" starttime="20160125 01:30:26.967"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.976" starttime="20160125 01:30:26.975"></status>
</kw>
<msg timestamp="20160125 01:30:26.977" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,908 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:26.977" starttime="20160125 01:30:26.973"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.981" starttime="20160125 01:30:26.980"></status>
</kw>
<msg timestamp="20160125 01:30:26.982" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,908 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:26.982" starttime="20160125 01:30:26.978"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.987" starttime="20160125 01:30:26.985"></status>
</kw>
<msg timestamp="20160125 01:30:26.987" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:26.987" starttime="20160125 01:30:26.983"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:26.994" starttime="20160125 01:30:26.993"></status>
</kw>
<msg timestamp="20160125 01:30:26.994" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:26.994" starttime="20160125 01:30:26.988"></status>
</kw>
<msg timestamp="20160125 01:30:26.996" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:30:26.995" starttime="20160125 01:30:26.959"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:27.001" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:30:27.001" starttime="20160125 01:30:27.000"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.003" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:27.003" starttime="20160125 01:30:27.002"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.005" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:27.005" starttime="20160125 01:30:27.004"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.008" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:27.008" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:27.009" starttime="20160125 01:30:27.006"></status>
</kw>
<msg timestamp="20160125 01:30:27.009" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:27.010" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,911 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.009" starttime="20160125 01:30:27.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.014" starttime="20160125 01:30:27.013"></status>
</kw>
<msg timestamp="20160125 01:30:27.015" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,911 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.014" starttime="20160125 01:30:27.010"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.019" starttime="20160125 01:30:27.018"></status>
</kw>
<msg timestamp="20160125 01:30:27.020" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,911 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.020" starttime="20160125 01:30:27.015"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.024" starttime="20160125 01:30:27.023"></status>
</kw>
<msg timestamp="20160125 01:30:27.025" level="INFO">${resultCode} = 732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.025" starttime="20160125 01:30:27.020"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.031" starttime="20160125 01:30:27.030"></status>
</kw>
<msg timestamp="20160125 01:30:27.032" level="INFO">${resultCode} = 732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.032" starttime="20160125 01:30:27.026"></status>
</kw>
<msg timestamp="20160125 01:30:27.033" level="INFO">${imsi} = 732123710001001</msg>
<status status="PASS" endtime="20160125 01:30:27.033" starttime="20160125 01:30:26.997"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:27.039" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:30:27.039" starttime="20160125 01:30:27.038"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.041" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:27.041" starttime="20160125 01:30:27.040"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.043" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:27.043" starttime="20160125 01:30:27.042"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.046" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:27.046" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:27.047" starttime="20160125 01:30:27.044"></status>
</kw>
<msg timestamp="20160125 01:30:27.048" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:27.048" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,910 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.047" starttime="20160125 01:30:27.043"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.052" starttime="20160125 01:30:27.051"></status>
</kw>
<msg timestamp="20160125 01:30:27.053" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,910 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.053" starttime="20160125 01:30:27.048"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.058" starttime="20160125 01:30:27.057"></status>
</kw>
<msg timestamp="20160125 01:30:27.058" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,910 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.058" starttime="20160125 01:30:27.054"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.063" starttime="20160125 01:30:27.062"></status>
</kw>
<msg timestamp="20160125 01:30:27.064" level="INFO">${resultCode} = 7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.063" starttime="20160125 01:30:27.059"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.070" starttime="20160125 01:30:27.069"></status>
</kw>
<msg timestamp="20160125 01:30:27.071" level="INFO">${resultCode} = 7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.070" starttime="20160125 01:30:27.064"></status>
</kw>
<msg timestamp="20160125 01:30:27.072" level="INFO">${id} = 7490268</msg>
<status status="PASS" endtime="20160125 01:30:27.071" starttime="20160125 01:30:27.034"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:27.078" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:30:27.077" starttime="20160125 01:30:27.076"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.079" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:27.079" starttime="20160125 01:30:27.078"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.081" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:27.081" starttime="20160125 01:30:27.080"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.084" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:27.085" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:27.085" starttime="20160125 01:30:27.083"></status>
</kw>
<msg timestamp="20160125 01:30:27.086" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:27.086" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,912 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.085" starttime="20160125 01:30:27.082"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.091" starttime="20160125 01:30:27.090"></status>
</kw>
<msg timestamp="20160125 01:30:27.091" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,912 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.091" starttime="20160125 01:30:27.087"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.096" starttime="20160125 01:30:27.095"></status>
</kw>
<msg timestamp="20160125 01:30:27.097" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,912 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.096" starttime="20160125 01:30:27.092"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.101" starttime="20160125 01:30:27.100"></status>
</kw>
<msg timestamp="20160125 01:30:27.102" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.102" starttime="20160125 01:30:27.097"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.108" starttime="20160125 01:30:27.107"></status>
</kw>
<msg timestamp="20160125 01:30:27.109" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.109" starttime="20160125 01:30:27.103"></status>
</kw>
<msg timestamp="20160125 01:30:27.110" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:27.110" starttime="20160125 01:30:27.073"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:27.116" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:30:27.116" starttime="20160125 01:30:27.115"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.118" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:27.117" starttime="20160125 01:30:27.117"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.120" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:27.119" starttime="20160125 01:30:27.118"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.122" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:27.123" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:27.123" starttime="20160125 01:30:27.121"></status>
</kw>
<msg timestamp="20160125 01:30:27.124" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:27.124" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,914 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:27.124" starttime="20160125 01:30:27.120"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.129" starttime="20160125 01:30:27.128"></status>
</kw>
<msg timestamp="20160125 01:30:27.130" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,914 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:27.129" starttime="20160125 01:30:27.125"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.134" starttime="20160125 01:30:27.133"></status>
</kw>
<msg timestamp="20160125 01:30:27.135" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,914 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:27.134" starttime="20160125 01:30:27.130"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.139" starttime="20160125 01:30:27.138"></status>
</kw>
<msg timestamp="20160125 01:30:27.140" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:27.140" starttime="20160125 01:30:27.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.157" starttime="20160125 01:30:27.156"></status>
</kw>
<msg timestamp="20160125 01:30:27.158" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:27.158" starttime="20160125 01:30:27.140"></status>
</kw>
<msg timestamp="20160125 01:30:27.159" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:27.159" starttime="20160125 01:30:27.111"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:27.165" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:30:27.165" starttime="20160125 01:30:27.163"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.167" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:27.166" starttime="20160125 01:30:27.165"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.168" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:27.168" starttime="20160125 01:30:27.167"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.171" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:27.172" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:27.173" starttime="20160125 01:30:27.170"></status>
</kw>
<msg timestamp="20160125 01:30:27.173" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:27.174" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,915 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.173" starttime="20160125 01:30:27.169"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.178" starttime="20160125 01:30:27.177"></status>
</kw>
<msg timestamp="20160125 01:30:27.179" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,915 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.179" starttime="20160125 01:30:27.174"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.183" starttime="20160125 01:30:27.182"></status>
</kw>
<msg timestamp="20160125 01:30:27.184" level="INFO">${return_log_entry} = 2016-01-25 01:30:26,915 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.184" starttime="20160125 01:30:27.180"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.189" starttime="20160125 01:30:27.188"></status>
</kw>
<msg timestamp="20160125 01:30:27.190" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.190" starttime="20160125 01:30:27.185"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.196" starttime="20160125 01:30:27.195"></status>
</kw>
<msg timestamp="20160125 01:30:27.197" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.197" starttime="20160125 01:30:27.190"></status>
</kw>
<msg timestamp="20160125 01:30:27.198" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.198" starttime="20160125 01:30:27.160"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.203" starttime="20160125 01:30:27.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.204" starttime="20160125 01:30:27.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.206" starttime="20160125 01:30:27.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:27.212" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:27.212" starttime="20160125 01:30:27.210"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.213" starttime="20160125 01:30:27.209"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.213" starttime="20160125 01:30:27.206"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.214" starttime="20160125 01:30:27.199"></status>
</kw>
<msg timestamp="20160125 01:30:27.216" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:30:27.216" level="INFO">${provcId} = 1</msg>
<msg timestamp="20160125 01:30:27.217" level="INFO">${imsi} = 732123710001001</msg>
<msg timestamp="20160125 01:30:27.217" level="INFO">${id} = 7490268</msg>
<msg timestamp="20160125 01:30:27.217" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:30:27.217" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:30:27.218" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:27.215" starttime="20160125 01:30:26.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting "unknown" subscriber...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:27.219" level="INFO">Deleting "unknown" subscriber...</msg>
<status status="PASS" endtime="20160125 01:30:27.220" starttime="20160125 01:30:27.219"></status>
</kw>
<kw type="kw" name="${rc} = subscriber-admin-support-resource.CRCE Delete Subscriber">
<doc>This is a delegator to the CRCE webservice operation deleteSubcriber</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.231" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:27.231" starttime="20160125 01:30:27.229"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.232" starttime="20160125 01:30:27.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.234" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:27.235" starttime="20160125 01:30:27.233"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.235" starttime="20160125 01:30:27.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.238" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:27.238" starttime="20160125 01:30:27.237"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.239" starttime="20160125 01:30:27.236"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:27.239" starttime="20160125 01:30:27.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:27.242" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:27.242" starttime="20160125 01:30:27.240"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.244" starttime="20160125 01:30:27.243"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.245" starttime="20160125 01:30:27.244"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.247" starttime="20160125 01:30:27.246"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.249" starttime="20160125 01:30:27.248"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>deleteSubscriber</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.250" starttime="20160125 01:30:27.249"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.input.id=${id}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:27.252" starttime="20160125 01:30:27.251"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:27.254" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001001', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=7490268']</msg>
<msg timestamp="20160125 01:30:28.159" level="INFO">01:30:28,156 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:28.159" starttime="20160125 01:30:27.253"></status>
</kw>
<msg timestamp="20160125 01:30:28.161" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:28.161" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:28.160" starttime="20160125 01:30:27.252"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:28.167" level="INFO">${return_marker} = LowLevelOps.deleteSubscriber.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:28.167" starttime="20160125 01:30:28.166"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:28.169" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:28.169" starttime="20160125 01:30:28.168"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:28.171" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:28.170" starttime="20160125 01:30:28.170"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:28.173" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:28.176" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:28.176" starttime="20160125 01:30:28.172"></status>
</kw>
<msg timestamp="20160125 01:30:28.177" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:28.177" level="INFO">${return_log_entry} = 2016-01-25 01:30:28,156 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:28.177" starttime="20160125 01:30:28.171"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.182" starttime="20160125 01:30:28.181"></status>
</kw>
<msg timestamp="20160125 01:30:28.183" level="INFO">${return_log_entry} = 2016-01-25 01:30:28,156 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:28.183" starttime="20160125 01:30:28.178"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.188" starttime="20160125 01:30:28.187"></status>
</kw>
<msg timestamp="20160125 01:30:28.188" level="INFO">${return_log_entry} = 2016-01-25 01:30:28,156 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:28.188" starttime="20160125 01:30:28.184"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.193" starttime="20160125 01:30:28.192"></status>
</kw>
<msg timestamp="20160125 01:30:28.194" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:28.193" starttime="20160125 01:30:28.189"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.200" starttime="20160125 01:30:28.199"></status>
</kw>
<msg timestamp="20160125 01:30:28.200" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:28.200" starttime="20160125 01:30:28.194"></status>
</kw>
<msg timestamp="20160125 01:30:28.201" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:28.201" starttime="20160125 01:30:28.162"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-DeleteSubscriber</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.206" starttime="20160125 01:30:28.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.207" starttime="20160125 01:30:28.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.209" starttime="20160125 01:30:28.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:28.216" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-DeleteSubscriber*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-DeleteSubscriber*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:28.217" starttime="20160125 01:30:28.213"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:28.217" starttime="20160125 01:30:28.212"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:28.218" starttime="20160125 01:30:28.209"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:28.218" starttime="20160125 01:30:28.202"></status>
</kw>
<msg timestamp="20160125 01:30:28.220" level="INFO">${rc} = OK</msg>
<status status="PASS" endtime="20160125 01:30:28.219" starttime="20160125 01:30:27.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting subscriber returned rc= ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:28.221" level="INFO">Deleting subscriber returned rc= OK</msg>
<status status="PASS" endtime="20160125 01:30:28.222" starttime="20160125 01:30:28.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}'=='OK'</arg>
<arg>Log</arg>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>msg=Subscriber preparation failed!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:28.226" level="INFO">Test Subscribers prepared!</msg>
<status status="PASS" endtime="20160125 01:30:28.226" starttime="20160125 01:30:28.225"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:28.226" starttime="20160125 01:30:28.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s to unknown subscriber*******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.228" starttime="20160125 01:30:28.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:28.229" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160125 01:30:28.229" starttime="20160125 01:30:28.228"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${unknown_subscriber}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:28.243" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:30:28.243" starttime="20160125 01:30:28.242"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:28.245" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:30:28.245" starttime="20160125 01:30:28.244"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:30:28.247" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:30:28.247" starttime="20160125 01:30:28.246"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:30:28.249" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160125 01:30:28.249" starttime="20160125 01:30:28.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.250" starttime="20160125 01:30:28.249"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:28.253" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:28.253" starttime="20160125 01:30:28.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.254" starttime="20160125 01:30:28.254"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:30:28.256" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:28.257" starttime="20160125 01:30:28.255"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:28.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:28.260" starttime="20160125 01:30:28.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.261" starttime="20160125 01:30:28.260"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:30:28.263" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:28.263" starttime="20160125 01:30:28.261"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:30:28.266" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:28.266" starttime="20160125 01:30:28.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:28.268" starttime="20160125 01:30:28.267"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:30:28.275" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:33.339" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:33.338" starttime="20160125 01:30:28.268"></status>
</kw>
<msg timestamp="20160125 01:30:33.341" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:33.340" starttime="20160125 01:30:28.237"></status>
</kw>
<msg timestamp="20160125 01:30:33.342" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:33.342" starttime="20160125 01:30:28.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CG return code is: ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:33.344" level="INFO">CG return code is: 0</msg>
<status status="PASS" endtime="20160125 01:30:33.345" starttime="20160125 01:30:33.343"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.356" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.357" starttime="20160125 01:30:33.355"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.357" starttime="20160125 01:30:33.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.360" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.360" starttime="20160125 01:30:33.359"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.361" starttime="20160125 01:30:33.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.363" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.364" starttime="20160125 01:30:33.362"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.364" starttime="20160125 01:30:33.361"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.364" starttime="20160125 01:30:33.351"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.366" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:33.367" starttime="20160125 01:30:33.365"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.368" starttime="20160125 01:30:33.367"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.370" starttime="20160125 01:30:33.369"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.371" starttime="20160125 01:30:33.370"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.373" starttime="20160125 01:30:33.372"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.374" starttime="20160125 01:30:33.373"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.376" starttime="20160125 01:30:33.375"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:33.378" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001001', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=7490268', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000']</msg>
<msg timestamp="20160125 01:30:33.508" level="INFO">01:30:33,491 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:30:33,496 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:30:33,498 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490265
01:30:33,499 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000
01:30:33,501 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:30:33,502 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002
01:30:33,504 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:30:33,505 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160125 01:30:33.508" starttime="20160125 01:30:33.378"></status>
</kw>
<msg timestamp="20160125 01:30:33.509" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.509" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:33.509" starttime="20160125 01:30:33.377"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.515" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:33.515" starttime="20160125 01:30:33.514"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.517" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.517" starttime="20160125 01:30:33.516"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.519" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.518" starttime="20160125 01:30:33.517"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.521" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.522" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.522" starttime="20160125 01:30:33.520"></status>
</kw>
<msg timestamp="20160125 01:30:33.523" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.523" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,491 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:33.523" starttime="20160125 01:30:33.519"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.528" starttime="20160125 01:30:33.527"></status>
</kw>
<msg timestamp="20160125 01:30:33.529" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,491 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:33.528" starttime="20160125 01:30:33.524"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.533" starttime="20160125 01:30:33.532"></status>
</kw>
<msg timestamp="20160125 01:30:33.534" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,491 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:33.533" starttime="20160125 01:30:33.529"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.538" starttime="20160125 01:30:33.537"></status>
</kw>
<msg timestamp="20160125 01:30:33.539" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:33.539" starttime="20160125 01:30:33.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.545" starttime="20160125 01:30:33.544"></status>
</kw>
<msg timestamp="20160125 01:30:33.546" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:33.545" starttime="20160125 01:30:33.539"></status>
</kw>
<msg timestamp="20160125 01:30:33.547" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:33.546" starttime="20160125 01:30:33.510"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.553" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160125 01:30:33.552" starttime="20160125 01:30:33.551"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.555" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.554" starttime="20160125 01:30:33.553"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.557" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.556" starttime="20160125 01:30:33.555"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.560" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.560" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.561" starttime="20160125 01:30:33.558"></status>
</kw>
<msg timestamp="20160125 01:30:33.562" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.562" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,496 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:33.561" starttime="20160125 01:30:33.557"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.566" starttime="20160125 01:30:33.565"></status>
</kw>
<msg timestamp="20160125 01:30:33.567" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,496 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:33.566" starttime="20160125 01:30:33.562"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.571" starttime="20160125 01:30:33.570"></status>
</kw>
<msg timestamp="20160125 01:30:33.572" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,496 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160125 01:30:33.571" starttime="20160125 01:30:33.567"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.576" starttime="20160125 01:30:33.575"></status>
</kw>
<msg timestamp="20160125 01:30:33.577" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:33.577" starttime="20160125 01:30:33.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.583" starttime="20160125 01:30:33.582"></status>
</kw>
<msg timestamp="20160125 01:30:33.584" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:33.583" starttime="20160125 01:30:33.578"></status>
</kw>
<msg timestamp="20160125 01:30:33.585" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160125 01:30:33.584" starttime="20160125 01:30:33.548"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.591" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160125 01:30:33.590" starttime="20160125 01:30:33.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.592" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.592" starttime="20160125 01:30:33.591"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.594" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.594" starttime="20160125 01:30:33.593"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.597" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.598" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.598" starttime="20160125 01:30:33.596"></status>
</kw>
<msg timestamp="20160125 01:30:33.599" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.599" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,499 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.598" starttime="20160125 01:30:33.595"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.603" starttime="20160125 01:30:33.602"></status>
</kw>
<msg timestamp="20160125 01:30:33.604" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,499 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.604" starttime="20160125 01:30:33.600"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.608" starttime="20160125 01:30:33.607"></status>
</kw>
<msg timestamp="20160125 01:30:33.609" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,499 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.609" starttime="20160125 01:30:33.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.613" starttime="20160125 01:30:33.612"></status>
</kw>
<msg timestamp="20160125 01:30:33.614" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.614" starttime="20160125 01:30:33.610"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.620" starttime="20160125 01:30:33.619"></status>
</kw>
<msg timestamp="20160125 01:30:33.621" level="INFO">${resultCode} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.621" starttime="20160125 01:30:33.615"></status>
</kw>
<msg timestamp="20160125 01:30:33.622" level="INFO">${imsi} = 732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:33.622" starttime="20160125 01:30:33.586"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.628" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160125 01:30:33.627" starttime="20160125 01:30:33.626"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.629" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.629" starttime="20160125 01:30:33.628"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.631" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.631" starttime="20160125 01:30:33.630"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.634" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.634" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.635" starttime="20160125 01:30:33.633"></status>
</kw>
<msg timestamp="20160125 01:30:33.636" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.636" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,498 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.635" starttime="20160125 01:30:33.632"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.640" starttime="20160125 01:30:33.639"></status>
</kw>
<msg timestamp="20160125 01:30:33.641" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,498 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.640" starttime="20160125 01:30:33.636"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.645" starttime="20160125 01:30:33.644"></status>
</kw>
<msg timestamp="20160125 01:30:33.646" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,498 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.645" starttime="20160125 01:30:33.641"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.650" starttime="20160125 01:30:33.649"></status>
</kw>
<msg timestamp="20160125 01:30:33.651" level="INFO">${resultCode} = 7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.651" starttime="20160125 01:30:33.646"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.657" starttime="20160125 01:30:33.656"></status>
</kw>
<msg timestamp="20160125 01:30:33.658" level="INFO">${resultCode} = 7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.657" starttime="20160125 01:30:33.651"></status>
</kw>
<msg timestamp="20160125 01:30:33.659" level="INFO">${id} = 7490265</msg>
<status status="PASS" endtime="20160125 01:30:33.658" starttime="20160125 01:30:33.623"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.665" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160125 01:30:33.664" starttime="20160125 01:30:33.663"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.666" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.666" starttime="20160125 01:30:33.665"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.668" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.668" starttime="20160125 01:30:33.667"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.671" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.671" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.672" starttime="20160125 01:30:33.670"></status>
</kw>
<msg timestamp="20160125 01:30:33.672" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.673" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,501 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.672" starttime="20160125 01:30:33.669"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.677" starttime="20160125 01:30:33.676"></status>
</kw>
<msg timestamp="20160125 01:30:33.678" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,501 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.678" starttime="20160125 01:30:33.673"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.682" starttime="20160125 01:30:33.681"></status>
</kw>
<msg timestamp="20160125 01:30:33.683" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,501 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.682" starttime="20160125 01:30:33.678"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.687" starttime="20160125 01:30:33.686"></status>
</kw>
<msg timestamp="20160125 01:30:33.688" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.688" starttime="20160125 01:30:33.683"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.694" starttime="20160125 01:30:33.693"></status>
</kw>
<msg timestamp="20160125 01:30:33.695" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.695" starttime="20160125 01:30:33.689"></status>
</kw>
<msg timestamp="20160125 01:30:33.696" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160125 01:30:33.696" starttime="20160125 01:30:33.660"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.702" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160125 01:30:33.701" starttime="20160125 01:30:33.700"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.703" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.703" starttime="20160125 01:30:33.702"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.705" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.705" starttime="20160125 01:30:33.704"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.708" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.708" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.709" starttime="20160125 01:30:33.707"></status>
</kw>
<msg timestamp="20160125 01:30:33.709" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.710" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,502 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:33.709" starttime="20160125 01:30:33.706"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.714" starttime="20160125 01:30:33.713"></status>
</kw>
<msg timestamp="20160125 01:30:33.715" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,502 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:33.714" starttime="20160125 01:30:33.710"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.719" starttime="20160125 01:30:33.718"></status>
</kw>
<msg timestamp="20160125 01:30:33.720" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,502 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:33.719" starttime="20160125 01:30:33.715"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.724" starttime="20160125 01:30:33.723"></status>
</kw>
<msg timestamp="20160125 01:30:33.725" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:33.725" starttime="20160125 01:30:33.720"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.731" starttime="20160125 01:30:33.730"></status>
</kw>
<msg timestamp="20160125 01:30:33.732" level="INFO">${resultCode} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:33.731" starttime="20160125 01:30:33.726"></status>
</kw>
<msg timestamp="20160125 01:30:33.733" level="INFO">${tariffId} = 101002</msg>
<status status="PASS" endtime="20160125 01:30:33.732" starttime="20160125 01:30:33.697"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:33.738" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160125 01:30:33.738" starttime="20160125 01:30:33.737"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.740" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:33.740" starttime="20160125 01:30:33.739"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.742" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:33.742" starttime="20160125 01:30:33.741"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.745" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:33.745" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:33.746" starttime="20160125 01:30:33.743"></status>
</kw>
<msg timestamp="20160125 01:30:33.746" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:33.747" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,504 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.746" starttime="20160125 01:30:33.742"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.751" starttime="20160125 01:30:33.750"></status>
</kw>
<msg timestamp="20160125 01:30:33.751" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,504 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.751" starttime="20160125 01:30:33.747"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.756" starttime="20160125 01:30:33.755"></status>
</kw>
<msg timestamp="20160125 01:30:33.756" level="INFO">${return_log_entry} = 2016-01-25 01:30:33,504 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.756" starttime="20160125 01:30:33.752"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.761" starttime="20160125 01:30:33.760"></status>
</kw>
<msg timestamp="20160125 01:30:33.762" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.761" starttime="20160125 01:30:33.757"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.767" starttime="20160125 01:30:33.767"></status>
</kw>
<msg timestamp="20160125 01:30:33.768" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.768" starttime="20160125 01:30:33.762"></status>
</kw>
<msg timestamp="20160125 01:30:33.769" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.769" starttime="20160125 01:30:33.734"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.774" starttime="20160125 01:30:33.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.775" starttime="20160125 01:30:33.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.777" starttime="20160125 01:30:33.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:33.785" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:33.785" starttime="20160125 01:30:33.783"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.786" starttime="20160125 01:30:33.782"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.786" starttime="20160125 01:30:33.777"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.787" starttime="20160125 01:30:33.770"></status>
</kw>
<msg timestamp="20160125 01:30:33.789" level="INFO">${rc} = OK</msg>
<msg timestamp="20160125 01:30:33.789" level="INFO">${provId} = 1</msg>
<msg timestamp="20160125 01:30:33.789" level="INFO">${imsi} = 732123710001000</msg>
<msg timestamp="20160125 01:30:33.789" level="INFO">${id} = 7490265</msg>
<msg timestamp="20160125 01:30:33.790" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160125 01:30:33.790" level="INFO">${tariffId} = 101002</msg>
<msg timestamp="20160125 01:30:33.790" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:33.788" starttime="20160125 01:30:33.346"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.802" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.802" starttime="20160125 01:30:33.800"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.803" starttime="20160125 01:30:33.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.805" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.806" starttime="20160125 01:30:33.804"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.806" starttime="20160125 01:30:33.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:33.809" starttime="20160125 01:30:33.808"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.810" starttime="20160125 01:30:33.807"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:33.810" starttime="20160125 01:30:33.796"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:33.812" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:33.813" starttime="20160125 01:30:33.811"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.814" starttime="20160125 01:30:33.813"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.816" starttime="20160125 01:30:33.815"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.817" starttime="20160125 01:30:33.816"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.819" starttime="20160125 01:30:33.818"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.820" starttime="20160125 01:30:33.819"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:33.822" starttime="20160125 01:30:33.820"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:33.824" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001001', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=7490268', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=573190001000', u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=7490265']</msg>
<msg timestamp="20160125 01:30:34.368" level="INFO">01:30:34,359 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:30:34,361 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490267
01:30:34,363 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667
01:30:34,364 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:30:34,366 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:34.369" starttime="20160125 01:30:33.823"></status>
</kw>
<msg timestamp="20160125 01:30:34.370" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.370" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:34.369" starttime="20160125 01:30:33.822"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:34.376" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:34.376" starttime="20160125 01:30:34.375"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.378" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:34.378" starttime="20160125 01:30:34.377"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.380" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:34.380" starttime="20160125 01:30:34.379"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.383" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:34.383" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:34.384" starttime="20160125 01:30:34.381"></status>
</kw>
<msg timestamp="20160125 01:30:34.384" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.385" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,359 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:34.384" starttime="20160125 01:30:34.380"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.389" starttime="20160125 01:30:34.388"></status>
</kw>
<msg timestamp="20160125 01:30:34.390" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,359 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:34.389" starttime="20160125 01:30:34.385"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.394" starttime="20160125 01:30:34.393"></status>
</kw>
<msg timestamp="20160125 01:30:34.395" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,359 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:34.394" starttime="20160125 01:30:34.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.399" starttime="20160125 01:30:34.398"></status>
</kw>
<msg timestamp="20160125 01:30:34.400" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:34.400" starttime="20160125 01:30:34.395"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.406" starttime="20160125 01:30:34.405"></status>
</kw>
<msg timestamp="20160125 01:30:34.407" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:34.406" starttime="20160125 01:30:34.401"></status>
</kw>
<msg timestamp="20160125 01:30:34.408" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:34.407" starttime="20160125 01:30:34.371"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:34.413" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160125 01:30:34.413" starttime="20160125 01:30:34.412"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.415" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:34.415" starttime="20160125 01:30:34.414"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.417" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:34.416" starttime="20160125 01:30:34.416"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.419" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:34.420" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:34.420" starttime="20160125 01:30:34.418"></status>
</kw>
<msg timestamp="20160125 01:30:34.421" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.421" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,361 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.421" starttime="20160125 01:30:34.417"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.426" starttime="20160125 01:30:34.425"></status>
</kw>
<msg timestamp="20160125 01:30:34.426" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,361 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.426" starttime="20160125 01:30:34.422"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.430" starttime="20160125 01:30:34.430"></status>
</kw>
<msg timestamp="20160125 01:30:34.431" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,361 INFO  [log] LowLevelOps.getMainAccount.output.accountId=7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.431" starttime="20160125 01:30:34.427"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.436" starttime="20160125 01:30:34.434"></status>
</kw>
<msg timestamp="20160125 01:30:34.436" level="INFO">${resultCode} = 7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.436" starttime="20160125 01:30:34.432"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.442" starttime="20160125 01:30:34.441"></status>
</kw>
<msg timestamp="20160125 01:30:34.443" level="INFO">${resultCode} = 7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.443" starttime="20160125 01:30:34.437"></status>
</kw>
<msg timestamp="20160125 01:30:34.444" level="INFO">${accountId} = 7490267</msg>
<status status="PASS" endtime="20160125 01:30:34.444" starttime="20160125 01:30:34.409"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:34.450" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160125 01:30:34.450" starttime="20160125 01:30:34.449"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.452" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:34.451" starttime="20160125 01:30:34.451"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.454" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:34.453" starttime="20160125 01:30:34.452"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.456" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:34.457" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:34.457" starttime="20160125 01:30:34.455"></status>
</kw>
<msg timestamp="20160125 01:30:34.458" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.458" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,363 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.458" starttime="20160125 01:30:34.454"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.462" starttime="20160125 01:30:34.461"></status>
</kw>
<msg timestamp="20160125 01:30:34.463" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,363 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.463" starttime="20160125 01:30:34.459"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.467" starttime="20160125 01:30:34.466"></status>
</kw>
<msg timestamp="20160125 01:30:34.468" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,363 INFO  [log] LowLevelOps.getMainAccount.output.balance=9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.468" starttime="20160125 01:30:34.464"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.473" starttime="20160125 01:30:34.472"></status>
</kw>
<msg timestamp="20160125 01:30:34.473" level="INFO">${resultCode} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.473" starttime="20160125 01:30:34.469"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.479" starttime="20160125 01:30:34.478"></status>
</kw>
<msg timestamp="20160125 01:30:34.480" level="INFO">${resultCode} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.480" starttime="20160125 01:30:34.474"></status>
</kw>
<msg timestamp="20160125 01:30:34.481" level="INFO">${balance} = 9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.481" starttime="20160125 01:30:34.445"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:34.487" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160125 01:30:34.487" starttime="20160125 01:30:34.485"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.489" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:34.488" starttime="20160125 01:30:34.487"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.490" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:34.490" starttime="20160125 01:30:34.489"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.493" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:34.494" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:34.494" starttime="20160125 01:30:34.492"></status>
</kw>
<msg timestamp="20160125 01:30:34.495" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.495" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,364 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.494" starttime="20160125 01:30:34.491"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.499" starttime="20160125 01:30:34.498"></status>
</kw>
<msg timestamp="20160125 01:30:34.500" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,364 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.500" starttime="20160125 01:30:34.496"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.507" starttime="20160125 01:30:34.503"></status>
</kw>
<msg timestamp="20160125 01:30:34.508" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,364 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.508" starttime="20160125 01:30:34.500"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.575" starttime="20160125 01:30:34.573"></status>
</kw>
<msg timestamp="20160125 01:30:34.576" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.576" starttime="20160125 01:30:34.508"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.583" starttime="20160125 01:30:34.582"></status>
</kw>
<msg timestamp="20160125 01:30:34.584" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.583" starttime="20160125 01:30:34.577"></status>
</kw>
<msg timestamp="20160125 01:30:34.585" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160125 01:30:34.584" starttime="20160125 01:30:34.482"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:34.591" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160125 01:30:34.591" starttime="20160125 01:30:34.590"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.593" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:34.593" starttime="20160125 01:30:34.592"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.595" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:34.595" starttime="20160125 01:30:34.594"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:34.598" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:34.599" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:34.599" starttime="20160125 01:30:34.597"></status>
</kw>
<msg timestamp="20160125 01:30:34.600" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:34.600" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,366 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:34.600" starttime="20160125 01:30:34.596"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.605" starttime="20160125 01:30:34.604"></status>
</kw>
<msg timestamp="20160125 01:30:34.606" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,366 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:34.605" starttime="20160125 01:30:34.601"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.610" starttime="20160125 01:30:34.609"></status>
</kw>
<msg timestamp="20160125 01:30:34.611" level="INFO">${return_log_entry} = 2016-01-25 01:30:34,366 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160125 01:30:34.610" starttime="20160125 01:30:34.606"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.615" starttime="20160125 01:30:34.614"></status>
</kw>
<msg timestamp="20160125 01:30:34.616" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:34.615" starttime="20160125 01:30:34.611"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.622" starttime="20160125 01:30:34.621"></status>
</kw>
<msg timestamp="20160125 01:30:34.622" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160125 01:30:34.622" starttime="20160125 01:30:34.616"></status>
</kw>
<msg timestamp="20160125 01:30:34.623" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160125 01:30:34.623" starttime="20160125 01:30:34.586"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.628" starttime="20160125 01:30:34.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.629" starttime="20160125 01:30:34.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.630" starttime="20160125 01:30:34.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:34.636" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:34.636" starttime="20160125 01:30:34.634"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:34.637" starttime="20160125 01:30:34.633"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:34.637" starttime="20160125 01:30:34.631"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:34.637" starttime="20160125 01:30:34.624"></status>
</kw>
<msg timestamp="20160125 01:30:34.639" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160125 01:30:34.640" level="INFO">${accId} = 7490267</msg>
<msg timestamp="20160125 01:30:34.640" level="INFO">${bal} = 9999667</msg>
<msg timestamp="20160125 01:30:34.640" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160125 01:30:34.640" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160125 01:30:34.639" starttime="20160125 01:30:33.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance of the calling party is: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:34.642" level="INFO">Balance of the calling party is: 9999667</msg>
<status status="PASS" endtime="20160125 01:30:34.642" starttime="20160125 01:30:34.641"></status>
</kw>
<doc>Test will make a MOC call to unknown subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:30:34.643" starttime="20160125 01:30:22.335"></status>
</test>
<doc>Testing the prepaid MOC call to the unknown subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:34.646" starttime="20160125 01:30:18.758"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:34.653" starttime="20160125 01:30:18.742"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:34.668" starttime="20160125 01:28:44.329"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:34.698" starttime="20160125 01:28:44.310"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s2" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s2-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s2-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:30:34.883" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:34.890" level="INFO">${date} = Mon Jan 25 01:30:34 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:34.889" starttime="20160125 01:30:34.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:34.894" level="INFO">Date and time: Mon Jan 25 01:30:34 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:34.895" starttime="20160125 01:30:34.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:34.898" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:30:34.899" starttime="20160125 01:30:34.896"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:34.954" starttime="20160125 01:30:34.952"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.017" starttime="20160125 01:30:34.962"></status>
</kw>
<msg timestamp="20160125 01:30:35.021" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160125 01:30:35.020" starttime="20160125 01:30:34.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:35.033" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:35.503" level="INFO">Read output: Last login: Mon Jan 25 00:30:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:35.503" starttime="20160125 01:30:35.030"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:35.504" starttime="20160125 01:30:35.022"></status>
</kw>
<msg timestamp="20160125 01:30:35.506" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160125 01:30:35.505" starttime="20160125 01:30:34.942"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:35.510" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:35.509" starttime="20160125 01:30:35.506"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:35.511" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:30:35.879" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:35.881" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:35.880" starttime="20160125 01:30:35.510"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.887" starttime="20160125 01:30:35.884"></status>
</kw>
<msg timestamp="20160125 01:30:35.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:35.890" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:35.888" starttime="20160125 01:30:35.882"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.899" starttime="20160125 01:30:35.897"></status>
</kw>
<msg timestamp="20160125 01:30:35.900" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:35.900" starttime="20160125 01:30:35.891"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:30:35.904" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:35.904" starttime="20160125 01:30:35.902"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:35.908" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:35.907" starttime="20160125 01:30:35.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.911" starttime="20160125 01:30:35.909"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.921" starttime="20160125 01:30:35.919"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.927" starttime="20160125 01:30:35.923"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:35.930" starttime="20160125 01:30:35.912"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.938" starttime="20160125 01:30:35.936"></status>
</kw>
<msg timestamp="20160125 01:30:35.940" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:35.939" starttime="20160125 01:30:35.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.943" starttime="20160125 01:30:35.941"></status>
</kw>
<msg timestamp="20160125 01:30:35.946" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:30:35.947" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:35.945" starttime="20160125 01:30:34.916"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:35.999" starttime="20160125 01:30:35.997"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.050" starttime="20160125 01:30:36.007"></status>
</kw>
<msg timestamp="20160125 01:30:36.052" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160125 01:30:36.052" starttime="20160125 01:30:36.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:36.058" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:36.515" level="INFO">Read output: Last login: Mon Jan 25 00:30:20 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:36.515" starttime="20160125 01:30:36.056"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:36.516" starttime="20160125 01:30:36.053"></status>
</kw>
<msg timestamp="20160125 01:30:36.517" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160125 01:30:36.517" starttime="20160125 01:30:35.988"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:36.521" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:36.521" starttime="20160125 01:30:36.518"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:36.523" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:30:36.892" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:36.893" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:36.893" starttime="20160125 01:30:36.522"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.896" starttime="20160125 01:30:36.895"></status>
</kw>
<msg timestamp="20160125 01:30:36.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:36.897" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:36.897" starttime="20160125 01:30:36.894"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.901" starttime="20160125 01:30:36.901"></status>
</kw>
<msg timestamp="20160125 01:30:36.902" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:36.902" starttime="20160125 01:30:36.898"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:30:36.904" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:36.903" starttime="20160125 01:30:36.903"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:36.906" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:36.905" starttime="20160125 01:30:36.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.907" starttime="20160125 01:30:36.906"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.912" starttime="20160125 01:30:36.911"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.915" starttime="20160125 01:30:36.912"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:36.917" starttime="20160125 01:30:36.907"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.921" starttime="20160125 01:30:36.920"></status>
</kw>
<msg timestamp="20160125 01:30:36.921" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:36.921" starttime="20160125 01:30:36.917"></status>
</kw>
<msg timestamp="20160125 01:30:36.923" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:30:36.923" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:36.922" starttime="20160125 01:30:35.963"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:36.947" starttime="20160125 01:30:36.946"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.006" starttime="20160125 01:30:36.950"></status>
</kw>
<msg timestamp="20160125 01:30:37.010" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160125 01:30:37.009" starttime="20160125 01:30:36.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:37.022" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:37.350" level="INFO">Read output: Last login: Mon Jan 25 00:30:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:37.351" starttime="20160125 01:30:37.019"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:37.352" starttime="20160125 01:30:37.011"></status>
</kw>
<msg timestamp="20160125 01:30:37.360" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160125 01:30:37.354" starttime="20160125 01:30:36.942"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:37.364" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:37.364" starttime="20160125 01:30:37.361"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:37.366" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:30:37.512" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:37.513" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:37.512" starttime="20160125 01:30:37.365"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.516" starttime="20160125 01:30:37.514"></status>
</kw>
<msg timestamp="20160125 01:30:37.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:37.517" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:37.516" starttime="20160125 01:30:37.513"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.521" starttime="20160125 01:30:37.520"></status>
</kw>
<msg timestamp="20160125 01:30:37.521" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:37.521" starttime="20160125 01:30:37.517"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:37.523" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:37.523" starttime="20160125 01:30:37.522"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:37.525" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:37.525" starttime="20160125 01:30:37.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.526" starttime="20160125 01:30:37.526"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.531" starttime="20160125 01:30:37.530"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.533" starttime="20160125 01:30:37.532"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:37.537" starttime="20160125 01:30:37.527"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.541" starttime="20160125 01:30:37.540"></status>
</kw>
<msg timestamp="20160125 01:30:37.542" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:37.541" starttime="20160125 01:30:37.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.543" starttime="20160125 01:30:37.542"></status>
</kw>
<msg timestamp="20160125 01:30:37.544" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:30:37.545" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:37.544" starttime="20160125 01:30:36.931"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.569" starttime="20160125 01:30:37.568"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:37.627" starttime="20160125 01:30:37.572"></status>
</kw>
<msg timestamp="20160125 01:30:37.629" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160125 01:30:37.628" starttime="20160125 01:30:37.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:37.639" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:38.087" level="INFO">Read output: Last login: Mon Jan 25 00:30:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:38.088" starttime="20160125 01:30:37.637"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.090" starttime="20160125 01:30:37.630"></status>
</kw>
<msg timestamp="20160125 01:30:38.094" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160125 01:30:38.092" starttime="20160125 01:30:37.564"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:38.102" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:38.101" starttime="20160125 01:30:38.095"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:38.105" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:30:38.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:38.198" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:38.197" starttime="20160125 01:30:38.103"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.204" starttime="20160125 01:30:38.202"></status>
</kw>
<msg timestamp="20160125 01:30:38.206" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:38.207" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:38.205" starttime="20160125 01:30:38.199"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.216" starttime="20160125 01:30:38.214"></status>
</kw>
<msg timestamp="20160125 01:30:38.217" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:38.217" starttime="20160125 01:30:38.208"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:38.221" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:38.221" starttime="20160125 01:30:38.219"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:38.225" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:38.224" starttime="20160125 01:30:38.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.228" starttime="20160125 01:30:38.226"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.238" starttime="20160125 01:30:38.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.245" starttime="20160125 01:30:38.240"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.246" starttime="20160125 01:30:38.229"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.255" starttime="20160125 01:30:38.253"></status>
</kw>
<msg timestamp="20160125 01:30:38.256" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:38.256" starttime="20160125 01:30:38.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.259" starttime="20160125 01:30:38.257"></status>
</kw>
<msg timestamp="20160125 01:30:38.262" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:30:38.263" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:38.261" starttime="20160125 01:30:37.552"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:38.266" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:38.267" starttime="20160125 01:30:38.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:38.271" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:38.271" starttime="20160125 01:30:38.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:38.275" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:38.276" starttime="20160125 01:30:38.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:38.279" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:38.280" starttime="20160125 01:30:38.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:30:38.283" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:38.284" starttime="20160125 01:30:38.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:30:38.287" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:38.288" starttime="20160125 01:30:38.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:30:38.291" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:38.292" starttime="20160125 01:30:38.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:30:38.295" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:38.296" starttime="20160125 01:30:38.293"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.308" starttime="20160125 01:30:38.303"></status>
</kw>
<msg timestamp="20160125 01:30:38.310" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:38.309" starttime="20160125 01:30:38.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.314" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:38.315" starttime="20160125 01:30:38.311"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.316" starttime="20160125 01:30:34.876"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.328" starttime="20160125 01:30:38.326"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:30:38.331" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:30:38.331" starttime="20160125 01:30:38.329"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.347" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:30:38.347" starttime="20160125 01:30:38.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.350" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:30:38.351" starttime="20160125 01:30:38.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.354" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:30:38.355" starttime="20160125 01:30:38.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.358" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:30:38.358" starttime="20160125 01:30:38.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.361" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:38.362" starttime="20160125 01:30:38.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.365" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:30:38.366" starttime="20160125 01:30:38.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.369" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:38.369" starttime="20160125 01:30:38.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.372" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:30:38.373" starttime="20160125 01:30:38.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.376" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:38.377" starttime="20160125 01:30:38.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.380" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:30:38.380" starttime="20160125 01:30:38.378"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.394" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:38.395" starttime="20160125 01:30:38.391"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.396" starttime="20160125 01:30:38.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.403" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:38.404" starttime="20160125 01:30:38.399"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.406" starttime="20160125 01:30:38.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.413" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:38.413" starttime="20160125 01:30:38.409"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.414" starttime="20160125 01:30:38.407"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:38.416" starttime="20160125 01:30:38.383"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:38.420" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:38.421" starttime="20160125 01:30:38.417"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.424" starttime="20160125 01:30:38.422"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.427" starttime="20160125 01:30:38.425"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.431" starttime="20160125 01:30:38.428"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.433" starttime="20160125 01:30:38.432"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.436" starttime="20160125 01:30:38.434"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.439" starttime="20160125 01:30:38.437"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.443" starttime="20160125 01:30:38.440"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.446" starttime="20160125 01:30:38.444"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.449" starttime="20160125 01:30:38.447"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.453" starttime="20160125 01:30:38.450"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.456" starttime="20160125 01:30:38.454"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:38.459" starttime="20160125 01:30:38.457"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:38.464" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:30:42.314" level="INFO">01:30:42,312 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:42.315" starttime="20160125 01:30:38.462"></status>
</kw>
<msg timestamp="20160125 01:30:42.316" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:42.317" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:30:42.316" starttime="20160125 01:30:38.460"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:30:42.323" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:30:42.322" starttime="20160125 01:30:42.321"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:42.324" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:30:42.324" starttime="20160125 01:30:42.323"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:30:42.326" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:30:42.326" starttime="20160125 01:30:42.325"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:30:42.328" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:30:42.329" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:30:42.329" starttime="20160125 01:30:42.327"></status>
</kw>
<msg timestamp="20160125 01:30:42.330" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:30:42.331" level="INFO">${return_log_entry} = 2016-01-25 01:30:42,312 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:42.330" starttime="20160125 01:30:42.326"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.335" starttime="20160125 01:30:42.334"></status>
</kw>
<msg timestamp="20160125 01:30:42.336" level="INFO">${return_log_entry} = 2016-01-25 01:30:42,312 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:42.335" starttime="20160125 01:30:42.331"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.340" starttime="20160125 01:30:42.339"></status>
</kw>
<msg timestamp="20160125 01:30:42.340" level="INFO">${return_log_entry} = 2016-01-25 01:30:42,312 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:30:42.340" starttime="20160125 01:30:42.336"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.345" starttime="20160125 01:30:42.344"></status>
</kw>
<msg timestamp="20160125 01:30:42.346" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:42.345" starttime="20160125 01:30:42.341"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.352" starttime="20160125 01:30:42.351"></status>
</kw>
<msg timestamp="20160125 01:30:42.352" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:42.352" starttime="20160125 01:30:42.346"></status>
</kw>
<msg timestamp="20160125 01:30:42.353" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:42.353" starttime="20160125 01:30:42.318"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.358" starttime="20160125 01:30:42.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.359" starttime="20160125 01:30:42.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.360" starttime="20160125 01:30:42.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:30:42.367" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:30:42.367" starttime="20160125 01:30:42.365"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:42.368" starttime="20160125 01:30:42.364"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:42.368" starttime="20160125 01:30:42.361"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:42.369" starttime="20160125 01:30:42.354"></status>
</kw>
<msg timestamp="20160125 01:30:42.370" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:30:42.369" starttime="20160125 01:30:38.334"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:30:42.373" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:30:42.373" starttime="20160125 01:30:42.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:30:42.374" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:42.375" starttime="20160125 01:30:42.374"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:42.376" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:30:42.377" starttime="20160125 01:30:42.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.378" starttime="20160125 01:30:42.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:42.379" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160125 01:30:42.379" starttime="20160125 01:30:42.378"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:42.441" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:30:42.440" starttime="20160125 01:30:42.439"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:30:42.443" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:30:42.442" starttime="20160125 01:30:42.441"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:30:42.445" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:30:42.445" starttime="20160125 01:30:42.443"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:30:42.447" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160125 01:30:42.447" starttime="20160125 01:30:42.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.448" starttime="20160125 01:30:42.447"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:42.451" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:42.452" starttime="20160125 01:30:42.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.453" starttime="20160125 01:30:42.452"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:30:42.455" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:42.456" starttime="20160125 01:30:42.453"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:30:42.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:42.458" starttime="20160125 01:30:42.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.460" starttime="20160125 01:30:42.459"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:30:42.462" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:42.462" starttime="20160125 01:30:42.460"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:30:42.465" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:42.465" starttime="20160125 01:30:42.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:42.467" starttime="20160125 01:30:42.466"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:30:42.474" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:55.896" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:55.894" starttime="20160125 01:30:42.467"></status>
</kw>
<msg timestamp="20160125 01:30:55.898" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:55.897" starttime="20160125 01:30:42.387"></status>
</kw>
<msg timestamp="20160125 01:30:55.899" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:30:55.898" starttime="20160125 01:30:42.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:55.900" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:30:55.901" starttime="20160125 01:30:55.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:30:55.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:55.903" starttime="20160125 01:30:55.901"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:30:55.904" starttime="20160125 01:30:38.318"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:55.907" starttime="20160125 01:30:34.745"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:30:55.914" starttime="20160125 01:30:34.731"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s2-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s2-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:30:56.071" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:30:56.073" level="INFO">${date} = Mon Jan 25 01:30:56 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:56.073" starttime="20160125 01:30:56.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:56.075" level="INFO">Date and time: Mon Jan 25 01:30:56 CET 2016</msg>
<status status="PASS" endtime="20160125 01:30:56.075" starttime="20160125 01:30:56.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:56.077" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:30:56.077" starttime="20160125 01:30:56.076"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:56.101" starttime="20160125 01:30:56.100"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:56.148" starttime="20160125 01:30:56.105"></status>
</kw>
<msg timestamp="20160125 01:30:56.149" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160125 01:30:56.149" starttime="20160125 01:30:56.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:56.154" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:56.706" level="INFO">Read output: Last login: Mon Jan 25 00:30:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:56.706" starttime="20160125 01:30:56.153"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:56.707" starttime="20160125 01:30:56.150"></status>
</kw>
<msg timestamp="20160125 01:30:56.708" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160125 01:30:56.708" starttime="20160125 01:30:56.097"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:56.712" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:56.711" starttime="20160125 01:30:56.709"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:56.713" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:30:57.101" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:57.102" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:57.101" starttime="20160125 01:30:56.712"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.105" starttime="20160125 01:30:57.104"></status>
</kw>
<msg timestamp="20160125 01:30:57.106" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:57.106" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:57.106" starttime="20160125 01:30:57.103"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.110" starttime="20160125 01:30:57.110"></status>
</kw>
<msg timestamp="20160125 01:30:57.111" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:57.111" starttime="20160125 01:30:57.107"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:30:57.113" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:30:57.112" starttime="20160125 01:30:57.111"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:57.114" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:57.114" starttime="20160125 01:30:57.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.116" starttime="20160125 01:30:57.115"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.120" starttime="20160125 01:30:57.119"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.124" starttime="20160125 01:30:57.121"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:57.126" starttime="20160125 01:30:57.116"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.130" starttime="20160125 01:30:57.129"></status>
</kw>
<msg timestamp="20160125 01:30:57.131" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:57.130" starttime="20160125 01:30:57.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.132" starttime="20160125 01:30:57.131"></status>
</kw>
<msg timestamp="20160125 01:30:57.133" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:30:57.133" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:57.133" starttime="20160125 01:30:56.085"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.157" starttime="20160125 01:30:57.156"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:57.215" starttime="20160125 01:30:57.161"></status>
</kw>
<msg timestamp="20160125 01:30:57.217" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160125 01:30:57.217" starttime="20160125 01:30:57.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:57.228" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:57.740" level="INFO">Read output: Last login: Mon Jan 25 00:30:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:57.741" starttime="20160125 01:30:57.226"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:57.741" starttime="20160125 01:30:57.219"></status>
</kw>
<msg timestamp="20160125 01:30:57.742" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160125 01:30:57.742" starttime="20160125 01:30:57.152"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:57.746" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:57.746" starttime="20160125 01:30:57.743"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:57.748" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:30:58.124" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:58.127" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:58.126" starttime="20160125 01:30:57.747"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.134" starttime="20160125 01:30:58.131"></status>
</kw>
<msg timestamp="20160125 01:30:58.136" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:58.136" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:58.135" starttime="20160125 01:30:58.129"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.145" starttime="20160125 01:30:58.143"></status>
</kw>
<msg timestamp="20160125 01:30:58.147" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:58.146" starttime="20160125 01:30:58.137"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:30:58.150" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:30:58.150" starttime="20160125 01:30:58.148"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:58.154" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:58.153" starttime="20160125 01:30:58.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.157" starttime="20160125 01:30:58.155"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.167" starttime="20160125 01:30:58.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.170" starttime="20160125 01:30:58.168"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:58.175" starttime="20160125 01:30:58.158"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.183" starttime="20160125 01:30:58.181"></status>
</kw>
<msg timestamp="20160125 01:30:58.185" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:58.184" starttime="20160125 01:30:58.176"></status>
</kw>
<msg timestamp="20160125 01:30:58.188" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:30:58.189" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:58.187" starttime="20160125 01:30:57.141"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.241" starttime="20160125 01:30:58.239"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:58.289" starttime="20160125 01:30:58.248"></status>
</kw>
<msg timestamp="20160125 01:30:58.290" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160125 01:30:58.290" starttime="20160125 01:30:58.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:58.296" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:58.820" level="INFO">Read output: Last login: Mon Jan 25 00:30:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:58.821" starttime="20160125 01:30:58.295"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:58.821" starttime="20160125 01:30:58.291"></status>
</kw>
<msg timestamp="20160125 01:30:58.823" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160125 01:30:58.822" starttime="20160125 01:30:58.230"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:58.826" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:58.826" starttime="20160125 01:30:58.823"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:58.828" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:30:59.004" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:59.005" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:59.005" starttime="20160125 01:30:58.827"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.008" starttime="20160125 01:30:59.007"></status>
</kw>
<msg timestamp="20160125 01:30:59.009" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:59.010" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:59.009" starttime="20160125 01:30:59.006"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.014" starttime="20160125 01:30:59.013"></status>
</kw>
<msg timestamp="20160125 01:30:59.014" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:59.014" starttime="20160125 01:30:59.010"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:59.016" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:30:59.016" starttime="20160125 01:30:59.015"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:59.018" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:59.018" starttime="20160125 01:30:59.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.019" starttime="20160125 01:30:59.018"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.024" starttime="20160125 01:30:59.023"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.028" starttime="20160125 01:30:59.025"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.029" starttime="20160125 01:30:59.020"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.033" starttime="20160125 01:30:59.032"></status>
</kw>
<msg timestamp="20160125 01:30:59.034" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:59.034" starttime="20160125 01:30:59.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.035" starttime="20160125 01:30:59.034"></status>
</kw>
<msg timestamp="20160125 01:30:59.037" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:30:59.037" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:59.036" starttime="20160125 01:30:58.205"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.068" starttime="20160125 01:30:59.067"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.111" starttime="20160125 01:30:59.072"></status>
</kw>
<msg timestamp="20160125 01:30:59.112" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160125 01:30:59.112" starttime="20160125 01:30:59.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.117" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:30:59.642" level="INFO">Read output: Last login: Mon Jan 25 00:30:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:30:59.642" starttime="20160125 01:30:59.116"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.643" starttime="20160125 01:30:59.113"></status>
</kw>
<msg timestamp="20160125 01:30:59.644" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160125 01:30:59.644" starttime="20160125 01:30:59.056"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:30:59.648" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:30:59.647" starttime="20160125 01:30:59.645"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:30:59.649" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:30:59.737" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:30:59.738" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:59.738" starttime="20160125 01:30:59.648"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.741" starttime="20160125 01:30:59.739"></status>
</kw>
<msg timestamp="20160125 01:30:59.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:30:59.742" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:30:59.741" starttime="20160125 01:30:59.738"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.746" starttime="20160125 01:30:59.745"></status>
</kw>
<msg timestamp="20160125 01:30:59.746" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:30:59.746" starttime="20160125 01:30:59.742"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:30:59.748" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:30:59.748" starttime="20160125 01:30:59.747"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:30:59.750" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:59.749" starttime="20160125 01:30:59.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.751" starttime="20160125 01:30:59.750"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.782" starttime="20160125 01:30:59.781"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.785" starttime="20160125 01:30:59.783"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.786" starttime="20160125 01:30:59.752"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.791" starttime="20160125 01:30:59.790"></status>
</kw>
<msg timestamp="20160125 01:30:59.792" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:59.791" starttime="20160125 01:30:59.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.793" starttime="20160125 01:30:59.792"></status>
</kw>
<msg timestamp="20160125 01:30:59.794" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:30:59.794" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:59.794" starttime="20160125 01:30:59.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:59.796" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:30:59.800" starttime="20160125 01:30:59.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:59.802" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:30:59.802" starttime="20160125 01:30:59.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:59.804" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:30:59.804" starttime="20160125 01:30:59.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:30:59.806" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:30:59.806" starttime="20160125 01:30:59.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:30:59.808" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:59.808" starttime="20160125 01:30:59.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:30:59.809" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:59.810" starttime="20160125 01:30:59.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:30:59.811" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:59.811" starttime="20160125 01:30:59.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:30:59.813" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:30:59.813" starttime="20160125 01:30:59.812"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.819" starttime="20160125 01:30:59.816"></status>
</kw>
<msg timestamp="20160125 01:30:59.819" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:59.819" starttime="20160125 01:30:59.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.821" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:30:59.821" starttime="20160125 01:30:59.820"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.822" starttime="20160125 01:30:56.064"></status>
</kw>
<test id="s1-s1-s1-s2-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.828" starttime="20160125 01:30:59.827"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:30:59.829" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:30:59.829" starttime="20160125 01:30:59.828"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.836" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:30:59.836" starttime="20160125 01:30:59.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.838" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:30:59.838" starttime="20160125 01:30:59.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.839" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:30:59.840" starttime="20160125 01:30:59.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.841" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:30:59.841" starttime="20160125 01:30:59.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.843" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:30:59.843" starttime="20160125 01:30:59.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.844" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:30:59.845" starttime="20160125 01:30:59.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.846" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:30:59.846" starttime="20160125 01:30:59.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.848" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:30:59.848" starttime="20160125 01:30:59.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.849" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:30:59.850" starttime="20160125 01:30:59.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.851" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:30:59.851" starttime="20160125 01:30:59.850"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.858" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:59.858" starttime="20160125 01:30:59.856"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.859" starttime="20160125 01:30:59.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.861" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:59.861" starttime="20160125 01:30:59.860"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.862" starttime="20160125 01:30:59.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.864" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:30:59.865" starttime="20160125 01:30:59.863"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.865" starttime="20160125 01:30:59.862"></status>
</kw>
<status status="PASS" endtime="20160125 01:30:59.866" starttime="20160125 01:30:59.853"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:30:59.868" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:30:59.868" starttime="20160125 01:30:59.866"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.869" starttime="20160125 01:30:59.868"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.871" starttime="20160125 01:30:59.870"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.873" starttime="20160125 01:30:59.872"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.874" starttime="20160125 01:30:59.873"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.875" starttime="20160125 01:30:59.874"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.876" starttime="20160125 01:30:59.875"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.880" starttime="20160125 01:30:59.877"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.882" starttime="20160125 01:30:59.881"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.883" starttime="20160125 01:30:59.882"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.885" starttime="20160125 01:30:59.884"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.886" starttime="20160125 01:30:59.885"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:30:59.888" starttime="20160125 01:30:59.887"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:30:59.890" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:31:04.379" level="INFO">01:31:04,376 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:04.379" starttime="20160125 01:30:59.889"></status>
</kw>
<msg timestamp="20160125 01:31:04.381" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:04.381" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:31:04.380" starttime="20160125 01:30:59.888"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:31:04.387" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:31:04.387" starttime="20160125 01:31:04.385"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:04.389" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:31:04.388" starttime="20160125 01:31:04.387"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:04.390" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:31:04.390" starttime="20160125 01:31:04.389"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:31:04.393" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:31:04.393" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:31:04.394" starttime="20160125 01:31:04.392"></status>
</kw>
<msg timestamp="20160125 01:31:04.394" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:04.395" level="INFO">${return_log_entry} = 2016-01-25 01:31:04,376 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:04.394" starttime="20160125 01:31:04.391"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.399" starttime="20160125 01:31:04.398"></status>
</kw>
<msg timestamp="20160125 01:31:04.400" level="INFO">${return_log_entry} = 2016-01-25 01:31:04,376 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:04.399" starttime="20160125 01:31:04.395"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.404" starttime="20160125 01:31:04.403"></status>
</kw>
<msg timestamp="20160125 01:31:04.404" level="INFO">${return_log_entry} = 2016-01-25 01:31:04,376 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:04.404" starttime="20160125 01:31:04.400"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.409" starttime="20160125 01:31:04.408"></status>
</kw>
<msg timestamp="20160125 01:31:04.410" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:04.409" starttime="20160125 01:31:04.405"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.415" starttime="20160125 01:31:04.414"></status>
</kw>
<msg timestamp="20160125 01:31:04.416" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:04.416" starttime="20160125 01:31:04.410"></status>
</kw>
<msg timestamp="20160125 01:31:04.417" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:04.417" starttime="20160125 01:31:04.382"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.422" starttime="20160125 01:31:04.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.423" starttime="20160125 01:31:04.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.424" starttime="20160125 01:31:04.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:31:04.430" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:31:04.430" starttime="20160125 01:31:04.428"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:04.430" starttime="20160125 01:31:04.427"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:04.431" starttime="20160125 01:31:04.425"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:04.431" starttime="20160125 01:31:04.418"></status>
</kw>
<msg timestamp="20160125 01:31:04.433" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:31:04.432" starttime="20160125 01:30:59.831"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:31:04.436" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:31:04.435" starttime="20160125 01:31:04.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:31:04.437" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:04.437" starttime="20160125 01:31:04.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:04.439" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:31:04.439" starttime="20160125 01:31:04.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.440" starttime="20160125 01:31:04.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:04.441" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160125 01:31:04.442" starttime="20160125 01:31:04.441"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:04.455" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:31:04.455" starttime="20160125 01:31:04.454"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:04.457" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:31:04.457" starttime="20160125 01:31:04.456"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:31:04.459" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:31:04.459" starttime="20160125 01:31:04.458"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:31:04.461" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160125 01:31:04.461" starttime="20160125 01:31:04.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.462" starttime="20160125 01:31:04.461"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:04.465" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:04.465" starttime="20160125 01:31:04.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.466" starttime="20160125 01:31:04.465"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:31:04.468" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:04.469" starttime="20160125 01:31:04.467"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:04.471" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:04.472" starttime="20160125 01:31:04.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.473" starttime="20160125 01:31:04.472"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:31:04.475" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:04.475" starttime="20160125 01:31:04.473"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:31:04.478" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:04.478" starttime="20160125 01:31:04.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:04.479" starttime="20160125 01:31:04.479"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:31:04.490" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:12.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:12.819" starttime="20160125 01:31:04.480"></status>
</kw>
<msg timestamp="20160125 01:31:12.825" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:12.824" starttime="20160125 01:31:04.449"></status>
</kw>
<msg timestamp="20160125 01:31:12.828" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:12.827" starttime="20160125 01:31:04.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:12.831" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:31:12.831" starttime="20160125 01:31:12.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:31:12.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:12.836" starttime="20160125 01:31:12.833"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:12.837" starttime="20160125 01:30:59.823"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:12.846" starttime="20160125 01:30:55.933"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:12.859" starttime="20160125 01:30:55.918"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s2-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s2-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:31:13.072" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:13.077" level="INFO">${date} = Mon Jan 25 01:31:13 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:13.076" starttime="20160125 01:31:13.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:13.080" level="INFO">Date and time: Mon Jan 25 01:31:13 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:13.081" starttime="20160125 01:31:13.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:13.084" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:31:13.085" starttime="20160125 01:31:13.082"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:13.138" starttime="20160125 01:31:13.136"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:13.198" starttime="20160125 01:31:13.145"></status>
</kw>
<msg timestamp="20160125 01:31:13.200" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160125 01:31:13.199" starttime="20160125 01:31:13.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:13.211" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:13.737" level="INFO">Read output: Last login: Mon Jan 25 00:30:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:13.739" starttime="20160125 01:31:13.208"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:13.739" starttime="20160125 01:31:13.201"></status>
</kw>
<msg timestamp="20160125 01:31:13.741" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160125 01:31:13.741" starttime="20160125 01:31:13.127"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:13.748" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:13.747" starttime="20160125 01:31:13.742"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:13.750" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:31:14.142" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:14.145" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:31:14.143" starttime="20160125 01:31:13.749"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.151" starttime="20160125 01:31:14.148"></status>
</kw>
<msg timestamp="20160125 01:31:14.153" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:14.153" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:14.152" starttime="20160125 01:31:14.146"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.162" starttime="20160125 01:31:14.160"></status>
</kw>
<msg timestamp="20160125 01:31:14.163" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:14.163" starttime="20160125 01:31:14.154"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:31:14.167" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:31:14.167" starttime="20160125 01:31:14.165"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:14.171" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:14.170" starttime="20160125 01:31:14.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.173" starttime="20160125 01:31:14.172"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.184" starttime="20160125 01:31:14.181"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.194" starttime="20160125 01:31:14.185"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:14.196" starttime="20160125 01:31:14.175"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.205" starttime="20160125 01:31:14.203"></status>
</kw>
<msg timestamp="20160125 01:31:14.207" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:14.206" starttime="20160125 01:31:14.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.210" starttime="20160125 01:31:14.208"></status>
</kw>
<msg timestamp="20160125 01:31:14.213" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:31:14.213" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:14.212" starttime="20160125 01:31:13.102"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.266" starttime="20160125 01:31:14.264"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:14.317" starttime="20160125 01:31:14.273"></status>
</kw>
<msg timestamp="20160125 01:31:14.318" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160125 01:31:14.317" starttime="20160125 01:31:14.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:14.323" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:14.791" level="INFO">Read output: Last login: Mon Jan 25 00:30:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:14.792" starttime="20160125 01:31:14.322"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:14.792" starttime="20160125 01:31:14.318"></status>
</kw>
<msg timestamp="20160125 01:31:14.793" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160125 01:31:14.793" starttime="20160125 01:31:14.255"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:14.797" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:14.797" starttime="20160125 01:31:14.794"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:14.798" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:31:15.173" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:15.175" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:31:15.174" starttime="20160125 01:31:14.797"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.178" starttime="20160125 01:31:15.176"></status>
</kw>
<msg timestamp="20160125 01:31:15.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:15.179" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:15.178" starttime="20160125 01:31:15.175"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.183" starttime="20160125 01:31:15.182"></status>
</kw>
<msg timestamp="20160125 01:31:15.183" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:15.183" starttime="20160125 01:31:15.179"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:31:15.185" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:31:15.185" starttime="20160125 01:31:15.184"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:15.187" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:15.187" starttime="20160125 01:31:15.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.188" starttime="20160125 01:31:15.187"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.193" starttime="20160125 01:31:15.192"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.198" starttime="20160125 01:31:15.194"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:15.199" starttime="20160125 01:31:15.189"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.209" starttime="20160125 01:31:15.208"></status>
</kw>
<msg timestamp="20160125 01:31:15.209" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:15.209" starttime="20160125 01:31:15.200"></status>
</kw>
<msg timestamp="20160125 01:31:15.211" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:31:15.211" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:15.210" starttime="20160125 01:31:14.230"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.236" starttime="20160125 01:31:15.235"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.280" starttime="20160125 01:31:15.239"></status>
</kw>
<msg timestamp="20160125 01:31:15.281" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160125 01:31:15.280" starttime="20160125 01:31:15.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:15.286" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:15.750" level="INFO">Read output: Last login: Mon Jan 25 00:30:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:15.751" starttime="20160125 01:31:15.284"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:15.751" starttime="20160125 01:31:15.281"></status>
</kw>
<msg timestamp="20160125 01:31:15.752" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160125 01:31:15.752" starttime="20160125 01:31:15.231"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:15.756" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:15.756" starttime="20160125 01:31:15.753"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:15.758" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:31:15.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:15.936" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:31:15.935" starttime="20160125 01:31:15.757"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.938" starttime="20160125 01:31:15.937"></status>
</kw>
<msg timestamp="20160125 01:31:15.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:15.939" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:15.939" starttime="20160125 01:31:15.936"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.943" starttime="20160125 01:31:15.943"></status>
</kw>
<msg timestamp="20160125 01:31:15.944" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:15.944" starttime="20160125 01:31:15.940"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:31:15.946" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:31:15.946" starttime="20160125 01:31:15.945"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:15.948" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:15.947" starttime="20160125 01:31:15.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.949" starttime="20160125 01:31:15.948"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.954" starttime="20160125 01:31:15.953"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.957" starttime="20160125 01:31:15.954"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:15.959" starttime="20160125 01:31:15.950"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.963" starttime="20160125 01:31:15.962"></status>
</kw>
<msg timestamp="20160125 01:31:15.963" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:15.963" starttime="20160125 01:31:15.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.965" starttime="20160125 01:31:15.964"></status>
</kw>
<msg timestamp="20160125 01:31:15.966" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:31:15.966" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:15.965" starttime="20160125 01:31:15.219"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:15.990" starttime="20160125 01:31:15.989"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.032" starttime="20160125 01:31:15.993"></status>
</kw>
<msg timestamp="20160125 01:31:16.034" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160125 01:31:16.033" starttime="20160125 01:31:15.990"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.039" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:16.491" level="INFO">Read output: Last login: Mon Jan 25 00:30:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:16.492" starttime="20160125 01:31:16.037"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.492" starttime="20160125 01:31:16.035"></status>
</kw>
<msg timestamp="20160125 01:31:16.494" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160125 01:31:16.494" starttime="20160125 01:31:15.985"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:16.499" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:16.498" starttime="20160125 01:31:16.495"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:16.500" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:31:16.593" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:16.594" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:31:16.593" starttime="20160125 01:31:16.499"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.597" starttime="20160125 01:31:16.595"></status>
</kw>
<msg timestamp="20160125 01:31:16.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:16.598" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:16.597" starttime="20160125 01:31:16.594"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.602" starttime="20160125 01:31:16.601"></status>
</kw>
<msg timestamp="20160125 01:31:16.603" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:16.602" starttime="20160125 01:31:16.599"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:31:16.604" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:31:16.604" starttime="20160125 01:31:16.603"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:16.606" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:16.606" starttime="20160125 01:31:16.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.607" starttime="20160125 01:31:16.607"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.612" starttime="20160125 01:31:16.611"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.615" starttime="20160125 01:31:16.613"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.617" starttime="20160125 01:31:16.608"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.621" starttime="20160125 01:31:16.620"></status>
</kw>
<msg timestamp="20160125 01:31:16.622" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:16.621" starttime="20160125 01:31:16.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.623" starttime="20160125 01:31:16.622"></status>
</kw>
<msg timestamp="20160125 01:31:16.624" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:31:16.625" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:16.624" starttime="20160125 01:31:15.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:16.626" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:16.627" starttime="20160125 01:31:16.625"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:16.628" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:16.629" starttime="20160125 01:31:16.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:16.630" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:16.630" starttime="20160125 01:31:16.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:16.632" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:16.632" starttime="20160125 01:31:16.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:31:16.634" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:16.634" starttime="20160125 01:31:16.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:31:16.636" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:16.636" starttime="20160125 01:31:16.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:31:16.637" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:16.638" starttime="20160125 01:31:16.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:31:16.639" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:16.639" starttime="20160125 01:31:16.638"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.645" starttime="20160125 01:31:16.642"></status>
</kw>
<msg timestamp="20160125 01:31:16.645" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:31:16.645" starttime="20160125 01:31:16.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.647" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:31:16.647" starttime="20160125 01:31:16.646"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.648" starttime="20160125 01:31:13.066"></status>
</kw>
<test id="s1-s1-s1-s2-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.653" starttime="20160125 01:31:16.653"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:31:16.655" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:31:16.655" starttime="20160125 01:31:16.654"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.662" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:31:16.662" starttime="20160125 01:31:16.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.663" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:31:16.664" starttime="20160125 01:31:16.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.665" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:31:16.665" starttime="20160125 01:31:16.664"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.667" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:31:16.667" starttime="20160125 01:31:16.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.668" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:31:16.669" starttime="20160125 01:31:16.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.670" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:31:16.670" starttime="20160125 01:31:16.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.672" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:31:16.672" starttime="20160125 01:31:16.671"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.673" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:31:16.674" starttime="20160125 01:31:16.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.675" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:31:16.675" starttime="20160125 01:31:16.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.677" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:31:16.677" starttime="20160125 01:31:16.676"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.683" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:16.684" starttime="20160125 01:31:16.682"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.684" starttime="20160125 01:31:16.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.687" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:16.687" starttime="20160125 01:31:16.685"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.687" starttime="20160125 01:31:16.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.690" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:16.690" starttime="20160125 01:31:16.689"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.691" starttime="20160125 01:31:16.688"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:16.691" starttime="20160125 01:31:16.678"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:31:16.693" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:31:16.693" starttime="20160125 01:31:16.692"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.695" starttime="20160125 01:31:16.694"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.696" starttime="20160125 01:31:16.696"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.698" starttime="20160125 01:31:16.697"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.699" starttime="20160125 01:31:16.698"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.700" starttime="20160125 01:31:16.700"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.702" starttime="20160125 01:31:16.701"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.703" starttime="20160125 01:31:16.702"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.705" starttime="20160125 01:31:16.704"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.706" starttime="20160125 01:31:16.705"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.708" starttime="20160125 01:31:16.707"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.709" starttime="20160125 01:31:16.708"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:16.711" starttime="20160125 01:31:16.710"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:31:16.713" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:31:20.793" level="INFO">01:31:20,790 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:20.793" starttime="20160125 01:31:16.712"></status>
</kw>
<msg timestamp="20160125 01:31:20.795" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:20.795" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:31:20.794" starttime="20160125 01:31:16.711"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:31:20.801" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:31:20.800" starttime="20160125 01:31:20.799"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:20.802" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:31:20.802" starttime="20160125 01:31:20.801"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:20.804" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:31:20.804" starttime="20160125 01:31:20.803"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:31:20.807" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:31:20.807" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:31:20.808" starttime="20160125 01:31:20.806"></status>
</kw>
<msg timestamp="20160125 01:31:20.808" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:20.809" level="INFO">${return_log_entry} = 2016-01-25 01:31:20,790 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:20.808" starttime="20160125 01:31:20.805"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.815" starttime="20160125 01:31:20.814"></status>
</kw>
<msg timestamp="20160125 01:31:20.816" level="INFO">${return_log_entry} = 2016-01-25 01:31:20,790 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:20.815" starttime="20160125 01:31:20.809"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.820" starttime="20160125 01:31:20.819"></status>
</kw>
<msg timestamp="20160125 01:31:20.820" level="INFO">${return_log_entry} = 2016-01-25 01:31:20,790 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:20.820" starttime="20160125 01:31:20.816"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.825" starttime="20160125 01:31:20.824"></status>
</kw>
<msg timestamp="20160125 01:31:20.825" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:20.825" starttime="20160125 01:31:20.821"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.831" starttime="20160125 01:31:20.830"></status>
</kw>
<msg timestamp="20160125 01:31:20.832" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:20.832" starttime="20160125 01:31:20.826"></status>
</kw>
<msg timestamp="20160125 01:31:20.833" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:20.833" starttime="20160125 01:31:20.796"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.837" starttime="20160125 01:31:20.837"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.839" starttime="20160125 01:31:20.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.840" starttime="20160125 01:31:20.839"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:31:20.845" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:31:20.846" starttime="20160125 01:31:20.844"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:20.846" starttime="20160125 01:31:20.843"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:20.847" starttime="20160125 01:31:20.840"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:20.847" starttime="20160125 01:31:20.834"></status>
</kw>
<msg timestamp="20160125 01:31:20.848" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:31:20.848" starttime="20160125 01:31:16.656"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:31:20.851" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:31:20.851" starttime="20160125 01:31:20.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:31:20.853" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:20.853" starttime="20160125 01:31:20.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:20.854" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:31:20.855" starttime="20160125 01:31:20.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.856" starttime="20160125 01:31:20.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:20.857" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160125 01:31:20.857" starttime="20160125 01:31:20.856"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:20.871" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:31:20.871" starttime="20160125 01:31:20.870"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:20.873" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:31:20.872" starttime="20160125 01:31:20.871"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:31:20.874" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:31:20.874" starttime="20160125 01:31:20.873"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:31:20.876" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160125 01:31:20.876" starttime="20160125 01:31:20.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.877" starttime="20160125 01:31:20.877"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:20.880" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:20.880" starttime="20160125 01:31:20.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.881" starttime="20160125 01:31:20.881"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:31:20.883" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:20.884" starttime="20160125 01:31:20.882"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:20.886" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:20.886" starttime="20160125 01:31:20.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.888" starttime="20160125 01:31:20.887"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:31:20.889" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:20.890" starttime="20160125 01:31:20.888"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:31:20.892" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:20.893" starttime="20160125 01:31:20.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:20.894" starttime="20160125 01:31:20.893"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:31:20.900" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:25.239" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:25.238" starttime="20160125 01:31:20.894"></status>
</kw>
<msg timestamp="20160125 01:31:25.241" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:25.240" starttime="20160125 01:31:20.865"></status>
</kw>
<msg timestamp="20160125 01:31:25.242" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:25.241" starttime="20160125 01:31:20.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:25.243" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:31:25.244" starttime="20160125 01:31:25.243"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:31:25.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:25.246" starttime="20160125 01:31:25.244"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:25.247" starttime="20160125 01:31:16.649"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:25.250" starttime="20160125 01:31:12.900"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:25.256" starttime="20160125 01:31:12.869"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s2-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:31:25.522" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:25.528" level="INFO">${date} = Mon Jan 25 01:31:25 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:25.527" starttime="20160125 01:31:25.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:25.531" level="INFO">Date and time: Mon Jan 25 01:31:25 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:25.532" starttime="20160125 01:31:25.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:25.535" level="INFO">Target IN machine: 10.105.170.135</msg>
<status status="PASS" endtime="20160125 01:31:25.536" starttime="20160125 01:31:25.533"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:25.584" starttime="20160125 01:31:25.582"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:25.645" starttime="20160125 01:31:25.591"></status>
</kw>
<msg timestamp="20160125 01:31:25.647" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160125 01:31:25.646" starttime="20160125 01:31:25.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:25.656" level="INFO">Logging into '10.105.170.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:26.123" level="INFO">Read output: Last login: Mon Jan 25 00:31:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:26.124" starttime="20160125 01:31:25.654"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:26.125" starttime="20160125 01:31:25.648"></status>
</kw>
<msg timestamp="20160125 01:31:26.126" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160125 01:31:26.126" starttime="20160125 01:31:25.573"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:26.130" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:26.130" starttime="20160125 01:31:26.127"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:26.132" level="INFO">Executing command 'sudo service inew-mvno-corein-service-moc-2.1.1 status'.</msg>
<msg timestamp="20160125 01:31:26.516" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:26.518" level="INFO">${output} = I-New MVNO VirginMobile Colombia - Core - Service 2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:31:26.517" starttime="20160125 01:31:26.131"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.524" starttime="20160125 01:31:26.521"></status>
</kw>
<msg timestamp="20160125 01:31:26.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:26.526" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:26.525" starttime="20160125 01:31:26.519"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.535" starttime="20160125 01:31:26.534"></status>
</kw>
<msg timestamp="20160125 01:31:26.537" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:26.536" starttime="20160125 01:31:26.528"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160125 01:31:26.541" level="INFO">${version_r} =  2.1.1 is running PID: 9732 </msg>
<status status="PASS" endtime="20160125 01:31:26.540" starttime="20160125 01:31:26.538"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:26.544" level="INFO">${version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:26.544" starttime="20160125 01:31:26.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.547" starttime="20160125 01:31:26.545"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.557" starttime="20160125 01:31:26.555"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.564" starttime="20160125 01:31:26.558"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:26.565" starttime="20160125 01:31:26.548"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.574" starttime="20160125 01:31:26.572"></status>
</kw>
<msg timestamp="20160125 01:31:26.576" level="INFO">${ver} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:26.575" starttime="20160125 01:31:26.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.578" starttime="20160125 01:31:26.577"></status>
</kw>
<msg timestamp="20160125 01:31:26.582" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160125 01:31:26.582" level="INFO">${in_version} =  2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:26.580" starttime="20160125 01:31:25.551"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.632" starttime="20160125 01:31:26.630"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:26.683" starttime="20160125 01:31:26.639"></status>
</kw>
<msg timestamp="20160125 01:31:26.684" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160125 01:31:26.684" starttime="20160125 01:31:26.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:26.689" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:27.137" level="INFO">Read output: Last login: Mon Jan 25 00:31:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:27.138" starttime="20160125 01:31:26.688"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:27.139" starttime="20160125 01:31:26.685"></status>
</kw>
<msg timestamp="20160125 01:31:27.140" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160125 01:31:27.140" starttime="20160125 01:31:26.621"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:27.144" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:27.144" starttime="20160125 01:31:27.141"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:27.146" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:31:27.522" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:27.523" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:31:27.523" starttime="20160125 01:31:27.145"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.527" starttime="20160125 01:31:27.525"></status>
</kw>
<msg timestamp="20160125 01:31:27.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:27.528" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:27.527" starttime="20160125 01:31:27.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.532" starttime="20160125 01:31:27.531"></status>
</kw>
<msg timestamp="20160125 01:31:27.533" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:27.532" starttime="20160125 01:31:27.528"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160125 01:31:27.534" level="INFO">${version_r} =  5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:31:27.534" starttime="20160125 01:31:27.533"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:27.536" level="INFO">${version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:27.536" starttime="20160125 01:31:27.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.537" starttime="20160125 01:31:27.537"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.542" starttime="20160125 01:31:27.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.547" starttime="20160125 01:31:27.543"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:27.549" starttime="20160125 01:31:27.538"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.553" starttime="20160125 01:31:27.552"></status>
</kw>
<msg timestamp="20160125 01:31:27.553" level="INFO">${ver} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:27.553" starttime="20160125 01:31:27.549"></status>
</kw>
<msg timestamp="20160125 01:31:27.555" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160125 01:31:27.555" level="INFO">${xdr_version} =  5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:27.554" starttime="20160125 01:31:26.598"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.578" starttime="20160125 01:31:27.577"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:27.621" starttime="20160125 01:31:27.581"></status>
</kw>
<msg timestamp="20160125 01:31:27.622" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160125 01:31:27.621" starttime="20160125 01:31:27.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:27.626" level="INFO">Logging into '10.105.170.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:28.083" level="INFO">Read output: Last login: Mon Jan 25 00:31:15 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:28.084" starttime="20160125 01:31:27.625"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:28.085" starttime="20160125 01:31:27.622"></status>
</kw>
<msg timestamp="20160125 01:31:28.087" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160125 01:31:28.087" starttime="20160125 01:31:27.573"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:28.091" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:28.091" starttime="20160125 01:31:28.088"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:28.093" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160125 01:31:28.254" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:28.255" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.1.14.25039
Negret Rating &amp; Charging Engine 5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:31:28.254" starttime="20160125 01:31:28.092"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.258" starttime="20160125 01:31:28.257"></status>
</kw>
<msg timestamp="20160125 01:31:28.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:28.259" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:28.259" starttime="20160125 01:31:28.256"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.264" starttime="20160125 01:31:28.263"></status>
</kw>
<msg timestamp="20160125 01:31:28.264" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:28.264" starttime="20160125 01:31:28.260"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:31:28.266" level="INFO">${version_r} =  5.1.14.25039 is running (PID:28741, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160125 01:31:28.266" starttime="20160125 01:31:28.265"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:28.268" level="INFO">${version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:28.268" starttime="20160125 01:31:28.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.269" starttime="20160125 01:31:28.268"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.274" starttime="20160125 01:31:28.273"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.279" starttime="20160125 01:31:28.275"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:28.279" starttime="20160125 01:31:28.270"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.283" starttime="20160125 01:31:28.282"></status>
</kw>
<msg timestamp="20160125 01:31:28.284" level="INFO">${ver} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:28.283" starttime="20160125 01:31:28.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.285" starttime="20160125 01:31:28.284"></status>
</kw>
<msg timestamp="20160125 01:31:28.286" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160125 01:31:28.287" level="INFO">${crce_version} =  5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:28.286" starttime="20160125 01:31:27.562"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.309" starttime="20160125 01:31:28.308"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.365" starttime="20160125 01:31:28.313"></status>
</kw>
<msg timestamp="20160125 01:31:28.368" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160125 01:31:28.367" starttime="20160125 01:31:28.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:31:28.379" level="INFO">Logging into '10.105.170.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:28.817" level="INFO">Read output: Last login: Mon Jan 25 00:31:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:31:28.819" starttime="20160125 01:31:28.377"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:28.820" starttime="20160125 01:31:28.369"></status>
</kw>
<msg timestamp="20160125 01:31:28.822" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160125 01:31:28.821" starttime="20160125 01:31:28.304"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160125 01:31:28.830" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160125 01:31:28.829" starttime="20160125 01:31:28.823"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160125 01:31:28.833" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160125 01:31:28.923" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:28.925" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:31:28.924" starttime="20160125 01:31:28.831"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.931" starttime="20160125 01:31:28.928"></status>
</kw>
<msg timestamp="20160125 01:31:28.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20160125 01:31:28.933" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160125 01:31:28.932" starttime="20160125 01:31:28.926"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.942" starttime="20160125 01:31:28.940"></status>
</kw>
<msg timestamp="20160125 01:31:28.944" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:28.943" starttime="20160125 01:31:28.934"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160125 01:31:28.947" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp is running (PID: 2020)</msg>
<status status="PASS" endtime="20160125 01:31:28.947" starttime="20160125 01:31:28.945"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160125 01:31:28.951" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:28.950" starttime="20160125 01:31:28.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.954" starttime="20160125 01:31:28.952"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.964" starttime="20160125 01:31:28.962"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.971" starttime="20160125 01:31:28.965"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:28.972" starttime="20160125 01:31:28.955"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.981" starttime="20160125 01:31:28.979"></status>
</kw>
<msg timestamp="20160125 01:31:28.982" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:28.981" starttime="20160125 01:31:28.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:28.985" starttime="20160125 01:31:28.983"></status>
</kw>
<msg timestamp="20160125 01:31:28.987" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160125 01:31:28.988" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:28.987" starttime="20160125 01:31:28.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:28.991" level="INFO">IN state= OK version= 2.1.1 </msg>
<status status="PASS" endtime="20160125 01:31:28.992" starttime="20160125 01:31:28.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:28.996" level="INFO">XDR state= OK version= 5.1.0.16360 </msg>
<status status="PASS" endtime="20160125 01:31:28.997" starttime="20160125 01:31:28.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:29.001" level="INFO">CRCE state= OK version= 5.1.14.25039 </msg>
<status status="PASS" endtime="20160125 01:31:29.002" starttime="20160125 01:31:28.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:29.006" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.2.2.1858
GyApp </msg>
<status status="PASS" endtime="20160125 01:31:29.007" starttime="20160125 01:31:29.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160125 01:31:29.010" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:29.011" starttime="20160125 01:31:29.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160125 01:31:29.015" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:29.015" starttime="20160125 01:31:29.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160125 01:31:29.019" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:29.020" starttime="20160125 01:31:29.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160125 01:31:29.023" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:29.024" starttime="20160125 01:31:29.021"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.036" starttime="20160125 01:31:29.031"></status>
</kw>
<msg timestamp="20160125 01:31:29.037" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:31:29.037" starttime="20160125 01:31:29.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.041" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160125 01:31:29.042" starttime="20160125 01:31:29.039"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:29.043" starttime="20160125 01:31:25.516"></status>
</kw>
<test id="s1-s1-s1-s2-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.055" starttime="20160125 01:31:29.053"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:31:29.058" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:31:29.057" starttime="20160125 01:31:29.056"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.073" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:31:29.073" starttime="20160125 01:31:29.071"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.077" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:31:29.077" starttime="20160125 01:31:29.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.081" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:31:29.081" starttime="20160125 01:31:29.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.084" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:31:29.085" starttime="20160125 01:31:29.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.088" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:31:29.089" starttime="20160125 01:31:29.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.092" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:31:29.092" starttime="20160125 01:31:29.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.094" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:31:29.095" starttime="20160125 01:31:29.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.096" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160125 01:31:29.096" starttime="20160125 01:31:29.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.098" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:31:29.098" starttime="20160125 01:31:29.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.099" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:31:29.100" starttime="20160125 01:31:29.099"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.106" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:29.106" starttime="20160125 01:31:29.105"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:29.107" starttime="20160125 01:31:29.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.109" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:29.110" starttime="20160125 01:31:29.108"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:29.110" starttime="20160125 01:31:29.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.112" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:29.113" starttime="20160125 01:31:29.111"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:29.113" starttime="20160125 01:31:29.111"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:29.114" starttime="20160125 01:31:29.101"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:31:29.116" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:31:29.116" starttime="20160125 01:31:29.114"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.118" starttime="20160125 01:31:29.116"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.119" starttime="20160125 01:31:29.118"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.121" starttime="20160125 01:31:29.120"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.122" starttime="20160125 01:31:29.121"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.123" starttime="20160125 01:31:29.122"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.124" starttime="20160125 01:31:29.123"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.126" starttime="20160125 01:31:29.125"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.127" starttime="20160125 01:31:29.126"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.129" starttime="20160125 01:31:29.128"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.130" starttime="20160125 01:31:29.129"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.132" starttime="20160125 01:31:29.131"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:29.133" starttime="20160125 01:31:29.132"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:31:29.135" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:31:33.299" level="INFO">01:31:33,296 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:33.299" starttime="20160125 01:31:29.135"></status>
</kw>
<msg timestamp="20160125 01:31:33.301" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:33.301" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:31:33.300" starttime="20160125 01:31:29.134"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:31:33.308" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:31:33.307" starttime="20160125 01:31:33.305"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:33.309" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:31:33.309" starttime="20160125 01:31:33.308"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:33.311" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:31:33.311" starttime="20160125 01:31:33.310"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:31:33.314" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:31:33.314" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:31:33.314" starttime="20160125 01:31:33.312"></status>
</kw>
<msg timestamp="20160125 01:31:33.315" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:33.315" level="INFO">${return_log_entry} = 2016-01-25 01:31:33,296 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:33.315" starttime="20160125 01:31:33.311"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.320" starttime="20160125 01:31:33.319"></status>
</kw>
<msg timestamp="20160125 01:31:33.320" level="INFO">${return_log_entry} = 2016-01-25 01:31:33,296 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:33.320" starttime="20160125 01:31:33.316"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.325" starttime="20160125 01:31:33.324"></status>
</kw>
<msg timestamp="20160125 01:31:33.325" level="INFO">${return_log_entry} = 2016-01-25 01:31:33,296 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:33.325" starttime="20160125 01:31:33.321"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.330" starttime="20160125 01:31:33.328"></status>
</kw>
<msg timestamp="20160125 01:31:33.330" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:33.330" starttime="20160125 01:31:33.326"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.336" starttime="20160125 01:31:33.335"></status>
</kw>
<msg timestamp="20160125 01:31:33.337" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:33.337" starttime="20160125 01:31:33.331"></status>
</kw>
<msg timestamp="20160125 01:31:33.338" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:33.338" starttime="20160125 01:31:33.302"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.342" starttime="20160125 01:31:33.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.344" starttime="20160125 01:31:33.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.345" starttime="20160125 01:31:33.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:31:33.351" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:31:33.351" starttime="20160125 01:31:33.349"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:33.352" starttime="20160125 01:31:33.348"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:33.352" starttime="20160125 01:31:33.346"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:33.352" starttime="20160125 01:31:33.339"></status>
</kw>
<msg timestamp="20160125 01:31:33.354" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:31:33.353" starttime="20160125 01:31:29.061"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:31:33.357" level="INFO">${calling_party_msisdn} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:31:33.356" starttime="20160125 01:31:33.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:31:33.358" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:33.358" starttime="20160125 01:31:33.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:33.360" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:31:33.360" starttime="20160125 01:31:33.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.361" starttime="20160125 01:31:33.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:33.362" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160125 01:31:33.363" starttime="20160125 01:31:33.362"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:33.376" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160125 01:31:33.376" starttime="20160125 01:31:33.375"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160125 01:31:33.378" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160125 01:31:33.378" starttime="20160125 01:31:33.377"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160125 01:31:33.380" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160125 01:31:33.380" starttime="20160125 01:31:33.379"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160125 01:31:33.382" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160125 01:31:33.381" starttime="20160125 01:31:33.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.383" starttime="20160125 01:31:33.382"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:33.386" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:33.386" starttime="20160125 01:31:33.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.387" starttime="20160125 01:31:33.386"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160125 01:31:33.389" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:33.389" starttime="20160125 01:31:33.388"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160125 01:31:33.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:33.392" starttime="20160125 01:31:33.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.393" starttime="20160125 01:31:33.393"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160125 01:31:33.395" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:33.396" starttime="20160125 01:31:33.394"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160125 01:31:33.398" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:33.399" starttime="20160125 01:31:33.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:33.400" starttime="20160125 01:31:33.399"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160125 01:31:33.407" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:38.661" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:38.658" starttime="20160125 01:31:33.400"></status>
</kw>
<msg timestamp="20160125 01:31:38.664" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:38.663" starttime="20160125 01:31:33.370"></status>
</kw>
<msg timestamp="20160125 01:31:38.667" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:38.665" starttime="20160125 01:31:33.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:38.670" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160125 01:31:38.670" starttime="20160125 01:31:38.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160125 01:31:38.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:38.675" starttime="20160125 01:31:38.672"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:38.676" starttime="20160125 01:31:29.045"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:38.684" starttime="20160125 01:31:25.288"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:38.698" starttime="20160125 01:31:25.261"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:38.724" starttime="20160125 01:30:34.716"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:38.792" starttime="20160125 01:28:44.290"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:31:38.866" starttime="20160125 01:28:44.268"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/VMCO" id="s1-s2-s1" name="VMCO">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/VMCO/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc>Log the time and target system, copy the tool to the target system and create the test subscribers</doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:31:39.082" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:31:39.085" level="INFO">${time} = Mon Jan 25 01:31:39 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:39.085" starttime="20160125 01:31:39.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:39.087" level="INFO">Date and time: Mon Jan 25 01:31:39 CET 2016</msg>
<status status="PASS" endtime="20160125 01:31:39.087" starttime="20160125 01:31:39.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD test on Virgin Mobile Columbia TB</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:39.089" level="INFO">USSD test on Virgin Mobile Columbia TB</msg>
<status status="PASS" endtime="20160125 01:31:39.089" starttime="20160125 01:31:39.088"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160125 01:31:39.131" level="INFO">${conn_id} = 41</msg>
<status status="PASS" endtime="20160125 01:31:39.130" starttime="20160125 01:31:39.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160125 01:31:39.132" level="INFO">${conn_id} = 41</msg>
<status status="PASS" endtime="20160125 01:31:39.132" starttime="20160125 01:31:39.131"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160125 01:31:39.134" level="INFO">Logging into '10.105.170.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:31:40.462" level="INFO">Read output: Last login: Sun Jan 24 02:48:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m</msg>
<msg timestamp="20160125 01:31:40.463" level="INFO">${output_login} = Last login: Sun Jan 24 02:48:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:31:40.462" starttime="20160125 01:31:39.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.465" level="INFO">Last login: Sun Jan 24 02:48:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ussd-app.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:31:40.465" starttime="20160125 01:31:40.464"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${USSD_PY_TOOL}</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160125 01:31:40.529" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160125 01:31:40.529" starttime="20160125 01:31:40.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.532" starttime="20160125 01:31:40.530"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160125 01:31:40.540" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160125 01:31:40.541" starttime="20160125 01:31:40.533"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc>Suite will create two subscribers that will attempt different USSD scenarios</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160125 01:31:40.545" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160125 01:31:40.545" starttime="20160125 01:31:40.544"></status>
</kw>
<kw type="kw" name="${TESTSUBCRIBERS DEFAULT LANGUAGEID} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20160125 01:31:40.547" level="INFO">${TESTSUBCRIBERS DEFAULT LANGUAGEID} = 5</msg>
<status status="PASS" endtime="20160125 01:31:40.546" starttime="20160125 01:31:40.546"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.554" level="INFO">msg=crce_host=10.105.170.125</msg>
<status status="PASS" endtime="20160125 01:31:40.555" starttime="20160125 01:31:40.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.556" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160125 01:31:40.557" starttime="20160125 01:31:40.555"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.558" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160125 01:31:40.558" starttime="20160125 01:31:40.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.560" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160125 01:31:40.560" starttime="20160125 01:31:40.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.561" level="INFO">msg=imsiRangeStart=732123710001000</msg>
<status status="PASS" endtime="20160125 01:31:40.562" starttime="20160125 01:31:40.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.563" level="INFO">msg=msisdnRangeStart=573190001000</msg>
<status status="PASS" endtime="20160125 01:31:40.563" starttime="20160125 01:31:40.562"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.565" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160125 01:31:40.565" starttime="20160125 01:31:40.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.566" level="INFO">msg=languageid=5</msg>
<status status="PASS" endtime="20160125 01:31:40.567" starttime="20160125 01:31:40.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.568" level="INFO">msg=tariffId=101002</msg>
<status status="PASS" endtime="20160125 01:31:40.568" starttime="20160125 01:31:40.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.570" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160125 01:31:40.570" starttime="20160125 01:31:40.569"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.576" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:40.577" starttime="20160125 01:31:40.575"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:40.577" starttime="20160125 01:31:40.574"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.580" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:40.580" starttime="20160125 01:31:40.578"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:40.580" starttime="20160125 01:31:40.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.583" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:31:40.583" starttime="20160125 01:31:40.582"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:40.584" starttime="20160125 01:31:40.581"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:40.584" starttime="20160125 01:31:40.571"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160125 01:31:40.586" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160125 01:31:40.586" starttime="20160125 01:31:40.585"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.588" starttime="20160125 01:31:40.587"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.589" starttime="20160125 01:31:40.589"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.591" starttime="20160125 01:31:40.590"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.592" starttime="20160125 01:31:40.591"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.594" starttime="20160125 01:31:40.593"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.595" starttime="20160125 01:31:40.594"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.597" starttime="20160125 01:31:40.596"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.598" starttime="20160125 01:31:40.597"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.600" starttime="20160125 01:31:40.599"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.601" starttime="20160125 01:31:40.600"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.603" starttime="20160125 01:31:40.602"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:40.604" starttime="20160125 01:31:40.603"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:31:40.606" level="INFO">Running with the following project properties set: [u'crceHost=10.105.170.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=732123710001000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=573190001000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=5', u'HighLevelOps.createTestSubscribers.input.tariffId=101002', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160125 01:31:44.878" level="INFO">01:31:44,875 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:44.879" starttime="20160125 01:31:40.606"></status>
</kw>
<msg timestamp="20160125 01:31:44.881" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:44.881" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160125 01:31:44.880" starttime="20160125 01:31:40.605"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160125 01:31:44.887" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160125 01:31:44.887" starttime="20160125 01:31:44.885"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:44.889" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160125 01:31:44.888" starttime="20160125 01:31:44.887"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160125 01:31:44.890" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160125 01:31:44.890" starttime="20160125 01:31:44.889"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160125 01:31:44.893" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:31:44.893" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160125 01:31:44.894" starttime="20160125 01:31:44.892"></status>
</kw>
<msg timestamp="20160125 01:31:44.895" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160125 01:31:44.895" level="INFO">${return_log_entry} = 2016-01-25 01:31:44,875 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:44.894" starttime="20160125 01:31:44.891"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.900" starttime="20160125 01:31:44.899"></status>
</kw>
<msg timestamp="20160125 01:31:44.901" level="INFO">${return_log_entry} = 2016-01-25 01:31:44,875 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:44.900" starttime="20160125 01:31:44.895"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.905" starttime="20160125 01:31:44.904"></status>
</kw>
<msg timestamp="20160125 01:31:44.905" level="INFO">${return_log_entry} = 2016-01-25 01:31:44,875 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160125 01:31:44.905" starttime="20160125 01:31:44.901"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.910" starttime="20160125 01:31:44.909"></status>
</kw>
<msg timestamp="20160125 01:31:44.911" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:44.910" starttime="20160125 01:31:44.906"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.917" starttime="20160125 01:31:44.916"></status>
</kw>
<msg timestamp="20160125 01:31:44.918" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:44.917" starttime="20160125 01:31:44.911"></status>
</kw>
<msg timestamp="20160125 01:31:44.919" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160125 01:31:44.919" starttime="20160125 01:31:44.882"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.924" starttime="20160125 01:31:44.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.925" starttime="20160125 01:31:44.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:44.926" starttime="20160125 01:31:44.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160125 01:31:44.932" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160125 01:31:44.932" starttime="20160125 01:31:44.930"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:44.933" starttime="20160125 01:31:44.930"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:44.933" starttime="20160125 01:31:44.927"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:44.934" starttime="20160125 01:31:44.920"></status>
</kw>
<msg timestamp="20160125 01:31:44.935" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160125 01:31:44.934" starttime="20160125 01:31:40.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160125 01:31:44.936" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:31:44.937" starttime="20160125 01:31:44.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:44.938" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160125 01:31:44.938" starttime="20160125 01:31:44.937"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:44.939" starttime="20160125 01:31:40.541"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:44.939" starttime="20160125 01:31:39.076"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:31:44.953" level="INFO">/home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190</msg>
<status status="PASS" endtime="20160125 01:31:44.954" starttime="20160125 01:31:44.946"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:45.528" level="INFO">=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:45.531" level="INFO">${output} = =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:45.530" starttime="20160125 01:31:44.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:31:45.533" level="INFO">USSD Start: =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:45.533" starttime="20160125 01:31:45.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:31:47.536" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:31:47.537" starttime="20160125 01:31:45.533"></status>
</kw>
<msg timestamp="20160125 01:31:47.539" level="INFO">${output} = =====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:47.539" starttime="20160125 01:31:44.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ey pilas, el menu cambio</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.541" starttime="20160125 01:31:47.540"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.547" starttime="20160125 01:31:47.546"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:31:47.548" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:31:47.597" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:47.598" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:31:47.598" starttime="20160125 01:31:47.547"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.599" starttime="20160125 01:31:47.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.601" starttime="20160125 01:31:47.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.602" starttime="20160125 01:31:47.601"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:31:47.604" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:31:47.681" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:47.682" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:31:47.682" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:47.681" starttime="20160125 01:31:47.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.686" starttime="20160125 01:31:47.682"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.687" starttime="20160125 01:31:47.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.688" starttime="20160125 01:31:47.688"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.689" starttime="20160125 01:31:47.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.691" starttime="20160125 01:31:47.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.692" starttime="20160125 01:31:47.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.693" starttime="20160125 01:31:47.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.694" starttime="20160125 01:31:47.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.696" starttime="20160125 01:31:47.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.697" starttime="20160125 01:31:47.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:47.698" starttime="20160125 01:31:47.697"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:47.698" starttime="20160125 01:31:47.543"></status>
</kw>
<doc>Simple test that checks if USSD can be started
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:47.699" starttime="20160125 01:31:44.940"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:31:47.708" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:31:47.708" starttime="20160125 01:31:47.706"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:48.272" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:48.274" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:48.273" starttime="20160125 01:31:47.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:31:48.275" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:48.276" starttime="20160125 01:31:48.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:31:50.278" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:31:50.279" starttime="20160125 01:31:48.276"></status>
</kw>
<msg timestamp="20160125 01:31:50.283" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:50.282" starttime="20160125 01:31:47.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:50.286" level="INFO">Pressing 1 for checking balance</msg>
<status status="PASS" endtime="20160125 01:31:50.287" starttime="20160125 01:31:50.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:50.295" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:50.296" starttime="20160125 01:31:50.288"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:52.143" level="INFO">=====================
Saldo: $100.000 24/03/16
Datos: ilimitado

Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:52.145" level="INFO">${output} = =====================
Saldo: $100.000 24/03/16
Datos: ilimitado

Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:52.144" starttime="20160125 01:31:50.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Saldo: $100.00</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.147" starttime="20160125 01:31:52.145"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.152" starttime="20160125 01:31:52.151"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:31:52.153" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:31:52.231" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:52.232" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:31:52.232" starttime="20160125 01:31:52.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.234" starttime="20160125 01:31:52.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.235" starttime="20160125 01:31:52.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.236" starttime="20160125 01:31:52.235"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:31:52.238" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:31:52.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:52.316" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:31:52.316" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:52.316" starttime="20160125 01:31:52.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.320" starttime="20160125 01:31:52.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.322" starttime="20160125 01:31:52.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.323" starttime="20160125 01:31:52.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.324" starttime="20160125 01:31:52.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.325" starttime="20160125 01:31:52.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.326" starttime="20160125 01:31:52.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.328" starttime="20160125 01:31:52.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.329" starttime="20160125 01:31:52.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.330" starttime="20160125 01:31:52.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.331" starttime="20160125 01:31:52.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:52.333" starttime="20160125 01:31:52.332"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:52.333" starttime="20160125 01:31:52.148"></status>
</kw>
<doc>Basic test for balance check. Expected value is set at subscriber creation
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:52.334" starttime="20160125 01:31:47.700"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:31:52.343" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:31:52.344" starttime="20160125 01:31:52.341"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:52.870" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:52.872" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:52.871" starttime="20160125 01:31:52.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:31:52.874" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:52.874" starttime="20160125 01:31:52.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:31:54.876" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:31:54.877" starttime="20160125 01:31:52.875"></status>
</kw>
<msg timestamp="20160125 01:31:54.878" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:54.878" starttime="20160125 01:31:52.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for setup check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:54.880" level="INFO">Pressing 2 for setup check</msg>
<status status="PASS" endtime="20160125 01:31:54.880" starttime="20160125 01:31:54.879"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160125 01:31:54.886" level="INFO">2</msg>
<status status="PASS" endtime="20160125 01:31:54.886" starttime="20160125 01:31:54.881"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:54.902" level="INFO">=====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:54.902" level="INFO">${output} = =====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:54.902" starttime="20160125 01:31:54.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:54.904" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160125 01:31:54.904" starttime="20160125 01:31:54.903"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:54.910" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:54.910" starttime="20160125 01:31:54.905"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:54.979" level="INFO">=====================
Actualmente tienes tarifa plana. Hay muchas mas formas de ahorrar! 
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:54.980" level="INFO">${output} = =====================
Actualmente tienes tarifa plana. Hay muchas mas formas de ahorrar! 
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:54.979" starttime="20160125 01:31:54.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Actualmente tienes tarifa plana</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:54.981" starttime="20160125 01:31:54.980"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:54.987" starttime="20160125 01:31:54.986"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:31:54.988" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:31:55.038" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:55.040" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:31:55.039" starttime="20160125 01:31:54.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.041" starttime="20160125 01:31:55.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.042" starttime="20160125 01:31:55.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.043" starttime="20160125 01:31:55.043"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:31:55.045" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:31:55.126" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:55.127" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:31:55.127" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:55.126" starttime="20160125 01:31:55.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.131" starttime="20160125 01:31:55.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.132" starttime="20160125 01:31:55.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.133" starttime="20160125 01:31:55.133"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.134" starttime="20160125 01:31:55.134"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.136" starttime="20160125 01:31:55.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.137" starttime="20160125 01:31:55.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.138" starttime="20160125 01:31:55.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.139" starttime="20160125 01:31:55.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.141" starttime="20160125 01:31:55.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.142" starttime="20160125 01:31:55.141"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:55.143" starttime="20160125 01:31:55.142"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:55.143" starttime="20160125 01:31:54.983"></status>
</kw>
<doc>Check the subscriptions of test subscriber. Since there is no active subscription per default, subscriber is on default (basic) tariff
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:55.144" starttime="20160125 01:31:52.335"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test Buying">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:31:55.153" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:31:55.154" starttime="20160125 01:31:55.152"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:55.679" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:55.681" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:55.680" starttime="20160125 01:31:55.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:31:55.682" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:55.683" starttime="20160125 01:31:55.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:31:57.684" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:31:57.685" starttime="20160125 01:31:55.683"></status>
</kw>
<msg timestamp="20160125 01:31:57.687" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:31:57.686" starttime="20160125 01:31:55.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:57.688" level="INFO">Pressing 2 for buying menu</msg>
<status status="PASS" endtime="20160125 01:31:57.689" starttime="20160125 01:31:57.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160125 01:31:57.693" level="INFO">2</msg>
<status status="PASS" endtime="20160125 01:31:57.694" starttime="20160125 01:31:57.689"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:57.710" level="INFO">=====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:57.711" level="INFO">${output} = =====================
Que quisieras hacer?
1 Revisar tus productos activos
2 Comprar o administrar tus productos
Marca: * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:57.711" starttime="20160125 01:31:57.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:57.712" level="INFO">Pressing 2 for subscription check</msg>
<status status="PASS" endtime="20160125 01:31:57.713" starttime="20160125 01:31:57.712"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160125 01:31:57.717" level="INFO">2</msg>
<status status="PASS" endtime="20160125 01:31:57.717" starttime="20160125 01:31:57.713"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:58.534" level="INFO">=====================
Porfis escoge
1. Comprar una Bolsa
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:58.535" level="INFO">${output} = =====================
Porfis escoge
1. Comprar una Bolsa
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:58.535" starttime="20160125 01:31:57.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Porfis escoge</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:58.537" starttime="20160125 01:31:58.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for buying a bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:58.538" level="INFO">Pressing 1 for buying a bundle</msg>
<status status="PASS" endtime="20160125 01:31:58.539" starttime="20160125 01:31:58.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:58.542" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:58.542" starttime="20160125 01:31:58.539"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:58.861" level="INFO">=====================
Porfis escoge una de las siguientes opciones:
1. Voz
2. Datos
3. Mensajes de Texto
4. Splittest
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:58.863" level="INFO">${output} = =====================
Porfis escoge una de las siguientes opciones:
1. Voz
2. Datos
3. Mensajes de Texto
4. Splittest
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:58.862" starttime="20160125 01:31:58.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Porfis escoge una de las siguientes opciones</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:58.865" starttime="20160125 01:31:58.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Voz</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:58.866" level="INFO">Pressing 1 for Voz</msg>
<status status="PASS" endtime="20160125 01:31:58.867" starttime="20160125 01:31:58.866"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:58.871" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:58.872" starttime="20160125 01:31:58.867"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:58.931" level="INFO">=====================
Escoge la Bolsa que quieres comprar:
1. Voz 56 10000 Pesos
2. Nigth Pass 10000 Pesos
3. Antiplan Single Prepagado 6 FI 100000 Pesos
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:58.932" level="INFO">${output} = =====================
Escoge la Bolsa que quieres comprar:
1. Voz 56 10000 Pesos
2. Nigth Pass 10000 Pesos
3. Antiplan Single Prepagado 6 FI 100000 Pesos
Marca * para regresar, # para salir 
===...</msg>
<status status="PASS" endtime="20160125 01:31:58.932" starttime="20160125 01:31:58.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Escoge la Bolsa que quieres comprar</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:58.934" starttime="20160125 01:31:58.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Voz 56 10000 Pesos</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:58.935" level="INFO">Pressing 1 for Voz 56 10000 Pesos</msg>
<status status="PASS" endtime="20160125 01:31:58.935" starttime="20160125 01:31:58.934"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:58.940" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:58.940" starttime="20160125 01:31:58.936"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:59.414" level="INFO">=====================
La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos. Escoge:
1. para confirmar
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:59.415" level="INFO">${output} = =====================
La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos. Escoge:
1. para confirmar
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:31:59.414" starttime="20160125 01:31:58.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>La bolsa que quieres comprar es Voz 56 y vale 10000 Pesos</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.417" starttime="20160125 01:31:59.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:31:59.418" level="INFO">Pressing 1 for confirmation</msg>
<status status="PASS" endtime="20160125 01:31:59.418" starttime="20160125 01:31:59.417"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:31:59.422" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:31:59.423" starttime="20160125 01:31:59.419"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:31:59.786" level="INFO">=====================
Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos
Escoge
1.Comprar otra Bolsa
0.Menu principal
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:31:59.788" level="INFO">${output} = =====================
Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos
Escoge
1.Comprar otra Bolsa
0.Menu principal
Marca * para regresar, # para salir 
===================...</msg>
<status status="PASS" endtime="20160125 01:31:59.787" starttime="20160125 01:31:59.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Felicitaciones. Compraste tu producto Voz 56. El costo fue 10000 Pesos</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.790" starttime="20160125 01:31:59.789"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.795" starttime="20160125 01:31:59.794"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:31:59.796" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:31:59.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:59.840" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:31:59.839" starttime="20160125 01:31:59.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.841" starttime="20160125 01:31:59.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.842" starttime="20160125 01:31:59.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.843" starttime="20160125 01:31:59.842"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:31:59.845" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:31:59.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:31:59.923" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:31:59.923" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:31:59.923" starttime="20160125 01:31:59.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.927" starttime="20160125 01:31:59.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.928" starttime="20160125 01:31:59.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.929" starttime="20160125 01:31:59.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.930" starttime="20160125 01:31:59.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.931" starttime="20160125 01:31:59.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.933" starttime="20160125 01:31:59.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.934" starttime="20160125 01:31:59.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.935" starttime="20160125 01:31:59.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.936" starttime="20160125 01:31:59.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.938" starttime="20160125 01:31:59.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:31:59.939" starttime="20160125 01:31:59.938"></status>
</kw>
<status status="PASS" endtime="20160125 01:31:59.939" starttime="20160125 01:31:59.791"></status>
</kw>
<doc>Test will attempt to start the subscription management USSD menu and make a data bundle purchase
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:31:59.940" starttime="20160125 01:31:55.145"></status>
</test>
<test id="s1-s2-s1-s1-t5" name="Test What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:31:59.949" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:31:59.949" starttime="20160125 01:31:59.947"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:00.506" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:00.508" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:00.507" starttime="20160125 01:31:59.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:32:00.510" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:00.510" starttime="20160125 01:32:00.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:32:02.511" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:32:02.512" starttime="20160125 01:32:00.510"></status>
</kw>
<msg timestamp="20160125 01:32:02.513" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:02.513" starttime="20160125 01:31:59.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:02.515" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20160125 01:32:02.515" starttime="20160125 01:32:02.514"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160125 01:32:02.519" level="INFO">3</msg>
<status status="PASS" endtime="20160125 01:32:02.519" starttime="20160125 01:32:02.516"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:02.535" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:02.536" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20160125 01:32:02.535" starttime="20160125 01:32:02.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 5 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:02.537" level="INFO">Pressing 5 for what is my number service</msg>
<status status="PASS" endtime="20160125 01:32:02.537" starttime="20160125 01:32:02.536"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>5</arg>
</arguments>
<msg timestamp="20160125 01:32:02.543" level="INFO">5</msg>
<status status="PASS" endtime="20160125 01:32:02.543" starttime="20160125 01:32:02.538"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:02.562" level="INFO">=====================
Tu numero Virgin es 3190001000
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:02.563" level="INFO">${output} = =====================
Tu numero Virgin es 3190001000
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:02.563" starttime="20160125 01:32:02.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>3190001000</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.564" starttime="20160125 01:32:02.563"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.569" starttime="20160125 01:32:02.568"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:02.570" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:02.612" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:02.613" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:02.612" starttime="20160125 01:32:02.570"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.614" starttime="20160125 01:32:02.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.615" starttime="20160125 01:32:02.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.616" starttime="20160125 01:32:02.615"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:02.618" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:32:02.692" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:02.693" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:02.693" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:02.693" starttime="20160125 01:32:02.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.696" starttime="20160125 01:32:02.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.698" starttime="20160125 01:32:02.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.699" starttime="20160125 01:32:02.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.700" starttime="20160125 01:32:02.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.701" starttime="20160125 01:32:02.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.702" starttime="20160125 01:32:02.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.704" starttime="20160125 01:32:02.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.705" starttime="20160125 01:32:02.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.706" starttime="20160125 01:32:02.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.707" starttime="20160125 01:32:02.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:02.708" starttime="20160125 01:32:02.708"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:02.709" starttime="20160125 01:32:02.565"></status>
</kw>
<doc>Test will start the USSD menu item that shows subscriber's MSISDN
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:02.709" starttime="20160125 01:31:59.941"></status>
</test>
<test id="s1-s2-s1-s1-t6" name="Test Data Switch">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:32:02.718" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:32:02.719" starttime="20160125 01:32:02.716"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:03.463" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:03.465" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:03.464" starttime="20160125 01:32:02.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:32:03.467" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:03.468" starttime="20160125 01:32:03.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:32:05.469" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:32:05.470" starttime="20160125 01:32:03.468"></status>
</kw>
<msg timestamp="20160125 01:32:05.472" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:05.472" starttime="20160125 01:32:02.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:05.473" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20160125 01:32:05.474" starttime="20160125 01:32:05.473"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160125 01:32:05.479" level="INFO">3</msg>
<status status="PASS" endtime="20160125 01:32:05.479" starttime="20160125 01:32:05.474"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:05.497" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:05.497" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20160125 01:32:05.497" starttime="20160125 01:32:05.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for data switch</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:05.499" level="INFO">Pressing 1 for data switch</msg>
<status status="PASS" endtime="20160125 01:32:05.499" starttime="20160125 01:32:05.498"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160125 01:32:05.503" level="INFO">1</msg>
<status status="PASS" endtime="20160125 01:32:05.504" starttime="20160125 01:32:05.499"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:05.534" level="INFO">=====================
Tus datos tienen poder: estan ON, prendidos! Si quieres apagarlos para ahorrar marca 2 
Marca * para regresar # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:05.535" level="INFO">${output} = =====================
Tus datos tienen poder: estan ON, prendidos! Si quieres apagarlos para ahorrar marca 2 
Marca * para regresar # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:05.535" starttime="20160125 01:32:05.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tus datos tienen poder: estan ON, prendidos!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.537" starttime="20160125 01:32:05.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for data switch set to off</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:05.538" level="INFO">Pressing 2 for data switch set to off</msg>
<status status="PASS" endtime="20160125 01:32:05.538" starttime="20160125 01:32:05.537"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160125 01:32:05.542" level="INFO">2</msg>
<status status="PASS" endtime="20160125 01:32:05.542" starttime="20160125 01:32:05.539"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:05.930" level="INFO">=====================
Bienvenido al ahorro! Tus datos estan OFF. Chevere que cuidemos tu platica, cierto? 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:05.931" level="INFO">${output} = =====================
Bienvenido al ahorro! Tus datos estan OFF. Chevere que cuidemos tu platica, cierto? 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:05.931" starttime="20160125 01:32:05.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Bienvenido al ahorro! Tus datos estan OFF.</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.933" starttime="20160125 01:32:05.932"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.938" starttime="20160125 01:32:05.937"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:05.939" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:05.987" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:05.987" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:05.987" starttime="20160125 01:32:05.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.989" starttime="20160125 01:32:05.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.990" starttime="20160125 01:32:05.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:05.991" starttime="20160125 01:32:05.990"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:05.993" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:32:06.072" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:06.073" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:06.073" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:06.072" starttime="20160125 01:32:05.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.077" starttime="20160125 01:32:06.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.078" starttime="20160125 01:32:06.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.079" starttime="20160125 01:32:06.078"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.080" starttime="20160125 01:32:06.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.082" starttime="20160125 01:32:06.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.083" starttime="20160125 01:32:06.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.084" starttime="20160125 01:32:06.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.085" starttime="20160125 01:32:06.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.087" starttime="20160125 01:32:06.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.088" starttime="20160125 01:32:06.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:06.089" starttime="20160125 01:32:06.088"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:06.089" starttime="20160125 01:32:05.934"></status>
</kw>
<doc>Test will use the USSD menu to switch on the subscriber's data service
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:06.090" starttime="20160125 01:32:02.710"></status>
</test>
<test id="s1-s2-s1-s1-t7" name="Test Call Me Back">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for further evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160125 01:32:06.099" level="INFO">Killed</msg>
<status status="PASS" endtime="20160125 01:32:06.099" starttime="20160125 01:32:06.097"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:06.649" level="INFO">[1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:06.651" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:06.650" starttime="20160125 01:32:06.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160125 01:32:06.653" level="INFO">USSD Start: [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cuenta
5 Configurar internet en tu celu (APN)
# salir del menu 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:06.653" starttime="20160125 01:32:06.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160125 01:32:08.655" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160125 01:32:08.656" starttime="20160125 01:32:06.654"></status>
</kw>
<msg timestamp="20160125 01:32:08.657" level="INFO">${output} = [1m[qa_automation@ussd-app.tb07 ~]$[m /home/qa_automation/ussd/USSDtest.py 5731900010 00 111 573190
=====================
Ey pilas, el menu cambio
1 Ver tu saldo
2 Antiplanes y Bolsas
3 Tu cu...</msg>
<status status="PASS" endtime="20160125 01:32:08.657" starttime="20160125 01:32:06.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for VAS menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:08.659" level="INFO">Pressing 3 for VAS menu item</msg>
<status status="PASS" endtime="20160125 01:32:08.659" starttime="20160125 01:32:08.658"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160125 01:32:08.664" level="INFO">3</msg>
<status status="PASS" endtime="20160125 01:32:08.664" starttime="20160125 01:32:08.660"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:08.680" level="INFO">=====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:08.681" level="INFO">${output} = =====================
Que quieres hacer?
1 Switch on/off tus datos
2 Pide un credito
4 Pide que te llamen
5 Conoce tu numero
Marca * para regresar, # para salir. 
=====================
User in...</msg>
<status status="PASS" endtime="20160125 01:32:08.680" starttime="20160125 01:32:08.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for call me back service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:08.682" level="INFO">Pressing 4 for call me back service</msg>
<status status="PASS" endtime="20160125 01:32:08.682" starttime="20160125 01:32:08.681"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160125 01:32:08.686" level="INFO">4</msg>
<status status="PASS" endtime="20160125 01:32:08.686" starttime="20160125 01:32:08.683"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:08.719" level="INFO">=====================
Por favor ingresa el numero de celu del amigo que quieres que te
llame! 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:08.720" level="INFO">${output} = =====================
Por favor ingresa el numero de celu del amigo que quieres que te
llame! 
=====================
User input:</msg>
<status status="PASS" endtime="20160125 01:32:08.719" starttime="20160125 01:32:08.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering the mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:08.721" level="INFO">Entering the mobile number</msg>
<status status="PASS" endtime="20160125 01:32:08.722" starttime="20160125 01:32:08.720"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160125 01:32:08.725" level="INFO">${recipient} = 573190001001</msg>
<status status="PASS" endtime="20160125 01:32:08.725" starttime="20160125 01:32:08.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160125 01:32:08.729" level="INFO">573190001001</msg>
<status status="PASS" endtime="20160125 01:32:08.729" starttime="20160125 01:32:08.726"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160125 01:32:08.775" level="INFO">=====================
El mensaje fue enviado a tu amigo al celu 3190001001,
esperemos que te devuelva la llamada! Si no, marcale tu... 
Marca * para regresar, # para salir 
=====================
User input:</msg>
<msg timestamp="20160125 01:32:08.776" level="INFO">${output} = =====================
El mensaje fue enviado a tu amigo al celu 3190001001,
esperemos que te devuelva la llamada! Si no, marcale tu... 
Marca * para regresar, # para salir 
=====================
...</msg>
<status status="PASS" endtime="20160125 01:32:08.776" starttime="20160125 01:32:08.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>El mensaje fue enviado a tu amigo</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.778" starttime="20160125 01:32:08.777"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.783" starttime="20160125 01:32:08.782"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:08.784" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:08.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:08.829" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:08.829" starttime="20160125 01:32:08.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.831" starttime="20160125 01:32:08.830"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.832" starttime="20160125 01:32:08.831"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.833" starttime="20160125 01:32:08.832"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:08.835" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160125 01:32:08.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:08.912" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:08.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:08.912" starttime="20160125 01:32:08.833"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.916" starttime="20160125 01:32:08.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.917" starttime="20160125 01:32:08.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.918" starttime="20160125 01:32:08.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.919" starttime="20160125 01:32:08.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.921" starttime="20160125 01:32:08.920"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.922" starttime="20160125 01:32:08.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.923" starttime="20160125 01:32:08.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.924" starttime="20160125 01:32:08.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.925" starttime="20160125 01:32:08.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.927" starttime="20160125 01:32:08.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.928" starttime="20160125 01:32:08.927"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:08.928" starttime="20160125 01:32:08.779"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>USSD_only</tag>
<tag>VIRGIN_COLUMBIA_specific</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:08.929" starttime="20160125 01:32:06.091"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:08.945" starttime="20160125 01:32:08.943"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:08.948" starttime="20160125 01:32:08.940"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked. As USSD self care menus are different from customer to customer - so are these tests. The goal is to make a rough check of the main (and not all) functions - menu items.</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:32:08.948" starttime="20160125 01:31:38.921"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:32:08.976" starttime="20160125 01:31:38.907"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:32:09.003" starttime="20160125 01:31:38.893"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160125 01:32:09.152" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160125 01:32:09.158" level="INFO">${time} = Mon Jan 25 01:32:09 CET 2016</msg>
<status status="PASS" endtime="20160125 01:32:09.157" starttime="20160125 01:32:09.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:09.162" level="INFO">Date and time: Mon Jan 25 01:32:09 CET 2016</msg>
<status status="PASS" endtime="20160125 01:32:09.163" starttime="20160125 01:32:09.159"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:09.227" starttime="20160125 01:32:09.171"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160125 01:32:09.231" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:10.565" level="INFO">Read output: Last login: Mon Jan 25 00:31:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m</msg>
<msg timestamp="20160125 01:32:10.569" level="INFO">${output_login} = Last login: Mon Jan 25 00:31:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:32:10.567" starttime="20160125 01:32:09.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160125 01:32:10.573" level="INFO">Last login: Mon Jan 25 00:31:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:32:10.573" starttime="20160125 01:32:10.570"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160125 01:32:10.576" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160125 01:32:10.617" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:10.618" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 125 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160125 01:32:10.618" starttime="20160125 01:32:10.575"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:10.625" starttime="20160125 01:32:10.620"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:10.628" starttime="20160125 01:32:10.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:10.631" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160125 01:32:10.632" starttime="20160125 01:32:10.630"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:10.633" starttime="20160125 01:32:09.164"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:10.737" starttime="20160125 01:32:10.641"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160125 01:32:10.741" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:11.981" level="INFO">Read output: Last login: Mon Jan 25 00:32:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m</msg>
<msg timestamp="20160125 01:32:11.984" level="INFO">${output_login} = Last login: Mon Jan 25 00:32:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:32:11.982" starttime="20160125 01:32:10.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160125 01:32:11.987" level="INFO">Last login: Mon Jan 25 00:32:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:32:11.988" starttime="20160125 01:32:11.985"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160125 01:32:11.991" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160125 01:32:12.373" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:12.376" level="INFO">${output} = I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:32:12.375" starttime="20160125 01:32:11.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:12.380" level="INFO">XDR Version and pid: I-New CS MVNO - XDR Writer - Server 5.1.0.16360 is running PID: 6256 </msg>
<status status="PASS" endtime="20160125 01:32:12.381" starttime="20160125 01:32:12.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:12.384" starttime="20160125 01:32:12.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:12.391" starttime="20160125 01:32:12.385"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:12.393" starttime="20160125 01:32:10.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:12.396" level="INFO">SUT:/opt/robot/robotworkspace/suts/VIRGIN_COLUMBIA-resource.txt</msg>
<status status="PASS" endtime="20160125 01:32:12.397" starttime="20160125 01:32:12.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:12.401" level="INFO">XDR IP address:10.105.170.171</msg>
<status status="PASS" endtime="20160125 01:32:12.401" starttime="20160125 01:32:12.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:12.404" level="INFO">Using R5.1 tickets</msg>
<status status="PASS" endtime="20160125 01:32:12.405" starttime="20160125 01:32:12.402"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:12.470" starttime="20160125 01:32:12.413"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160125 01:32:12.474" level="INFO">Logging into '10.105.170.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:13.776" level="INFO">Read output: Last login: Sun Jan 24 02:49:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq-xdr.tb07 ~]$[m</msg>
<msg timestamp="20160125 01:32:13.779" level="INFO">${output_login} = Last login: Sun Jan 24 02:49:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq-xdr.tb07 ~]$[m </msg>
<status status="PASS" endtime="20160125 01:32:13.778" starttime="20160125 01:32:12.471"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160125 01:32:13.783" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20160125 01:32:13.878" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:13.880" level="INFO">${output} = tcp        0      0 ::ffff:10.105.170.124:61616 :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.170.124:61616 ::ffff:10.105.170.171:41948 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160125 01:32:13.879" starttime="20160125 01:32:13.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:13.884" starttime="20160125 01:32:13.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:13.886" starttime="20160125 01:32:13.885"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160125 01:32:13.890" level="INFO">Executing command 'sudo /etc/init.d/activemq status'.</msg>
<msg timestamp="20160125 01:32:14.043" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:14.046" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160125 01:32:14.045" starttime="20160125 01:32:13.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.050" starttime="20160125 01:32:14.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.052" starttime="20160125 01:32:14.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.055" starttime="20160125 01:32:14.053"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.058" starttime="20160125 01:32:14.056"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:14.066" starttime="20160125 01:32:12.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160125 01:32:14.068" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160125 01:32:14.068" starttime="20160125 01:32:14.067"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.115" starttime="20160125 01:32:14.069"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.141" starttime="20160125 01:32:14.125"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:14.142" starttime="20160125 01:32:14.122"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.372" starttime="20160125 01:32:14.151"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:14.373" starttime="20160125 01:32:14.148"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160125 01:32:14.375" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.170.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160125 01:32:14.375" starttime="20160125 01:32:14.373"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.675" starttime="20160125 01:32:14.376"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:14.676" starttime="20160125 01:32:09.145"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.703" starttime="20160125 01:32:14.702"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:14.746" starttime="20160125 01:32:14.707"></status>
</kw>
<msg timestamp="20160125 01:32:14.747" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160125 01:32:14.746" starttime="20160125 01:32:14.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:32:14.751" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:15.251" level="INFO">Read output: Last login: Mon Jan 25 00:32:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:32:15.264" starttime="20160125 01:32:14.750"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:15.265" starttime="20160125 01:32:14.747"></status>
</kw>
<msg timestamp="20160125 01:32:15.270" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160125 01:32:15.268" starttime="20160125 01:32:14.698"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:15.280" starttime="20160125 01:32:15.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:15.283" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160125 01:32:15.288" starttime="20160125 01:32:15.281"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:15.289" starttime="20160125 01:32:15.272"></status>
</kw>
<msg timestamp="20160125 01:32:15.292" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160125 01:32:15.290" starttime="20160125 01:32:14.692"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:15.319" starttime="20160125 01:32:15.313"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:15.320" starttime="20160125 01:32:15.306"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:15.345" starttime="20160125 01:32:15.328"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:15.350" starttime="20160125 01:32:15.346"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:15.351" starttime="20160125 01:32:15.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.353" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:32:25.354" starttime="20160125 01:32:15.352"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.364" starttime="20160125 01:32:25.362"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:32:25.368" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:32:25.367" starttime="20160125 01:32:25.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.371" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:32:25.372" starttime="20160125 01:32:25.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.377" starttime="20160125 01:32:25.376"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:25.378" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:25.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:25.419" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:25.418" starttime="20160125 01:32:25.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.420" starttime="20160125 01:32:25.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.421" starttime="20160125 01:32:25.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.422" starttime="20160125 01:32:25.422"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:25.424" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:32:25.494" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:25.494" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:25.495" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:25.494" starttime="20160125 01:32:25.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.498" starttime="20160125 01:32:25.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.499" starttime="20160125 01:32:25.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.500" starttime="20160125 01:32:25.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.502" starttime="20160125 01:32:25.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.503" starttime="20160125 01:32:25.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.504" starttime="20160125 01:32:25.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.505" starttime="20160125 01:32:25.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.507" starttime="20160125 01:32:25.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.508" starttime="20160125 01:32:25.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.509" starttime="20160125 01:32:25.508"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.510" starttime="20160125 01:32:25.509"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.511" starttime="20160125 01:32:25.372"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:25.512" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160125 01:32:25.515" starttime="20160125 01:32:25.511"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:32:25.516" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160125 01:32:25.547" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:25.547" level="INFO">${stdout_string} = [2016-01-25 00:32:15,351][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:15,...</msg>
<status status="PASS" endtime="20160125 01:32:25.547" starttime="20160125 01:32:25.515"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:25.549" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160125 01:32:25.621" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:32:25.622" starttime="20160125 01:32:25.548"></status>
</kw>
<msg timestamp="20160125 01:32:25.623" level="INFO">${tailed_text} = [2016-01-25 00:32:15,351][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:15,...</msg>
<status status="PASS" endtime="20160125 01:32:25.623" starttime="20160125 01:32:25.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.629" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:32:25.629" starttime="20160125 01:32:25.627"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.629" starttime="20160125 01:32:25.624"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.634" starttime="20160125 01:32:25.633"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.636" starttime="20160125 01:32:25.635"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.639" starttime="20160125 01:32:25.630"></status>
</kw>
<msg timestamp="20160125 01:32:25.640" level="INFO">${tailed_text} = [2016-01-25 00:32:15,351][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:15,...</msg>
<status status="PASS" endtime="20160125 01:32:25.639" starttime="20160125 01:32:25.355"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.656" starttime="20160125 01:32:25.655"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.673" starttime="20160125 01:32:25.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.675" starttime="20160125 01:32:25.674"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.676" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:32:25.677" level="INFO">${queryResultSetLines} = 4855499|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 09:12:55.77+01|2015-02-22 09:12:52+01|MOC123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|1|NONE|1.2|Charge|BasicSession|73212...</msg>
<status status="PASS" endtime="20160125 01:32:25.677" starttime="20160125 01:32:25.675"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.679" starttime="20160125 01:32:25.678"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.680" level="INFO">1 lines returned</msg>
<msg timestamp="20160125 01:32:25.681" level="INFO">@{queryResultSet} = [ 4855499|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 09:12:55.77+01|2015-02-22 09:12:52+01|MOC123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|1|NONE|1.2|Charge|BasicSession|732...</msg>
<status status="PASS" endtime="20160125 01:32:25.680" starttime="20160125 01:32:25.679"></status>
</kw>
<msg timestamp="20160125 01:32:25.682" level="INFO">@{queryRows} = [ 4855499|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 09:12:55.77+01|2015-02-22 09:12:52+01|MOC123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|1|NONE|1.2|Charge|BasicSession|732...</msg>
<status status="PASS" endtime="20160125 01:32:25.682" starttime="20160125 01:32:25.651"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.684" level="INFO">Length is 1</msg>
<msg timestamp="20160125 01:32:25.685" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160125 01:32:25.685" starttime="20160125 01:32:25.683"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.686" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:32:25.687" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160125 01:32:25.687" starttime="20160125 01:32:25.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:32:25.691" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:32:25.691" starttime="20160125 01:32:25.690"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.692" starttime="20160125 01:32:25.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.695" starttime="20160125 01:32:25.692"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.695" starttime="20160125 01:32:25.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.698" starttime="20160125 01:32:25.696"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:25.698" starttime="20160125 01:32:14.682"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:25.699" starttime="20160125 01:32:14.677"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.727" starttime="20160125 01:32:25.726"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:25.770" starttime="20160125 01:32:25.730"></status>
</kw>
<msg timestamp="20160125 01:32:25.772" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160125 01:32:25.771" starttime="20160125 01:32:25.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:32:25.783" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:26.197" level="INFO">Read output: Last login: Mon Jan 25 00:32:15 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:32:26.199" starttime="20160125 01:32:25.780"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:26.201" starttime="20160125 01:32:25.773"></status>
</kw>
<msg timestamp="20160125 01:32:26.204" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160125 01:32:26.203" starttime="20160125 01:32:25.721"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:26.216" starttime="20160125 01:32:26.214"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:26.219" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160125 01:32:26.222" starttime="20160125 01:32:26.217"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:26.223" starttime="20160125 01:32:26.206"></status>
</kw>
<msg timestamp="20160125 01:32:26.224" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160125 01:32:26.224" starttime="20160125 01:32:25.715"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:26.238" starttime="20160125 01:32:26.234"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:26.239" starttime="20160125 01:32:26.230"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:26.244" starttime="20160125 01:32:26.243"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:26.247" starttime="20160125 01:32:26.245"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:26.248" starttime="20160125 01:32:26.240"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.251" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:32:36.252" starttime="20160125 01:32:26.248"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.265" starttime="20160125 01:32:36.264"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:32:36.269" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:32:36.268" starttime="20160125 01:32:36.266"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.273" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:32:36.274" starttime="20160125 01:32:36.269"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.280" starttime="20160125 01:32:36.278"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:36.281" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:36.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:36.319" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:36.319" starttime="20160125 01:32:36.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.321" starttime="20160125 01:32:36.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.322" starttime="20160125 01:32:36.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.323" starttime="20160125 01:32:36.323"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:36.326" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:32:36.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:36.396" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:36.396" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:36.396" starttime="20160125 01:32:36.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.400" starttime="20160125 01:32:36.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.401" starttime="20160125 01:32:36.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.403" starttime="20160125 01:32:36.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.404" starttime="20160125 01:32:36.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.406" starttime="20160125 01:32:36.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.407" starttime="20160125 01:32:36.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.409" starttime="20160125 01:32:36.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.410" starttime="20160125 01:32:36.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.411" starttime="20160125 01:32:36.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.413" starttime="20160125 01:32:36.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.414" starttime="20160125 01:32:36.413"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.415" starttime="20160125 01:32:36.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:36.416" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160125 01:32:36.420" starttime="20160125 01:32:36.415"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:32:36.421" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160125 01:32:36.453" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:36.454" level="INFO">${stdout_string} = [2016-01-25 00:32:26,255][INFO ][ActiveMQ Session Task-143][XDRInserterImpl                                   ][  65] jdbc returns successful with result 0. (could be triggered insert)
[2016-01-25 00:...</msg>
<status status="PASS" endtime="20160125 01:32:36.454" starttime="20160125 01:32:36.421"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:36.456" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160125 01:32:36.528" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:32:36.529" starttime="20160125 01:32:36.455"></status>
</kw>
<msg timestamp="20160125 01:32:36.530" level="INFO">${tailed_text} = [2016-01-25 00:32:26,255][INFO ][ActiveMQ Session Task-143][XDRInserterImpl                                   ][  65] jdbc returns successful with result 0. (could be triggered insert)
[2016-01-25 00:...</msg>
<status status="PASS" endtime="20160125 01:32:36.529" starttime="20160125 01:32:36.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.535" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:32:36.536" starttime="20160125 01:32:36.533"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.536" starttime="20160125 01:32:36.530"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.542" starttime="20160125 01:32:36.541"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.544" starttime="20160125 01:32:36.543"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.547" starttime="20160125 01:32:36.537"></status>
</kw>
<msg timestamp="20160125 01:32:36.549" level="INFO">${tailed_text} = [2016-01-25 00:32:26,255][INFO ][ActiveMQ Session Task-143][XDRInserterImpl                                   ][  65] jdbc returns successful with result 0. (could be triggered insert)
[2016-01-25 00:...</msg>
<status status="PASS" endtime="20160125 01:32:36.548" starttime="20160125 01:32:36.254"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.566" starttime="20160125 01:32:36.565"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.571" starttime="20160125 01:32:36.567"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.572" starttime="20160125 01:32:36.571"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.574" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:32:36.575" level="INFO">${queryResultSetLines} = 4855500|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:36:19.022+01|2015-02-22 16:00:50.025+01|SMS123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.0|Charge|BasicEvent|73...</msg>
<status status="PASS" endtime="20160125 01:32:36.575" starttime="20160125 01:32:36.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.576" starttime="20160125 01:32:36.575"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.578" level="INFO">1 lines returned</msg>
<msg timestamp="20160125 01:32:36.578" level="INFO">@{queryResultSet} = [ 4855500|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:36:19.022+01|2015-02-22 16:00:50.025+01|SMS123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.0|Charge|BasicEvent|...</msg>
<status status="PASS" endtime="20160125 01:32:36.578" starttime="20160125 01:32:36.577"></status>
</kw>
<msg timestamp="20160125 01:32:36.580" level="INFO">@{queryRows} = [ 4855500|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:36:19.022+01|2015-02-22 16:00:50.025+01|SMS123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.0|Charge|BasicEvent|...</msg>
<status status="PASS" endtime="20160125 01:32:36.579" starttime="20160125 01:32:36.561"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.581" level="INFO">Length is 1</msg>
<msg timestamp="20160125 01:32:36.582" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160125 01:32:36.582" starttime="20160125 01:32:36.580"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.584" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:32:36.584" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160125 01:32:36.584" starttime="20160125 01:32:36.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:32:36.589" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:32:36.589" starttime="20160125 01:32:36.588"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.590" starttime="20160125 01:32:36.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.593" starttime="20160125 01:32:36.590"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.594" starttime="20160125 01:32:36.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.597" starttime="20160125 01:32:36.594"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:36.597" starttime="20160125 01:32:25.705"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:36.598" starttime="20160125 01:32:25.701"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.629" starttime="20160125 01:32:36.628"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:36.671" starttime="20160125 01:32:36.633"></status>
</kw>
<msg timestamp="20160125 01:32:36.672" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160125 01:32:36.672" starttime="20160125 01:32:36.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:32:36.677" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:37.093" level="INFO">Read output: Last login: Mon Jan 25 00:32:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:32:37.094" starttime="20160125 01:32:36.676"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:37.095" starttime="20160125 01:32:36.673"></status>
</kw>
<msg timestamp="20160125 01:32:37.097" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160125 01:32:37.096" starttime="20160125 01:32:36.623"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:37.103" starttime="20160125 01:32:37.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:37.105" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160125 01:32:37.108" starttime="20160125 01:32:37.104"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:37.109" starttime="20160125 01:32:37.098"></status>
</kw>
<msg timestamp="20160125 01:32:37.110" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160125 01:32:37.110" starttime="20160125 01:32:36.616"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:37.202" starttime="20160125 01:32:37.121"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:37.203" starttime="20160125 01:32:37.117"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:37.208" starttime="20160125 01:32:37.207"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:37.211" starttime="20160125 01:32:37.209"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:37.212" starttime="20160125 01:32:37.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.214" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:32:47.215" starttime="20160125 01:32:37.212"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.226" starttime="20160125 01:32:47.225"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:32:47.230" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:32:47.229" starttime="20160125 01:32:47.227"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.235" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:32:47.235" starttime="20160125 01:32:47.230"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.241" starttime="20160125 01:32:47.240"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:47.242" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:47.296" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:47.297" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:47.296" starttime="20160125 01:32:47.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.298" starttime="20160125 01:32:47.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.300" starttime="20160125 01:32:47.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.301" starttime="20160125 01:32:47.301"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:47.304" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:32:47.376" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:47.377" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:47.377" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:47.376" starttime="20160125 01:32:47.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.381" starttime="20160125 01:32:47.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.382" starttime="20160125 01:32:47.381"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.384" starttime="20160125 01:32:47.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.385" starttime="20160125 01:32:47.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.386" starttime="20160125 01:32:47.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.388" starttime="20160125 01:32:47.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.389" starttime="20160125 01:32:47.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.391" starttime="20160125 01:32:47.390"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.392" starttime="20160125 01:32:47.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.393" starttime="20160125 01:32:47.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.395" starttime="20160125 01:32:47.394"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.395" starttime="20160125 01:32:47.236"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:47.397" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160125 01:32:47.403" starttime="20160125 01:32:47.396"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:32:47.404" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160125 01:32:47.434" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:47.435" level="INFO">${stdout_string} = [2016-01-25 00:32:37,211][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:37,...</msg>
<status status="PASS" endtime="20160125 01:32:47.435" starttime="20160125 01:32:47.404"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:47.437" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160125 01:32:47.510" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:32:47.510" starttime="20160125 01:32:47.436"></status>
</kw>
<msg timestamp="20160125 01:32:47.511" level="INFO">${tailed_text} = [2016-01-25 00:32:37,211][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:37,...</msg>
<status status="PASS" endtime="20160125 01:32:47.511" starttime="20160125 01:32:47.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.517" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:32:47.518" starttime="20160125 01:32:47.515"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.518" starttime="20160125 01:32:47.512"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.524" starttime="20160125 01:32:47.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.525" starttime="20160125 01:32:47.524"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.528" starttime="20160125 01:32:47.519"></status>
</kw>
<msg timestamp="20160125 01:32:47.529" level="INFO">${tailed_text} = [2016-01-25 00:32:37,211][INFO ][ActiveMQ Session Task-143][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:32:37,...</msg>
<status status="PASS" endtime="20160125 01:32:47.529" starttime="20160125 01:32:47.217"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.548" starttime="20160125 01:32:47.547"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.622" starttime="20160125 01:32:47.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.623" starttime="20160125 01:32:47.622"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.625" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:32:47.626" level="INFO">${queryResultSetLines} = 4855501|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:37:42.312+01|2015-02-23 10:37:06+01|DATA123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSessio...</msg>
<status status="PASS" endtime="20160125 01:32:47.626" starttime="20160125 01:32:47.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.627" starttime="20160125 01:32:47.627"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.629" level="INFO">1 lines returned</msg>
<msg timestamp="20160125 01:32:47.630" level="INFO">@{queryResultSet} = [ 4855501|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:37:42.312+01|2015-02-23 10:37:06+01|DATA123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSess...</msg>
<status status="PASS" endtime="20160125 01:32:47.629" starttime="20160125 01:32:47.628"></status>
</kw>
<msg timestamp="20160125 01:32:47.631" level="INFO">@{queryRows} = [ 4855501|1.4|101|t|1|CRCE|CDR|crce01.xxxx|2015-02-23 10:37:42.312+01|2015-02-23 10:37:06+01|DATA123456XdrComponentTest|1|1|74456|573190001000|PREPAID|OK|0|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSess...</msg>
<status status="PASS" endtime="20160125 01:32:47.630" starttime="20160125 01:32:47.543"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.633" level="INFO">Length is 1</msg>
<msg timestamp="20160125 01:32:47.633" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160125 01:32:47.633" starttime="20160125 01:32:47.631"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.635" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:32:47.635" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160125 01:32:47.635" starttime="20160125 01:32:47.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:32:47.640" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:32:47.641" starttime="20160125 01:32:47.639"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.641" starttime="20160125 01:32:47.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.644" starttime="20160125 01:32:47.642"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.645" starttime="20160125 01:32:47.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.648" starttime="20160125 01:32:47.645"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:47.648" starttime="20160125 01:32:36.605"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:47.649" starttime="20160125 01:32:36.600"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.686" starttime="20160125 01:32:47.685"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:47.744" starttime="20160125 01:32:47.690"></status>
</kw>
<msg timestamp="20160125 01:32:47.747" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160125 01:32:47.746" starttime="20160125 01:32:47.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:32:47.758" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:48.182" level="INFO">Read output: Last login: Mon Jan 25 00:32:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:32:48.184" starttime="20160125 01:32:47.755"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:48.186" starttime="20160125 01:32:47.748"></status>
</kw>
<msg timestamp="20160125 01:32:48.190" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160125 01:32:48.189" starttime="20160125 01:32:47.680"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:48.204" starttime="20160125 01:32:48.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:48.208" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160125 01:32:48.213" starttime="20160125 01:32:48.205"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:48.214" starttime="20160125 01:32:48.192"></status>
</kw>
<msg timestamp="20160125 01:32:48.217" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160125 01:32:48.216" starttime="20160125 01:32:47.674"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:48.235" starttime="20160125 01:32:48.229"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:48.236" starttime="20160125 01:32:48.225"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:48.242" starttime="20160125 01:32:48.241"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:48.246" starttime="20160125 01:32:48.243"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:48.247" starttime="20160125 01:32:48.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.248" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:32:58.250" starttime="20160125 01:32:48.247"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.263" starttime="20160125 01:32:58.262"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:32:58.267" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:32:58.267" starttime="20160125 01:32:58.264"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.273" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:32:58.273" starttime="20160125 01:32:58.268"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.279" starttime="20160125 01:32:58.278"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:32:58.281" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:32:58.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:58.318" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:32:58.318" starttime="20160125 01:32:58.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.320" starttime="20160125 01:32:58.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.321" starttime="20160125 01:32:58.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.322" starttime="20160125 01:32:58.321"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:32:58.324" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:32:58.397" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:58.398" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:32:58.398" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:32:58.397" starttime="20160125 01:32:58.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.401" starttime="20160125 01:32:58.399"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.403" starttime="20160125 01:32:58.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.404" starttime="20160125 01:32:58.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.405" starttime="20160125 01:32:58.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.406" starttime="20160125 01:32:58.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.408" starttime="20160125 01:32:58.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.409" starttime="20160125 01:32:58.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.410" starttime="20160125 01:32:58.409"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.412" starttime="20160125 01:32:58.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.413" starttime="20160125 01:32:58.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.414" starttime="20160125 01:32:58.413"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.414" starttime="20160125 01:32:58.274"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:58.416" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160125 01:32:58.421" starttime="20160125 01:32:58.415"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:32:58.422" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160125 01:32:58.452" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:32:58.453" level="INFO">${stdout_string} = [2016-01-25 00:32:49,678][INFO ][Timer-51       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file ERROR_CRCE_CDR_20160124131249.csv.tmp
[2016-01-25 00:32:54,105][IN...</msg>
<status status="PASS" endtime="20160125 01:32:58.453" starttime="20160125 01:32:58.422"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:58.454" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160125 01:32:58.527" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:32:58.528" starttime="20160125 01:32:58.453"></status>
</kw>
<msg timestamp="20160125 01:32:58.529" level="INFO">${tailed_text} = [2016-01-25 00:32:49,678][INFO ][Timer-51       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file ERROR_CRCE_CDR_20160124131249.csv.tmp
[2016-01-25 00:32:54,105][IN...</msg>
<status status="PASS" endtime="20160125 01:32:58.529" starttime="20160125 01:32:58.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.534" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:32:58.535" starttime="20160125 01:32:58.532"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.535" starttime="20160125 01:32:58.529"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.540" starttime="20160125 01:32:58.539"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.542" starttime="20160125 01:32:58.541"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.543" starttime="20160125 01:32:58.536"></status>
</kw>
<msg timestamp="20160125 01:32:58.545" level="INFO">${tailed_text} = [2016-01-25 00:32:49,678][INFO ][Timer-51       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file ERROR_CRCE_CDR_20160124131249.csv.tmp
[2016-01-25 00:32:54,105][IN...</msg>
<status status="PASS" endtime="20160125 01:32:58.544" starttime="20160125 01:32:58.253"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.560" starttime="20160125 01:32:58.559"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.564" starttime="20160125 01:32:58.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.565" starttime="20160125 01:32:58.565"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.567" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:32:58.568" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160125 01:32:58.567" starttime="20160125 01:32:58.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.569" starttime="20160125 01:32:58.568"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.570" level="INFO">0 lines returned</msg>
<msg timestamp="20160125 01:32:58.571" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160125 01:32:58.571" starttime="20160125 01:32:58.569"></status>
</kw>
<msg timestamp="20160125 01:32:58.572" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160125 01:32:58.572" starttime="20160125 01:32:58.556"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.574" level="INFO">Length is 0</msg>
<msg timestamp="20160125 01:32:58.574" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160125 01:32:58.574" starttime="20160125 01:32:58.572"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.576" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:32:58.576" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160125 01:32:58.576" starttime="20160125 01:32:58.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.579" starttime="20160125 01:32:58.577"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:32:58.583" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:32:58.584" starttime="20160125 01:32:58.582"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.584" starttime="20160125 01:32:58.580"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.585" starttime="20160125 01:32:58.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.588" starttime="20160125 01:32:58.585"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.588" starttime="20160125 01:32:47.662"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:58.589" starttime="20160125 01:32:47.657"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:32:58.590" starttime="20160125 01:32:47.651"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.623" starttime="20160125 01:32:58.622"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:58.677" starttime="20160125 01:32:58.626"></status>
</kw>
<msg timestamp="20160125 01:32:58.679" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160125 01:32:58.678" starttime="20160125 01:32:58.623"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:32:58.690" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:32:59.101" level="INFO">Read output: Last login: Mon Jan 25 00:32:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:32:59.102" starttime="20160125 01:32:58.688"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:59.103" starttime="20160125 01:32:58.680"></status>
</kw>
<msg timestamp="20160125 01:32:59.105" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160125 01:32:59.104" starttime="20160125 01:32:58.617"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:59.111" starttime="20160125 01:32:59.110"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:32:59.113" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160125 01:32:59.116" starttime="20160125 01:32:59.111"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:59.116" starttime="20160125 01:32:59.106"></status>
</kw>
<msg timestamp="20160125 01:32:59.118" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160125 01:32:59.117" starttime="20160125 01:32:58.611"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:59.130" starttime="20160125 01:32:59.127"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:59.131" starttime="20160125 01:32:59.124"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:59.136" starttime="20160125 01:32:59.135"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:32:59.139" starttime="20160125 01:32:59.137"></status>
</kw>
<status status="PASS" endtime="20160125 01:32:59.140" starttime="20160125 01:32:59.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.141" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:33:09.142" starttime="20160125 01:32:59.140"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.152" starttime="20160125 01:33:09.151"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:33:09.156" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:33:09.155" starttime="20160125 01:33:09.153"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.160" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:33:09.160" starttime="20160125 01:33:09.156"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.165" starttime="20160125 01:33:09.164"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:33:09.166" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:33:09.210" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:09.210" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:33:09.210" starttime="20160125 01:33:09.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.212" starttime="20160125 01:33:09.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.213" starttime="20160125 01:33:09.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.214" starttime="20160125 01:33:09.213"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:33:09.216" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:33:09.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:09.289" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:33:09.290" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:33:09.289" starttime="20160125 01:33:09.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.293" starttime="20160125 01:33:09.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.294" starttime="20160125 01:33:09.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.296" starttime="20160125 01:33:09.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.297" starttime="20160125 01:33:09.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.298" starttime="20160125 01:33:09.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.299" starttime="20160125 01:33:09.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.301" starttime="20160125 01:33:09.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.302" starttime="20160125 01:33:09.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.303" starttime="20160125 01:33:09.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.304" starttime="20160125 01:33:09.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.306" starttime="20160125 01:33:09.305"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.306" starttime="20160125 01:33:09.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:09.308" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160125 01:33:09.311" starttime="20160125 01:33:09.307"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:33:09.312" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160125 01:33:09.344" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:09.345" level="INFO">${stdout_string} = [2016-01-25 00:33:05,374][INFO ][Timer-50       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file CRCE_CDR_20160125003235.csv.tmp
[2016-01-25 00:33:08,145][WARN ][T...</msg>
<status status="PASS" endtime="20160125 01:33:09.344" starttime="20160125 01:33:09.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:09.346" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160125 01:33:09.423" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:33:09.424" starttime="20160125 01:33:09.345"></status>
</kw>
<msg timestamp="20160125 01:33:09.425" level="INFO">${tailed_text} = [2016-01-25 00:33:05,374][INFO ][Timer-50       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file CRCE_CDR_20160125003235.csv.tmp
[2016-01-25 00:33:08,145][WARN ][T...</msg>
<status status="PASS" endtime="20160125 01:33:09.424" starttime="20160125 01:33:09.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.430" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/SMS_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/SMS_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:33:09.430" starttime="20160125 01:33:09.428"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.431" starttime="20160125 01:33:09.425"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.436" starttime="20160125 01:33:09.435"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.437" starttime="20160125 01:33:09.436"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.439" starttime="20160125 01:33:09.431"></status>
</kw>
<msg timestamp="20160125 01:33:09.440" level="INFO">${tailed_text} = [2016-01-25 00:33:05,374][INFO ][Timer-50       ][XDRBackgroundFileWriter                           ][ 115] flushed 1 records to file CRCE_CDR_20160125003235.csv.tmp
[2016-01-25 00:33:08,145][WARN ][T...</msg>
<status status="PASS" endtime="20160125 01:33:09.440" starttime="20160125 01:33:09.144"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.456" starttime="20160125 01:33:09.455"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.460" starttime="20160125 01:33:09.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.461" starttime="20160125 01:33:09.460"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.463" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:33:09.463" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160125 01:33:09.463" starttime="20160125 01:33:09.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.465" starttime="20160125 01:33:09.464"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.466" level="INFO">0 lines returned</msg>
<msg timestamp="20160125 01:33:09.467" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:09.466" starttime="20160125 01:33:09.465"></status>
</kw>
<msg timestamp="20160125 01:33:09.468" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:09.467" starttime="20160125 01:33:09.451"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.470" level="INFO">Length is 0</msg>
<msg timestamp="20160125 01:33:09.470" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160125 01:33:09.470" starttime="20160125 01:33:09.468"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.472" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:33:09.472" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160125 01:33:09.472" starttime="20160125 01:33:09.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.475" starttime="20160125 01:33:09.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:33:09.479" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:33:09.480" starttime="20160125 01:33:09.478"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.480" starttime="20160125 01:33:09.476"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.481" starttime="20160125 01:33:09.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.483" starttime="20160125 01:33:09.481"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.484" starttime="20160125 01:32:58.601"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.485" starttime="20160125 01:32:58.596"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:33:09.486" starttime="20160125 01:32:58.591"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.518" starttime="20160125 01:33:09.517"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.572" starttime="20160125 01:33:09.521"></status>
</kw>
<msg timestamp="20160125 01:33:09.574" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160125 01:33:09.573" starttime="20160125 01:33:09.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:33:09.584" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:33:09.990" level="INFO">Read output: Last login: Mon Jan 25 00:32:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:33:09.991" starttime="20160125 01:33:09.582"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:09.991" starttime="20160125 01:33:09.575"></status>
</kw>
<msg timestamp="20160125 01:33:09.992" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160125 01:33:09.992" starttime="20160125 01:33:09.512"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:09.998" starttime="20160125 01:33:09.997"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:10.000" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160125 01:33:10.003" starttime="20160125 01:33:09.999"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:10.004" starttime="20160125 01:33:09.993"></status>
</kw>
<msg timestamp="20160125 01:33:10.005" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160125 01:33:10.005" starttime="20160125 01:33:09.507"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:10.113" starttime="20160125 01:33:10.015"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:10.114" starttime="20160125 01:33:10.012"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:10.119" starttime="20160125 01:33:10.118"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:10.122" starttime="20160125 01:33:10.120"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:10.123" starttime="20160125 01:33:10.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.125" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:33:20.126" starttime="20160125 01:33:10.123"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.136" starttime="20160125 01:33:20.135"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:33:20.139" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:33:20.139" starttime="20160125 01:33:20.136"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.144" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:33:20.144" starttime="20160125 01:33:20.140"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.149" starttime="20160125 01:33:20.148"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:33:20.150" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:33:20.187" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:20.188" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:33:20.187" starttime="20160125 01:33:20.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.189" starttime="20160125 01:33:20.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.190" starttime="20160125 01:33:20.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.191" starttime="20160125 01:33:20.191"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:33:20.193" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:33:20.266" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:20.268" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:33:20.269" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:33:20.268" starttime="20160125 01:33:20.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.276" starttime="20160125 01:33:20.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.279" starttime="20160125 01:33:20.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.282" starttime="20160125 01:33:20.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.284" starttime="20160125 01:33:20.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.287" starttime="20160125 01:33:20.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.290" starttime="20160125 01:33:20.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.293" starttime="20160125 01:33:20.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.296" starttime="20160125 01:33:20.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.299" starttime="20160125 01:33:20.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.301" starttime="20160125 01:33:20.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.304" starttime="20160125 01:33:20.302"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.305" starttime="20160125 01:33:20.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:20.308" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160125 01:33:20.313" starttime="20160125 01:33:20.306"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:33:20.316" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160125 01:33:20.347" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:20.348" level="INFO">${stdout_string} = [2016-01-25 00:33:10,123][INFO ][ActiveMQ Session Task-144][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:33:10,...</msg>
<status status="PASS" endtime="20160125 01:33:20.347" starttime="20160125 01:33:20.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:20.351" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160125 01:33:20.424" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:33:20.425" starttime="20160125 01:33:20.349"></status>
</kw>
<msg timestamp="20160125 01:33:20.427" level="INFO">${tailed_text} = [2016-01-25 00:33:10,123][INFO ][ActiveMQ Session Task-144][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:33:10,...</msg>
<status status="PASS" endtime="20160125 01:33:20.427" starttime="20160125 01:33:20.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.438" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/DATA_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/DATA_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:33:20.439" starttime="20160125 01:33:20.434"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.440" starttime="20160125 01:33:20.428"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.450" starttime="20160125 01:33:20.447"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.452" starttime="20160125 01:33:20.451"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.456" starttime="20160125 01:33:20.441"></status>
</kw>
<msg timestamp="20160125 01:33:20.458" level="INFO">${tailed_text} = [2016-01-25 00:33:10,123][INFO ][ActiveMQ Session Task-144][XDRConsumerImpl                                   ][ 194] ------ start consuming from queue://inew-cs.crce.cdr -------
[2016-01-25 00:33:10,...</msg>
<status status="PASS" endtime="20160125 01:33:20.458" starttime="20160125 01:33:20.127"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.480" starttime="20160125 01:33:20.479"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.543" starttime="20160125 01:33:20.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.544" starttime="20160125 01:33:20.544"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.546" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:33:20.547" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160125 01:33:20.546" starttime="20160125 01:33:20.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.548" starttime="20160125 01:33:20.547"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.549" level="INFO">0 lines returned</msg>
<msg timestamp="20160125 01:33:20.550" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:20.550" starttime="20160125 01:33:20.548"></status>
</kw>
<msg timestamp="20160125 01:33:20.551" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:20.551" starttime="20160125 01:33:20.475"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.553" level="INFO">Length is 0</msg>
<msg timestamp="20160125 01:33:20.553" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160125 01:33:20.553" starttime="20160125 01:33:20.551"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.555" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:33:20.555" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160125 01:33:20.555" starttime="20160125 01:33:20.554"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.559" starttime="20160125 01:33:20.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:33:20.563" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:33:20.563" starttime="20160125 01:33:20.562"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.563" starttime="20160125 01:33:20.559"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.564" starttime="20160125 01:33:20.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.567" starttime="20160125 01:33:20.564"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.567" starttime="20160125 01:33:09.496"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:20.568" starttime="20160125 01:33:09.492"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:33:20.569" starttime="20160125 01:33:09.487"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.597" starttime="20160125 01:33:20.596"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:20.653" starttime="20160125 01:33:20.600"></status>
</kw>
<msg timestamp="20160125 01:33:20.655" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160125 01:33:20.654" starttime="20160125 01:33:20.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160125 01:33:20.665" level="INFO">Logging into '10.105.170.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160125 01:33:21.076" level="INFO">Read output: Last login: Mon Jan 25 00:33:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr.tb07 ~]$</msg>
<status status="PASS" endtime="20160125 01:33:21.078" starttime="20160125 01:33:20.663"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:21.080" starttime="20160125 01:33:20.656"></status>
</kw>
<msg timestamp="20160125 01:33:21.084" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160125 01:33:21.082" starttime="20160125 01:33:20.591"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:21.095" starttime="20160125 01:33:21.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:21.096" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.1.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160125 01:33:21.101" starttime="20160125 01:33:21.095"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:21.101" starttime="20160125 01:33:21.086"></status>
</kw>
<msg timestamp="20160125 01:33:21.102" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160125 01:33:21.102" starttime="20160125 01:33:20.586"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:21.117" starttime="20160125 01:33:21.112"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:21.118" starttime="20160125 01:33:21.109"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:21.123" starttime="20160125 01:33:21.122"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:21.126" starttime="20160125 01:33:21.124"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:21.127" starttime="20160125 01:33:21.119"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.129" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160125 01:33:31.132" starttime="20160125 01:33:21.127"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.143" starttime="20160125 01:33:31.142"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160125 01:33:31.148" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160125 01:33:31.148" starttime="20160125 01:33:31.144"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.154" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160125 01:33:31.154" starttime="20160125 01:33:31.149"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.160" starttime="20160125 01:33:31.159"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160125 01:33:31.161" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160125 01:33:31.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:31.207" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160125 01:33:31.206" starttime="20160125 01:33:31.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.208" starttime="20160125 01:33:31.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.210" starttime="20160125 01:33:31.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.211" starttime="20160125 01:33:31.210"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160125 01:33:31.213" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160125 01:33:31.288" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:31.288" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160125 01:33:31.289" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160125 01:33:31.288" starttime="20160125 01:33:31.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.292" starttime="20160125 01:33:31.289"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.293" starttime="20160125 01:33:31.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.294" starttime="20160125 01:33:31.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.296" starttime="20160125 01:33:31.295"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.297" starttime="20160125 01:33:31.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.298" starttime="20160125 01:33:31.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.300" starttime="20160125 01:33:31.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.301" starttime="20160125 01:33:31.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.302" starttime="20160125 01:33:31.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.303" starttime="20160125 01:33:31.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.304" starttime="20160125 01:33:31.304"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.305" starttime="20160125 01:33:31.155"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:31.306" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160125 01:33:31.311" starttime="20160125 01:33:31.305"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:33:31.312" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160125 01:33:31.344" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160125 01:33:31.345" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160125 01:33:31.345" starttime="20160125 01:33:31.311"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160125 01:33:31.346" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160125 01:33:31.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160125 01:33:31.422" starttime="20160125 01:33:31.345"></status>
</kw>
<msg timestamp="20160125 01:33:31.423" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160125 01:33:31.423" starttime="20160125 01:33:31.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.428" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160125 01:33:31.429" starttime="20160125 01:33:31.426"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.429" starttime="20160125 01:33:31.423"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.434" starttime="20160125 01:33:31.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.435" starttime="20160125 01:33:31.434"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.436" starttime="20160125 01:33:31.430"></status>
</kw>
<msg timestamp="20160125 01:33:31.439" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160125 01:33:31.438" starttime="20160125 01:33:31.135"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.453" starttime="20160125 01:33:31.452"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.457" starttime="20160125 01:33:31.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.459" starttime="20160125 01:33:31.458"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.460" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/VMCO/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160125 01:33:31.461" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160125 01:33:31.461" starttime="20160125 01:33:31.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.462" starttime="20160125 01:33:31.461"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.463" level="INFO">0 lines returned</msg>
<msg timestamp="20160125 01:33:31.464" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:31.464" starttime="20160125 01:33:31.463"></status>
</kw>
<msg timestamp="20160125 01:33:31.465" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160125 01:33:31.465" starttime="20160125 01:33:31.449"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.467" level="INFO">Length is 0</msg>
<msg timestamp="20160125 01:33:31.467" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160125 01:33:31.467" starttime="20160125 01:33:31.466"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160125 01:33:31.469" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160125 01:33:31.469" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160125 01:33:31.469" starttime="20160125 01:33:31.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.473" starttime="20160125 01:33:31.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160125 01:33:31.476" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160125 01:33:31.477" starttime="20160125 01:33:31.475"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.477" starttime="20160125 01:33:31.473"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.478" starttime="20160125 01:33:31.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.480" starttime="20160125 01:33:31.478"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.481" starttime="20160125 01:33:20.575"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160125 01:33:31.482" starttime="20160125 01:33:20.570"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160125 01:33:31.498" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160125 01:33:31.499" starttime="20160125 01:33:31.497"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160125 01:33:31.500" starttime="20160125 01:33:31.499"></status>
</kw>
<status status="PASS" endtime="20160125 01:33:31.501" starttime="20160125 01:33:31.495"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:33:31.501" starttime="20160125 01:32:09.050"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:33:31.532" starttime="20160125 01:32:09.037"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:33:31.564" starttime="20160125 01:32:09.023"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160125 01:33:31.618" starttime="20160125 01:28:44.072"></status>
</suite>
<statistics>
<total>
<stat pass="24" fail="0">Critical Tests</stat>
<stat pass="24" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="10" info="" doc="" combined="" fail="0" links="">calls</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">ComponentTest</stat>
<stat pass="24" info="" doc="" combined="" fail="0" links="">matko.sanseovic</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">MOC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="17" info="" doc="" combined="" fail="0" links="">MTEL_supported</stat>
<stat pass="15" info="" doc="" combined="" fail="0" links="">MVNA_MEX_supported</stat>
<stat pass="17" info="" doc="" combined="" fail="0" links="">SMARTSPACE_supported</stat>
<stat pass="17" info="" doc="" combined="" fail="0" links="">TNZ_supported</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">VIRGIN_COLUMBIA_specific</stat>
<stat pass="17" info="" doc="" combined="" fail="0" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="24" id="s1" fail="0" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="10" id="s1-s1" fail="0" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="10" id="s1-s1-s1" fail="0" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="6" id="s1-s1-s1-s1" fail="0" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="6" id="s1-s1-s1-s1-s1" fail="0" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s3" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s4" fail="0" name="MOC PREPAID ONNET-NoCredit">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-NoCredit-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit.MOC PREPAID ONNET-NoCredit-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s5" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s5-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s6" fail="0" name="MOC PREPAID ONNET-ToUnknown">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s6-s1" fail="0" name="MOC PREPAID ONNET-ToUnknown-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown.MOC PREPAID ONNET-ToUnknown-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s2" fail="0" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="1" id="s1-s1-s1-s2-s1" fail="0" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s2" fail="0" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s1-s1-s2-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s2-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="7" id="s1-s2-s1" fail="0" name="VMCO">Robot Testsuites.Ussd.VMCO</stat>
<stat pass="7" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.VMCO.Ussd-Robot-Suite</stat>
<stat pass="7" id="s1-s3" fail="0" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="7" id="s1-s3-s1" fail="0" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="7" id="s1-s3-s1-s1" fail="0" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
