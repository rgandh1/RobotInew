<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160128 01:10:01.404">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid" id="s1-s1-s1" name="PostPaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/DATA" id="s1-s1-s1-s1" name="DATA">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/DATA/postpaid-data-regression-suite.txt" id="s1-s1-s1-s1-s1" name="Postpaid-Data-Regression-Suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:02.671" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:02.675" level="INFO">${date} = Thu Jan 28 01:10:02 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:02.674" starttime="20160128 01:10:02.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:02.679" level="INFO">Date and time: Thu Jan 28 01:10:02 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:02.680" starttime="20160128 01:10:02.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:02.684" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:02.684" starttime="20160128 01:10:02.681"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:02.743" starttime="20160128 01:10:02.741"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:03.090" starttime="20160128 01:10:02.756"></status>
</kw>
<msg timestamp="20160128 01:10:03.098" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160128 01:10:03.095" starttime="20160128 01:10:02.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:03.119" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:05.744" level="INFO">Read output: Last login: Wed Jan 27 14:32:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:05.747" starttime="20160128 01:10:03.113"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:05.749" starttime="20160128 01:10:03.101"></status>
</kw>
<msg timestamp="20160128 01:10:05.754" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160128 01:10:05.752" starttime="20160128 01:10:02.728"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:05.763" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:05.762" starttime="20160128 01:10:05.755"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:05.768" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:06.912" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:06.916" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:06.914" starttime="20160128 01:10:05.765"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:06.956" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:06.958" starttime="20160128 01:10:06.925"></status>
</kw>
<msg timestamp="20160128 01:10:06.962" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:06.963" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:06.960" starttime="20160128 01:10:06.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:06.981" starttime="20160128 01:10:06.978"></status>
</kw>
<msg timestamp="20160128 01:10:06.984" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:06.983" starttime="20160128 01:10:06.966"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:06.993" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:06.992" starttime="20160128 01:10:06.988"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:07.003" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:07.000" starttime="20160128 01:10:06.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.008" starttime="20160128 01:10:07.005"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.032" starttime="20160128 01:10:07.028"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.044" starttime="20160128 01:10:07.035"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:07.046" starttime="20160128 01:10:07.012"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:07.058" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:07.057" starttime="20160128 01:10:07.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.065" starttime="20160128 01:10:07.061"></status>
</kw>
<msg timestamp="20160128 01:10:07.071" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:07.072" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:07.068" starttime="20160128 01:10:02.701"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.167" starttime="20160128 01:10:07.163"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:07.226" starttime="20160128 01:10:07.180"></status>
</kw>
<msg timestamp="20160128 01:10:07.228" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160128 01:10:07.227" starttime="20160128 01:10:07.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:07.236" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:07.663" level="INFO">Read output: Last login: Wed Jan 27 14:32:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:07.664" starttime="20160128 01:10:07.234"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:07.665" starttime="20160128 01:10:07.229"></status>
</kw>
<msg timestamp="20160128 01:10:07.666" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160128 01:10:07.666" starttime="20160128 01:10:07.144"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:07.672" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:07.672" starttime="20160128 01:10:07.667"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:07.675" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:08.046" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:08.049" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:08.048" starttime="20160128 01:10:07.673"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.055" starttime="20160128 01:10:08.052"></status>
</kw>
<msg timestamp="20160128 01:10:08.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:08.056" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:08.055" starttime="20160128 01:10:08.050"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.064" starttime="20160128 01:10:08.062"></status>
</kw>
<msg timestamp="20160128 01:10:08.065" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:08.065" starttime="20160128 01:10:08.057"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:08.068" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:08.068" starttime="20160128 01:10:08.066"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:08.072" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:08.071" starttime="20160128 01:10:08.069"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.074" starttime="20160128 01:10:08.073"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.088" starttime="20160128 01:10:08.083"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.090" starttime="20160128 01:10:08.089"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:08.092" starttime="20160128 01:10:08.076"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.100" starttime="20160128 01:10:08.098"></status>
</kw>
<msg timestamp="20160128 01:10:08.101" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:08.100" starttime="20160128 01:10:08.093"></status>
</kw>
<msg timestamp="20160128 01:10:08.103" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:08.104" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:08.102" starttime="20160128 01:10:07.099"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.147" starttime="20160128 01:10:08.146"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.192" starttime="20160128 01:10:08.153"></status>
</kw>
<msg timestamp="20160128 01:10:08.193" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160128 01:10:08.193" starttime="20160128 01:10:08.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:08.201" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:08.541" level="INFO">Read output: Last login: Wed Jan 27 14:33:00 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:08.542" starttime="20160128 01:10:08.199"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:08.543" starttime="20160128 01:10:08.194"></status>
</kw>
<msg timestamp="20160128 01:10:08.545" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160128 01:10:08.544" starttime="20160128 01:10:08.138"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:08.550" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:08.550" starttime="20160128 01:10:08.546"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:08.553" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:08.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:08.932" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:08.932" starttime="20160128 01:10:08.551"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.938" starttime="20160128 01:10:08.936"></status>
</kw>
<msg timestamp="20160128 01:10:08.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:08.940" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:08.939" starttime="20160128 01:10:08.934"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.947" starttime="20160128 01:10:08.946"></status>
</kw>
<msg timestamp="20160128 01:10:08.948" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:08.948" starttime="20160128 01:10:08.941"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:08.952" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:08.952" starttime="20160128 01:10:08.950"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:08.955" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:08.955" starttime="20160128 01:10:08.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.958" starttime="20160128 01:10:08.956"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.968" starttime="20160128 01:10:08.966"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.970" starttime="20160128 01:10:08.969"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:08.972" starttime="20160128 01:10:08.959"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.979" starttime="20160128 01:10:08.977"></status>
</kw>
<msg timestamp="20160128 01:10:08.980" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:08.979" starttime="20160128 01:10:08.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:08.983" starttime="20160128 01:10:08.981"></status>
</kw>
<msg timestamp="20160128 01:10:08.984" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:08.985" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:08.984" starttime="20160128 01:10:08.116"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.024" starttime="20160128 01:10:09.022"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.067" starttime="20160128 01:10:09.030"></status>
</kw>
<msg timestamp="20160128 01:10:09.069" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:10:09.068" starttime="20160128 01:10:09.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:09.077" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:09.241" level="INFO">Read output: Last login: Thu Jan 28 00:10:08 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:09.242" starttime="20160128 01:10:09.075"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:09.243" starttime="20160128 01:10:09.070"></status>
</kw>
<msg timestamp="20160128 01:10:09.245" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:10:09.245" starttime="20160128 01:10:09.015"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:09.251" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:09.250" starttime="20160128 01:10:09.246"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:09.253" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:09.437" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:09.438" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:09.438" starttime="20160128 01:10:09.252"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.444" starttime="20160128 01:10:09.442"></status>
</kw>
<msg timestamp="20160128 01:10:09.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:09.446" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:09.445" starttime="20160128 01:10:09.440"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.453" starttime="20160128 01:10:09.452"></status>
</kw>
<msg timestamp="20160128 01:10:09.454" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:09.454" starttime="20160128 01:10:09.447"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:09.457" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:09.457" starttime="20160128 01:10:09.455"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:09.461" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:09.460" starttime="20160128 01:10:09.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.463" starttime="20160128 01:10:09.462"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.472" starttime="20160128 01:10:09.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.476" starttime="20160128 01:10:09.473"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:09.476" starttime="20160128 01:10:09.464"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.483" starttime="20160128 01:10:09.481"></status>
</kw>
<msg timestamp="20160128 01:10:09.484" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:09.484" starttime="20160128 01:10:09.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.487" starttime="20160128 01:10:09.485"></status>
</kw>
<msg timestamp="20160128 01:10:09.489" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:09.490" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:09.488" starttime="20160128 01:10:08.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.493" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:09.493" starttime="20160128 01:10:09.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.496" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:09.497" starttime="20160128 01:10:09.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.500" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:09.501" starttime="20160128 01:10:09.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.504" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:09.504" starttime="20160128 01:10:09.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:09.507" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:09.509" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:09.510" starttime="20160128 01:10:09.505"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:09.511" starttime="20160128 01:10:02.647"></status>
</kw>
<test id="s1-s1-s1-s1-s1-t1" name="Single PP Data Session 767b">
<doc>Test will make a postpaid subscriber's short data session in total of 767 bytes

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:09.521" starttime="20160128 01:10:09.512">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s1-s1-s1-t2" name="CG PP Short Multislice Data Session">
<doc>Test creates the data session, sends two updates of the session and finally closes the session. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:09.532" starttime="20160128 01:10:09.524">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s1-s1-s1-t3" name="Single PP NOK UnknownLocation Data Session">
<doc>Test will attempt to start a simple data session with unknown location. Test should fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:09.543" starttime="20160128 01:10:09.535">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid subscriber's simple data session cases with CG

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:09.547" starttime="20160128 01:10:01.774">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:09.557" starttime="20160128 01:10:01.752"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MFC" id="s1-s1-s1-s2" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MFC/MFC_POSTPAID-ShortDuration" id="s1-s1-s1-s2-s1" name="MFC POSTPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MFC/MFC_POSTPAID-ShortDuration/MFC_POSTPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s1" name="MFC POSTPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:09.770" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:09.775" level="INFO">${date} = Thu Jan 28 01:10:09 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:09.773" starttime="20160128 01:10:09.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.781" level="INFO">Date and time: Thu Jan 28 01:10:09 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:09.782" starttime="20160128 01:10:09.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:09.788" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:09.790" starttime="20160128 01:10:09.784"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.861" starttime="20160128 01:10:09.858"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:09.911" starttime="20160128 01:10:09.873"></status>
</kw>
<msg timestamp="20160128 01:10:09.913" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:10:09.912" starttime="20160128 01:10:09.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:09.921" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:10.140" level="INFO">Read output: Last login: Thu Jan 28 00:10:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:10.141" starttime="20160128 01:10:09.919"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:10.142" starttime="20160128 01:10:09.914"></status>
</kw>
<msg timestamp="20160128 01:10:10.145" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:10:10.144" starttime="20160128 01:10:09.844"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:10.150" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:10.150" starttime="20160128 01:10:10.146"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:10.153" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:10.402" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:10.403" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:10.403" starttime="20160128 01:10:10.151"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:10.410" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:10.410" starttime="20160128 01:10:10.406"></status>
</kw>
<msg timestamp="20160128 01:10:10.412" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:10.412" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:10.411" starttime="20160128 01:10:10.404"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.419" starttime="20160128 01:10:10.417"></status>
</kw>
<msg timestamp="20160128 01:10:10.420" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:10.420" starttime="20160128 01:10:10.413"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:10.423" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:10.423" starttime="20160128 01:10:10.421"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:10.426" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:10.426" starttime="20160128 01:10:10.424"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.428" starttime="20160128 01:10:10.427"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.436" starttime="20160128 01:10:10.434"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.440" starttime="20160128 01:10:10.437"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:10.441" starttime="20160128 01:10:10.430"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:10.446" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:10.446" starttime="20160128 01:10:10.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.449" starttime="20160128 01:10:10.447"></status>
</kw>
<msg timestamp="20160128 01:10:10.451" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:10.452" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:10.450" starttime="20160128 01:10:09.811"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.485" starttime="20160128 01:10:10.483"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:10.543" starttime="20160128 01:10:10.491"></status>
</kw>
<msg timestamp="20160128 01:10:10.552" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:10:10.550" starttime="20160128 01:10:10.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:10.568" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:10.928" level="INFO">Read output: Last login: Thu Jan 28 00:10:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:10.930" starttime="20160128 01:10:10.564"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:10.930" starttime="20160128 01:10:10.554"></status>
</kw>
<msg timestamp="20160128 01:10:10.932" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:10:10.932" starttime="20160128 01:10:10.477"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:10.938" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:10.938" starttime="20160128 01:10:10.933"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:10.941" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:11.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:11.325" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:11.323" starttime="20160128 01:10:10.939"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.336" starttime="20160128 01:10:11.332"></status>
</kw>
<msg timestamp="20160128 01:10:11.339" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:11.340" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:11.338" starttime="20160128 01:10:11.328"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.352" starttime="20160128 01:10:11.350"></status>
</kw>
<msg timestamp="20160128 01:10:11.354" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:11.354" starttime="20160128 01:10:11.341"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:11.360" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:11.360" starttime="20160128 01:10:11.356"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:11.366" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:11.366" starttime="20160128 01:10:11.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.371" starttime="20160128 01:10:11.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.385" starttime="20160128 01:10:11.382"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.390" starttime="20160128 01:10:11.387"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:11.394" starttime="20160128 01:10:11.373"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.407" starttime="20160128 01:10:11.404"></status>
</kw>
<msg timestamp="20160128 01:10:11.409" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:11.408" starttime="20160128 01:10:11.396"></status>
</kw>
<msg timestamp="20160128 01:10:11.414" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:11.414" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:11.412" starttime="20160128 01:10:10.462"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.465" starttime="20160128 01:10:11.463"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.509" starttime="20160128 01:10:11.470"></status>
</kw>
<msg timestamp="20160128 01:10:11.510" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:10:11.509" starttime="20160128 01:10:11.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:11.517" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:11.686" level="INFO">Read output: Last login: Thu Jan 28 00:10:09 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:11.687" starttime="20160128 01:10:11.515"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:11.688" starttime="20160128 01:10:11.511"></status>
</kw>
<msg timestamp="20160128 01:10:11.689" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:10:11.689" starttime="20160128 01:10:11.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:11.694" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:11.694" starttime="20160128 01:10:11.690"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:11.697" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:11.877" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:11.878" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:11.878" starttime="20160128 01:10:11.695"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.884" starttime="20160128 01:10:11.881"></status>
</kw>
<msg timestamp="20160128 01:10:11.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:11.885" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:11.884" starttime="20160128 01:10:11.880"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.891" starttime="20160128 01:10:11.890"></status>
</kw>
<msg timestamp="20160128 01:10:11.892" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:11.892" starttime="20160128 01:10:11.886"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:11.895" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:11.895" starttime="20160128 01:10:11.893"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:11.898" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:11.897" starttime="20160128 01:10:11.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.900" starttime="20160128 01:10:11.899"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.907" starttime="20160128 01:10:11.905"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.909" starttime="20160128 01:10:11.908"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:11.912" starttime="20160128 01:10:11.901"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.917" starttime="20160128 01:10:11.916"></status>
</kw>
<msg timestamp="20160128 01:10:11.918" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:11.918" starttime="20160128 01:10:11.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.921" starttime="20160128 01:10:11.919"></status>
</kw>
<msg timestamp="20160128 01:10:11.922" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:11.923" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:11.922" starttime="20160128 01:10:11.434"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.955" starttime="20160128 01:10:11.953"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:11.999" starttime="20160128 01:10:11.960"></status>
</kw>
<msg timestamp="20160128 01:10:12.000" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:10:11.999" starttime="20160128 01:10:11.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:12.008" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:12.177" level="INFO">Read output: Last login: Thu Jan 28 00:10:11 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:12.178" starttime="20160128 01:10:12.006"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:12.179" starttime="20160128 01:10:12.002"></status>
</kw>
<msg timestamp="20160128 01:10:12.181" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:10:12.180" starttime="20160128 01:10:11.947"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:12.186" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:12.186" starttime="20160128 01:10:12.182"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:12.189" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:12.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:12.272" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:12.272" starttime="20160128 01:10:12.187"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.277" starttime="20160128 01:10:12.275"></status>
</kw>
<msg timestamp="20160128 01:10:12.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:12.279" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:12.278" starttime="20160128 01:10:12.273"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.285" starttime="20160128 01:10:12.284"></status>
</kw>
<msg timestamp="20160128 01:10:12.286" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:12.286" starttime="20160128 01:10:12.279"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:12.289" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:12.288" starttime="20160128 01:10:12.287"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:12.292" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:12.291" starttime="20160128 01:10:12.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.294" starttime="20160128 01:10:12.292"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.300" starttime="20160128 01:10:12.299"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.304" starttime="20160128 01:10:12.301"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:12.305" starttime="20160128 01:10:12.295"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.311" starttime="20160128 01:10:12.310"></status>
</kw>
<msg timestamp="20160128 01:10:12.312" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:12.312" starttime="20160128 01:10:12.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.314" starttime="20160128 01:10:12.313"></status>
</kw>
<msg timestamp="20160128 01:10:12.316" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:12.317" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:12.315" starttime="20160128 01:10:11.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.319" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:12.320" starttime="20160128 01:10:12.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.323" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:12.323" starttime="20160128 01:10:12.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.326" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:12.327" starttime="20160128 01:10:12.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.329" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:12.330" starttime="20160128 01:10:12.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:12.332" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:12.334" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:12.335" starttime="20160128 01:10:12.330"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:12.335" starttime="20160128 01:10:09.758"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-t1" name="Run PP MFC Short Call">
<doc>Test will make a short MFC call with postpaid subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:12.342" starttime="20160128 01:10:12.337">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:12.345" starttime="20160128 01:10:09.598">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:12.350" starttime="20160128 01:10:09.580"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:12.354" starttime="20160128 01:10:09.563"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC" id="s1-s1-s1-s3" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet" id="s1-s1-s1-s3-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_Abandon" id="s1-s1-s1-s3-s1-s1" name="MOC POSTPAID ONNET Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_Abandon/MOC_POSTPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1-s1" name="MOC POSTPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:12.571" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:12.577" level="INFO">${date} = Thu Jan 28 01:10:12 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:12.576" starttime="20160128 01:10:12.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.584" level="INFO">Date and time: Thu Jan 28 01:10:12 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:12.585" starttime="20160128 01:10:12.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:12.590" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:12.592" starttime="20160128 01:10:12.587"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.662" starttime="20160128 01:10:12.658"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:12.723" starttime="20160128 01:10:12.673"></status>
</kw>
<msg timestamp="20160128 01:10:12.725" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:10:12.724" starttime="20160128 01:10:12.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:12.741" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:12.941" level="INFO">Read output: Last login: Thu Jan 28 00:10:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:12.943" starttime="20160128 01:10:12.737"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:12.945" starttime="20160128 01:10:12.727"></status>
</kw>
<msg timestamp="20160128 01:10:12.948" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:10:12.947" starttime="20160128 01:10:12.646"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:12.959" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:12.959" starttime="20160128 01:10:12.950"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:12.965" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:13.248" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:13.252" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:13.250" starttime="20160128 01:10:12.961"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:13.265" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:13.266" starttime="20160128 01:10:13.258"></status>
</kw>
<msg timestamp="20160128 01:10:13.269" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:13.270" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:13.268" starttime="20160128 01:10:13.254"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.283" starttime="20160128 01:10:13.280"></status>
</kw>
<msg timestamp="20160128 01:10:13.285" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:13.285" starttime="20160128 01:10:13.272"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:13.292" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:13.291" starttime="20160128 01:10:13.287"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:13.298" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:13.297" starttime="20160128 01:10:13.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.302" starttime="20160128 01:10:13.300"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.318" starttime="20160128 01:10:13.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.323" starttime="20160128 01:10:13.320"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:13.330" starttime="20160128 01:10:13.305"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:13.340" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:13.339" starttime="20160128 01:10:13.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.345" starttime="20160128 01:10:13.342"></status>
</kw>
<msg timestamp="20160128 01:10:13.350" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:13.351" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:13.348" starttime="20160128 01:10:12.613"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.421" starttime="20160128 01:10:13.418"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:13.491" starttime="20160128 01:10:13.432"></status>
</kw>
<msg timestamp="20160128 01:10:13.494" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:10:13.493" starttime="20160128 01:10:13.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:13.509" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:13.882" level="INFO">Read output: Last login: Thu Jan 28 00:10:10 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:13.883" starttime="20160128 01:10:13.505"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:13.884" starttime="20160128 01:10:13.496"></status>
</kw>
<msg timestamp="20160128 01:10:13.887" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:10:13.886" starttime="20160128 01:10:13.405"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:13.892" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:13.892" starttime="20160128 01:10:13.888"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:13.895" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:14.254" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:14.258" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:14.256" starttime="20160128 01:10:13.893"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.269" starttime="20160128 01:10:14.264"></status>
</kw>
<msg timestamp="20160128 01:10:14.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:14.272" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:14.270" starttime="20160128 01:10:14.260"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.285" starttime="20160128 01:10:14.283"></status>
</kw>
<msg timestamp="20160128 01:10:14.288" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:14.287" starttime="20160128 01:10:14.274"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:14.294" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:14.293" starttime="20160128 01:10:14.290"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:14.300" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:14.299" starttime="20160128 01:10:14.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.304" starttime="20160128 01:10:14.302"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.320" starttime="20160128 01:10:14.317"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.325" starttime="20160128 01:10:14.322"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:14.329" starttime="20160128 01:10:14.307"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.342" starttime="20160128 01:10:14.339"></status>
</kw>
<msg timestamp="20160128 01:10:14.344" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:14.344" starttime="20160128 01:10:14.331"></status>
</kw>
<msg timestamp="20160128 01:10:14.349" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:14.350" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:14.347" starttime="20160128 01:10:13.372"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.418" starttime="20160128 01:10:14.415"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.486" starttime="20160128 01:10:14.429"></status>
</kw>
<msg timestamp="20160128 01:10:14.489" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:10:14.488" starttime="20160128 01:10:14.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:14.504" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:14.678" level="INFO">Read output: Last login: Thu Jan 28 00:10:12 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:14.680" starttime="20160128 01:10:14.500"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:14.681" starttime="20160128 01:10:14.491"></status>
</kw>
<msg timestamp="20160128 01:10:14.685" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:10:14.684" starttime="20160128 01:10:14.402"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:14.696" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:14.695" starttime="20160128 01:10:14.687"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:14.701" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:14.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:14.884" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:14.883" starttime="20160128 01:10:14.698"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.897" starttime="20160128 01:10:14.892"></status>
</kw>
<msg timestamp="20160128 01:10:14.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:14.901" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:14.899" starttime="20160128 01:10:14.886"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.914" starttime="20160128 01:10:14.911"></status>
</kw>
<msg timestamp="20160128 01:10:14.917" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:14.916" starttime="20160128 01:10:14.903"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:14.923" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:14.922" starttime="20160128 01:10:14.918"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:14.929" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:14.928" starttime="20160128 01:10:14.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.933" starttime="20160128 01:10:14.931"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.948" starttime="20160128 01:10:14.945"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.955" starttime="20160128 01:10:14.950"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:14.957" starttime="20160128 01:10:14.935"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.969" starttime="20160128 01:10:14.966"></status>
</kw>
<msg timestamp="20160128 01:10:14.972" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:14.971" starttime="20160128 01:10:14.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:14.977" starttime="20160128 01:10:14.974"></status>
</kw>
<msg timestamp="20160128 01:10:14.981" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:14.982" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:14.980" starttime="20160128 01:10:14.370"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.049" starttime="20160128 01:10:15.046"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.112" starttime="20160128 01:10:15.060"></status>
</kw>
<msg timestamp="20160128 01:10:15.115" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:10:15.114" starttime="20160128 01:10:15.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:15.130" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:15.289" level="INFO">Read output: Last login: Thu Jan 28 00:10:14 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:15.291" starttime="20160128 01:10:15.126"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:15.292" starttime="20160128 01:10:15.117"></status>
</kw>
<msg timestamp="20160128 01:10:15.295" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:10:15.295" starttime="20160128 01:10:15.034"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:15.307" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:15.306" starttime="20160128 01:10:15.297"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:15.312" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:15.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:15.401" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:15.400" starttime="20160128 01:10:15.309"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.412" starttime="20160128 01:10:15.407"></status>
</kw>
<msg timestamp="20160128 01:10:15.414" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:15.415" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:15.413" starttime="20160128 01:10:15.404"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.428" starttime="20160128 01:10:15.426"></status>
</kw>
<msg timestamp="20160128 01:10:15.431" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:15.430" starttime="20160128 01:10:15.417"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:15.437" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:15.436" starttime="20160128 01:10:15.433"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:15.443" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:15.442" starttime="20160128 01:10:15.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.447" starttime="20160128 01:10:15.444"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.462" starttime="20160128 01:10:15.459"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.468" starttime="20160128 01:10:15.464"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:15.470" starttime="20160128 01:10:15.449"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.483" starttime="20160128 01:10:15.480"></status>
</kw>
<msg timestamp="20160128 01:10:15.485" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:15.484" starttime="20160128 01:10:15.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.490" starttime="20160128 01:10:15.487"></status>
</kw>
<msg timestamp="20160128 01:10:15.493" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:15.494" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:15.492" starttime="20160128 01:10:15.003"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.500" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:15.501" starttime="20160128 01:10:15.496"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.506" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:15.508" starttime="20160128 01:10:15.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.513" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:15.514" starttime="20160128 01:10:15.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.520" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:15.521" starttime="20160128 01:10:15.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:15.526" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:15.530" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:15.532" starttime="20160128 01:10:15.523"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:15.534" starttime="20160128 01:10:12.561"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-s1-t1" name="Run PP MOC Abandon Call">
<doc>Test will make an abandoned MOC call from a postpaid type of subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:15.547" starttime="20160128 01:10:15.537">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the Postpaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:15.554" starttime="20160128 01:10:12.406">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:15.564" starttime="20160128 01:10:12.389"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_Busy" id="s1-s1-s1-s3-s1-s2" name="MOC POSTPAID ONNET Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_Busy/MOC_POSTPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s3-s1-s2-s1" name="MOC POSTPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:15.744" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:15.747" level="INFO">${date} = Thu Jan 28 01:10:15 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:15.747" starttime="20160128 01:10:15.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.750" level="INFO">Date and time: Thu Jan 28 01:10:15 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:15.751" starttime="20160128 01:10:15.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:15.753" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:15.754" starttime="20160128 01:10:15.752"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.783" starttime="20160128 01:10:15.782"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:15.862" starttime="20160128 01:10:15.788"></status>
</kw>
<msg timestamp="20160128 01:10:15.864" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:10:15.863" starttime="20160128 01:10:15.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:15.872" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:16.091" level="INFO">Read output: Last login: Thu Jan 28 00:10:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:16.092" starttime="20160128 01:10:15.870"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:16.093" starttime="20160128 01:10:15.865"></status>
</kw>
<msg timestamp="20160128 01:10:16.096" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:10:16.095" starttime="20160128 01:10:15.776"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:16.101" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:16.100" starttime="20160128 01:10:16.097"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:16.103" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:16.370" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:16.371" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:16.370" starttime="20160128 01:10:16.102"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:16.377" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:16.377" starttime="20160128 01:10:16.374"></status>
</kw>
<msg timestamp="20160128 01:10:16.378" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:16.379" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:16.378" starttime="20160128 01:10:16.372"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.385" starttime="20160128 01:10:16.384"></status>
</kw>
<msg timestamp="20160128 01:10:16.386" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:16.385" starttime="20160128 01:10:16.380"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:16.388" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:16.388" starttime="20160128 01:10:16.387"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:16.391" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:16.391" starttime="20160128 01:10:16.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.393" starttime="20160128 01:10:16.392"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.400" starttime="20160128 01:10:16.398"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.403" starttime="20160128 01:10:16.401"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:16.404" starttime="20160128 01:10:16.394"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:16.408" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:16.408" starttime="20160128 01:10:16.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.410" starttime="20160128 01:10:16.409"></status>
</kw>
<msg timestamp="20160128 01:10:16.412" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:16.413" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:16.411" starttime="20160128 01:10:15.762"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.442" starttime="20160128 01:10:16.440"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:16.485" starttime="20160128 01:10:16.447"></status>
</kw>
<msg timestamp="20160128 01:10:16.486" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:10:16.485" starttime="20160128 01:10:16.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:16.493" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:16.876" level="INFO">Read output: Last login: Thu Jan 28 00:10:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:16.877" starttime="20160128 01:10:16.491"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:16.878" starttime="20160128 01:10:16.487"></status>
</kw>
<msg timestamp="20160128 01:10:16.880" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:10:16.879" starttime="20160128 01:10:16.435"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:16.884" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:16.884" starttime="20160128 01:10:16.880"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:16.887" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:17.253" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:17.254" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:17.254" starttime="20160128 01:10:16.885"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.259" starttime="20160128 01:10:17.257"></status>
</kw>
<msg timestamp="20160128 01:10:17.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:17.261" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:17.260" starttime="20160128 01:10:17.255"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.266" starttime="20160128 01:10:17.265"></status>
</kw>
<msg timestamp="20160128 01:10:17.267" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:17.267" starttime="20160128 01:10:17.261"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:17.270" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:17.270" starttime="20160128 01:10:17.268"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:17.275" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:17.275" starttime="20160128 01:10:17.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.277" starttime="20160128 01:10:17.276"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.284" starttime="20160128 01:10:17.282"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.288" starttime="20160128 01:10:17.285"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:17.290" starttime="20160128 01:10:17.278"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.296" starttime="20160128 01:10:17.294"></status>
</kw>
<msg timestamp="20160128 01:10:17.297" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:17.296" starttime="20160128 01:10:17.291"></status>
</kw>
<msg timestamp="20160128 01:10:17.299" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:17.299" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:17.298" starttime="20160128 01:10:16.421"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.328" starttime="20160128 01:10:17.327"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.370" starttime="20160128 01:10:17.333"></status>
</kw>
<msg timestamp="20160128 01:10:17.371" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:10:17.371" starttime="20160128 01:10:17.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:17.377" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:17.544" level="INFO">Read output: Last login: Thu Jan 28 00:10:15 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:17.545" starttime="20160128 01:10:17.376"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:17.546" starttime="20160128 01:10:17.372"></status>
</kw>
<msg timestamp="20160128 01:10:17.547" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:10:17.547" starttime="20160128 01:10:17.321"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:17.552" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:17.552" starttime="20160128 01:10:17.548"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:17.554" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:17.744" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:17.746" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:17.745" starttime="20160128 01:10:17.553"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.750" starttime="20160128 01:10:17.748"></status>
</kw>
<msg timestamp="20160128 01:10:17.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:17.752" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:17.751" starttime="20160128 01:10:17.747"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.757" starttime="20160128 01:10:17.756"></status>
</kw>
<msg timestamp="20160128 01:10:17.758" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:17.758" starttime="20160128 01:10:17.752"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:17.761" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:17.760" starttime="20160128 01:10:17.759"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:17.763" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:17.763" starttime="20160128 01:10:17.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.765" starttime="20160128 01:10:17.764"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.772" starttime="20160128 01:10:17.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.775" starttime="20160128 01:10:17.772"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:17.776" starttime="20160128 01:10:17.766"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.781" starttime="20160128 01:10:17.780"></status>
</kw>
<msg timestamp="20160128 01:10:17.782" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:17.782" starttime="20160128 01:10:17.777"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.784" starttime="20160128 01:10:17.783"></status>
</kw>
<msg timestamp="20160128 01:10:17.786" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:17.786" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:17.785" starttime="20160128 01:10:17.308"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.815" starttime="20160128 01:10:17.814"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:17.858" starttime="20160128 01:10:17.819"></status>
</kw>
<msg timestamp="20160128 01:10:17.859" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:10:17.859" starttime="20160128 01:10:17.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:17.865" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:18.037" level="INFO">Read output: Last login: Thu Jan 28 00:10:17 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:18.039" starttime="20160128 01:10:17.864"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:18.041" starttime="20160128 01:10:17.860"></status>
</kw>
<msg timestamp="20160128 01:10:18.045" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:10:18.044" starttime="20160128 01:10:17.808"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:18.055" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:18.055" starttime="20160128 01:10:18.048"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:18.060" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:18.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:18.152" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:18.151" starttime="20160128 01:10:18.057"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.162" starttime="20160128 01:10:18.158"></status>
</kw>
<msg timestamp="20160128 01:10:18.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:18.165" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:18.164" starttime="20160128 01:10:18.154"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.178" starttime="20160128 01:10:18.175"></status>
</kw>
<msg timestamp="20160128 01:10:18.180" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:18.179" starttime="20160128 01:10:18.167"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:18.186" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:18.185" starttime="20160128 01:10:18.182"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:18.192" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:18.191" starttime="20160128 01:10:18.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.196" starttime="20160128 01:10:18.193"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.210" starttime="20160128 01:10:18.207"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.217" starttime="20160128 01:10:18.211"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:18.218" starttime="20160128 01:10:18.198"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.230" starttime="20160128 01:10:18.227"></status>
</kw>
<msg timestamp="20160128 01:10:18.232" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:18.231" starttime="20160128 01:10:18.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.236" starttime="20160128 01:10:18.233"></status>
</kw>
<msg timestamp="20160128 01:10:18.240" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:18.240" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:18.238" starttime="20160128 01:10:17.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.245" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:18.246" starttime="20160128 01:10:18.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.251" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:18.252" starttime="20160128 01:10:18.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.257" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:18.258" starttime="20160128 01:10:18.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.262" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:18.264" starttime="20160128 01:10:18.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:18.268" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:18.271" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:18.272" starttime="20160128 01:10:18.265"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:18.274" starttime="20160128 01:10:15.737"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s2-s1-t1" name="Run PP MOC Busy Call">
<doc>Test will make a MOC call of the postpaid subscriber to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:18.297" starttime="20160128 01:10:18.277">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:18.302" starttime="20160128 01:10:15.591">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:18.310" starttime="20160128 01:10:15.572"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_LongDuration196s" id="s1-s1-s1-s3-s1-s3" name="MOC POSTPAID ONNET LongDuration196s">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_LongDuration196s/MOC_POSTPAID_ONNET-LongDuration196s-robot-suite.txt" id="s1-s1-s1-s3-s1-s3-s1" name="MOC POSTPAID ONNET-LongDuration196s-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:18.491" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:18.498" level="INFO">${date} = Thu Jan 28 01:10:18 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:18.497" starttime="20160128 01:10:18.486"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.504" level="INFO">Date and time: Thu Jan 28 01:10:18 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:18.505" starttime="20160128 01:10:18.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:18.511" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:18.512" starttime="20160128 01:10:18.507"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.578" starttime="20160128 01:10:18.575"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:18.625" starttime="20160128 01:10:18.590"></status>
</kw>
<msg timestamp="20160128 01:10:18.626" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:10:18.626" starttime="20160128 01:10:18.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:18.633" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:18.849" level="INFO">Read output: Last login: Thu Jan 28 00:10:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:18.850" starttime="20160128 01:10:18.631"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:18.850" starttime="20160128 01:10:18.627"></status>
</kw>
<msg timestamp="20160128 01:10:18.852" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:10:18.851" starttime="20160128 01:10:18.563"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:18.857" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:18.856" starttime="20160128 01:10:18.853"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:18.859" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:19.121" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:19.123" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:19.122" starttime="20160128 01:10:18.857"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:19.128" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:19.129" starttime="20160128 01:10:19.125"></status>
</kw>
<msg timestamp="20160128 01:10:19.130" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:19.130" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:19.129" starttime="20160128 01:10:19.124"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.136" starttime="20160128 01:10:19.135"></status>
</kw>
<msg timestamp="20160128 01:10:19.137" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:19.136" starttime="20160128 01:10:19.131"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:19.139" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:19.139" starttime="20160128 01:10:19.138"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:19.143" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:19.143" starttime="20160128 01:10:19.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.145" starttime="20160128 01:10:19.144"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.152" starttime="20160128 01:10:19.150"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.156" starttime="20160128 01:10:19.153"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:19.157" starttime="20160128 01:10:19.146"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:19.161" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:19.161" starttime="20160128 01:10:19.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.163" starttime="20160128 01:10:19.162"></status>
</kw>
<msg timestamp="20160128 01:10:19.165" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:19.166" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:19.164" starttime="20160128 01:10:18.533"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.194" starttime="20160128 01:10:19.193"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:19.253" starttime="20160128 01:10:19.198"></status>
</kw>
<msg timestamp="20160128 01:10:19.255" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:10:19.254" starttime="20160128 01:10:19.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:19.274" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:19.655" level="INFO">Read output: Last login: Thu Jan 28 00:10:16 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:19.657" starttime="20160128 01:10:19.270"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:19.658" starttime="20160128 01:10:19.257"></status>
</kw>
<msg timestamp="20160128 01:10:19.661" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:10:19.660" starttime="20160128 01:10:19.187"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:19.671" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:19.670" starttime="20160128 01:10:19.663"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:19.676" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:20.093" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:20.095" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:20.094" starttime="20160128 01:10:19.673"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.100" starttime="20160128 01:10:20.098"></status>
</kw>
<msg timestamp="20160128 01:10:20.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:20.102" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:20.101" starttime="20160128 01:10:20.096"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.109" starttime="20160128 01:10:20.107"></status>
</kw>
<msg timestamp="20160128 01:10:20.109" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:20.109" starttime="20160128 01:10:20.102"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:20.112" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:20.112" starttime="20160128 01:10:20.110"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:20.114" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:20.114" starttime="20160128 01:10:20.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.116" starttime="20160128 01:10:20.115"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.123" starttime="20160128 01:10:20.121"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.125" starttime="20160128 01:10:20.123"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:20.126" starttime="20160128 01:10:20.117"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.132" starttime="20160128 01:10:20.131"></status>
</kw>
<msg timestamp="20160128 01:10:20.133" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:20.132" starttime="20160128 01:10:20.127"></status>
</kw>
<msg timestamp="20160128 01:10:20.135" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:20.135" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:20.134" starttime="20160128 01:10:19.174"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.164" starttime="20160128 01:10:20.163"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.218" starttime="20160128 01:10:20.169"></status>
</kw>
<msg timestamp="20160128 01:10:20.221" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:10:20.220" starttime="20160128 01:10:20.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:20.235" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:20.430" level="INFO">Read output: Last login: Thu Jan 28 00:10:17 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:20.432" starttime="20160128 01:10:20.232"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:20.433" starttime="20160128 01:10:20.223"></status>
</kw>
<msg timestamp="20160128 01:10:20.436" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:10:20.435" starttime="20160128 01:10:20.158"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:20.446" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:20.445" starttime="20160128 01:10:20.438"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:20.451" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:20.628" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:20.630" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:20.629" starttime="20160128 01:10:20.448"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.639" starttime="20160128 01:10:20.635"></status>
</kw>
<msg timestamp="20160128 01:10:20.641" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:20.642" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:20.640" starttime="20160128 01:10:20.632"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.654" starttime="20160128 01:10:20.652"></status>
</kw>
<msg timestamp="20160128 01:10:20.656" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:20.655" starttime="20160128 01:10:20.644"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:20.661" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:20.661" starttime="20160128 01:10:20.658"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:20.667" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:20.666" starttime="20160128 01:10:20.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.671" starttime="20160128 01:10:20.669"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.684" starttime="20160128 01:10:20.681"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.691" starttime="20160128 01:10:20.686"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:20.693" starttime="20160128 01:10:20.673"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.705" starttime="20160128 01:10:20.702"></status>
</kw>
<msg timestamp="20160128 01:10:20.707" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:20.706" starttime="20160128 01:10:20.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.711" starttime="20160128 01:10:20.708"></status>
</kw>
<msg timestamp="20160128 01:10:20.714" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:20.715" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:20.713" starttime="20160128 01:10:20.143"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.777" starttime="20160128 01:10:20.774"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:20.839" starttime="20160128 01:10:20.787"></status>
</kw>
<msg timestamp="20160128 01:10:20.842" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160128 01:10:20.841" starttime="20160128 01:10:20.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:20.855" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:21.012" level="INFO">Read output: Last login: Thu Jan 28 00:10:20 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:21.014" starttime="20160128 01:10:20.852"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:21.016" starttime="20160128 01:10:20.843"></status>
</kw>
<msg timestamp="20160128 01:10:21.021" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160128 01:10:21.019" starttime="20160128 01:10:20.763"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:21.031" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:21.030" starttime="20160128 01:10:21.023"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:21.036" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:21.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:21.126" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:21.125" starttime="20160128 01:10:21.033"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.135" starttime="20160128 01:10:21.131"></status>
</kw>
<msg timestamp="20160128 01:10:21.137" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:21.137" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:21.136" starttime="20160128 01:10:21.128"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.148" starttime="20160128 01:10:21.146"></status>
</kw>
<msg timestamp="20160128 01:10:21.150" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:21.150" starttime="20160128 01:10:21.139"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:21.155" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:21.154" starttime="20160128 01:10:21.152"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:21.160" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:21.160" starttime="20160128 01:10:21.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.164" starttime="20160128 01:10:21.162"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.176" starttime="20160128 01:10:21.173"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.181" starttime="20160128 01:10:21.178"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:21.185" starttime="20160128 01:10:21.166"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.196" starttime="20160128 01:10:21.194"></status>
</kw>
<msg timestamp="20160128 01:10:21.198" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:21.197" starttime="20160128 01:10:21.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.202" starttime="20160128 01:10:21.200"></status>
</kw>
<msg timestamp="20160128 01:10:21.203" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:21.204" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:21.203" starttime="20160128 01:10:20.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.206" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:21.207" starttime="20160128 01:10:21.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.209" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:21.210" starttime="20160128 01:10:21.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.212" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:21.212" starttime="20160128 01:10:21.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.215" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:21.216" starttime="20160128 01:10:21.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:21.218" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:21.220" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:21.220" starttime="20160128 01:10:21.216"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:21.221" starttime="20160128 01:10:18.482"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s3-s1-t1" name="Run PP MOC 196s Call">
<doc>Test will make a postpaid subscriber's MOC call, duration 196s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:21.227" starttime="20160128 01:10:21.223">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postaid MOC call, duration is 196s - longer than one slice (more than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:21.230" starttime="20160128 01:10:18.337">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:21.234" starttime="20160128 01:10:18.316"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_NoAnswer" id="s1-s1-s1-s3-s1-s4" name="MOC POSTPAID ONNET NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_NoAnswer/MOC_POSTPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s1-s4-s1" name="MOC POSTPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:21.408" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:21.415" level="INFO">${date} = Thu Jan 28 01:10:21 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:21.413" starttime="20160128 01:10:21.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.419" level="INFO">Date and time: Thu Jan 28 01:10:21 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:21.421" starttime="20160128 01:10:21.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:21.425" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:21.426" starttime="20160128 01:10:21.422"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.466" starttime="20160128 01:10:21.465"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:21.515" starttime="20160128 01:10:21.471"></status>
</kw>
<msg timestamp="20160128 01:10:21.518" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160128 01:10:21.517" starttime="20160128 01:10:21.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:21.531" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:21.765" level="INFO">Read output: Last login: Thu Jan 28 00:10:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:21.766" starttime="20160128 01:10:21.528"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:21.768" starttime="20160128 01:10:21.519"></status>
</kw>
<msg timestamp="20160128 01:10:21.771" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160128 01:10:21.770" starttime="20160128 01:10:21.460"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:21.780" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:21.779" starttime="20160128 01:10:21.772"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:21.784" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:22.053" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:22.057" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:22.055" starttime="20160128 01:10:21.782"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:22.068" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:22.069" starttime="20160128 01:10:22.062"></status>
</kw>
<msg timestamp="20160128 01:10:22.071" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:22.072" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:22.070" starttime="20160128 01:10:22.059"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.085" starttime="20160128 01:10:22.082"></status>
</kw>
<msg timestamp="20160128 01:10:22.087" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:22.087" starttime="20160128 01:10:22.074"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:22.093" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:22.092" starttime="20160128 01:10:22.089"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:22.098" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:22.097" starttime="20160128 01:10:22.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.102" starttime="20160128 01:10:22.100"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.115" starttime="20160128 01:10:22.112"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.122" starttime="20160128 01:10:22.117"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:22.123" starttime="20160128 01:10:22.104"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:22.134" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:22.134" starttime="20160128 01:10:22.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.138" starttime="20160128 01:10:22.136"></status>
</kw>
<msg timestamp="20160128 01:10:22.143" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:22.143" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:22.141" starttime="20160128 01:10:21.444"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.202" starttime="20160128 01:10:22.199"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:22.262" starttime="20160128 01:10:22.211"></status>
</kw>
<msg timestamp="20160128 01:10:22.265" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160128 01:10:22.264" starttime="20160128 01:10:22.203"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:22.277" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:22.645" level="INFO">Read output: Last login: Thu Jan 28 00:10:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:22.646" starttime="20160128 01:10:22.275"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:22.647" starttime="20160128 01:10:22.267"></status>
</kw>
<msg timestamp="20160128 01:10:22.648" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160128 01:10:22.648" starttime="20160128 01:10:22.188"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:22.653" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:22.652" starttime="20160128 01:10:22.649"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:22.654" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:23.016" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:23.018" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:23.017" starttime="20160128 01:10:22.653"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.022" starttime="20160128 01:10:23.020"></status>
</kw>
<msg timestamp="20160128 01:10:23.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:23.023" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:23.022" starttime="20160128 01:10:23.019"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.028" starttime="20160128 01:10:23.027"></status>
</kw>
<msg timestamp="20160128 01:10:23.029" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:23.029" starttime="20160128 01:10:23.024"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:23.031" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:23.031" starttime="20160128 01:10:23.030"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:23.034" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:23.033" starttime="20160128 01:10:23.032"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.035" starttime="20160128 01:10:23.034"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.041" starttime="20160128 01:10:23.040"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.044" starttime="20160128 01:10:23.042"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:23.046" starttime="20160128 01:10:23.036"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.051" starttime="20160128 01:10:23.050"></status>
</kw>
<msg timestamp="20160128 01:10:23.052" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:23.052" starttime="20160128 01:10:23.046"></status>
</kw>
<msg timestamp="20160128 01:10:23.054" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:23.054" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:23.053" starttime="20160128 01:10:22.160"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.080" starttime="20160128 01:10:23.079"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.134" starttime="20160128 01:10:23.084"></status>
</kw>
<msg timestamp="20160128 01:10:23.136" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160128 01:10:23.135" starttime="20160128 01:10:23.081"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:23.150" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:23.309" level="INFO">Read output: Last login: Thu Jan 28 00:10:20 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:23.312" starttime="20160128 01:10:23.147"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:23.313" starttime="20160128 01:10:23.138"></status>
</kw>
<msg timestamp="20160128 01:10:23.316" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160128 01:10:23.315" starttime="20160128 01:10:23.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:23.328" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:23.328" starttime="20160128 01:10:23.318"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:23.331" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:23.513" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:23.513" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:23.513" starttime="20160128 01:10:23.329"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.517" starttime="20160128 01:10:23.516"></status>
</kw>
<msg timestamp="20160128 01:10:23.518" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:23.519" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:23.518" starttime="20160128 01:10:23.514"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.524" starttime="20160128 01:10:23.523"></status>
</kw>
<msg timestamp="20160128 01:10:23.524" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:23.524" starttime="20160128 01:10:23.519"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:23.527" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:23.526" starttime="20160128 01:10:23.525"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:23.529" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:23.529" starttime="20160128 01:10:23.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.530" starttime="20160128 01:10:23.530"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.536" starttime="20160128 01:10:23.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.538" starttime="20160128 01:10:23.537"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:23.544" starttime="20160128 01:10:23.531"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.548" starttime="20160128 01:10:23.547"></status>
</kw>
<msg timestamp="20160128 01:10:23.549" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:23.549" starttime="20160128 01:10:23.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.551" starttime="20160128 01:10:23.550"></status>
</kw>
<msg timestamp="20160128 01:10:23.552" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:23.553" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:23.552" starttime="20160128 01:10:23.062"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.578" starttime="20160128 01:10:23.577"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.619" starttime="20160128 01:10:23.583"></status>
</kw>
<msg timestamp="20160128 01:10:23.620" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160128 01:10:23.620" starttime="20160128 01:10:23.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:23.626" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:23.795" level="INFO">Read output: Last login: Thu Jan 28 00:10:23 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:23.796" starttime="20160128 01:10:23.625"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:23.796" starttime="20160128 01:10:23.621"></status>
</kw>
<msg timestamp="20160128 01:10:23.798" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160128 01:10:23.797" starttime="20160128 01:10:23.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:23.802" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:23.802" starttime="20160128 01:10:23.798"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:23.804" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:23.886" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:23.887" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:23.887" starttime="20160128 01:10:23.803"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.891" starttime="20160128 01:10:23.889"></status>
</kw>
<msg timestamp="20160128 01:10:23.892" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:23.892" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:23.892" starttime="20160128 01:10:23.888"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.897" starttime="20160128 01:10:23.896"></status>
</kw>
<msg timestamp="20160128 01:10:23.898" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:23.898" starttime="20160128 01:10:23.893"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:23.900" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:23.900" starttime="20160128 01:10:23.899"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:23.902" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:23.902" starttime="20160128 01:10:23.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.904" starttime="20160128 01:10:23.903"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.910" starttime="20160128 01:10:23.908"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.913" starttime="20160128 01:10:23.910"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:23.913" starttime="20160128 01:10:23.905"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.918" starttime="20160128 01:10:23.917"></status>
</kw>
<msg timestamp="20160128 01:10:23.919" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:23.919" starttime="20160128 01:10:23.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:23.921" starttime="20160128 01:10:23.920"></status>
</kw>
<msg timestamp="20160128 01:10:23.922" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:23.922" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:23.921" starttime="20160128 01:10:23.560"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:23.924" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:23.925" starttime="20160128 01:10:23.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:23.927" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:23.927" starttime="20160128 01:10:23.925"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:23.929" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:23.929" starttime="20160128 01:10:23.928"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:23.931" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:23.932" starttime="20160128 01:10:23.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:23.934" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:23.936" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:23.936" starttime="20160128 01:10:23.933"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:23.937" starttime="20160128 01:10:21.399"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s4-s1-t1" name="Run PP MOC NoAnswer Call">
<doc>Test will make a MOC call from a postpaid subscriber in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:23.943" starttime="20160128 01:10:23.938">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:23.945" starttime="20160128 01:10:21.255">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:23.949" starttime="20160128 01:10:21.237"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_ShortDuration" id="s1-s1-s1-s3-s1-s5" name="MOC POSTPAID ONNET ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MOC/OnNet/MOC_POSTPAID_ONNET_ShortDuration/MOC_POSTPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s1-s5-s1" name="MOC POSTPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:24.116" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:24.124" level="INFO">${date} = Thu Jan 28 01:10:24 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:24.123" starttime="20160128 01:10:24.113"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:24.129" level="INFO">Date and time: Thu Jan 28 01:10:24 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:24.130" starttime="20160128 01:10:24.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:24.134" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:24.135" starttime="20160128 01:10:24.132"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.189" starttime="20160128 01:10:24.187"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.293" starttime="20160128 01:10:24.198"></status>
</kw>
<msg timestamp="20160128 01:10:24.295" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160128 01:10:24.294" starttime="20160128 01:10:24.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:24.305" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:24.511" level="INFO">Read output: Last login: Thu Jan 28 00:10:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:24.513" starttime="20160128 01:10:24.302"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:24.514" starttime="20160128 01:10:24.296"></status>
</kw>
<msg timestamp="20160128 01:10:24.516" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160128 01:10:24.516" starttime="20160128 01:10:24.177"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:24.525" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:24.524" starttime="20160128 01:10:24.518"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:24.528" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:24.797" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:24.798" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:24.798" starttime="20160128 01:10:24.526"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:24.803" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:24.804" starttime="20160128 01:10:24.800"></status>
</kw>
<msg timestamp="20160128 01:10:24.805" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:24.805" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:24.804" starttime="20160128 01:10:24.799"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.810" starttime="20160128 01:10:24.809"></status>
</kw>
<msg timestamp="20160128 01:10:24.811" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:24.810" starttime="20160128 01:10:24.806"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:24.813" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:24.812" starttime="20160128 01:10:24.811"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:24.815" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:24.815" starttime="20160128 01:10:24.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.816" starttime="20160128 01:10:24.815"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.822" starttime="20160128 01:10:24.821"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.825" starttime="20160128 01:10:24.823"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:24.826" starttime="20160128 01:10:24.817"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:24.830" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:24.830" starttime="20160128 01:10:24.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.832" starttime="20160128 01:10:24.831"></status>
</kw>
<msg timestamp="20160128 01:10:24.833" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:24.833" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:24.833" starttime="20160128 01:10:24.152"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.858" starttime="20160128 01:10:24.857"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:24.898" starttime="20160128 01:10:24.862"></status>
</kw>
<msg timestamp="20160128 01:10:24.899" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160128 01:10:24.899" starttime="20160128 01:10:24.858"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:24.904" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:25.269" level="INFO">Read output: Last login: Thu Jan 28 00:10:22 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:25.270" starttime="20160128 01:10:24.903"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:25.271" starttime="20160128 01:10:24.900"></status>
</kw>
<msg timestamp="20160128 01:10:25.273" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160128 01:10:25.272" starttime="20160128 01:10:24.852"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:25.277" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:25.277" starttime="20160128 01:10:25.274"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:25.279" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:25.653" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:25.654" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:25.653" starttime="20160128 01:10:25.278"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.658" starttime="20160128 01:10:25.656"></status>
</kw>
<msg timestamp="20160128 01:10:25.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:25.659" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:25.658" starttime="20160128 01:10:25.655"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.664" starttime="20160128 01:10:25.663"></status>
</kw>
<msg timestamp="20160128 01:10:25.664" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:25.664" starttime="20160128 01:10:25.659"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:25.666" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:25.666" starttime="20160128 01:10:25.665"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:25.669" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:25.668" starttime="20160128 01:10:25.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.670" starttime="20160128 01:10:25.669"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.676" starttime="20160128 01:10:25.674"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.678" starttime="20160128 01:10:25.676"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:25.679" starttime="20160128 01:10:25.671"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.684" starttime="20160128 01:10:25.683"></status>
</kw>
<msg timestamp="20160128 01:10:25.685" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:25.685" starttime="20160128 01:10:25.680"></status>
</kw>
<msg timestamp="20160128 01:10:25.687" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:25.687" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:25.686" starttime="20160128 01:10:24.841"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.712" starttime="20160128 01:10:25.711"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:25.752" starttime="20160128 01:10:25.716"></status>
</kw>
<msg timestamp="20160128 01:10:25.753" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160128 01:10:25.753" starttime="20160128 01:10:25.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:25.758" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:25.938" level="INFO">Read output: Last login: Thu Jan 28 00:10:23 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:25.939" starttime="20160128 01:10:25.757"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:25.940" starttime="20160128 01:10:25.754"></status>
</kw>
<msg timestamp="20160128 01:10:25.941" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160128 01:10:25.941" starttime="20160128 01:10:25.706"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:25.945" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:25.945" starttime="20160128 01:10:25.942"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:25.947" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:26.124" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:26.126" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:26.125" starttime="20160128 01:10:25.946"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.130" starttime="20160128 01:10:26.128"></status>
</kw>
<msg timestamp="20160128 01:10:26.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:26.131" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:26.130" starttime="20160128 01:10:26.127"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.136" starttime="20160128 01:10:26.135"></status>
</kw>
<msg timestamp="20160128 01:10:26.137" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:26.136" starttime="20160128 01:10:26.131"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:26.139" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:26.138" starttime="20160128 01:10:26.137"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:26.141" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:26.140" starttime="20160128 01:10:26.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.142" starttime="20160128 01:10:26.141"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.148" starttime="20160128 01:10:26.147"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.151" starttime="20160128 01:10:26.148"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:26.151" starttime="20160128 01:10:26.143"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.156" starttime="20160128 01:10:26.155"></status>
</kw>
<msg timestamp="20160128 01:10:26.157" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:26.156" starttime="20160128 01:10:26.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.158" starttime="20160128 01:10:26.157"></status>
</kw>
<msg timestamp="20160128 01:10:26.160" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:26.160" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:26.159" starttime="20160128 01:10:25.695"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.185" starttime="20160128 01:10:26.184"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.237" starttime="20160128 01:10:26.189"></status>
</kw>
<msg timestamp="20160128 01:10:26.240" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160128 01:10:26.239" starttime="20160128 01:10:26.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:26.252" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:26.417" level="INFO">Read output: Last login: Thu Jan 28 00:10:25 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:26.418" starttime="20160128 01:10:26.249"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:26.419" starttime="20160128 01:10:26.241"></status>
</kw>
<msg timestamp="20160128 01:10:26.420" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160128 01:10:26.420" starttime="20160128 01:10:26.179"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:26.424" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:26.424" starttime="20160128 01:10:26.421"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:26.426" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:26.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:26.508" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:26.508" starttime="20160128 01:10:26.425"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.512" starttime="20160128 01:10:26.510"></status>
</kw>
<msg timestamp="20160128 01:10:26.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:26.513" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:26.512" starttime="20160128 01:10:26.509"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.517" starttime="20160128 01:10:26.516"></status>
</kw>
<msg timestamp="20160128 01:10:26.518" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:26.518" starttime="20160128 01:10:26.513"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:26.520" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:26.520" starttime="20160128 01:10:26.519"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:26.522" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:26.522" starttime="20160128 01:10:26.521"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.524" starttime="20160128 01:10:26.523"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.529" starttime="20160128 01:10:26.528"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.531" starttime="20160128 01:10:26.530"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:26.535" starttime="20160128 01:10:26.525"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.545" starttime="20160128 01:10:26.543"></status>
</kw>
<msg timestamp="20160128 01:10:26.547" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:26.546" starttime="20160128 01:10:26.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.551" starttime="20160128 01:10:26.549"></status>
</kw>
<msg timestamp="20160128 01:10:26.554" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:26.554" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:26.553" starttime="20160128 01:10:26.168"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.558" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:26.559" starttime="20160128 01:10:26.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.564" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:26.565" starttime="20160128 01:10:26.561"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.569" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:26.570" starttime="20160128 01:10:26.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.574" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:26.575" starttime="20160128 01:10:26.571"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:26.579" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:26.583" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:26.584" starttime="20160128 01:10:26.576"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:26.586" starttime="20160128 01:10:24.110"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s5-s1-t1" name="Run PP MOC Short Call">
<doc>Test will make a POSTPAID MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:26.597" starttime="20160128 01:10:26.589">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:26.602" starttime="20160128 01:10:23.968">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:26.610" starttime="20160128 01:10:23.952"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:26.622" starttime="20160128 01:10:12.373"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:26.641" starttime="20160128 01:10:12.357"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC" id="s1-s1-s1-s4" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-Abandon" id="s1-s1-s1-s4-s1" name="MTC POSTPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-Abandon/MTC_POSTPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s4-s1-s1" name="MTC POSTPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:26.852" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:26.854" level="INFO">${date} = Thu Jan 28 01:10:26 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:26.853" starttime="20160128 01:10:26.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.855" level="INFO">Date and time: Thu Jan 28 01:10:26 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:26.856" starttime="20160128 01:10:26.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:26.857" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:26.858" starttime="20160128 01:10:26.856"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.882" starttime="20160128 01:10:26.881"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:26.970" starttime="20160128 01:10:26.886"></status>
</kw>
<msg timestamp="20160128 01:10:26.972" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160128 01:10:26.971" starttime="20160128 01:10:26.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:26.984" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:27.202" level="INFO">Read output: Last login: Thu Jan 28 00:10:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:27.204" starttime="20160128 01:10:26.981"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:27.206" starttime="20160128 01:10:26.974"></status>
</kw>
<msg timestamp="20160128 01:10:27.210" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160128 01:10:27.209" starttime="20160128 01:10:26.876"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:27.219" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:27.218" starttime="20160128 01:10:27.212"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:27.223" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:27.485" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:27.488" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:27.487" starttime="20160128 01:10:27.221"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:27.498" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:27.499" starttime="20160128 01:10:27.492"></status>
</kw>
<msg timestamp="20160128 01:10:27.501" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:27.501" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:27.500" starttime="20160128 01:10:27.489"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.512" starttime="20160128 01:10:27.510"></status>
</kw>
<msg timestamp="20160128 01:10:27.514" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:27.513" starttime="20160128 01:10:27.503"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:27.519" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:27.518" starttime="20160128 01:10:27.515"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:27.523" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:27.522" starttime="20160128 01:10:27.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.526" starttime="20160128 01:10:27.524"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.539" starttime="20160128 01:10:27.536"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.546" starttime="20160128 01:10:27.540"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:27.548" starttime="20160128 01:10:27.528"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:27.557" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:27.556" starttime="20160128 01:10:27.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.561" starttime="20160128 01:10:27.559"></status>
</kw>
<msg timestamp="20160128 01:10:27.564" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:27.565" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:27.563" starttime="20160128 01:10:26.865"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.616" starttime="20160128 01:10:27.614"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:27.682" starttime="20160128 01:10:27.623"></status>
</kw>
<msg timestamp="20160128 01:10:27.684" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160128 01:10:27.683" starttime="20160128 01:10:27.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:27.696" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:28.081" level="INFO">Read output: Last login: Thu Jan 28 00:10:25 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:28.083" starttime="20160128 01:10:27.694"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:28.085" starttime="20160128 01:10:27.686"></status>
</kw>
<msg timestamp="20160128 01:10:28.090" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160128 01:10:28.088" starttime="20160128 01:10:27.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:28.099" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:28.098" starttime="20160128 01:10:28.091"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:28.102" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:28.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:28.509" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:28.508" starttime="20160128 01:10:28.100"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.517" starttime="20160128 01:10:28.514"></status>
</kw>
<msg timestamp="20160128 01:10:28.519" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:28.520" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:28.518" starttime="20160128 01:10:28.511"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.530" starttime="20160128 01:10:28.528"></status>
</kw>
<msg timestamp="20160128 01:10:28.532" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:28.531" starttime="20160128 01:10:28.521"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:28.537" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:28.536" starttime="20160128 01:10:28.533"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:28.541" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:28.540" starttime="20160128 01:10:28.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.544" starttime="20160128 01:10:28.542"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.558" starttime="20160128 01:10:28.555"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.563" starttime="20160128 01:10:28.559"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:28.565" starttime="20160128 01:10:28.547"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.575" starttime="20160128 01:10:28.573"></status>
</kw>
<msg timestamp="20160128 01:10:28.577" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:28.576" starttime="20160128 01:10:28.566"></status>
</kw>
<msg timestamp="20160128 01:10:28.581" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:28.581" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:28.579" starttime="20160128 01:10:27.581"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.635" starttime="20160128 01:10:28.632"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:28.694" starttime="20160128 01:10:28.643"></status>
</kw>
<msg timestamp="20160128 01:10:28.696" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160128 01:10:28.695" starttime="20160128 01:10:28.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:28.708" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:28.883" level="INFO">Read output: Last login: Thu Jan 28 00:10:26 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:28.884" starttime="20160128 01:10:28.705"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:28.885" starttime="20160128 01:10:28.698"></status>
</kw>
<msg timestamp="20160128 01:10:28.887" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160128 01:10:28.886" starttime="20160128 01:10:28.623"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:28.891" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:28.891" starttime="20160128 01:10:28.887"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:28.893" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:29.095" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:29.099" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:29.097" starttime="20160128 01:10:28.892"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.107" starttime="20160128 01:10:29.103"></status>
</kw>
<msg timestamp="20160128 01:10:29.109" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:29.110" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:29.108" starttime="20160128 01:10:29.100"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.120" starttime="20160128 01:10:29.118"></status>
</kw>
<msg timestamp="20160128 01:10:29.121" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:29.121" starttime="20160128 01:10:29.111"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:29.126" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:29.125" starttime="20160128 01:10:29.123"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:29.130" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:29.130" starttime="20160128 01:10:29.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.133" starttime="20160128 01:10:29.132"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.146" starttime="20160128 01:10:29.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.150" starttime="20160128 01:10:29.148"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:29.156" starttime="20160128 01:10:29.136"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.167" starttime="20160128 01:10:29.164"></status>
</kw>
<msg timestamp="20160128 01:10:29.169" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:29.168" starttime="20160128 01:10:29.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.172" starttime="20160128 01:10:29.170"></status>
</kw>
<msg timestamp="20160128 01:10:29.176" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:29.176" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:29.174" starttime="20160128 01:10:28.597"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.230" starttime="20160128 01:10:29.228"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.291" starttime="20160128 01:10:29.239"></status>
</kw>
<msg timestamp="20160128 01:10:29.293" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160128 01:10:29.292" starttime="20160128 01:10:29.232"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:29.303" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:29.479" level="INFO">Read output: Last login: Thu Jan 28 00:10:28 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:29.480" starttime="20160128 01:10:29.301"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:29.480" starttime="20160128 01:10:29.294"></status>
</kw>
<msg timestamp="20160128 01:10:29.482" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160128 01:10:29.481" starttime="20160128 01:10:29.218"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:29.486" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:29.485" starttime="20160128 01:10:29.482"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:29.487" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:29.571" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:29.572" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:29.571" starttime="20160128 01:10:29.486"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.575" starttime="20160128 01:10:29.574"></status>
</kw>
<msg timestamp="20160128 01:10:29.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:29.577" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:29.576" starttime="20160128 01:10:29.572"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.581" starttime="20160128 01:10:29.580"></status>
</kw>
<msg timestamp="20160128 01:10:29.582" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:29.581" starttime="20160128 01:10:29.577"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:29.584" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:29.584" starttime="20160128 01:10:29.582"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:29.586" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:29.586" starttime="20160128 01:10:29.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.587" starttime="20160128 01:10:29.586"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.593" starttime="20160128 01:10:29.592"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.596" starttime="20160128 01:10:29.593"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:29.596" starttime="20160128 01:10:29.588"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.601" starttime="20160128 01:10:29.600"></status>
</kw>
<msg timestamp="20160128 01:10:29.602" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:29.601" starttime="20160128 01:10:29.597"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.603" starttime="20160128 01:10:29.602"></status>
</kw>
<msg timestamp="20160128 01:10:29.604" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:29.605" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:29.604" starttime="20160128 01:10:29.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.607" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:29.607" starttime="20160128 01:10:29.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.609" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:29.609" starttime="20160128 01:10:29.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.611" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:29.612" starttime="20160128 01:10:29.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.613" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:29.614" starttime="20160128 01:10:29.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:29.616" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:29.617" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:29.618" starttime="20160128 01:10:29.614"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:29.618" starttime="20160128 01:10:26.842"></status>
</kw>
<test id="s1-s1-s1-s4-s1-s1-t1" name="Run PP MTC Abandon Call">
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:29.624" starttime="20160128 01:10:29.620">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the abandoned MTC call for postpaid subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:29.626" starttime="20160128 01:10:26.710">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:29.629" starttime="20160128 01:10:26.689"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-Busy" id="s1-s1-s1-s4-s2" name="MTC POSTPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-Busy/MTC_POSTPAID-Busy-robot-suite.txt" id="s1-s1-s1-s4-s2-s1" name="MTC POSTPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:29.787" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:29.793" level="INFO">${date} = Thu Jan 28 01:10:29 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:29.791" starttime="20160128 01:10:29.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.797" level="INFO">Date and time: Thu Jan 28 01:10:29 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:29.798" starttime="20160128 01:10:29.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:29.802" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:29.803" starttime="20160128 01:10:29.799"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.855" starttime="20160128 01:10:29.853"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:29.909" starttime="20160128 01:10:29.864"></status>
</kw>
<msg timestamp="20160128 01:10:29.911" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160128 01:10:29.910" starttime="20160128 01:10:29.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:29.922" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:30.128" level="INFO">Read output: Last login: Thu Jan 28 00:10:27 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:30.130" starttime="20160128 01:10:29.919"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:30.132" starttime="20160128 01:10:29.912"></status>
</kw>
<msg timestamp="20160128 01:10:30.137" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160128 01:10:30.135" starttime="20160128 01:10:29.843"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:30.145" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:30.145" starttime="20160128 01:10:30.138"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:30.149" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:30.415" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:30.418" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:30.417" starttime="20160128 01:10:30.147"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:30.427" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:30.428" starttime="20160128 01:10:30.422"></status>
</kw>
<msg timestamp="20160128 01:10:30.430" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:30.431" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:30.429" starttime="20160128 01:10:30.419"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.442" starttime="20160128 01:10:30.440"></status>
</kw>
<msg timestamp="20160128 01:10:30.443" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:30.443" starttime="20160128 01:10:30.433"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:30.448" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:30.447" starttime="20160128 01:10:30.445"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:30.453" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:30.452" starttime="20160128 01:10:30.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.456" starttime="20160128 01:10:30.454"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.468" starttime="20160128 01:10:30.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.474" starttime="20160128 01:10:30.469"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:30.475" starttime="20160128 01:10:30.458"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:30.483" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:30.482" starttime="20160128 01:10:30.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.486" starttime="20160128 01:10:30.484"></status>
</kw>
<msg timestamp="20160128 01:10:30.490" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:30.491" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:30.488" starttime="20160128 01:10:29.819"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.544" starttime="20160128 01:10:30.542"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:30.594" starttime="20160128 01:10:30.553"></status>
</kw>
<msg timestamp="20160128 01:10:30.595" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160128 01:10:30.595" starttime="20160128 01:10:30.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:30.601" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:31.016" level="INFO">Read output: Last login: Thu Jan 28 00:10:27 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:31.017" starttime="20160128 01:10:30.600"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:31.018" starttime="20160128 01:10:30.596"></status>
</kw>
<msg timestamp="20160128 01:10:31.021" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160128 01:10:31.020" starttime="20160128 01:10:30.532"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:31.025" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:31.024" starttime="20160128 01:10:31.021"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:31.026" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:31.420" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:31.421" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:31.421" starttime="20160128 01:10:31.025"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.425" starttime="20160128 01:10:31.423"></status>
</kw>
<msg timestamp="20160128 01:10:31.426" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:31.426" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:31.426" starttime="20160128 01:10:31.422"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.431" starttime="20160128 01:10:31.430"></status>
</kw>
<msg timestamp="20160128 01:10:31.432" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:31.432" starttime="20160128 01:10:31.427"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:31.434" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:31.434" starttime="20160128 01:10:31.433"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:31.436" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:31.436" starttime="20160128 01:10:31.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.437" starttime="20160128 01:10:31.437"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.443" starttime="20160128 01:10:31.442"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.447" starttime="20160128 01:10:31.444"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:31.447" starttime="20160128 01:10:31.438"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.453" starttime="20160128 01:10:31.452"></status>
</kw>
<msg timestamp="20160128 01:10:31.453" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:31.453" starttime="20160128 01:10:31.448"></status>
</kw>
<msg timestamp="20160128 01:10:31.455" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:31.455" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:31.454" starttime="20160128 01:10:30.507"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.480" starttime="20160128 01:10:31.479"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.522" starttime="20160128 01:10:31.483"></status>
</kw>
<msg timestamp="20160128 01:10:31.524" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160128 01:10:31.523" starttime="20160128 01:10:31.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:31.529" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:31.714" level="INFO">Read output: Last login: Thu Jan 28 00:10:29 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:31.715" starttime="20160128 01:10:31.528"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:31.716" starttime="20160128 01:10:31.524"></status>
</kw>
<msg timestamp="20160128 01:10:31.717" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160128 01:10:31.717" starttime="20160128 01:10:31.474"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:31.722" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:31.722" starttime="20160128 01:10:31.718"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:31.724" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:31.917" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:31.918" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:31.917" starttime="20160128 01:10:31.723"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.921" starttime="20160128 01:10:31.920"></status>
</kw>
<msg timestamp="20160128 01:10:31.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:31.922" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:31.922" starttime="20160128 01:10:31.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.927" starttime="20160128 01:10:31.926"></status>
</kw>
<msg timestamp="20160128 01:10:31.928" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:31.927" starttime="20160128 01:10:31.923"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:31.930" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:31.929" starttime="20160128 01:10:31.928"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:31.932" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:31.931" starttime="20160128 01:10:31.930"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.933" starttime="20160128 01:10:31.932"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.939" starttime="20160128 01:10:31.937"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.942" starttime="20160128 01:10:31.939"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:31.942" starttime="20160128 01:10:31.934"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.947" starttime="20160128 01:10:31.946"></status>
</kw>
<msg timestamp="20160128 01:10:31.947" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:31.947" starttime="20160128 01:10:31.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.949" starttime="20160128 01:10:31.948"></status>
</kw>
<msg timestamp="20160128 01:10:31.950" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:31.951" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:31.950" starttime="20160128 01:10:31.463"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:31.974" starttime="20160128 01:10:31.973"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.027" starttime="20160128 01:10:31.977"></status>
</kw>
<msg timestamp="20160128 01:10:32.032" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160128 01:10:32.030" starttime="20160128 01:10:31.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:32.044" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:32.207" level="INFO">Read output: Last login: Thu Jan 28 00:10:31 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:32.208" starttime="20160128 01:10:32.042"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:32.210" starttime="20160128 01:10:32.034"></status>
</kw>
<msg timestamp="20160128 01:10:32.213" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160128 01:10:32.212" starttime="20160128 01:10:31.968"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:32.222" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:32.221" starttime="20160128 01:10:32.215"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:32.226" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:32.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:32.316" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:32.316" starttime="20160128 01:10:32.224"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.323" starttime="20160128 01:10:32.320"></status>
</kw>
<msg timestamp="20160128 01:10:32.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:32.326" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:32.325" starttime="20160128 01:10:32.318"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.336" starttime="20160128 01:10:32.334"></status>
</kw>
<msg timestamp="20160128 01:10:32.338" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:32.337" starttime="20160128 01:10:32.328"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:32.342" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:32.341" starttime="20160128 01:10:32.339"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:32.347" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:32.346" starttime="20160128 01:10:32.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.350" starttime="20160128 01:10:32.348"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.362" starttime="20160128 01:10:32.359"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.367" starttime="20160128 01:10:32.363"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:32.368" starttime="20160128 01:10:32.351"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.373" starttime="20160128 01:10:32.372"></status>
</kw>
<msg timestamp="20160128 01:10:32.374" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:32.374" starttime="20160128 01:10:32.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.375" starttime="20160128 01:10:32.374"></status>
</kw>
<msg timestamp="20160128 01:10:32.377" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:32.377" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:32.376" starttime="20160128 01:10:31.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.379" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:32.380" starttime="20160128 01:10:32.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.382" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:32.382" starttime="20160128 01:10:32.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.384" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:32.384" starttime="20160128 01:10:32.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.386" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:32.387" starttime="20160128 01:10:32.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:32.388" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:32.390" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:32.390" starttime="20160128 01:10:32.387"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:32.391" starttime="20160128 01:10:29.778"></status>
</kw>
<test id="s1-s1-s1-s4-s2-s1-t1" name="Run PP MTC Busy Call">
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:32.396" starttime="20160128 01:10:32.392">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:32.399" starttime="20160128 01:10:29.647">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:32.402" starttime="20160128 01:10:29.632"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-NoAnswer" id="s1-s1-s1-s4-s3" name="MTC POSTPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-NoAnswer/MTC_POSTPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s4-s3-s1" name="MTC POSTPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:32.560" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:32.566" level="INFO">${date} = Thu Jan 28 01:10:32 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:32.565" starttime="20160128 01:10:32.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.571" level="INFO">Date and time: Thu Jan 28 01:10:32 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:32.572" starttime="20160128 01:10:32.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:32.576" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:32.577" starttime="20160128 01:10:32.573"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.627" starttime="20160128 01:10:32.625"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:32.669" starttime="20160128 01:10:32.636"></status>
</kw>
<msg timestamp="20160128 01:10:32.670" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160128 01:10:32.669" starttime="20160128 01:10:32.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:32.675" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:32.935" level="INFO">Read output: Last login: Thu Jan 28 00:10:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:32.936" starttime="20160128 01:10:32.674"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:32.936" starttime="20160128 01:10:32.671"></status>
</kw>
<msg timestamp="20160128 01:10:32.938" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160128 01:10:32.937" starttime="20160128 01:10:32.615"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:32.943" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:32.942" starttime="20160128 01:10:32.939"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:32.944" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:33.212" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:33.214" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:33.213" starttime="20160128 01:10:32.943"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:33.219" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:33.220" starttime="20160128 01:10:33.216"></status>
</kw>
<msg timestamp="20160128 01:10:33.220" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:33.221" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:33.220" starttime="20160128 01:10:33.215"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.226" starttime="20160128 01:10:33.225"></status>
</kw>
<msg timestamp="20160128 01:10:33.227" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:33.226" starttime="20160128 01:10:33.221"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:33.229" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:33.228" starttime="20160128 01:10:33.227"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:33.231" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:33.230" starttime="20160128 01:10:33.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.232" starttime="20160128 01:10:33.231"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.238" starttime="20160128 01:10:33.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.243" starttime="20160128 01:10:33.239"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:33.244" starttime="20160128 01:10:33.233"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:33.247" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:33.247" starttime="20160128 01:10:33.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.249" starttime="20160128 01:10:33.248"></status>
</kw>
<msg timestamp="20160128 01:10:33.250" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:33.251" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:33.250" starttime="20160128 01:10:32.592"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.273" starttime="20160128 01:10:33.272"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:33.329" starttime="20160128 01:10:33.277"></status>
</kw>
<msg timestamp="20160128 01:10:33.331" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160128 01:10:33.330" starttime="20160128 01:10:33.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:33.343" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:33.722" level="INFO">Read output: Last login: Thu Jan 28 00:10:30 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:33.723" starttime="20160128 01:10:33.340"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:33.724" starttime="20160128 01:10:33.333"></status>
</kw>
<msg timestamp="20160128 01:10:33.725" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160128 01:10:33.725" starttime="20160128 01:10:33.268"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:33.729" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:33.729" starttime="20160128 01:10:33.726"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:33.733" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:34.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:34.117" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:34.116" starttime="20160128 01:10:33.730"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.121" starttime="20160128 01:10:34.119"></status>
</kw>
<msg timestamp="20160128 01:10:34.121" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:34.122" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:34.121" starttime="20160128 01:10:34.118"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.126" starttime="20160128 01:10:34.126"></status>
</kw>
<msg timestamp="20160128 01:10:34.127" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:34.127" starttime="20160128 01:10:34.122"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:34.129" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:34.129" starttime="20160128 01:10:34.128"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:34.131" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:34.131" starttime="20160128 01:10:34.130"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.133" starttime="20160128 01:10:34.132"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.140" starttime="20160128 01:10:34.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.144" starttime="20160128 01:10:34.142"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:34.147" starttime="20160128 01:10:34.133"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.157" starttime="20160128 01:10:34.155"></status>
</kw>
<msg timestamp="20160128 01:10:34.159" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:34.159" starttime="20160128 01:10:34.148"></status>
</kw>
<msg timestamp="20160128 01:10:34.163" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:34.164" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:34.161" starttime="20160128 01:10:33.257"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.214" starttime="20160128 01:10:34.212"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.273" starttime="20160128 01:10:34.222"></status>
</kw>
<msg timestamp="20160128 01:10:34.275" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160128 01:10:34.274" starttime="20160128 01:10:34.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:34.286" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:34.461" level="INFO">Read output: Last login: Thu Jan 28 00:10:32 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:34.462" starttime="20160128 01:10:34.284"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:34.463" starttime="20160128 01:10:34.276"></status>
</kw>
<msg timestamp="20160128 01:10:34.466" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160128 01:10:34.465" starttime="20160128 01:10:34.202"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:34.475" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:34.474" starttime="20160128 01:10:34.467"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:34.478" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:34.662" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:34.665" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:34.664" starttime="20160128 01:10:34.476"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.672" starttime="20160128 01:10:34.669"></status>
</kw>
<msg timestamp="20160128 01:10:34.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:34.675" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:34.673" starttime="20160128 01:10:34.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.685" starttime="20160128 01:10:34.683"></status>
</kw>
<msg timestamp="20160128 01:10:34.687" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:34.686" starttime="20160128 01:10:34.676"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:34.691" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:34.690" starttime="20160128 01:10:34.688"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:34.695" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:34.695" starttime="20160128 01:10:34.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.698" starttime="20160128 01:10:34.697"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.711" starttime="20160128 01:10:34.708"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.716" starttime="20160128 01:10:34.712"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:34.718" starttime="20160128 01:10:34.700"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.727" starttime="20160128 01:10:34.725"></status>
</kw>
<msg timestamp="20160128 01:10:34.729" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:34.728" starttime="20160128 01:10:34.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.732" starttime="20160128 01:10:34.730"></status>
</kw>
<msg timestamp="20160128 01:10:34.735" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:34.735" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:34.734" starttime="20160128 01:10:34.178"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.786" starttime="20160128 01:10:34.783"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:34.834" starttime="20160128 01:10:34.794"></status>
</kw>
<msg timestamp="20160128 01:10:34.835" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160128 01:10:34.835" starttime="20160128 01:10:34.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:34.841" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:35.012" level="INFO">Read output: Last login: Thu Jan 28 00:10:34 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:35.013" starttime="20160128 01:10:34.839"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:35.014" starttime="20160128 01:10:34.836"></status>
</kw>
<msg timestamp="20160128 01:10:35.016" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160128 01:10:35.015" starttime="20160128 01:10:34.774"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:35.022" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:35.021" starttime="20160128 01:10:35.016"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:35.026" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:35.111" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:35.112" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:35.112" starttime="20160128 01:10:35.023"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.118" starttime="20160128 01:10:35.115"></status>
</kw>
<msg timestamp="20160128 01:10:35.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:35.119" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:35.118" starttime="20160128 01:10:35.113"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.127" starttime="20160128 01:10:35.125"></status>
</kw>
<msg timestamp="20160128 01:10:35.128" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:35.127" starttime="20160128 01:10:35.120"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:35.131" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:35.131" starttime="20160128 01:10:35.129"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:35.134" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:35.134" starttime="20160128 01:10:35.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.137" starttime="20160128 01:10:35.135"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.146" starttime="20160128 01:10:35.144"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.151" starttime="20160128 01:10:35.147"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:35.152" starttime="20160128 01:10:35.138"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.158" starttime="20160128 01:10:35.157"></status>
</kw>
<msg timestamp="20160128 01:10:35.160" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:35.159" starttime="20160128 01:10:35.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.162" starttime="20160128 01:10:35.161"></status>
</kw>
<msg timestamp="20160128 01:10:35.165" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:35.165" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:35.164" starttime="20160128 01:10:34.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.168" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:35.169" starttime="20160128 01:10:35.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.172" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:35.173" starttime="20160128 01:10:35.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.176" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:35.176" starttime="20160128 01:10:35.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.179" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:35.180" starttime="20160128 01:10:35.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:35.183" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:35.185" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:35.186" starttime="20160128 01:10:35.181"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:35.187" starttime="20160128 01:10:32.553"></status>
</kw>
<test id="s1-s1-s1-s4-s3-s1-t1" name="Run PP MTC NoAnswer Call">
<doc>Test will make the no answer MTC call for postpaid subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:35.196" starttime="20160128 01:10:35.189">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:35.200" starttime="20160128 01:10:32.420">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:35.205" starttime="20160128 01:10:32.405"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-ShortDuration" id="s1-s1-s1-s4-s4" name="MTC POSTPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PostPaid/MTC/MTC_POSTPAID-ShortDuration/MTC_POSTPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s4-s4-s1" name="MTC POSTPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:35.407" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:35.411" level="INFO">${date} = Thu Jan 28 01:10:35 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:35.410" starttime="20160128 01:10:35.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.412" level="INFO">Date and time: Thu Jan 28 01:10:35 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:35.413" starttime="20160128 01:10:35.411"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:35.415" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:35.415" starttime="20160128 01:10:35.413"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.438" starttime="20160128 01:10:35.437"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:35.483" starttime="20160128 01:10:35.442"></status>
</kw>
<msg timestamp="20160128 01:10:35.485" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160128 01:10:35.485" starttime="20160128 01:10:35.438"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:35.497" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:35.719" level="INFO">Read output: Last login: Thu Jan 28 00:10:32 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:35.720" starttime="20160128 01:10:35.495"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:35.721" starttime="20160128 01:10:35.487"></status>
</kw>
<msg timestamp="20160128 01:10:35.724" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160128 01:10:35.723" starttime="20160128 01:10:35.432"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:35.732" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:35.732" starttime="20160128 01:10:35.725"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:35.736" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:36.011" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:36.015" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:36.013" starttime="20160128 01:10:35.734"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:36.025" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:36.026" starttime="20160128 01:10:36.019"></status>
</kw>
<msg timestamp="20160128 01:10:36.028" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:36.029" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:36.027" starttime="20160128 01:10:36.016"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.040" starttime="20160128 01:10:36.037"></status>
</kw>
<msg timestamp="20160128 01:10:36.041" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:36.041" starttime="20160128 01:10:36.030"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:36.046" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:36.045" starttime="20160128 01:10:36.043"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:36.050" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:36.049" starttime="20160128 01:10:36.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.053" starttime="20160128 01:10:36.052"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.066" starttime="20160128 01:10:36.063"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.071" starttime="20160128 01:10:36.067"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:36.072" starttime="20160128 01:10:36.055"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:36.081" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:36.080" starttime="20160128 01:10:36.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.084" starttime="20160128 01:10:36.082"></status>
</kw>
<msg timestamp="20160128 01:10:36.088" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:36.088" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:36.086" starttime="20160128 01:10:35.422"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.139" starttime="20160128 01:10:36.136"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:36.198" starttime="20160128 01:10:36.147"></status>
</kw>
<msg timestamp="20160128 01:10:36.201" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160128 01:10:36.200" starttime="20160128 01:10:36.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:36.212" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:36.641" level="INFO">Read output: Last login: Thu Jan 28 00:10:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:36.642" starttime="20160128 01:10:36.209"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:36.643" starttime="20160128 01:10:36.202"></status>
</kw>
<msg timestamp="20160128 01:10:36.644" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160128 01:10:36.644" starttime="20160128 01:10:36.127"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:36.649" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:36.648" starttime="20160128 01:10:36.645"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:36.650" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:37.085" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:37.089" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:37.087" starttime="20160128 01:10:36.649"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.096" starttime="20160128 01:10:37.093"></status>
</kw>
<msg timestamp="20160128 01:10:37.098" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:37.099" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:37.097" starttime="20160128 01:10:37.090"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.109" starttime="20160128 01:10:37.107"></status>
</kw>
<msg timestamp="20160128 01:10:37.111" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:37.110" starttime="20160128 01:10:37.100"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:37.115" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:37.114" starttime="20160128 01:10:37.112"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:37.119" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:37.119" starttime="20160128 01:10:37.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.123" starttime="20160128 01:10:37.121"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.134" starttime="20160128 01:10:37.132"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.138" starttime="20160128 01:10:37.136"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:37.139" starttime="20160128 01:10:37.124"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.149" starttime="20160128 01:10:37.147"></status>
</kw>
<msg timestamp="20160128 01:10:37.151" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:37.150" starttime="20160128 01:10:37.141"></status>
</kw>
<msg timestamp="20160128 01:10:37.154" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:37.155" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:37.153" starttime="20160128 01:10:36.103"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.203" starttime="20160128 01:10:37.202"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.247" starttime="20160128 01:10:37.207"></status>
</kw>
<msg timestamp="20160128 01:10:37.248" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160128 01:10:37.247" starttime="20160128 01:10:37.204"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:37.254" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:37.456" level="INFO">Read output: Last login: Thu Jan 28 00:10:34 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:37.457" starttime="20160128 01:10:37.252"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:37.458" starttime="20160128 01:10:37.249"></status>
</kw>
<msg timestamp="20160128 01:10:37.461" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160128 01:10:37.460" starttime="20160128 01:10:37.193"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:37.469" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:37.468" starttime="20160128 01:10:37.462"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:37.473" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:37.668" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:37.670" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:37.669" starttime="20160128 01:10:37.470"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.677" starttime="20160128 01:10:37.673"></status>
</kw>
<msg timestamp="20160128 01:10:37.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:37.679" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:37.678" starttime="20160128 01:10:37.671"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.688" starttime="20160128 01:10:37.686"></status>
</kw>
<msg timestamp="20160128 01:10:37.690" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:37.689" starttime="20160128 01:10:37.680"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:37.694" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:37.693" starttime="20160128 01:10:37.691"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:37.698" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:37.697" starttime="20160128 01:10:37.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.701" starttime="20160128 01:10:37.699"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.706" starttime="20160128 01:10:37.705"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.709" starttime="20160128 01:10:37.707"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:37.709" starttime="20160128 01:10:37.702"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.713" starttime="20160128 01:10:37.712"></status>
</kw>
<msg timestamp="20160128 01:10:37.714" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:37.714" starttime="20160128 01:10:37.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.716" starttime="20160128 01:10:37.715"></status>
</kw>
<msg timestamp="20160128 01:10:37.717" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:37.717" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:37.717" starttime="20160128 01:10:37.170"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.740" starttime="20160128 01:10:37.739"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:37.794" starttime="20160128 01:10:37.744"></status>
</kw>
<msg timestamp="20160128 01:10:37.796" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160128 01:10:37.796" starttime="20160128 01:10:37.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:37.808" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:37.977" level="INFO">Read output: Last login: Thu Jan 28 00:10:37 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:37.979" starttime="20160128 01:10:37.805"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:37.980" starttime="20160128 01:10:37.798"></status>
</kw>
<msg timestamp="20160128 01:10:37.983" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160128 01:10:37.982" starttime="20160128 01:10:37.735"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:37.991" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:37.990" starttime="20160128 01:10:37.984"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:37.995" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:38.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:38.092" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:38.090" starttime="20160128 01:10:37.992"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.100" starttime="20160128 01:10:38.096"></status>
</kw>
<msg timestamp="20160128 01:10:38.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:38.102" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:38.101" starttime="20160128 01:10:38.094"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.112" starttime="20160128 01:10:38.110"></status>
</kw>
<msg timestamp="20160128 01:10:38.114" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:38.113" starttime="20160128 01:10:38.104"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:38.119" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:38.118" starttime="20160128 01:10:38.116"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:38.123" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:38.122" starttime="20160128 01:10:38.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.126" starttime="20160128 01:10:38.124"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.139" starttime="20160128 01:10:38.136"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.144" starttime="20160128 01:10:38.140"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:38.145" starttime="20160128 01:10:38.128"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.154" starttime="20160128 01:10:38.152"></status>
</kw>
<msg timestamp="20160128 01:10:38.156" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:38.156" starttime="20160128 01:10:38.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.160" starttime="20160128 01:10:38.158"></status>
</kw>
<msg timestamp="20160128 01:10:38.163" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:38.164" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:38.161" starttime="20160128 01:10:37.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.168" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:38.169" starttime="20160128 01:10:38.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.173" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:38.209" starttime="20160128 01:10:38.170"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.215" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:38.217" starttime="20160128 01:10:38.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.221" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:38.222" starttime="20160128 01:10:38.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:38.226" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:38.230" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:38.231" starttime="20160128 01:10:38.223"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:38.232" starttime="20160128 01:10:35.400"></status>
</kw>
<test id="s1-s1-s1-s4-s4-s1-t1" name="Run PP MTC Short Call">
<doc>Test will make a short MTC call with postpaid subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>POSTPAID_only</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:38.244" starttime="20160128 01:10:38.236">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the postpaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:38.249" starttime="20160128 01:10:35.234">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:38.257" starttime="20160128 01:10:35.209"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:38.266" starttime="20160128 01:10:26.654"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:38.291" starttime="20160128 01:10:01.731"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s2" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA" id="s1-s1-s2-s1" name="DATA">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/DATA/data-regression-suite.txt" id="s1-s1-s2-s1-s1" name="Data-Regression-Suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:38.486" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:38.488" level="INFO">${date} = Thu Jan 28 01:10:38 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:38.487" starttime="20160128 01:10:38.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.490" level="INFO">Date and time: Thu Jan 28 01:10:38 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:38.490" starttime="20160128 01:10:38.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:38.492" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:38.492" starttime="20160128 01:10:38.491"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.515" starttime="20160128 01:10:38.514"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:38.551" starttime="20160128 01:10:38.519"></status>
</kw>
<msg timestamp="20160128 01:10:38.552" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160128 01:10:38.551" starttime="20160128 01:10:38.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:38.557" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:38.916" level="INFO">Read output: Last login: Thu Jan 28 00:10:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:38.917" starttime="20160128 01:10:38.556"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:38.917" starttime="20160128 01:10:38.552"></status>
</kw>
<msg timestamp="20160128 01:10:38.918" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160128 01:10:38.918" starttime="20160128 01:10:38.509"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:38.923" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:38.922" starttime="20160128 01:10:38.919"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:38.925" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:39.197" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:39.198" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:39.197" starttime="20160128 01:10:38.923"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:39.203" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:39.204" starttime="20160128 01:10:39.200"></status>
</kw>
<msg timestamp="20160128 01:10:39.204" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:39.205" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:39.204" starttime="20160128 01:10:39.199"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.209" starttime="20160128 01:10:39.208"></status>
</kw>
<msg timestamp="20160128 01:10:39.210" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:39.210" starttime="20160128 01:10:39.205"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:39.212" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:39.212" starttime="20160128 01:10:39.211"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:39.214" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:39.214" starttime="20160128 01:10:39.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.215" starttime="20160128 01:10:39.215"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.221" starttime="20160128 01:10:39.220"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.224" starttime="20160128 01:10:39.222"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:39.224" starttime="20160128 01:10:39.216"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:39.228" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:39.227" starttime="20160128 01:10:39.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.229" starttime="20160128 01:10:39.228"></status>
</kw>
<msg timestamp="20160128 01:10:39.231" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:39.231" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:39.230" starttime="20160128 01:10:38.499"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.254" starttime="20160128 01:10:39.253"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:39.293" starttime="20160128 01:10:39.258"></status>
</kw>
<msg timestamp="20160128 01:10:39.294" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160128 01:10:39.294" starttime="20160128 01:10:39.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:39.299" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:39.671" level="INFO">Read output: Last login: Thu Jan 28 00:10:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:39.672" starttime="20160128 01:10:39.298"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:39.673" starttime="20160128 01:10:39.295"></status>
</kw>
<msg timestamp="20160128 01:10:39.674" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160128 01:10:39.673" starttime="20160128 01:10:39.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:39.678" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:39.677" starttime="20160128 01:10:39.674"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:39.679" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:40.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:40.095" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:40.095" starttime="20160128 01:10:39.678"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.099" starttime="20160128 01:10:40.097"></status>
</kw>
<msg timestamp="20160128 01:10:40.100" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:40.100" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:40.099" starttime="20160128 01:10:40.096"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.105" starttime="20160128 01:10:40.104"></status>
</kw>
<msg timestamp="20160128 01:10:40.105" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:40.105" starttime="20160128 01:10:40.101"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:40.107" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:40.107" starttime="20160128 01:10:40.106"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:40.109" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:40.109" starttime="20160128 01:10:40.108"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.111" starttime="20160128 01:10:40.110"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.116" starttime="20160128 01:10:40.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.118" starttime="20160128 01:10:40.117"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:40.119" starttime="20160128 01:10:40.111"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.123" starttime="20160128 01:10:40.122"></status>
</kw>
<msg timestamp="20160128 01:10:40.124" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:40.124" starttime="20160128 01:10:40.119"></status>
</kw>
<msg timestamp="20160128 01:10:40.126" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:40.126" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:40.125" starttime="20160128 01:10:39.238"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.149" starttime="20160128 01:10:40.148"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.206" starttime="20160128 01:10:40.152"></status>
</kw>
<msg timestamp="20160128 01:10:40.208" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160128 01:10:40.207" starttime="20160128 01:10:40.149"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:40.220" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:40.395" level="INFO">Read output: Last login: Thu Jan 28 00:10:37 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:40.396" starttime="20160128 01:10:40.217"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:40.397" starttime="20160128 01:10:40.210"></status>
</kw>
<msg timestamp="20160128 01:10:40.400" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160128 01:10:40.399" starttime="20160128 01:10:40.143"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:40.408" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:40.408" starttime="20160128 01:10:40.401"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:40.412" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:40.612" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:40.614" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:40.613" starttime="20160128 01:10:40.410"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.622" starttime="20160128 01:10:40.619"></status>
</kw>
<msg timestamp="20160128 01:10:40.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:40.624" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:40.623" starttime="20160128 01:10:40.616"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.634" starttime="20160128 01:10:40.632"></status>
</kw>
<msg timestamp="20160128 01:10:40.636" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:40.635" starttime="20160128 01:10:40.626"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:40.640" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:40.639" starttime="20160128 01:10:40.637"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:40.645" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:40.645" starttime="20160128 01:10:40.642"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.648" starttime="20160128 01:10:40.647"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.661" starttime="20160128 01:10:40.658"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.665" starttime="20160128 01:10:40.662"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:40.667" starttime="20160128 01:10:40.650"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.676" starttime="20160128 01:10:40.674"></status>
</kw>
<msg timestamp="20160128 01:10:40.678" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:40.677" starttime="20160128 01:10:40.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.681" starttime="20160128 01:10:40.679"></status>
</kw>
<msg timestamp="20160128 01:10:40.684" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:40.684" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:40.683" starttime="20160128 01:10:40.133"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.735" starttime="20160128 01:10:40.733"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:40.783" starttime="20160128 01:10:40.743"></status>
</kw>
<msg timestamp="20160128 01:10:40.784" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160128 01:10:40.784" starttime="20160128 01:10:40.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:40.790" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:40.962" level="INFO">Read output: Last login: Thu Jan 28 00:10:40 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:40.963" starttime="20160128 01:10:40.789"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:40.963" starttime="20160128 01:10:40.785"></status>
</kw>
<msg timestamp="20160128 01:10:40.965" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160128 01:10:40.964" starttime="20160128 01:10:40.723"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:40.968" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:40.968" starttime="20160128 01:10:40.965"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:40.970" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:41.054" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:41.056" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:41.055" starttime="20160128 01:10:40.969"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.059" starttime="20160128 01:10:41.057"></status>
</kw>
<msg timestamp="20160128 01:10:41.060" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:41.060" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:41.059" starttime="20160128 01:10:41.056"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.065" starttime="20160128 01:10:41.064"></status>
</kw>
<msg timestamp="20160128 01:10:41.066" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:41.065" starttime="20160128 01:10:41.061"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:41.067" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:41.067" starttime="20160128 01:10:41.066"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:41.069" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:41.069" starttime="20160128 01:10:41.068"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.071" starttime="20160128 01:10:41.070"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.077" starttime="20160128 01:10:41.075"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.079" starttime="20160128 01:10:41.077"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:41.080" starttime="20160128 01:10:41.072"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.084" starttime="20160128 01:10:41.083"></status>
</kw>
<msg timestamp="20160128 01:10:41.085" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:41.084" starttime="20160128 01:10:41.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.086" starttime="20160128 01:10:41.085"></status>
</kw>
<msg timestamp="20160128 01:10:41.088" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:41.088" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:41.087" starttime="20160128 01:10:40.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.090" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:41.090" starttime="20160128 01:10:41.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.092" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:41.092" starttime="20160128 01:10:41.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.094" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:41.094" starttime="20160128 01:10:41.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.096" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:41.097" starttime="20160128 01:10:41.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:41.098" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:41.100" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:41.100" starttime="20160128 01:10:41.097"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:41.101" starttime="20160128 01:10:38.478"></status>
</kw>
<test id="s1-s1-s2-s1-s1-t1" name="Single Data Session 767b">
<doc>Test will make a short data session in total of 767 bytes

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.108" starttime="20160128 01:10:41.102">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s2-s1-s1-t2" name="CG Short Multislice Data Session">
<doc>Test creates the data session, sends two updates of the session and finally closes the session. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.113" starttime="20160128 01:10:41.109">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s2-s1-s1-t3" name="Single NOK BalanceExhausted Data Session">
<doc>Test starts the data session, should send two updates of the session but in the mean time amount that was available on the balance is
exhausted. Session consumes 9.77 MB

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.119" starttime="20160128 01:10:41.115">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s2-s1-s1-t4" name="Single NOK NoBalance Data Session">
<doc>Test will attempt to make a data session for subscriber that has empty monetary account (and no other account to charge). It's expected that test shoud fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.125" starttime="20160128 01:10:41.121">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s2-s1-s1-t5" name="Single NOK UnknownLocation Data Session">
<doc>Test will attempt to start a simple data session with unknown location. Test should fail

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.130" starttime="20160128 01:10:41.126">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<test id="s1-s1-s2-s1-s1-t6" name="CG Short TwoAccountsCharged Data Session">
<doc>Here we will create subscriber that has very little data volume left on data account and enaugh money on monetary account. Test will start a data
session and first data account should be exhausted and then monetary account should be charged. Test verifies if data session is completed normally
and if account balance on data account is 0 after the session

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>DATA_only</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:41.135" starttime="20160128 01:10:41.131">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the simple data session cases with CG

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:41.139" starttime="20160128 01:10:38.350">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:41.146" starttime="20160128 01:10:38.336"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s2-s2" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s2-s2-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s2-s2-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:41.316" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:41.319" level="INFO">${date} = Thu Jan 28 01:10:41 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:41.318" starttime="20160128 01:10:41.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.320" level="INFO">Date and time: Thu Jan 28 01:10:41 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:41.321" starttime="20160128 01:10:41.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:41.323" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:41.323" starttime="20160128 01:10:41.321"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.345" starttime="20160128 01:10:41.344"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.377" starttime="20160128 01:10:41.349"></status>
</kw>
<msg timestamp="20160128 01:10:41.378" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20160128 01:10:41.378" starttime="20160128 01:10:41.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:41.383" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:41.599" level="INFO">Read output: Last login: Thu Jan 28 00:10:38 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:41.599" starttime="20160128 01:10:41.382"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:41.600" starttime="20160128 01:10:41.379"></status>
</kw>
<msg timestamp="20160128 01:10:41.601" level="INFO">${ssh_connection} = 49</msg>
<status status="PASS" endtime="20160128 01:10:41.601" starttime="20160128 01:10:41.340"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:41.605" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:41.605" starttime="20160128 01:10:41.602"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:41.607" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:41.877" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:41.878" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:41.877" starttime="20160128 01:10:41.606"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:41.882" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:41.882" starttime="20160128 01:10:41.880"></status>
</kw>
<msg timestamp="20160128 01:10:41.883" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:41.884" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:41.883" starttime="20160128 01:10:41.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.888" starttime="20160128 01:10:41.887"></status>
</kw>
<msg timestamp="20160128 01:10:41.889" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:41.889" starttime="20160128 01:10:41.884"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:41.891" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:41.890" starttime="20160128 01:10:41.889"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:41.893" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:41.892" starttime="20160128 01:10:41.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.894" starttime="20160128 01:10:41.893"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.899" starttime="20160128 01:10:41.898"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.902" starttime="20160128 01:10:41.900"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:41.902" starttime="20160128 01:10:41.895"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:41.906" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:41.905" starttime="20160128 01:10:41.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.907" starttime="20160128 01:10:41.906"></status>
</kw>
<msg timestamp="20160128 01:10:41.908" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:41.909" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:41.908" starttime="20160128 01:10:41.330"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.930" starttime="20160128 01:10:41.929"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:41.983" starttime="20160128 01:10:41.934"></status>
</kw>
<msg timestamp="20160128 01:10:41.986" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20160128 01:10:41.985" starttime="20160128 01:10:41.931"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:41.997" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:42.400" level="INFO">Read output: Last login: Thu Jan 28 00:10:39 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:42.401" starttime="20160128 01:10:41.994"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:42.402" starttime="20160128 01:10:41.987"></status>
</kw>
<msg timestamp="20160128 01:10:42.405" level="INFO">${ssh_connection} = 50</msg>
<status status="PASS" endtime="20160128 01:10:42.404" starttime="20160128 01:10:41.925"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:42.409" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:42.409" starttime="20160128 01:10:42.405"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:42.411" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:42.796" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:42.797" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:42.797" starttime="20160128 01:10:42.410"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.801" starttime="20160128 01:10:42.799"></status>
</kw>
<msg timestamp="20160128 01:10:42.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:42.802" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:42.801" starttime="20160128 01:10:42.798"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.807" starttime="20160128 01:10:42.806"></status>
</kw>
<msg timestamp="20160128 01:10:42.807" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:42.807" starttime="20160128 01:10:42.803"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:42.809" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:42.809" starttime="20160128 01:10:42.808"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:42.811" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:42.811" starttime="20160128 01:10:42.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.813" starttime="20160128 01:10:42.812"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.818" starttime="20160128 01:10:42.817"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.820" starttime="20160128 01:10:42.819"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:42.820" starttime="20160128 01:10:42.814"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.824" starttime="20160128 01:10:42.823"></status>
</kw>
<msg timestamp="20160128 01:10:42.825" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:42.825" starttime="20160128 01:10:42.821"></status>
</kw>
<msg timestamp="20160128 01:10:42.827" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:42.827" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:42.826" starttime="20160128 01:10:41.915"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.850" starttime="20160128 01:10:42.849"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:42.892" starttime="20160128 01:10:42.854"></status>
</kw>
<msg timestamp="20160128 01:10:42.893" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20160128 01:10:42.893" starttime="20160128 01:10:42.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:42.898" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:43.088" level="INFO">Read output: Last login: Thu Jan 28 00:10:40 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:43.089" starttime="20160128 01:10:42.897"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:43.090" starttime="20160128 01:10:42.894"></status>
</kw>
<msg timestamp="20160128 01:10:43.092" level="INFO">${ssh_connection} = 51</msg>
<status status="PASS" endtime="20160128 01:10:43.091" starttime="20160128 01:10:42.846"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:43.096" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:43.095" starttime="20160128 01:10:43.092"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:43.097" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:43.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:43.290" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:43.290" starttime="20160128 01:10:43.096"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.293" starttime="20160128 01:10:43.292"></status>
</kw>
<msg timestamp="20160128 01:10:43.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:43.295" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:43.294" starttime="20160128 01:10:43.291"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.299" starttime="20160128 01:10:43.298"></status>
</kw>
<msg timestamp="20160128 01:10:43.300" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:43.299" starttime="20160128 01:10:43.295"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:43.302" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:43.301" starttime="20160128 01:10:43.300"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:43.304" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:43.303" starttime="20160128 01:10:43.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.305" starttime="20160128 01:10:43.304"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.310" starttime="20160128 01:10:43.309"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.312" starttime="20160128 01:10:43.311"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:43.313" starttime="20160128 01:10:43.306"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.317" starttime="20160128 01:10:43.316"></status>
</kw>
<msg timestamp="20160128 01:10:43.318" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:43.317" starttime="20160128 01:10:43.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.319" starttime="20160128 01:10:43.318"></status>
</kw>
<msg timestamp="20160128 01:10:43.321" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:43.321" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:43.320" starttime="20160128 01:10:42.834"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.343" starttime="20160128 01:10:43.342"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.381" starttime="20160128 01:10:43.346"></status>
</kw>
<msg timestamp="20160128 01:10:43.382" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20160128 01:10:43.382" starttime="20160128 01:10:43.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:43.387" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:43.563" level="INFO">Read output: Last login: Thu Jan 28 00:10:43 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:43.564" starttime="20160128 01:10:43.386"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:43.564" starttime="20160128 01:10:43.383"></status>
</kw>
<msg timestamp="20160128 01:10:43.565" level="INFO">${ssh_connection} = 52</msg>
<status status="PASS" endtime="20160128 01:10:43.565" starttime="20160128 01:10:43.338"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:43.569" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:43.569" starttime="20160128 01:10:43.566"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:43.571" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:43.661" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:43.662" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:43.662" starttime="20160128 01:10:43.570"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.665" starttime="20160128 01:10:43.664"></status>
</kw>
<msg timestamp="20160128 01:10:43.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:43.666" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:43.666" starttime="20160128 01:10:43.663"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.670" starttime="20160128 01:10:43.670"></status>
</kw>
<msg timestamp="20160128 01:10:43.671" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:43.671" starttime="20160128 01:10:43.667"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:43.673" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:43.673" starttime="20160128 01:10:43.672"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:43.675" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:43.675" starttime="20160128 01:10:43.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.676" starttime="20160128 01:10:43.676"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.681" starttime="20160128 01:10:43.680"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.683" starttime="20160128 01:10:43.682"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:43.684" starttime="20160128 01:10:43.677"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.688" starttime="20160128 01:10:43.687"></status>
</kw>
<msg timestamp="20160128 01:10:43.689" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:43.689" starttime="20160128 01:10:43.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.691" starttime="20160128 01:10:43.690"></status>
</kw>
<msg timestamp="20160128 01:10:43.692" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:43.692" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:43.692" starttime="20160128 01:10:43.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.694" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:43.694" starttime="20160128 01:10:43.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.696" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:43.696" starttime="20160128 01:10:43.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.698" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:43.699" starttime="20160128 01:10:43.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.700" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:43.701" starttime="20160128 01:10:43.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:43.702" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:43.704" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:43.705" starttime="20160128 01:10:43.701"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:43.705" starttime="20160128 01:10:41.310"></status>
</kw>
<test id="s1-s1-s2-s2-s1-s1-t1" name="Run MFC Short Call">
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:43.710" starttime="20160128 01:10:43.707">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:43.712" starttime="20160128 01:10:41.181">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:43.715" starttime="20160128 01:10:41.166"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:43.718" starttime="20160128 01:10:41.151"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s2-s3" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s2-s3-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s2-s3-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s2-s3-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:43.898" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:43.906" level="INFO">${date} = Thu Jan 28 01:10:43 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:43.905" starttime="20160128 01:10:43.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.910" level="INFO">Date and time: Thu Jan 28 01:10:43 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:43.911" starttime="20160128 01:10:43.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:43.915" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:43.916" starttime="20160128 01:10:43.912"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:43.963" starttime="20160128 01:10:43.961"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.018" starttime="20160128 01:10:43.971"></status>
</kw>
<msg timestamp="20160128 01:10:44.023" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20160128 01:10:44.021" starttime="20160128 01:10:43.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:44.033" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:44.259" level="INFO">Read output: Last login: Thu Jan 28 00:10:41 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:44.260" starttime="20160128 01:10:44.031"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:44.261" starttime="20160128 01:10:44.024"></status>
</kw>
<msg timestamp="20160128 01:10:44.265" level="INFO">${ssh_connection} = 53</msg>
<status status="PASS" endtime="20160128 01:10:44.263" starttime="20160128 01:10:43.952"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:44.273" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:44.272" starttime="20160128 01:10:44.266"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:44.277" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:44.538" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:44.540" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:44.539" starttime="20160128 01:10:44.274"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:44.549" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:44.550" starttime="20160128 01:10:44.544"></status>
</kw>
<msg timestamp="20160128 01:10:44.552" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:44.552" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:44.551" starttime="20160128 01:10:44.541"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.562" starttime="20160128 01:10:44.560"></status>
</kw>
<msg timestamp="20160128 01:10:44.564" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:44.563" starttime="20160128 01:10:44.554"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:44.568" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:44.567" starttime="20160128 01:10:44.565"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:44.572" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:44.571" starttime="20160128 01:10:44.569"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.575" starttime="20160128 01:10:44.573"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.587" starttime="20160128 01:10:44.584"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.592" starttime="20160128 01:10:44.588"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:44.593" starttime="20160128 01:10:44.577"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:44.601" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:44.600" starttime="20160128 01:10:44.594"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.604" starttime="20160128 01:10:44.602"></status>
</kw>
<msg timestamp="20160128 01:10:44.607" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:44.608" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:44.605" starttime="20160128 01:10:43.930"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.654" starttime="20160128 01:10:44.652"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:44.703" starttime="20160128 01:10:44.662"></status>
</kw>
<msg timestamp="20160128 01:10:44.705" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20160128 01:10:44.704" starttime="20160128 01:10:44.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:44.710" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:45.096" level="INFO">Read output: Last login: Thu Jan 28 00:10:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:45.097" starttime="20160128 01:10:44.709"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:45.098" starttime="20160128 01:10:44.705"></status>
</kw>
<msg timestamp="20160128 01:10:45.100" level="INFO">${ssh_connection} = 54</msg>
<status status="PASS" endtime="20160128 01:10:45.099" starttime="20160128 01:10:44.643"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:45.104" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:45.104" starttime="20160128 01:10:45.101"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:45.106" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:45.500" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:45.501" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:45.500" starttime="20160128 01:10:45.105"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.505" starttime="20160128 01:10:45.503"></status>
</kw>
<msg timestamp="20160128 01:10:45.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:45.506" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:45.505" starttime="20160128 01:10:45.501"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.510" starttime="20160128 01:10:45.510"></status>
</kw>
<msg timestamp="20160128 01:10:45.511" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:45.511" starttime="20160128 01:10:45.507"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:45.513" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:45.513" starttime="20160128 01:10:45.512"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:45.515" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:45.515" starttime="20160128 01:10:45.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.516" starttime="20160128 01:10:45.515"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.521" starttime="20160128 01:10:45.520"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.523" starttime="20160128 01:10:45.522"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:45.524" starttime="20160128 01:10:45.517"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.528" starttime="20160128 01:10:45.527"></status>
</kw>
<msg timestamp="20160128 01:10:45.529" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:45.529" starttime="20160128 01:10:45.525"></status>
</kw>
<msg timestamp="20160128 01:10:45.531" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:45.531" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:45.530" starttime="20160128 01:10:44.622"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.552" starttime="20160128 01:10:45.551"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.594" starttime="20160128 01:10:45.556"></status>
</kw>
<msg timestamp="20160128 01:10:45.595" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20160128 01:10:45.594" starttime="20160128 01:10:45.553"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:45.599" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:45.778" level="INFO">Read output: Last login: Thu Jan 28 00:10:43 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:45.779" starttime="20160128 01:10:45.598"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:45.779" starttime="20160128 01:10:45.595"></status>
</kw>
<msg timestamp="20160128 01:10:45.780" level="INFO">${ssh_connection} = 55</msg>
<status status="PASS" endtime="20160128 01:10:45.780" starttime="20160128 01:10:45.547"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:45.784" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:45.784" starttime="20160128 01:10:45.781"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:45.786" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:45.974" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:45.975" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:45.974" starttime="20160128 01:10:45.785"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.978" starttime="20160128 01:10:45.976"></status>
</kw>
<msg timestamp="20160128 01:10:45.979" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:45.979" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:45.978" starttime="20160128 01:10:45.975"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.983" starttime="20160128 01:10:45.982"></status>
</kw>
<msg timestamp="20160128 01:10:45.984" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:45.984" starttime="20160128 01:10:45.980"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:45.986" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:45.985" starttime="20160128 01:10:45.984"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:45.988" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:45.987" starttime="20160128 01:10:45.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.989" starttime="20160128 01:10:45.988"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.994" starttime="20160128 01:10:45.993"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:45.996" starttime="20160128 01:10:45.995"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:45.997" starttime="20160128 01:10:45.990"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.001" starttime="20160128 01:10:46.000"></status>
</kw>
<msg timestamp="20160128 01:10:46.002" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:46.002" starttime="20160128 01:10:45.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.004" starttime="20160128 01:10:46.003"></status>
</kw>
<msg timestamp="20160128 01:10:46.005" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:46.006" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:46.005" starttime="20160128 01:10:45.537"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.035" starttime="20160128 01:10:46.034"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.088" starttime="20160128 01:10:46.039"></status>
</kw>
<msg timestamp="20160128 01:10:46.090" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20160128 01:10:46.089" starttime="20160128 01:10:46.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:46.102" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:46.271" level="INFO">Read output: Last login: Thu Jan 28 00:10:45 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:46.272" starttime="20160128 01:10:46.100"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:46.273" starttime="20160128 01:10:46.092"></status>
</kw>
<msg timestamp="20160128 01:10:46.276" level="INFO">${ssh_connection} = 56</msg>
<status status="PASS" endtime="20160128 01:10:46.275" starttime="20160128 01:10:46.022"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:46.284" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:46.283" starttime="20160128 01:10:46.277"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:46.288" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:46.379" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:46.381" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:46.380" starttime="20160128 01:10:46.285"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.388" starttime="20160128 01:10:46.385"></status>
</kw>
<msg timestamp="20160128 01:10:46.389" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:46.390" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:46.389" starttime="20160128 01:10:46.382"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.399" starttime="20160128 01:10:46.398"></status>
</kw>
<msg timestamp="20160128 01:10:46.401" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:46.400" starttime="20160128 01:10:46.391"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:46.405" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:46.405" starttime="20160128 01:10:46.402"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:46.409" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:46.409" starttime="20160128 01:10:46.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.412" starttime="20160128 01:10:46.411"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.424" starttime="20160128 01:10:46.422"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.429" starttime="20160128 01:10:46.425"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:46.430" starttime="20160128 01:10:46.414"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.439" starttime="20160128 01:10:46.437"></status>
</kw>
<msg timestamp="20160128 01:10:46.441" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:46.440" starttime="20160128 01:10:46.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.444" starttime="20160128 01:10:46.442"></status>
</kw>
<msg timestamp="20160128 01:10:46.447" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:46.447" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:46.446" starttime="20160128 01:10:46.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.451" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:46.452" starttime="20160128 01:10:46.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.456" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:46.457" starttime="20160128 01:10:46.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.461" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:46.462" starttime="20160128 01:10:46.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.465" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:46.466" starttime="20160128 01:10:46.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:46.470" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:46.473" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:46.474" starttime="20160128 01:10:46.468"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:46.476" starttime="20160128 01:10:43.890"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s1-s1-t1" name="Run MOC Abandon Call">
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:46.486" starttime="20160128 01:10:46.479">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:46.491" starttime="20160128 01:10:43.763">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:46.498" starttime="20160128 01:10:43.749"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s2-s3-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s2-s3-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:46.735" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:46.739" level="INFO">${date} = Thu Jan 28 01:10:46 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:46.738" starttime="20160128 01:10:46.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.743" level="INFO">Date and time: Thu Jan 28 01:10:46 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:46.744" starttime="20160128 01:10:46.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:46.748" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:46.749" starttime="20160128 01:10:46.745"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.795" starttime="20160128 01:10:46.793"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:46.832" starttime="20160128 01:10:46.804"></status>
</kw>
<msg timestamp="20160128 01:10:46.833" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20160128 01:10:46.833" starttime="20160128 01:10:46.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:46.838" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:47.039" level="INFO">Read output: Last login: Thu Jan 28 00:10:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:47.040" starttime="20160128 01:10:46.837"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:47.041" starttime="20160128 01:10:46.834"></status>
</kw>
<msg timestamp="20160128 01:10:47.043" level="INFO">${ssh_connection} = 57</msg>
<status status="PASS" endtime="20160128 01:10:47.042" starttime="20160128 01:10:46.785"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:47.049" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:47.049" starttime="20160128 01:10:47.043"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:47.051" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:47.291" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:47.292" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:47.292" starttime="20160128 01:10:47.050"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:47.296" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:47.297" starttime="20160128 01:10:47.294"></status>
</kw>
<msg timestamp="20160128 01:10:47.297" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:47.298" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:47.297" starttime="20160128 01:10:47.293"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.304" starttime="20160128 01:10:47.303"></status>
</kw>
<msg timestamp="20160128 01:10:47.305" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:47.305" starttime="20160128 01:10:47.299"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:47.308" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:47.308" starttime="20160128 01:10:47.306"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:47.311" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:47.311" starttime="20160128 01:10:47.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.313" starttime="20160128 01:10:47.312"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.319" starttime="20160128 01:10:47.318"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.321" starttime="20160128 01:10:47.320"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:47.321" starttime="20160128 01:10:47.314"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:47.325" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:47.325" starttime="20160128 01:10:47.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.327" starttime="20160128 01:10:47.326"></status>
</kw>
<msg timestamp="20160128 01:10:47.328" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:47.328" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:47.327" starttime="20160128 01:10:46.763"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.350" starttime="20160128 01:10:47.349"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:47.393" starttime="20160128 01:10:47.353"></status>
</kw>
<msg timestamp="20160128 01:10:47.394" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20160128 01:10:47.393" starttime="20160128 01:10:47.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:47.398" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:47.817" level="INFO">Read output: Last login: Thu Jan 28 00:10:44 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:47.818" starttime="20160128 01:10:47.397"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:47.819" starttime="20160128 01:10:47.394"></status>
</kw>
<msg timestamp="20160128 01:10:47.822" level="INFO">${ssh_connection} = 58</msg>
<status status="PASS" endtime="20160128 01:10:47.821" starttime="20160128 01:10:47.345"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:47.828" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:47.828" starttime="20160128 01:10:47.823"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:47.829" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:48.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:48.228" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:48.226" starttime="20160128 01:10:47.828"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.234" starttime="20160128 01:10:48.231"></status>
</kw>
<msg timestamp="20160128 01:10:48.236" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:48.236" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:48.235" starttime="20160128 01:10:48.229"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.244" starttime="20160128 01:10:48.243"></status>
</kw>
<msg timestamp="20160128 01:10:48.246" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:48.245" starttime="20160128 01:10:48.237"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:48.250" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:48.249" starttime="20160128 01:10:48.247"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:48.254" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:48.253" starttime="20160128 01:10:48.251"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.256" starttime="20160128 01:10:48.255"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.266" starttime="20160128 01:10:48.264"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.270" starttime="20160128 01:10:48.267"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:48.271" starttime="20160128 01:10:48.258"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.281" starttime="20160128 01:10:48.279"></status>
</kw>
<msg timestamp="20160128 01:10:48.282" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:48.282" starttime="20160128 01:10:48.273"></status>
</kw>
<msg timestamp="20160128 01:10:48.285" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:48.286" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:48.284" starttime="20160128 01:10:47.335"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.329" starttime="20160128 01:10:48.328"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.382" starttime="20160128 01:10:48.333"></status>
</kw>
<msg timestamp="20160128 01:10:48.385" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20160128 01:10:48.384" starttime="20160128 01:10:48.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:48.396" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:48.577" level="INFO">Read output: Last login: Thu Jan 28 00:10:46 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:48.578" starttime="20160128 01:10:48.393"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:48.580" starttime="20160128 01:10:48.386"></status>
</kw>
<msg timestamp="20160128 01:10:48.582" level="INFO">${ssh_connection} = 59</msg>
<status status="PASS" endtime="20160128 01:10:48.581" starttime="20160128 01:10:48.321"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:48.590" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:48.590" starttime="20160128 01:10:48.584"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:48.594" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:48.783" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:48.786" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:48.785" starttime="20160128 01:10:48.592"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.792" starttime="20160128 01:10:48.789"></status>
</kw>
<msg timestamp="20160128 01:10:48.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:48.795" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:48.793" starttime="20160128 01:10:48.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.804" starttime="20160128 01:10:48.802"></status>
</kw>
<msg timestamp="20160128 01:10:48.806" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:48.805" starttime="20160128 01:10:48.796"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:48.810" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:48.809" starttime="20160128 01:10:48.807"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:48.814" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:48.813" starttime="20160128 01:10:48.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.816" starttime="20160128 01:10:48.815"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.828" starttime="20160128 01:10:48.825"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.832" starttime="20160128 01:10:48.829"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:48.833" starttime="20160128 01:10:48.818"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.842" starttime="20160128 01:10:48.840"></status>
</kw>
<msg timestamp="20160128 01:10:48.844" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:48.843" starttime="20160128 01:10:48.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.847" starttime="20160128 01:10:48.845"></status>
</kw>
<msg timestamp="20160128 01:10:48.850" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:48.850" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:48.849" starttime="20160128 01:10:48.301"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.897" starttime="20160128 01:10:48.895"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:48.957" starttime="20160128 01:10:48.905"></status>
</kw>
<msg timestamp="20160128 01:10:48.960" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20160128 01:10:48.959" starttime="20160128 01:10:48.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:48.971" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:49.141" level="INFO">Read output: Last login: Thu Jan 28 00:10:48 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:49.142" starttime="20160128 01:10:48.968"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:49.144" starttime="20160128 01:10:48.961"></status>
</kw>
<msg timestamp="20160128 01:10:49.149" level="INFO">${ssh_connection} = 60</msg>
<status status="PASS" endtime="20160128 01:10:49.147" starttime="20160128 01:10:48.887"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:49.156" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:49.156" starttime="20160128 01:10:49.150"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:49.160" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:49.248" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:49.249" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:49.249" starttime="20160128 01:10:49.158"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.252" starttime="20160128 01:10:49.251"></status>
</kw>
<msg timestamp="20160128 01:10:49.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:49.253" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:49.253" starttime="20160128 01:10:49.250"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.257" starttime="20160128 01:10:49.256"></status>
</kw>
<msg timestamp="20160128 01:10:49.258" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:49.258" starttime="20160128 01:10:49.254"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:49.260" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:49.260" starttime="20160128 01:10:49.259"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:49.262" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:49.261" starttime="20160128 01:10:49.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.263" starttime="20160128 01:10:49.262"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.268" starttime="20160128 01:10:49.267"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.270" starttime="20160128 01:10:49.268"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:49.271" starttime="20160128 01:10:49.264"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.275" starttime="20160128 01:10:49.274"></status>
</kw>
<msg timestamp="20160128 01:10:49.275" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:49.275" starttime="20160128 01:10:49.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.277" starttime="20160128 01:10:49.276"></status>
</kw>
<msg timestamp="20160128 01:10:49.278" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:49.279" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:49.278" starttime="20160128 01:10:48.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.280" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:49.281" starttime="20160128 01:10:49.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.282" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:49.283" starttime="20160128 01:10:49.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.284" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:49.285" starttime="20160128 01:10:49.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.287" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:49.287" starttime="20160128 01:10:49.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:49.288" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:49.290" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:49.290" starttime="20160128 01:10:49.287"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:49.291" starttime="20160128 01:10:46.728"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s2-s1-t1" name="Run MOC Busy Call">
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:49.296" starttime="20160128 01:10:49.292">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:49.298" starttime="20160128 01:10:46.536">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:49.301" starttime="20160128 01:10:46.504"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration196s" id="s1-s1-s2-s3-s1-s3" name="MOC PREPAID ONNET-LongDuration196s">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration196s/MOC_PREPAID_ONNET-LongDuration196s-robot-suite.txt" id="s1-s1-s2-s3-s1-s3-s1" name="MOC PREPAID ONNET-LongDuration196s-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:49.454" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:49.460" level="INFO">${date} = Thu Jan 28 01:10:49 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:49.458" starttime="20160128 01:10:49.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.463" level="INFO">Date and time: Thu Jan 28 01:10:49 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:49.464" starttime="20160128 01:10:49.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:49.468" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:49.469" starttime="20160128 01:10:49.465"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.515" starttime="20160128 01:10:49.513"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:49.566" starttime="20160128 01:10:49.523"></status>
</kw>
<msg timestamp="20160128 01:10:49.568" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20160128 01:10:49.567" starttime="20160128 01:10:49.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:49.579" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:49.793" level="INFO">Read output: Last login: Thu Jan 28 00:10:46 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:49.794" starttime="20160128 01:10:49.576"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:49.795" starttime="20160128 01:10:49.569"></status>
</kw>
<msg timestamp="20160128 01:10:49.798" level="INFO">${ssh_connection} = 61</msg>
<status status="PASS" endtime="20160128 01:10:49.797" starttime="20160128 01:10:49.505"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:49.806" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:49.805" starttime="20160128 01:10:49.799"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:49.809" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:50.083" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:50.086" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:50.085" starttime="20160128 01:10:49.807"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:50.095" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:50.096" starttime="20160128 01:10:50.090"></status>
</kw>
<msg timestamp="20160128 01:10:50.098" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:50.099" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:50.097" starttime="20160128 01:10:50.088"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.108" starttime="20160128 01:10:50.107"></status>
</kw>
<msg timestamp="20160128 01:10:50.110" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:50.109" starttime="20160128 01:10:50.100"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:50.114" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:50.113" starttime="20160128 01:10:50.111"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:50.118" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:50.117" starttime="20160128 01:10:50.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.121" starttime="20160128 01:10:50.119"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.132" starttime="20160128 01:10:50.129"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.137" starttime="20160128 01:10:50.133"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:50.138" starttime="20160128 01:10:50.123"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:50.146" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:50.145" starttime="20160128 01:10:50.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.149" starttime="20160128 01:10:50.147"></status>
</kw>
<msg timestamp="20160128 01:10:50.153" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:50.153" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:50.151" starttime="20160128 01:10:49.483"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.199" starttime="20160128 01:10:50.197"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:50.245" starttime="20160128 01:10:50.204"></status>
</kw>
<msg timestamp="20160128 01:10:50.246" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20160128 01:10:50.245" starttime="20160128 01:10:50.201"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:50.250" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:50.663" level="INFO">Read output: Last login: Thu Jan 28 00:10:47 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:50.665" starttime="20160128 01:10:50.249"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:50.667" starttime="20160128 01:10:50.246"></status>
</kw>
<msg timestamp="20160128 01:10:50.671" level="INFO">${ssh_connection} = 62</msg>
<status status="PASS" endtime="20160128 01:10:50.668" starttime="20160128 01:10:50.189"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:50.679" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:50.678" starttime="20160128 01:10:50.672"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:50.682" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:51.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:51.098" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:51.096" starttime="20160128 01:10:50.681"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.105" starttime="20160128 01:10:51.102"></status>
</kw>
<msg timestamp="20160128 01:10:51.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:51.107" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:51.106" starttime="20160128 01:10:51.099"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.117" starttime="20160128 01:10:51.115"></status>
</kw>
<msg timestamp="20160128 01:10:51.118" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:51.118" starttime="20160128 01:10:51.109"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:51.122" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:51.122" starttime="20160128 01:10:51.120"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:51.126" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:51.126" starttime="20160128 01:10:51.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.129" starttime="20160128 01:10:51.128"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.140" starttime="20160128 01:10:51.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.143" starttime="20160128 01:10:51.141"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:51.144" starttime="20160128 01:10:51.131"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.154" starttime="20160128 01:10:51.152"></status>
</kw>
<msg timestamp="20160128 01:10:51.155" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:51.155" starttime="20160128 01:10:51.146"></status>
</kw>
<msg timestamp="20160128 01:10:51.159" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:51.159" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:51.157" starttime="20160128 01:10:50.167"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.206" starttime="20160128 01:10:51.204"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.264" starttime="20160128 01:10:51.214"></status>
</kw>
<msg timestamp="20160128 01:10:51.267" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20160128 01:10:51.266" starttime="20160128 01:10:51.207"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:51.277" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:51.459" level="INFO">Read output: Last login: Thu Jan 28 00:10:49 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:51.460" starttime="20160128 01:10:51.274"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:51.460" starttime="20160128 01:10:51.268"></status>
</kw>
<msg timestamp="20160128 01:10:51.462" level="INFO">${ssh_connection} = 63</msg>
<status status="PASS" endtime="20160128 01:10:51.461" starttime="20160128 01:10:51.195"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:51.465" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:51.465" starttime="20160128 01:10:51.462"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:51.467" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:51.659" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:51.660" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:51.660" starttime="20160128 01:10:51.466"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.663" starttime="20160128 01:10:51.662"></status>
</kw>
<msg timestamp="20160128 01:10:51.664" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:51.664" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:51.664" starttime="20160128 01:10:51.661"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.669" starttime="20160128 01:10:51.668"></status>
</kw>
<msg timestamp="20160128 01:10:51.670" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:51.669" starttime="20160128 01:10:51.665"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:51.671" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:51.671" starttime="20160128 01:10:51.670"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:51.673" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:51.673" starttime="20160128 01:10:51.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.674" starttime="20160128 01:10:51.674"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.679" starttime="20160128 01:10:51.678"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.681" starttime="20160128 01:10:51.680"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:51.682" starttime="20160128 01:10:51.675"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.686" starttime="20160128 01:10:51.685"></status>
</kw>
<msg timestamp="20160128 01:10:51.687" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:51.686" starttime="20160128 01:10:51.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.688" starttime="20160128 01:10:51.687"></status>
</kw>
<msg timestamp="20160128 01:10:51.689" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:51.690" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:51.689" starttime="20160128 01:10:51.173"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.711" starttime="20160128 01:10:51.710"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:51.763" starttime="20160128 01:10:51.714"></status>
</kw>
<msg timestamp="20160128 01:10:51.766" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20160128 01:10:51.765" starttime="20160128 01:10:51.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:51.777" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:51.969" level="INFO">Read output: Last login: Thu Jan 28 00:10:51 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:51.970" starttime="20160128 01:10:51.774"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:51.970" starttime="20160128 01:10:51.767"></status>
</kw>
<msg timestamp="20160128 01:10:51.972" level="INFO">${ssh_connection} = 64</msg>
<status status="PASS" endtime="20160128 01:10:51.972" starttime="20160128 01:10:51.706"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:51.976" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:51.976" starttime="20160128 01:10:51.973"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:51.978" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:52.072" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:52.073" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:52.073" starttime="20160128 01:10:51.977"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.077" starttime="20160128 01:10:52.075"></status>
</kw>
<msg timestamp="20160128 01:10:52.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:52.078" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:52.078" starttime="20160128 01:10:52.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.083" starttime="20160128 01:10:52.082"></status>
</kw>
<msg timestamp="20160128 01:10:52.084" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:52.083" starttime="20160128 01:10:52.079"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:52.086" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:52.085" starttime="20160128 01:10:52.084"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:52.087" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:52.087" starttime="20160128 01:10:52.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.089" starttime="20160128 01:10:52.088"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.094" starttime="20160128 01:10:52.093"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.095" starttime="20160128 01:10:52.095"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:52.096" starttime="20160128 01:10:52.090"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.100" starttime="20160128 01:10:52.099"></status>
</kw>
<msg timestamp="20160128 01:10:52.101" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:52.100" starttime="20160128 01:10:52.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.102" starttime="20160128 01:10:52.101"></status>
</kw>
<msg timestamp="20160128 01:10:52.104" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:52.104" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:52.103" starttime="20160128 01:10:51.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.106" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:52.106" starttime="20160128 01:10:52.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.108" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:52.108" starttime="20160128 01:10:52.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.110" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:52.110" starttime="20160128 01:10:52.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.112" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:52.112" starttime="20160128 01:10:52.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:52.114" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:52.116" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:52.116" starttime="20160128 01:10:52.113"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:52.117" starttime="20160128 01:10:49.443"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s3-s1-t1" name="Run MOC 196s Call">
<doc>Test will make a MOC call, duration 196s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:52.121" starttime="20160128 01:10:52.118">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call, duration is 196s - longer than one slice (more than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:52.123" starttime="20160128 01:10:49.319">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:52.126" starttime="20160128 01:10:49.304"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s2-s3-s1-s4" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s2-s3-s1-s4-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:52.274" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:52.279" level="INFO">${date} = Thu Jan 28 01:10:52 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:52.278" starttime="20160128 01:10:52.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.283" level="INFO">Date and time: Thu Jan 28 01:10:52 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:52.284" starttime="20160128 01:10:52.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:52.287" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:52.288" starttime="20160128 01:10:52.285"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.334" starttime="20160128 01:10:52.332"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.386" starttime="20160128 01:10:52.342"></status>
</kw>
<msg timestamp="20160128 01:10:52.388" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20160128 01:10:52.387" starttime="20160128 01:10:52.336"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:52.398" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:52.599" level="INFO">Read output: Last login: Thu Jan 28 00:10:49 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:52.601" starttime="20160128 01:10:52.395"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:52.602" starttime="20160128 01:10:52.389"></status>
</kw>
<msg timestamp="20160128 01:10:52.605" level="INFO">${ssh_connection} = 65</msg>
<status status="PASS" endtime="20160128 01:10:52.604" starttime="20160128 01:10:52.324"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:52.613" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:52.612" starttime="20160128 01:10:52.606"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:52.616" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:52.888" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:52.889" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:52.889" starttime="20160128 01:10:52.614"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:52.893" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:52.894" starttime="20160128 01:10:52.891"></status>
</kw>
<msg timestamp="20160128 01:10:52.895" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:52.895" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:52.894" starttime="20160128 01:10:52.890"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.900" starttime="20160128 01:10:52.899"></status>
</kw>
<msg timestamp="20160128 01:10:52.901" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:52.900" starttime="20160128 01:10:52.896"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:52.903" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:52.902" starttime="20160128 01:10:52.901"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:52.905" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:52.904" starttime="20160128 01:10:52.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.906" starttime="20160128 01:10:52.905"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.911" starttime="20160128 01:10:52.910"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.913" starttime="20160128 01:10:52.912"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:52.914" starttime="20160128 01:10:52.907"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:52.917" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:52.917" starttime="20160128 01:10:52.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.918" starttime="20160128 01:10:52.917"></status>
</kw>
<msg timestamp="20160128 01:10:52.920" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:52.920" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:52.919" starttime="20160128 01:10:52.302"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.943" starttime="20160128 01:10:52.942"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:52.985" starttime="20160128 01:10:52.946"></status>
</kw>
<msg timestamp="20160128 01:10:52.986" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20160128 01:10:52.986" starttime="20160128 01:10:52.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:52.991" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:53.406" level="INFO">Read output: Last login: Thu Jan 28 00:10:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:53.407" starttime="20160128 01:10:52.990"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:53.408" starttime="20160128 01:10:52.987"></status>
</kw>
<msg timestamp="20160128 01:10:53.410" level="INFO">${ssh_connection} = 66</msg>
<status status="PASS" endtime="20160128 01:10:53.409" starttime="20160128 01:10:52.937"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:53.414" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:53.414" starttime="20160128 01:10:53.411"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:53.415" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:53.821" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:53.822" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:53.822" starttime="20160128 01:10:53.414"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.826" starttime="20160128 01:10:53.824"></status>
</kw>
<msg timestamp="20160128 01:10:53.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:53.827" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:53.826" starttime="20160128 01:10:53.823"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.831" starttime="20160128 01:10:53.830"></status>
</kw>
<msg timestamp="20160128 01:10:53.832" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:53.832" starttime="20160128 01:10:53.827"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:53.834" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:53.833" starttime="20160128 01:10:53.832"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:53.836" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:53.835" starttime="20160128 01:10:53.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.837" starttime="20160128 01:10:53.836"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.842" starttime="20160128 01:10:53.841"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.844" starttime="20160128 01:10:53.842"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:53.844" starttime="20160128 01:10:53.837"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.848" starttime="20160128 01:10:53.848"></status>
</kw>
<msg timestamp="20160128 01:10:53.849" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:53.849" starttime="20160128 01:10:53.845"></status>
</kw>
<msg timestamp="20160128 01:10:53.851" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:53.851" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:53.850" starttime="20160128 01:10:52.927"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.872" starttime="20160128 01:10:53.871"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:53.929" starttime="20160128 01:10:53.876"></status>
</kw>
<msg timestamp="20160128 01:10:53.932" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20160128 01:10:53.931" starttime="20160128 01:10:53.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:53.942" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:54.133" level="INFO">Read output: Last login: Thu Jan 28 00:10:51 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:54.135" starttime="20160128 01:10:53.940"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:54.137" starttime="20160128 01:10:53.933"></status>
</kw>
<msg timestamp="20160128 01:10:54.141" level="INFO">${ssh_connection} = 67</msg>
<status status="PASS" endtime="20160128 01:10:54.139" starttime="20160128 01:10:53.867"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:54.149" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:54.148" starttime="20160128 01:10:54.142"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:54.152" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:54.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:54.356" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:54.356" starttime="20160128 01:10:54.150"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.363" starttime="20160128 01:10:54.360"></status>
</kw>
<msg timestamp="20160128 01:10:54.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:54.366" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:54.364" starttime="20160128 01:10:54.358"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.375" starttime="20160128 01:10:54.373"></status>
</kw>
<msg timestamp="20160128 01:10:54.377" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:54.376" starttime="20160128 01:10:54.367"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:54.381" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:54.380" starttime="20160128 01:10:54.378"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:54.385" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:54.384" starttime="20160128 01:10:54.382"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.387" starttime="20160128 01:10:54.386"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.398" starttime="20160128 01:10:54.396"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.403" starttime="20160128 01:10:54.400"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:54.404" starttime="20160128 01:10:54.389"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.413" starttime="20160128 01:10:54.411"></status>
</kw>
<msg timestamp="20160128 01:10:54.415" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:54.414" starttime="20160128 01:10:54.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.418" starttime="20160128 01:10:54.416"></status>
</kw>
<msg timestamp="20160128 01:10:54.421" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:54.422" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:54.419" starttime="20160128 01:10:53.857"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.469" starttime="20160128 01:10:54.467"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.530" starttime="20160128 01:10:54.477"></status>
</kw>
<msg timestamp="20160128 01:10:54.532" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20160128 01:10:54.531" starttime="20160128 01:10:54.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:54.543" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:54.731" level="INFO">Read output: Last login: Thu Jan 28 00:10:54 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:54.732" starttime="20160128 01:10:54.540"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:54.733" starttime="20160128 01:10:54.534"></status>
</kw>
<msg timestamp="20160128 01:10:54.736" level="INFO">${ssh_connection} = 68</msg>
<status status="PASS" endtime="20160128 01:10:54.735" starttime="20160128 01:10:54.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:54.744" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:54.743" starttime="20160128 01:10:54.737"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:54.747" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:54.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:54.845" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:54.844" starttime="20160128 01:10:54.745"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.851" starttime="20160128 01:10:54.848"></status>
</kw>
<msg timestamp="20160128 01:10:54.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:54.854" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:54.852" starttime="20160128 01:10:54.846"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.863" starttime="20160128 01:10:54.861"></status>
</kw>
<msg timestamp="20160128 01:10:54.864" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:54.864" starttime="20160128 01:10:54.855"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:54.869" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:54.868" starttime="20160128 01:10:54.866"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:54.873" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:54.872" starttime="20160128 01:10:54.870"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.875" starttime="20160128 01:10:54.874"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.886" starttime="20160128 01:10:54.884"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.891" starttime="20160128 01:10:54.888"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:54.892" starttime="20160128 01:10:54.877"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.901" starttime="20160128 01:10:54.899"></status>
</kw>
<msg timestamp="20160128 01:10:54.903" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:54.902" starttime="20160128 01:10:54.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:54.906" starttime="20160128 01:10:54.904"></status>
</kw>
<msg timestamp="20160128 01:10:54.908" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:54.909" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:54.908" starttime="20160128 01:10:54.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:54.913" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:54.914" starttime="20160128 01:10:54.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:54.917" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:54.918" starttime="20160128 01:10:54.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:54.922" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:54.923" starttime="20160128 01:10:54.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:54.926" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:54.927" starttime="20160128 01:10:54.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:54.930" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:54.934" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:54.935" starttime="20160128 01:10:54.928"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:54.936" starttime="20160128 01:10:52.266"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s4-s1-t1" name="Run MOC NoAnswer Call">
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:54.946" starttime="20160128 01:10:54.939">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:54.952" starttime="20160128 01:10:52.142">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:54.959" starttime="20160128 01:10:52.128"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit" id="s1-s1-s2-s3-s1-s5" name="MOC PREPAID ONNET-NoCredit">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit/MOC_PREPAID_ONNET-NoCredit-robot-suite.txt" id="s1-s1-s2-s3-s1-s5-s1" name="MOC PREPAID ONNET-NoCredit-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:55.171" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:55.174" level="INFO">${date} = Thu Jan 28 01:10:55 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:55.173" starttime="20160128 01:10:55.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:55.177" level="INFO">Date and time: Thu Jan 28 01:10:55 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:55.178" starttime="20160128 01:10:55.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:55.181" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:55.182" starttime="20160128 01:10:55.179"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.228" starttime="20160128 01:10:55.226"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.269" starttime="20160128 01:10:55.236"></status>
</kw>
<msg timestamp="20160128 01:10:55.270" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20160128 01:10:55.270" starttime="20160128 01:10:55.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:55.276" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:55.474" level="INFO">Read output: Last login: Thu Jan 28 00:10:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:55.474" starttime="20160128 01:10:55.274"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:55.475" starttime="20160128 01:10:55.271"></status>
</kw>
<msg timestamp="20160128 01:10:55.476" level="INFO">${ssh_connection} = 69</msg>
<status status="PASS" endtime="20160128 01:10:55.476" starttime="20160128 01:10:55.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:55.480" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:55.480" starttime="20160128 01:10:55.477"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:55.482" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:55.748" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:55.750" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:55.749" starttime="20160128 01:10:55.481"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:55.758" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:55.759" starttime="20160128 01:10:55.753"></status>
</kw>
<msg timestamp="20160128 01:10:55.760" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:55.761" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:55.760" starttime="20160128 01:10:55.751"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.769" starttime="20160128 01:10:55.768"></status>
</kw>
<msg timestamp="20160128 01:10:55.771" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:55.770" starttime="20160128 01:10:55.762"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:55.774" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:55.774" starttime="20160128 01:10:55.772"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:55.778" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:55.777" starttime="20160128 01:10:55.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.780" starttime="20160128 01:10:55.779"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.796" starttime="20160128 01:10:55.788"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.800" starttime="20160128 01:10:55.797"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:55.801" starttime="20160128 01:10:55.782"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:55.809" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:55.809" starttime="20160128 01:10:55.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.812" starttime="20160128 01:10:55.810"></status>
</kw>
<msg timestamp="20160128 01:10:55.815" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:55.816" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:55.814" starttime="20160128 01:10:55.196"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.862" starttime="20160128 01:10:55.860"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:55.921" starttime="20160128 01:10:55.870"></status>
</kw>
<msg timestamp="20160128 01:10:55.923" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20160128 01:10:55.922" starttime="20160128 01:10:55.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:55.933" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:56.319" level="INFO">Read output: Last login: Thu Jan 28 00:10:53 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:56.321" starttime="20160128 01:10:55.931"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:56.323" starttime="20160128 01:10:55.924"></status>
</kw>
<msg timestamp="20160128 01:10:56.326" level="INFO">${ssh_connection} = 70</msg>
<status status="PASS" endtime="20160128 01:10:56.325" starttime="20160128 01:10:55.851"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:56.330" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:56.330" starttime="20160128 01:10:56.327"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:56.332" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:56.738" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:56.741" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:56.740" starttime="20160128 01:10:56.331"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.747" starttime="20160128 01:10:56.744"></status>
</kw>
<msg timestamp="20160128 01:10:56.749" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:56.750" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:56.748" starttime="20160128 01:10:56.742"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.759" starttime="20160128 01:10:56.757"></status>
</kw>
<msg timestamp="20160128 01:10:56.760" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:56.760" starttime="20160128 01:10:56.751"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:56.764" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:56.764" starttime="20160128 01:10:56.762"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:56.768" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:56.767" starttime="20160128 01:10:56.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.771" starttime="20160128 01:10:56.769"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.781" starttime="20160128 01:10:56.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.786" starttime="20160128 01:10:56.783"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:56.787" starttime="20160128 01:10:56.772"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.796" starttime="20160128 01:10:56.794"></status>
</kw>
<msg timestamp="20160128 01:10:56.798" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:56.797" starttime="20160128 01:10:56.789"></status>
</kw>
<msg timestamp="20160128 01:10:56.801" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:56.802" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:56.800" starttime="20160128 01:10:55.830"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.848" starttime="20160128 01:10:56.846"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:56.908" starttime="20160128 01:10:56.856"></status>
</kw>
<msg timestamp="20160128 01:10:56.910" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20160128 01:10:56.909" starttime="20160128 01:10:56.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:56.920" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:57.099" level="INFO">Read output: Last login: Thu Jan 28 00:10:54 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:57.100" starttime="20160128 01:10:56.917"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:57.102" starttime="20160128 01:10:56.911"></status>
</kw>
<msg timestamp="20160128 01:10:57.106" level="INFO">${ssh_connection} = 71</msg>
<status status="PASS" endtime="20160128 01:10:57.105" starttime="20160128 01:10:56.838"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:57.115" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:57.114" starttime="20160128 01:10:57.108"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:57.118" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:10:57.310" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:57.312" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:57.311" starttime="20160128 01:10:57.116"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.318" starttime="20160128 01:10:57.315"></status>
</kw>
<msg timestamp="20160128 01:10:57.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:57.321" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:57.319" starttime="20160128 01:10:57.313"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.330" starttime="20160128 01:10:57.329"></status>
</kw>
<msg timestamp="20160128 01:10:57.332" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:57.331" starttime="20160128 01:10:57.322"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:57.336" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:10:57.335" starttime="20160128 01:10:57.333"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:57.340" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:57.339" starttime="20160128 01:10:57.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.343" starttime="20160128 01:10:57.341"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.354" starttime="20160128 01:10:57.351"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.358" starttime="20160128 01:10:57.355"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:57.360" starttime="20160128 01:10:57.344"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.414" starttime="20160128 01:10:57.411"></status>
</kw>
<msg timestamp="20160128 01:10:57.416" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:57.415" starttime="20160128 01:10:57.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.419" starttime="20160128 01:10:57.417"></status>
</kw>
<msg timestamp="20160128 01:10:57.423" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:10:57.424" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:57.421" starttime="20160128 01:10:56.816"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.473" starttime="20160128 01:10:57.471"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.525" starttime="20160128 01:10:57.481"></status>
</kw>
<msg timestamp="20160128 01:10:57.526" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20160128 01:10:57.526" starttime="20160128 01:10:57.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:57.532" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:57.718" level="INFO">Read output: Last login: Thu Jan 28 00:10:57 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:57.719" starttime="20160128 01:10:57.530"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:57.719" starttime="20160128 01:10:57.527"></status>
</kw>
<msg timestamp="20160128 01:10:57.720" level="INFO">${ssh_connection} = 72</msg>
<status status="PASS" endtime="20160128 01:10:57.720" starttime="20160128 01:10:57.462"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:57.724" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:57.724" starttime="20160128 01:10:57.721"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:57.726" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:10:57.812" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:57.812" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:57.812" starttime="20160128 01:10:57.725"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.815" starttime="20160128 01:10:57.814"></status>
</kw>
<msg timestamp="20160128 01:10:57.816" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:57.816" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:57.816" starttime="20160128 01:10:57.813"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.820" starttime="20160128 01:10:57.819"></status>
</kw>
<msg timestamp="20160128 01:10:57.821" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:57.821" starttime="20160128 01:10:57.817"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:10:57.823" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:10:57.822" starttime="20160128 01:10:57.821"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:57.824" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:57.824" starttime="20160128 01:10:57.823"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.826" starttime="20160128 01:10:57.825"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.831" starttime="20160128 01:10:57.830"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.833" starttime="20160128 01:10:57.832"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:57.834" starttime="20160128 01:10:57.827"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.838" starttime="20160128 01:10:57.837"></status>
</kw>
<msg timestamp="20160128 01:10:57.838" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:57.838" starttime="20160128 01:10:57.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:57.840" starttime="20160128 01:10:57.839"></status>
</kw>
<msg timestamp="20160128 01:10:57.841" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:10:57.841" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:57.841" starttime="20160128 01:10:57.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:57.843" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:10:57.843" starttime="20160128 01:10:57.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:57.845" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:57.845" starttime="20160128 01:10:57.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:57.847" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:10:57.847" starttime="20160128 01:10:57.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:57.849" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:10:57.849" starttime="20160128 01:10:57.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:10:57.851" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:10:57.852" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:10:57.853" starttime="20160128 01:10:57.850"></status>
</kw>
<status status="FAIL" endtime="20160128 01:10:57.854" starttime="20160128 01:10:55.164"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s5-s1-t1" name="Run MOC NoCredit Call">
<doc>Insufficient funds MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:10:57.858" starttime="20160128 01:10:57.855">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call from the calling party that has empty account balance. It is expected that calling party will hear
announcement (call is redirected) that it has insufficient funds (call is successful from platform point of view)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:57.861" starttime="20160128 01:10:54.997">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:10:57.864" starttime="20160128 01:10:54.965"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s2-s3-s1-s6" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s2-s3-s1-s6-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:10:58.013" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:10:58.018" level="INFO">${date} = Thu Jan 28 01:10:58 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:58.017" starttime="20160128 01:10:58.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:58.022" level="INFO">Date and time: Thu Jan 28 01:10:58 CET 2016</msg>
<status status="PASS" endtime="20160128 01:10:58.023" starttime="20160128 01:10:58.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:10:58.026" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:10:58.027" starttime="20160128 01:10:58.024"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.074" starttime="20160128 01:10:58.072"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.126" starttime="20160128 01:10:58.082"></status>
</kw>
<msg timestamp="20160128 01:10:58.128" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20160128 01:10:58.127" starttime="20160128 01:10:58.075"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:58.138" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:58.353" level="INFO">Read output: Last login: Thu Jan 28 00:10:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:58.355" starttime="20160128 01:10:58.135"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:58.356" starttime="20160128 01:10:58.129"></status>
</kw>
<msg timestamp="20160128 01:10:58.359" level="INFO">${ssh_connection} = 73</msg>
<status status="PASS" endtime="20160128 01:10:58.358" starttime="20160128 01:10:58.062"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:58.367" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:58.366" starttime="20160128 01:10:58.360"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:58.370" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:10:58.639" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:10:58.641" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:58.640" starttime="20160128 01:10:58.368"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:10:58.650" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:10:58.651" starttime="20160128 01:10:58.644"></status>
</kw>
<msg timestamp="20160128 01:10:58.652" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:10:58.653" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:10:58.651" starttime="20160128 01:10:58.642"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.662" starttime="20160128 01:10:58.660"></status>
</kw>
<msg timestamp="20160128 01:10:58.664" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:10:58.663" starttime="20160128 01:10:58.654"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:10:58.668" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:58.667" starttime="20160128 01:10:58.665"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:58.671" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:10:58.671" starttime="20160128 01:10:58.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.674" starttime="20160128 01:10:58.673"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.685" starttime="20160128 01:10:58.683"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.690" starttime="20160128 01:10:58.686"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:58.691" starttime="20160128 01:10:58.676"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:10:58.698" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:10:58.698" starttime="20160128 01:10:58.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.701" starttime="20160128 01:10:58.699"></status>
</kw>
<msg timestamp="20160128 01:10:58.704" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:10:58.705" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:10:58.703" starttime="20160128 01:10:58.041"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.751" starttime="20160128 01:10:58.749"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:58.808" starttime="20160128 01:10:58.759"></status>
</kw>
<msg timestamp="20160128 01:10:58.810" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20160128 01:10:58.809" starttime="20160128 01:10:58.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:58.820" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:59.210" level="INFO">Read output: Last login: Thu Jan 28 00:10:56 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:59.211" starttime="20160128 01:10:58.818"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:59.212" starttime="20160128 01:10:58.811"></status>
</kw>
<msg timestamp="20160128 01:10:59.214" level="INFO">${ssh_connection} = 74</msg>
<status status="PASS" endtime="20160128 01:10:59.214" starttime="20160128 01:10:58.740"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:59.219" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:59.218" starttime="20160128 01:10:59.215"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:59.220" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:10:59.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:10:59.627" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:59.626" starttime="20160128 01:10:59.219"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.633" starttime="20160128 01:10:59.630"></status>
</kw>
<msg timestamp="20160128 01:10:59.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:10:59.636" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:10:59.634" starttime="20160128 01:10:59.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.645" starttime="20160128 01:10:59.643"></status>
</kw>
<msg timestamp="20160128 01:10:59.647" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:10:59.646" starttime="20160128 01:10:59.637"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:10:59.651" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:10:59.650" starttime="20160128 01:10:59.648"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:10:59.654" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:59.654" starttime="20160128 01:10:59.652"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.657" starttime="20160128 01:10:59.655"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.668" starttime="20160128 01:10:59.665"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.672" starttime="20160128 01:10:59.669"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:59.674" starttime="20160128 01:10:59.658"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.683" starttime="20160128 01:10:59.681"></status>
</kw>
<msg timestamp="20160128 01:10:59.684" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:59.684" starttime="20160128 01:10:59.675"></status>
</kw>
<msg timestamp="20160128 01:10:59.688" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:10:59.688" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:10:59.686" starttime="20160128 01:10:58.719"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.735" starttime="20160128 01:10:59.733"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:10:59.781" starttime="20160128 01:10:59.742"></status>
</kw>
<msg timestamp="20160128 01:10:59.782" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20160128 01:10:59.782" starttime="20160128 01:10:59.736"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:10:59.787" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:10:59.975" level="INFO">Read output: Last login: Thu Jan 28 00:10:57 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:10:59.976" starttime="20160128 01:10:59.786"></status>
</kw>
<status status="PASS" endtime="20160128 01:10:59.976" starttime="20160128 01:10:59.783"></status>
</kw>
<msg timestamp="20160128 01:10:59.978" level="INFO">${ssh_connection} = 75</msg>
<status status="PASS" endtime="20160128 01:10:59.977" starttime="20160128 01:10:59.724"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:10:59.981" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:10:59.981" starttime="20160128 01:10:59.978"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:10:59.983" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:00.174" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:00.176" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:00.175" starttime="20160128 01:10:59.982"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.179" starttime="20160128 01:11:00.178"></status>
</kw>
<msg timestamp="20160128 01:11:00.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:00.180" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:00.180" starttime="20160128 01:11:00.177"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.184" starttime="20160128 01:11:00.184"></status>
</kw>
<msg timestamp="20160128 01:11:00.185" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:00.185" starttime="20160128 01:11:00.181"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:00.187" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:00.187" starttime="20160128 01:11:00.186"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:00.189" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:00.188" starttime="20160128 01:11:00.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.190" starttime="20160128 01:11:00.189"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.195" starttime="20160128 01:11:00.194"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.197" starttime="20160128 01:11:00.196"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:00.198" starttime="20160128 01:11:00.191"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.202" starttime="20160128 01:11:00.201"></status>
</kw>
<msg timestamp="20160128 01:11:00.203" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:00.202" starttime="20160128 01:11:00.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.204" starttime="20160128 01:11:00.203"></status>
</kw>
<msg timestamp="20160128 01:11:00.205" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:00.206" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:00.205" starttime="20160128 01:10:59.703"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.227" starttime="20160128 01:11:00.226"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.276" starttime="20160128 01:11:00.230"></status>
</kw>
<msg timestamp="20160128 01:11:00.278" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20160128 01:11:00.277" starttime="20160128 01:11:00.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:00.289" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:00.457" level="INFO">Read output: Last login: Thu Jan 28 00:10:59 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:00.459" starttime="20160128 01:11:00.286"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:00.460" starttime="20160128 01:11:00.279"></status>
</kw>
<msg timestamp="20160128 01:11:00.462" level="INFO">${ssh_connection} = 76</msg>
<status status="PASS" endtime="20160128 01:11:00.462" starttime="20160128 01:11:00.222"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:00.470" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:00.470" starttime="20160128 01:11:00.463"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:00.474" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:00.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:00.568" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:00.567" starttime="20160128 01:11:00.472"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.574" starttime="20160128 01:11:00.571"></status>
</kw>
<msg timestamp="20160128 01:11:00.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:00.576" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:00.575" starttime="20160128 01:11:00.569"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.585" starttime="20160128 01:11:00.584"></status>
</kw>
<msg timestamp="20160128 01:11:00.587" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:00.586" starttime="20160128 01:11:00.578"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:00.591" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:00.590" starttime="20160128 01:11:00.588"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:00.595" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:00.594" starttime="20160128 01:11:00.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.597" starttime="20160128 01:11:00.596"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.608" starttime="20160128 01:11:00.606"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.613" starttime="20160128 01:11:00.609"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:00.614" starttime="20160128 01:11:00.599"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.623" starttime="20160128 01:11:00.621"></status>
</kw>
<msg timestamp="20160128 01:11:00.624" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:00.624" starttime="20160128 01:11:00.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.627" starttime="20160128 01:11:00.625"></status>
</kw>
<msg timestamp="20160128 01:11:00.629" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:00.630" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:00.629" starttime="20160128 01:11:00.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.634" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:00.635" starttime="20160128 01:11:00.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.638" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:00.639" starttime="20160128 01:11:00.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.643" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:00.643" starttime="20160128 01:11:00.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.647" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:00.648" starttime="20160128 01:11:00.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:00.651" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:00.654" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:00.655" starttime="20160128 01:11:00.649"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:00.657" starttime="20160128 01:10:58.005"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s6-s1-t1" name="Run MOC Short Call">
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:00.667" starttime="20160128 01:11:00.659">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:00.672" starttime="20160128 01:10:57.880">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:00.679" starttime="20160128 01:10:57.866"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown" id="s1-s1-s2-s3-s1-s7" name="MOC PREPAID ONNET-ToUnknown">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown/MOC_PREPAID_ONNET-ToUnknown-robot-suite.txt" id="s1-s1-s2-s3-s1-s7-s1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:00.837" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:00.842" level="INFO">${date} = Thu Jan 28 01:11:00 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:00.841" starttime="20160128 01:11:00.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.846" level="INFO">Date and time: Thu Jan 28 01:11:00 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:00.846" starttime="20160128 01:11:00.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:00.850" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:11:00.851" starttime="20160128 01:11:00.848"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.896" starttime="20160128 01:11:00.894"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:00.946" starttime="20160128 01:11:00.904"></status>
</kw>
<msg timestamp="20160128 01:11:00.947" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20160128 01:11:00.946" starttime="20160128 01:11:00.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:00.953" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:01.180" level="INFO">Read output: Last login: Thu Jan 28 00:10:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:01.181" starttime="20160128 01:11:00.952"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:01.182" starttime="20160128 01:11:00.948"></status>
</kw>
<msg timestamp="20160128 01:11:01.184" level="INFO">${ssh_connection} = 77</msg>
<status status="PASS" endtime="20160128 01:11:01.183" starttime="20160128 01:11:00.886"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:01.188" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:01.188" starttime="20160128 01:11:01.185"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:01.190" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:11:01.472" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:11:01.474" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:01.473" starttime="20160128 01:11:01.189"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:11:01.478" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:11:01.479" starttime="20160128 01:11:01.476"></status>
</kw>
<msg timestamp="20160128 01:11:01.479" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:11:01.480" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:11:01.479" starttime="20160128 01:11:01.475"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.484" starttime="20160128 01:11:01.483"></status>
</kw>
<msg timestamp="20160128 01:11:01.485" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:11:01.484" starttime="20160128 01:11:01.480"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:11:01.486" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:01.486" starttime="20160128 01:11:01.485"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:01.488" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:01.488" starttime="20160128 01:11:01.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.490" starttime="20160128 01:11:01.489"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.495" starttime="20160128 01:11:01.493"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.497" starttime="20160128 01:11:01.495"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:01.497" starttime="20160128 01:11:01.490"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:11:01.500" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:11:01.500" starttime="20160128 01:11:01.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.502" starttime="20160128 01:11:01.501"></status>
</kw>
<msg timestamp="20160128 01:11:01.503" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:11:01.504" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:11:01.503" starttime="20160128 01:11:00.865"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.525" starttime="20160128 01:11:01.524"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:01.569" starttime="20160128 01:11:01.528"></status>
</kw>
<msg timestamp="20160128 01:11:01.570" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20160128 01:11:01.570" starttime="20160128 01:11:01.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:01.575" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:01.972" level="INFO">Read output: Last login: Thu Jan 28 00:10:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:01.973" starttime="20160128 01:11:01.574"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:01.974" starttime="20160128 01:11:01.571"></status>
</kw>
<msg timestamp="20160128 01:11:01.975" level="INFO">${ssh_connection} = 78</msg>
<status status="PASS" endtime="20160128 01:11:01.975" starttime="20160128 01:11:01.520"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:01.979" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:01.979" starttime="20160128 01:11:01.976"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:01.981" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:02.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:02.365" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:02.364" starttime="20160128 01:11:01.980"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.369" starttime="20160128 01:11:02.367"></status>
</kw>
<msg timestamp="20160128 01:11:02.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:02.370" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:02.369" starttime="20160128 01:11:02.366"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.374" starttime="20160128 01:11:02.373"></status>
</kw>
<msg timestamp="20160128 01:11:02.375" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:02.375" starttime="20160128 01:11:02.370"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:11:02.377" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:02.376" starttime="20160128 01:11:02.375"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:02.378" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:02.378" starttime="20160128 01:11:02.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.380" starttime="20160128 01:11:02.379"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.385" starttime="20160128 01:11:02.384"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.387" starttime="20160128 01:11:02.386"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:02.388" starttime="20160128 01:11:02.381"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.392" starttime="20160128 01:11:02.391"></status>
</kw>
<msg timestamp="20160128 01:11:02.392" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:02.392" starttime="20160128 01:11:02.388"></status>
</kw>
<msg timestamp="20160128 01:11:02.394" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:11:02.394" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:02.393" starttime="20160128 01:11:01.510"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.415" starttime="20160128 01:11:02.415"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.467" starttime="20160128 01:11:02.419"></status>
</kw>
<msg timestamp="20160128 01:11:02.469" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20160128 01:11:02.468" starttime="20160128 01:11:02.416"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:02.480" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:02.648" level="INFO">Read output: Last login: Thu Jan 28 00:11:00 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:02.649" starttime="20160128 01:11:02.477"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:02.650" starttime="20160128 01:11:02.470"></status>
</kw>
<msg timestamp="20160128 01:11:02.653" level="INFO">${ssh_connection} = 79</msg>
<status status="PASS" endtime="20160128 01:11:02.652" starttime="20160128 01:11:02.411"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:02.661" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:02.660" starttime="20160128 01:11:02.654"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:02.664" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:02.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:02.854" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:02.854" starttime="20160128 01:11:02.662"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.861" starttime="20160128 01:11:02.858"></status>
</kw>
<msg timestamp="20160128 01:11:02.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:02.863" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:02.862" starttime="20160128 01:11:02.856"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.872" starttime="20160128 01:11:02.870"></status>
</kw>
<msg timestamp="20160128 01:11:02.874" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:02.873" starttime="20160128 01:11:02.864"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:02.878" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:02.877" starttime="20160128 01:11:02.875"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:02.881" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:02.881" starttime="20160128 01:11:02.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.884" starttime="20160128 01:11:02.882"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.895" starttime="20160128 01:11:02.892"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.900" starttime="20160128 01:11:02.896"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:02.901" starttime="20160128 01:11:02.886"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.910" starttime="20160128 01:11:02.908"></status>
</kw>
<msg timestamp="20160128 01:11:02.912" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:02.911" starttime="20160128 01:11:02.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.915" starttime="20160128 01:11:02.913"></status>
</kw>
<msg timestamp="20160128 01:11:02.917" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:02.918" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:02.916" starttime="20160128 01:11:02.401"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:02.965" starttime="20160128 01:11:02.964"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.013" starttime="20160128 01:11:02.973"></status>
</kw>
<msg timestamp="20160128 01:11:03.015" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20160128 01:11:03.015" starttime="20160128 01:11:02.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:03.020" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:03.198" level="INFO">Read output: Last login: Thu Jan 28 00:11:02 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:03.199" starttime="20160128 01:11:03.019"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:03.199" starttime="20160128 01:11:03.016"></status>
</kw>
<msg timestamp="20160128 01:11:03.201" level="INFO">${ssh_connection} = 80</msg>
<status status="PASS" endtime="20160128 01:11:03.200" starttime="20160128 01:11:02.955"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:03.205" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:03.205" starttime="20160128 01:11:03.202"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:03.207" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:03.295" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:03.296" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:03.296" starttime="20160128 01:11:03.206"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.299" starttime="20160128 01:11:03.298"></status>
</kw>
<msg timestamp="20160128 01:11:03.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:03.300" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:03.300" starttime="20160128 01:11:03.297"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.305" starttime="20160128 01:11:03.304"></status>
</kw>
<msg timestamp="20160128 01:11:03.306" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:03.305" starttime="20160128 01:11:03.301"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:03.307" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:03.307" starttime="20160128 01:11:03.306"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:03.309" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:03.309" starttime="20160128 01:11:03.308"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.310" starttime="20160128 01:11:03.310"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.315" starttime="20160128 01:11:03.314"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.317" starttime="20160128 01:11:03.316"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:03.318" starttime="20160128 01:11:03.311"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.322" starttime="20160128 01:11:03.321"></status>
</kw>
<msg timestamp="20160128 01:11:03.323" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:03.323" starttime="20160128 01:11:03.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.324" starttime="20160128 01:11:03.323"></status>
</kw>
<msg timestamp="20160128 01:11:03.326" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:03.326" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:03.325" starttime="20160128 01:11:02.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.328" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:03.328" starttime="20160128 01:11:03.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.330" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:03.330" starttime="20160128 01:11:03.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.332" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:03.332" starttime="20160128 01:11:03.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.334" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:03.334" starttime="20160128 01:11:03.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:03.336" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:03.338" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:03.338" starttime="20160128 01:11:03.335"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:03.339" starttime="20160128 01:11:00.831"></status>
</kw>
<test id="s1-s1-s2-s3-s1-s7-s1-t1" name="Run MOC ToUnknown Call">
<doc>Test will make a MOC call to unknown subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:03.343" starttime="20160128 01:11:03.340">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MOC call to the unknown subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:03.346" starttime="20160128 01:11:00.707">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:03.349" starttime="20160128 01:11:00.684"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:03.355" starttime="20160128 01:10:43.735"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:03.366" starttime="20160128 01:10:43.720"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s2-s4" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s2-s4-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s2-s4-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:03.533" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:03.539" level="INFO">${date} = Thu Jan 28 01:11:03 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:03.538" starttime="20160128 01:11:03.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.542" level="INFO">Date and time: Thu Jan 28 01:11:03 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:03.543" starttime="20160128 01:11:03.540"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:03.547" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:11:03.548" starttime="20160128 01:11:03.545"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.595" starttime="20160128 01:11:03.593"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:03.635" starttime="20160128 01:11:03.603"></status>
</kw>
<msg timestamp="20160128 01:11:03.636" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20160128 01:11:03.635" starttime="20160128 01:11:03.596"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:03.641" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:03.855" level="INFO">Read output: Last login: Thu Jan 28 00:11:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:03.855" starttime="20160128 01:11:03.640"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:03.856" starttime="20160128 01:11:03.636"></status>
</kw>
<msg timestamp="20160128 01:11:03.857" level="INFO">${ssh_connection} = 81</msg>
<status status="PASS" endtime="20160128 01:11:03.857" starttime="20160128 01:11:03.584"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:03.861" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:03.861" starttime="20160128 01:11:03.858"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:03.862" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:11:04.136" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:11:04.138" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:04.137" starttime="20160128 01:11:03.861"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:11:04.142" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:11:04.143" starttime="20160128 01:11:04.140"></status>
</kw>
<msg timestamp="20160128 01:11:04.143" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:11:04.144" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:11:04.143" starttime="20160128 01:11:04.139"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.148" starttime="20160128 01:11:04.147"></status>
</kw>
<msg timestamp="20160128 01:11:04.149" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:11:04.149" starttime="20160128 01:11:04.144"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:11:04.151" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:04.150" starttime="20160128 01:11:04.149"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:04.152" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:04.152" starttime="20160128 01:11:04.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.154" starttime="20160128 01:11:04.153"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.159" starttime="20160128 01:11:04.157"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.161" starttime="20160128 01:11:04.159"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:04.161" starttime="20160128 01:11:04.154"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:11:04.165" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:11:04.164" starttime="20160128 01:11:04.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.166" starttime="20160128 01:11:04.165"></status>
</kw>
<msg timestamp="20160128 01:11:04.167" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:11:04.168" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:11:04.167" starttime="20160128 01:11:03.562"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.189" starttime="20160128 01:11:04.188"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:04.246" starttime="20160128 01:11:04.192"></status>
</kw>
<msg timestamp="20160128 01:11:04.248" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20160128 01:11:04.247" starttime="20160128 01:11:04.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:04.259" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:04.663" level="INFO">Read output: Last login: Thu Jan 28 00:11:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:04.664" starttime="20160128 01:11:04.256"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:04.665" starttime="20160128 01:11:04.249"></status>
</kw>
<msg timestamp="20160128 01:11:04.666" level="INFO">${ssh_connection} = 82</msg>
<status status="PASS" endtime="20160128 01:11:04.666" starttime="20160128 01:11:04.184"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:04.670" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:04.670" starttime="20160128 01:11:04.667"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:04.671" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:05.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:05.122" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:05.120" starttime="20160128 01:11:04.671"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.129" starttime="20160128 01:11:05.126"></status>
</kw>
<msg timestamp="20160128 01:11:05.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:05.131" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:05.130" starttime="20160128 01:11:05.123"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.140" starttime="20160128 01:11:05.139"></status>
</kw>
<msg timestamp="20160128 01:11:05.142" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:05.141" starttime="20160128 01:11:05.132"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:11:05.146" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:05.146" starttime="20160128 01:11:05.143"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:05.150" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:05.149" starttime="20160128 01:11:05.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.153" starttime="20160128 01:11:05.151"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.164" starttime="20160128 01:11:05.161"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.168" starttime="20160128 01:11:05.165"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:05.169" starttime="20160128 01:11:05.154"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.179" starttime="20160128 01:11:05.177"></status>
</kw>
<msg timestamp="20160128 01:11:05.180" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:05.180" starttime="20160128 01:11:05.171"></status>
</kw>
<msg timestamp="20160128 01:11:05.184" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:11:05.184" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:05.182" starttime="20160128 01:11:04.174"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.232" starttime="20160128 01:11:05.230"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.286" starttime="20160128 01:11:05.241"></status>
</kw>
<msg timestamp="20160128 01:11:05.287" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20160128 01:11:05.286" starttime="20160128 01:11:05.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:05.292" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:05.490" level="INFO">Read output: Last login: Thu Jan 28 00:11:03 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:05.491" starttime="20160128 01:11:05.291"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:05.491" starttime="20160128 01:11:05.287"></status>
</kw>
<msg timestamp="20160128 01:11:05.492" level="INFO">${ssh_connection} = 83</msg>
<status status="PASS" endtime="20160128 01:11:05.492" starttime="20160128 01:11:05.221"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:05.496" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:05.496" starttime="20160128 01:11:05.493"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:05.498" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:05.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:05.695" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:05.695" starttime="20160128 01:11:05.497"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.698" starttime="20160128 01:11:05.697"></status>
</kw>
<msg timestamp="20160128 01:11:05.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:05.699" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:05.699" starttime="20160128 01:11:05.696"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.704" starttime="20160128 01:11:05.703"></status>
</kw>
<msg timestamp="20160128 01:11:05.704" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:05.704" starttime="20160128 01:11:05.700"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:05.706" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:05.706" starttime="20160128 01:11:05.705"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:05.708" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:05.708" starttime="20160128 01:11:05.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.709" starttime="20160128 01:11:05.709"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.714" starttime="20160128 01:11:05.713"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.716" starttime="20160128 01:11:05.715"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:05.717" starttime="20160128 01:11:05.710"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.721" starttime="20160128 01:11:05.720"></status>
</kw>
<msg timestamp="20160128 01:11:05.722" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:05.721" starttime="20160128 01:11:05.718"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.723" starttime="20160128 01:11:05.722"></status>
</kw>
<msg timestamp="20160128 01:11:05.724" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:05.724" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:05.724" starttime="20160128 01:11:05.198"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.746" starttime="20160128 01:11:05.745"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:05.786" starttime="20160128 01:11:05.749"></status>
</kw>
<msg timestamp="20160128 01:11:05.787" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20160128 01:11:05.786" starttime="20160128 01:11:05.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:05.791" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:05.965" level="INFO">Read output: Last login: Thu Jan 28 00:11:05 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:05.966" starttime="20160128 01:11:05.790"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:05.966" starttime="20160128 01:11:05.787"></status>
</kw>
<msg timestamp="20160128 01:11:05.967" level="INFO">${ssh_connection} = 84</msg>
<status status="PASS" endtime="20160128 01:11:05.967" starttime="20160128 01:11:05.741"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:05.971" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:05.971" starttime="20160128 01:11:05.968"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:05.973" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:06.059" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:06.060" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:06.059" starttime="20160128 01:11:05.972"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.063" starttime="20160128 01:11:06.062"></status>
</kw>
<msg timestamp="20160128 01:11:06.064" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:06.065" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:06.064" starttime="20160128 01:11:06.061"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.069" starttime="20160128 01:11:06.068"></status>
</kw>
<msg timestamp="20160128 01:11:06.070" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:06.069" starttime="20160128 01:11:06.065"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:06.071" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:06.071" starttime="20160128 01:11:06.070"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:06.073" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:06.073" starttime="20160128 01:11:06.072"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.074" starttime="20160128 01:11:06.074"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.080" starttime="20160128 01:11:06.079"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.082" starttime="20160128 01:11:06.081"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:06.083" starttime="20160128 01:11:06.075"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.087" starttime="20160128 01:11:06.086"></status>
</kw>
<msg timestamp="20160128 01:11:06.088" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:06.087" starttime="20160128 01:11:06.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.089" starttime="20160128 01:11:06.088"></status>
</kw>
<msg timestamp="20160128 01:11:06.091" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:06.091" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:06.090" starttime="20160128 01:11:05.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.093" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:06.093" starttime="20160128 01:11:06.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.095" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:06.095" starttime="20160128 01:11:06.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.097" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:06.097" starttime="20160128 01:11:06.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.099" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:06.099" starttime="20160128 01:11:06.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:06.101" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:06.102" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:06.103" starttime="20160128 01:11:06.100"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:06.103" starttime="20160128 01:11:03.526"></status>
</kw>
<test id="s1-s1-s2-s4-s1-s1-t1" name="Run MTC Abandon Call">
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:06.109" starttime="20160128 01:11:06.104">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:06.111" starttime="20160128 01:11:03.401">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:06.114" starttime="20160128 01:11:03.388"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s2-s4-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s2-s4-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:06.256" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:06.260" level="INFO">${date} = Thu Jan 28 01:11:06 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:06.260" starttime="20160128 01:11:06.253"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.262" level="INFO">Date and time: Thu Jan 28 01:11:06 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:06.262" starttime="20160128 01:11:06.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:06.263" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:11:06.264" starttime="20160128 01:11:06.263"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.285" starttime="20160128 01:11:06.284"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.375" starttime="20160128 01:11:06.289"></status>
</kw>
<msg timestamp="20160128 01:11:06.379" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20160128 01:11:06.377" starttime="20160128 01:11:06.285"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:06.391" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:06.615" level="INFO">Read output: Last login: Thu Jan 28 00:11:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:06.617" starttime="20160128 01:11:06.388"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:06.618" starttime="20160128 01:11:06.380"></status>
</kw>
<msg timestamp="20160128 01:11:06.621" level="INFO">${ssh_connection} = 85</msg>
<status status="PASS" endtime="20160128 01:11:06.620" starttime="20160128 01:11:06.280"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:06.629" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:06.628" starttime="20160128 01:11:06.622"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:06.633" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:11:06.925" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:11:06.928" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:06.927" starttime="20160128 01:11:06.630"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:11:06.937" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:11:06.938" starttime="20160128 01:11:06.932"></status>
</kw>
<msg timestamp="20160128 01:11:06.939" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:11:06.940" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:11:06.939" starttime="20160128 01:11:06.929"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.950" starttime="20160128 01:11:06.948"></status>
</kw>
<msg timestamp="20160128 01:11:06.951" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:11:06.951" starttime="20160128 01:11:06.941"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:11:06.955" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:06.955" starttime="20160128 01:11:06.953"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:06.959" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:06.959" starttime="20160128 01:11:06.957"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.962" starttime="20160128 01:11:06.960"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.973" starttime="20160128 01:11:06.971"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.978" starttime="20160128 01:11:06.974"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:06.979" starttime="20160128 01:11:06.964"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:11:06.986" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:11:06.985" starttime="20160128 01:11:06.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:06.989" starttime="20160128 01:11:06.987"></status>
</kw>
<msg timestamp="20160128 01:11:06.991" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:11:06.992" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:11:06.990" starttime="20160128 01:11:06.270"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.038" starttime="20160128 01:11:07.036"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.087" starttime="20160128 01:11:07.045"></status>
</kw>
<msg timestamp="20160128 01:11:07.088" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20160128 01:11:07.087" starttime="20160128 01:11:07.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:07.093" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:07.445" level="INFO">Read output: Last login: Thu Jan 28 00:11:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:07.446" starttime="20160128 01:11:07.092"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:07.447" starttime="20160128 01:11:07.088"></status>
</kw>
<msg timestamp="20160128 01:11:07.448" level="INFO">${ssh_connection} = 86</msg>
<status status="PASS" endtime="20160128 01:11:07.447" starttime="20160128 01:11:07.027"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:07.452" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:07.452" starttime="20160128 01:11:07.448"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:07.453" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:07.865" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:07.866" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:07.865" starttime="20160128 01:11:07.452"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.869" starttime="20160128 01:11:07.867"></status>
</kw>
<msg timestamp="20160128 01:11:07.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:07.870" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:07.869" starttime="20160128 01:11:07.866"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.874" starttime="20160128 01:11:07.873"></status>
</kw>
<msg timestamp="20160128 01:11:07.875" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:07.874" starttime="20160128 01:11:07.870"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:11:07.876" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:07.876" starttime="20160128 01:11:07.875"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:07.878" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:07.878" starttime="20160128 01:11:07.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.879" starttime="20160128 01:11:07.879"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.884" starttime="20160128 01:11:07.883"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.886" starttime="20160128 01:11:07.885"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:07.887" starttime="20160128 01:11:07.880"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.891" starttime="20160128 01:11:07.890"></status>
</kw>
<msg timestamp="20160128 01:11:07.892" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:07.891" starttime="20160128 01:11:07.887"></status>
</kw>
<msg timestamp="20160128 01:11:07.893" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:11:07.893" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:07.892" starttime="20160128 01:11:07.005"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.914" starttime="20160128 01:11:07.913"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:07.952" starttime="20160128 01:11:07.917"></status>
</kw>
<msg timestamp="20160128 01:11:07.953" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20160128 01:11:07.952" starttime="20160128 01:11:07.915"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:07.957" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:08.135" level="INFO">Read output: Last login: Thu Jan 28 00:11:05 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:08.136" starttime="20160128 01:11:07.956"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:08.137" starttime="20160128 01:11:07.953"></status>
</kw>
<msg timestamp="20160128 01:11:08.139" level="INFO">${ssh_connection} = 87</msg>
<status status="PASS" endtime="20160128 01:11:08.138" starttime="20160128 01:11:07.909"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:08.143" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:08.142" starttime="20160128 01:11:08.140"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:08.144" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:08.329" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:08.330" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:08.330" starttime="20160128 01:11:08.143"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.334" starttime="20160128 01:11:08.332"></status>
</kw>
<msg timestamp="20160128 01:11:08.335" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:08.335" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:08.334" starttime="20160128 01:11:08.331"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.339" starttime="20160128 01:11:08.339"></status>
</kw>
<msg timestamp="20160128 01:11:08.340" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:08.340" starttime="20160128 01:11:08.336"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:08.342" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:08.342" starttime="20160128 01:11:08.341"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:08.344" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:08.344" starttime="20160128 01:11:08.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.345" starttime="20160128 01:11:08.344"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.351" starttime="20160128 01:11:08.349"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.353" starttime="20160128 01:11:08.351"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:08.353" starttime="20160128 01:11:08.346"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.358" starttime="20160128 01:11:08.357"></status>
</kw>
<msg timestamp="20160128 01:11:08.358" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:08.358" starttime="20160128 01:11:08.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.360" starttime="20160128 01:11:08.359"></status>
</kw>
<msg timestamp="20160128 01:11:08.362" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:08.362" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:08.361" starttime="20160128 01:11:07.899"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.385" starttime="20160128 01:11:08.384"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.423" starttime="20160128 01:11:08.388"></status>
</kw>
<msg timestamp="20160128 01:11:08.424" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20160128 01:11:08.424" starttime="20160128 01:11:08.386"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:08.429" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:08.609" level="INFO">Read output: Last login: Thu Jan 28 00:11:08 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:08.610" starttime="20160128 01:11:08.428"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:08.611" starttime="20160128 01:11:08.425"></status>
</kw>
<msg timestamp="20160128 01:11:08.614" level="INFO">${ssh_connection} = 88</msg>
<status status="PASS" endtime="20160128 01:11:08.613" starttime="20160128 01:11:08.380"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:08.621" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:08.621" starttime="20160128 01:11:08.615"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:08.625" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:08.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:08.715" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:08.714" starttime="20160128 01:11:08.623"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.721" starttime="20160128 01:11:08.718"></status>
</kw>
<msg timestamp="20160128 01:11:08.723" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:08.723" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:08.722" starttime="20160128 01:11:08.716"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.732" starttime="20160128 01:11:08.731"></status>
</kw>
<msg timestamp="20160128 01:11:08.734" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:08.733" starttime="20160128 01:11:08.724"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:08.738" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:08.737" starttime="20160128 01:11:08.735"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:08.741" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:08.741" starttime="20160128 01:11:08.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.744" starttime="20160128 01:11:08.743"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.755" starttime="20160128 01:11:08.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.759" starttime="20160128 01:11:08.756"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:08.761" starttime="20160128 01:11:08.746"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.769" starttime="20160128 01:11:08.767"></status>
</kw>
<msg timestamp="20160128 01:11:08.771" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:08.770" starttime="20160128 01:11:08.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:08.774" starttime="20160128 01:11:08.772"></status>
</kw>
<msg timestamp="20160128 01:11:08.776" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:08.777" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:08.776" starttime="20160128 01:11:08.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:08.781" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:08.782" starttime="20160128 01:11:08.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:08.785" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:08.786" starttime="20160128 01:11:08.783"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:08.789" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:08.790" starttime="20160128 01:11:08.787"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:08.794" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:08.795" starttime="20160128 01:11:08.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:08.798" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:08.801" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:08.802" starttime="20160128 01:11:08.796"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:08.804" starttime="20160128 01:11:06.250"></status>
</kw>
<test id="s1-s1-s2-s4-s2-s1-t1" name="Run MTC Busy Call">
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:08.813" starttime="20160128 01:11:08.806">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:08.818" starttime="20160128 01:11:06.130">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:08.825" starttime="20160128 01:11:06.117"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s2-s4-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s2-s4-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:09.036" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:09.040" level="INFO">${date} = Thu Jan 28 01:11:09 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:09.039" starttime="20160128 01:11:09.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:09.043" level="INFO">Date and time: Thu Jan 28 01:11:09 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:09.044" starttime="20160128 01:11:09.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:09.047" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:11:09.048" starttime="20160128 01:11:09.045"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.095" starttime="20160128 01:11:09.093"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.139" starttime="20160128 01:11:09.103"></status>
</kw>
<msg timestamp="20160128 01:11:09.140" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20160128 01:11:09.140" starttime="20160128 01:11:09.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:09.149" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:09.387" level="INFO">Read output: Last login: Thu Jan 28 00:11:06 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:09.388" starttime="20160128 01:11:09.147"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:09.388" starttime="20160128 01:11:09.142"></status>
</kw>
<msg timestamp="20160128 01:11:09.389" level="INFO">${ssh_connection} = 89</msg>
<status status="PASS" endtime="20160128 01:11:09.389" starttime="20160128 01:11:09.084"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:09.393" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:09.393" starttime="20160128 01:11:09.390"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:09.395" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:11:09.616" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:11:09.618" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:09.617" starttime="20160128 01:11:09.394"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:11:09.626" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:11:09.627" starttime="20160128 01:11:09.621"></status>
</kw>
<msg timestamp="20160128 01:11:09.629" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:11:09.629" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:11:09.628" starttime="20160128 01:11:09.619"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.638" starttime="20160128 01:11:09.637"></status>
</kw>
<msg timestamp="20160128 01:11:09.640" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:11:09.639" starttime="20160128 01:11:09.631"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:11:09.644" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:09.643" starttime="20160128 01:11:09.641"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:09.648" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:09.647" starttime="20160128 01:11:09.645"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.650" starttime="20160128 01:11:09.649"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.661" starttime="20160128 01:11:09.659"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.665" starttime="20160128 01:11:09.662"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:09.667" starttime="20160128 01:11:09.652"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:11:09.674" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:11:09.673" starttime="20160128 01:11:09.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.677" starttime="20160128 01:11:09.675"></status>
</kw>
<msg timestamp="20160128 01:11:09.679" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:11:09.680" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:11:09.678" starttime="20160128 01:11:09.062"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.724" starttime="20160128 01:11:09.722"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:09.782" starttime="20160128 01:11:09.730"></status>
</kw>
<msg timestamp="20160128 01:11:09.783" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20160128 01:11:09.783" starttime="20160128 01:11:09.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:09.793" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:10.189" level="INFO">Read output: Last login: Thu Jan 28 00:11:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:10.190" starttime="20160128 01:11:09.791"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:10.191" starttime="20160128 01:11:09.785"></status>
</kw>
<msg timestamp="20160128 01:11:10.193" level="INFO">${ssh_connection} = 90</msg>
<status status="PASS" endtime="20160128 01:11:10.192" starttime="20160128 01:11:09.714"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:10.197" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:10.196" starttime="20160128 01:11:10.193"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:10.198" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:10.594" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:10.595" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:10.594" starttime="20160128 01:11:10.197"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.598" starttime="20160128 01:11:10.596"></status>
</kw>
<msg timestamp="20160128 01:11:10.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:10.599" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:10.598" starttime="20160128 01:11:10.595"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.603" starttime="20160128 01:11:10.602"></status>
</kw>
<msg timestamp="20160128 01:11:10.604" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:10.604" starttime="20160128 01:11:10.599"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:11:10.606" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:10.605" starttime="20160128 01:11:10.604"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:10.607" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:10.607" starttime="20160128 01:11:10.606"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.609" starttime="20160128 01:11:10.608"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.613" starttime="20160128 01:11:10.612"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.616" starttime="20160128 01:11:10.614"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:10.616" starttime="20160128 01:11:10.609"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.620" starttime="20160128 01:11:10.619"></status>
</kw>
<msg timestamp="20160128 01:11:10.621" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:10.621" starttime="20160128 01:11:10.617"></status>
</kw>
<msg timestamp="20160128 01:11:10.623" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:11:10.623" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:10.622" starttime="20160128 01:11:09.693"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.685" starttime="20160128 01:11:10.684"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:10.742" starttime="20160128 01:11:10.691"></status>
</kw>
<msg timestamp="20160128 01:11:10.744" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20160128 01:11:10.743" starttime="20160128 01:11:10.686"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:10.755" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:10.937" level="INFO">Read output: Last login: Thu Jan 28 00:11:08 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:10.939" starttime="20160128 01:11:10.752"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:10.940" starttime="20160128 01:11:10.745"></status>
</kw>
<msg timestamp="20160128 01:11:10.942" level="INFO">${ssh_connection} = 91</msg>
<status status="PASS" endtime="20160128 01:11:10.941" starttime="20160128 01:11:10.680"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:10.950" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:10.949" starttime="20160128 01:11:10.943"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:10.954" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:11.145" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:11.149" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:11.147" starttime="20160128 01:11:10.952"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.155" starttime="20160128 01:11:11.152"></status>
</kw>
<msg timestamp="20160128 01:11:11.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:11.157" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:11.156" starttime="20160128 01:11:11.150"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.167" starttime="20160128 01:11:11.165"></status>
</kw>
<msg timestamp="20160128 01:11:11.169" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:11.168" starttime="20160128 01:11:11.159"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:11.172" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:11.172" starttime="20160128 01:11:11.170"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:11.177" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:11.176" starttime="20160128 01:11:11.174"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.179" starttime="20160128 01:11:11.178"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.190" starttime="20160128 01:11:11.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.195" starttime="20160128 01:11:11.191"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:11.196" starttime="20160128 01:11:11.181"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.205" starttime="20160128 01:11:11.203"></status>
</kw>
<msg timestamp="20160128 01:11:11.207" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:11.206" starttime="20160128 01:11:11.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.209" starttime="20160128 01:11:11.208"></status>
</kw>
<msg timestamp="20160128 01:11:11.213" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:11.213" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:11.211" starttime="20160128 01:11:10.670"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.259" starttime="20160128 01:11:11.257"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.304" starttime="20160128 01:11:11.267"></status>
</kw>
<msg timestamp="20160128 01:11:11.305" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20160128 01:11:11.304" starttime="20160128 01:11:11.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:11.310" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:11.489" level="INFO">Read output: Last login: Thu Jan 28 00:11:10 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:11.490" starttime="20160128 01:11:11.309"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:11.490" starttime="20160128 01:11:11.305"></status>
</kw>
<msg timestamp="20160128 01:11:11.492" level="INFO">${ssh_connection} = 92</msg>
<status status="PASS" endtime="20160128 01:11:11.491" starttime="20160128 01:11:11.249"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:11.495" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:11.495" starttime="20160128 01:11:11.492"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:11.497" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:11.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:11.597" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:11.596" starttime="20160128 01:11:11.496"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.600" starttime="20160128 01:11:11.598"></status>
</kw>
<msg timestamp="20160128 01:11:11.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:11.601" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:11.600" starttime="20160128 01:11:11.597"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.604" starttime="20160128 01:11:11.604"></status>
</kw>
<msg timestamp="20160128 01:11:11.605" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:11.605" starttime="20160128 01:11:11.601"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:11.607" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:11.607" starttime="20160128 01:11:11.606"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:11.609" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:11.608" starttime="20160128 01:11:11.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.610" starttime="20160128 01:11:11.609"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.615" starttime="20160128 01:11:11.614"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.617" starttime="20160128 01:11:11.615"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:11.617" starttime="20160128 01:11:11.611"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.621" starttime="20160128 01:11:11.620"></status>
</kw>
<msg timestamp="20160128 01:11:11.622" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:11.622" starttime="20160128 01:11:11.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.623" starttime="20160128 01:11:11.623"></status>
</kw>
<msg timestamp="20160128 01:11:11.625" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:11.625" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:11.625" starttime="20160128 01:11:11.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.627" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:11.628" starttime="20160128 01:11:11.626"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.629" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:11.630" starttime="20160128 01:11:11.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.631" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:11.632" starttime="20160128 01:11:11.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.633" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:11.634" starttime="20160128 01:11:11.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:11.635" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:11.637" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:11.637" starttime="20160128 01:11:11.634"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:11.638" starttime="20160128 01:11:09.029"></status>
</kw>
<test id="s1-s1-s2-s4-s3-s1-t1" name="Run MTC NoAnswer Call">
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:11.647" starttime="20160128 01:11:11.639">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:11.652" starttime="20160128 01:11:08.860">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:11.659" starttime="20160128 01:11:08.830"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s2-s4-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s2-s4-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:11.892" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:11.896" level="INFO">${date} = Thu Jan 28 01:11:11 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:11.895" starttime="20160128 01:11:11.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.899" level="INFO">Date and time: Thu Jan 28 01:11:11 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:11.900" starttime="20160128 01:11:11.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:11.903" level="INFO">Target IN machine: 10.105.125.135</msg>
<status status="PASS" endtime="20160128 01:11:11.904" starttime="20160128 01:11:11.901"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.949" starttime="20160128 01:11:11.947"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:11.998" starttime="20160128 01:11:11.957"></status>
</kw>
<msg timestamp="20160128 01:11:12.000" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20160128 01:11:11.999" starttime="20160128 01:11:11.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:12.009" level="INFO">Logging into '10.105.125.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:12.215" level="INFO">Read output: Last login: Thu Jan 28 00:11:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:12.217" starttime="20160128 01:11:12.007"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:12.218" starttime="20160128 01:11:12.001"></status>
</kw>
<msg timestamp="20160128 01:11:12.221" level="INFO">${ssh_connection} = 93</msg>
<status status="PASS" endtime="20160128 01:11:12.220" starttime="20160128 01:11:11.939"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:12.230" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:12.229" starttime="20160128 01:11:12.223"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:12.233" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-1.0.0 status'.</msg>
<msg timestamp="20160128 01:11:12.467" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20160128 01:11:12.469" level="INFO">${output} = I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:12.468" starttime="20160128 01:11:12.231"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<msg timestamp="20160128 01:11:12.478" level="FAIL">Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="FAIL" endtime="20160128 01:11:12.479" starttime="20160128 01:11:12.473"></status>
</kw>
<msg timestamp="20160128 01:11:12.480" level="INFO">${status} = FAIL</msg>
<msg timestamp="20160128 01:11:12.481" level="INFO">${rc} = Service inew-mvna-corein-service-moc-partition-00-1.0.0 is not running!: 'I-New MVNA MTel - Core - Service 1.0.0 2015.12.21-15:19:00 is not running.' does not contain 'is running'</msg>
<status status="PASS" endtime="20160128 01:11:12.480" starttime="20160128 01:11:12.470"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.490" starttime="20160128 01:11:12.489"></status>
</kw>
<msg timestamp="20160128 01:11:12.492" level="INFO">${resultCode} = SERVICE_NOT_RUNNING</msg>
<status status="PASS" endtime="20160128 01:11:12.491" starttime="20160128 01:11:12.482"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:11:12.496" level="INFO">${version_r} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:12.495" starttime="20160128 01:11:12.493"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:12.500" level="INFO">${version} =  1.0.0 2015.12.21-15:19:00 is not running.</msg>
<status status="PASS" endtime="20160128 01:11:12.499" starttime="20160128 01:11:12.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.502" starttime="20160128 01:11:12.501"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.513" starttime="20160128 01:11:12.510"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.518" starttime="20160128 01:11:12.514"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:12.519" starttime="20160128 01:11:12.504"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<msg timestamp="20160128 01:11:12.526" level="INFO">${ver} = None</msg>
<status status="PASS" endtime="20160128 01:11:12.525" starttime="20160128 01:11:12.520"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.529" starttime="20160128 01:11:12.527"></status>
</kw>
<msg timestamp="20160128 01:11:12.532" level="INFO">${in_rc} = SERVICE_NOT_RUNNING</msg>
<msg timestamp="20160128 01:11:12.533" level="INFO">${in_version} = None</msg>
<status status="PASS" endtime="20160128 01:11:12.531" starttime="20160128 01:11:11.917"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.578" starttime="20160128 01:11:12.576"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:12.638" starttime="20160128 01:11:12.586"></status>
</kw>
<msg timestamp="20160128 01:11:12.639" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20160128 01:11:12.639" starttime="20160128 01:11:12.579"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:12.649" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:13.041" level="INFO">Read output: Last login: Thu Jan 28 00:11:09 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:13.042" starttime="20160128 01:11:12.647"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:13.043" starttime="20160128 01:11:12.641"></status>
</kw>
<msg timestamp="20160128 01:11:13.045" level="INFO">${ssh_connection} = 94</msg>
<status status="PASS" endtime="20160128 01:11:13.044" starttime="20160128 01:11:12.568"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:13.049" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:13.049" starttime="20160128 01:11:13.046"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:13.051" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:13.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:13.395" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:13.395" starttime="20160128 01:11:13.050"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.402" starttime="20160128 01:11:13.399"></status>
</kw>
<msg timestamp="20160128 01:11:13.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:13.404" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:13.403" starttime="20160128 01:11:13.397"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.413" starttime="20160128 01:11:13.412"></status>
</kw>
<msg timestamp="20160128 01:11:13.415" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:13.414" starttime="20160128 01:11:13.405"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:11:13.419" level="INFO">${version_r} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:13.418" starttime="20160128 01:11:13.416"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:13.423" level="INFO">${version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:13.422" starttime="20160128 01:11:13.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.425" starttime="20160128 01:11:13.424"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.436" starttime="20160128 01:11:13.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.440" starttime="20160128 01:11:13.437"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:13.441" starttime="20160128 01:11:13.427"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.446" starttime="20160128 01:11:13.445"></status>
</kw>
<msg timestamp="20160128 01:11:13.447" level="INFO">${ver} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:13.446" starttime="20160128 01:11:13.442"></status>
</kw>
<msg timestamp="20160128 01:11:13.448" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:11:13.449" level="INFO">${xdr_version} = I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:13.448" starttime="20160128 01:11:12.547"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.470" starttime="20160128 01:11:13.469"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.510" starttime="20160128 01:11:13.473"></status>
</kw>
<msg timestamp="20160128 01:11:13.511" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20160128 01:11:13.511" starttime="20160128 01:11:13.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:13.516" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:13.695" level="INFO">Read output: Last login: Thu Jan 28 00:11:11 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:13.696" starttime="20160128 01:11:13.515"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:13.696" starttime="20160128 01:11:13.512"></status>
</kw>
<msg timestamp="20160128 01:11:13.697" level="INFO">${ssh_connection} = 95</msg>
<status status="PASS" endtime="20160128 01:11:13.697" starttime="20160128 01:11:13.465"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:13.702" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:13.701" starttime="20160128 01:11:13.698"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:13.703" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:11:13.896" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:13.897" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 6.2.1.31176
Negret Rating &amp; Charging Engine 6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:13.896" starttime="20160128 01:11:13.702"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.900" starttime="20160128 01:11:13.898"></status>
</kw>
<msg timestamp="20160128 01:11:13.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:13.901" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:13.900" starttime="20160128 01:11:13.897"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.905" starttime="20160128 01:11:13.904"></status>
</kw>
<msg timestamp="20160128 01:11:13.906" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:13.905" starttime="20160128 01:11:13.901"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:13.907" level="INFO">${version_r} =  6.2.1.31176 is running (PID:20758, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:11:13.907" starttime="20160128 01:11:13.906"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:13.909" level="INFO">${version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:13.909" starttime="20160128 01:11:13.908"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.910" starttime="20160128 01:11:13.910"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.915" starttime="20160128 01:11:13.914"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.918" starttime="20160128 01:11:13.916"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:13.918" starttime="20160128 01:11:13.911"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.922" starttime="20160128 01:11:13.921"></status>
</kw>
<msg timestamp="20160128 01:11:13.923" level="INFO">${ver} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:13.923" starttime="20160128 01:11:13.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.924" starttime="20160128 01:11:13.923"></status>
</kw>
<msg timestamp="20160128 01:11:13.925" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:11:13.925" level="INFO">${crce_version} =  6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:13.925" starttime="20160128 01:11:13.455"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:13.946" starttime="20160128 01:11:13.945"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.001" starttime="20160128 01:11:13.950"></status>
</kw>
<msg timestamp="20160128 01:11:14.006" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20160128 01:11:14.004" starttime="20160128 01:11:13.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:14.017" level="INFO">Logging into '10.105.125.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:14.183" level="INFO">Read output: Last login: Thu Jan 28 00:11:13 2016 from 10.105.101.196
[1m[qa_automation@ocs01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:14.185" starttime="20160128 01:11:14.014"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:14.186" starttime="20160128 01:11:14.007"></status>
</kw>
<msg timestamp="20160128 01:11:14.193" level="INFO">${ssh_connection} = 96</msg>
<status status="PASS" endtime="20160128 01:11:14.188" starttime="20160128 01:11:13.941"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:11:14.202" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:11:14.201" starttime="20160128 01:11:14.195"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:11:14.205" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:11:14.292" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:14.294" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:14.293" starttime="20160128 01:11:14.203"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.300" starttime="20160128 01:11:14.297"></status>
</kw>
<msg timestamp="20160128 01:11:14.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:11:14.302" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:11:14.301" starttime="20160128 01:11:14.295"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.311" starttime="20160128 01:11:14.310"></status>
</kw>
<msg timestamp="20160128 01:11:14.313" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:14.312" starttime="20160128 01:11:14.304"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:11:14.317" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp is running (PID: 2850)</msg>
<status status="PASS" endtime="20160128 01:11:14.316" starttime="20160128 01:11:14.314"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:11:14.321" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:14.320" starttime="20160128 01:11:14.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.323" starttime="20160128 01:11:14.322"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.334" starttime="20160128 01:11:14.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.339" starttime="20160128 01:11:14.335"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:14.340" starttime="20160128 01:11:14.325"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.349" starttime="20160128 01:11:14.347"></status>
</kw>
<msg timestamp="20160128 01:11:14.350" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:14.350" starttime="20160128 01:11:14.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:14.353" starttime="20160128 01:11:14.352"></status>
</kw>
<msg timestamp="20160128 01:11:14.356" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:11:14.357" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:14.355" starttime="20160128 01:11:13.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.361" level="INFO">IN state= SERVICE_NOT_RUNNING version=None</msg>
<status status="PASS" endtime="20160128 01:11:14.362" starttime="20160128 01:11:14.358"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.365" level="INFO">XDR state= OK version=I-New UMS MVNO - XDR 6.2.0 </msg>
<status status="PASS" endtime="20160128 01:11:14.366" starttime="20160128 01:11:14.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.370" level="INFO">CRCE state= OK version= 6.2.1.31176 </msg>
<status status="PASS" endtime="20160128 01:11:14.370" starttime="20160128 01:11:14.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.374" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 6.1.0.2088
GyApp </msg>
<status status="PASS" endtime="20160128 01:11:14.375" starttime="20160128 01:11:14.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:11:14.378" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:11:14.381" level="FAIL">IN: SERVICE_NOT_RUNNING != OK</msg>
<status status="FAIL" endtime="20160128 01:11:14.382" starttime="20160128 01:11:14.376"></status>
</kw>
<status status="FAIL" endtime="20160128 01:11:14.384" starttime="20160128 01:11:11.885"></status>
</kw>
<test id="s1-s1-s2-s4-s4-s1-t1" name="Run MTC Short Call">
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20160128 01:11:14.393" starttime="20160128 01:11:14.386">Parent suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:14.398" starttime="20160128 01:11:11.695">Suite setup failed:
IN: SERVICE_NOT_RUNNING != OK</status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:14.405" starttime="20160128 01:11:11.664"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:14.415" starttime="20160128 01:11:03.374"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:14.446" starttime="20160128 01:10:38.316"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:11:14.479" starttime="20160128 01:10:01.705"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/mTel" id="s1-s2-s1" name="mTel">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/mTel/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:14.799" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:14.802" level="INFO">${time} = Thu Jan 28 01:11:14 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:14.801" starttime="20160128 01:11:14.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.804" level="INFO">Date and time: Thu Jan 28 01:11:14 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:14.804" starttime="20160128 01:11:14.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD test on mTel PP Light TB25</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:14.805" level="INFO">USSD test on mTel PP Light TB25</msg>
<status status="PASS" endtime="20160128 01:11:14.806" starttime="20160128 01:11:14.805"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160128 01:11:14.856" level="INFO">${conn_id} = 97</msg>
<status status="PASS" endtime="20160128 01:11:14.855" starttime="20160128 01:11:14.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160128 01:11:14.859" level="INFO">${conn_id} = 97</msg>
<status status="PASS" endtime="20160128 01:11:14.859" starttime="20160128 01:11:14.858"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160128 01:11:14.862" level="INFO">Logging into '10.105.125.143:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:16.052" level="INFO">Read output: Last login: Wed Jan 27 02:23:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m</msg>
<msg timestamp="20160128 01:11:16.056" level="INFO">${output_login} = Last login: Wed Jan 27 02:23:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:16.054" starttime="20160128 01:11:14.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.060" level="INFO">Last login: Wed Jan 27 02:23:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ivr-app01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:16.061" starttime="20160128 01:11:16.058"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${USSD_PY_TOOL}</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160128 01:11:16.132" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160128 01:11:16.133" starttime="20160128 01:11:16.063"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.140" starttime="20160128 01:11:16.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}/ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160128 01:11:16.160" level="INFO">${ussd_tool} = /home/qa_automation//ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160128 01:11:16.161" starttime="20160128 01:11:16.141"></status>
</kw>
<kw type="kw" name="Create Prepaid Subscriber">
<doc>Test will create two prepaid subscribers with some money on balance that will be used for testing</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:11:16.173" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:11:16.172" starttime="20160128 01:11:16.170"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.188" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20160128 01:11:16.189" starttime="20160128 01:11:16.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.192" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:11:16.193" starttime="20160128 01:11:16.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.196" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:11:16.197" starttime="20160128 01:11:16.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.200" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:11:16.201" starttime="20160128 01:11:16.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.204" level="INFO">msg=imsiRangeStart=232201667725900</msg>
<status status="PASS" endtime="20160128 01:11:16.205" starttime="20160128 01:11:16.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.208" level="INFO">msg=msisdnRangeStart=43667725900</msg>
<status status="PASS" endtime="20160128 01:11:16.209" starttime="20160128 01:11:16.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.213" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:11:16.213" starttime="20160128 01:11:16.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.217" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:11:16.217" starttime="20160128 01:11:16.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.221" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:11:16.221" starttime="20160128 01:11:16.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.225" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:11:16.225" starttime="20160128 01:11:16.223"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.241" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:16.243" starttime="20160128 01:11:16.237"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:16.244" starttime="20160128 01:11:16.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.250" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:16.251" starttime="20160128 01:11:16.247"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:16.252" starttime="20160128 01:11:16.245"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.259" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:16.260" starttime="20160128 01:11:16.256"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:16.261" starttime="20160128 01:11:16.254"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:16.263" starttime="20160128 01:11:16.228"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:11:16.269" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:11:16.269" starttime="20160128 01:11:16.264"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.273" starttime="20160128 01:11:16.271"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.277" starttime="20160128 01:11:16.274"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.280" starttime="20160128 01:11:16.278"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.283" starttime="20160128 01:11:16.282"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.286" starttime="20160128 01:11:16.284"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.290" starttime="20160128 01:11:16.288"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.294" starttime="20160128 01:11:16.291"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.297" starttime="20160128 01:11:16.295"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.301" starttime="20160128 01:11:16.298"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.304" starttime="20160128 01:11:16.302"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.308" starttime="20160128 01:11:16.306"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:16.311" starttime="20160128 01:11:16.309"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:11:16.317" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725900', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725900', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:11:20.583" level="INFO">01:11:16,544 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/mTel/ext] for external libraries
01:11:16,544 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
01:11:18,102 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.125.159]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [2]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [232201667725900]
01:11:18,113 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [43667725900]
01:11:18,114 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
01:11:18,114 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
01:11:18,114 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
01:11:18,114 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
01:11:18,114 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
01:11:18,114 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
01:11:18,124 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
01:11:18,130 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
01:11:18,559 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:11:18,622 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:11:18,776 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:18,776 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:11:18,852 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:18,856 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:18,948 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:18,948 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:18,948 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:18,948 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:11:19,017 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:11:19,319 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:11:19,347 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:11:19,349 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:19,351 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:19,351 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:11:19,600 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:19,600 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:19,604 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:19,605 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:19,605 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:19,605 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:11:19,641 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:11:19,644 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:11:19,668 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:11:19,670 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:19,671 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:19,671 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:11:19,691 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:19,691 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:19,694 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:19,694 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:19,694 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:19,694 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:11:19,728 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:11:19,733 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:11:19,754 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:11:19,756 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:19,757 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:19,757 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:11:19,841 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:19,841 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:19,844 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:19,844 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:19,845 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:19,845 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:11:19,878 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:11:19,881 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:11:19,901 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:11:19,903 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:19,904 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:19,904 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:11:19,934 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:19,935 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:19,941 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:19,941 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:19,941 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:19,941 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:11:19,973 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:11:19,982 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:11:20,003 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:11:20,005 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,006 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,006 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:11:20,061 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,061 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,067 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,067 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,067 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,067 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:11:20,101 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:11:20,106 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:11:20,127 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:11:20,156 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:11:20,159 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:11:20,160 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,162 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,162 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:11:20,176 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,176 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,184 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,184 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,184 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,184 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:11:20,184 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:11:20,196 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:11:20,196 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:11:20,197 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,198 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,198 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:11:20,313 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,313 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,316 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,316 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,316 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,316 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:11:20,316 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:11:20,319 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:11:20,320 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:11:20,321 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,322 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,322 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:11:20,335 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,335 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,338 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,338 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,338 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,338 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:11:20,338 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:11:20,343 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:11:20,343 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:11:20,344 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,345 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,345 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:11:20,423 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,423 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,425 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,425 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,425 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,425 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:11:20,426 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:11:20,428 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:11:20,428 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:11:20,429 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,431 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,431 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:11:20,468 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,468 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,473 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,473 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,474 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,474 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:11:20,474 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:11:20,483 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:11:20,483 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:11:20,484 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:11:20,486 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:11:20,486 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:11:20,532 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:11:20,532 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:11:20,537 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:11:20,537 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:11:20,537 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:11:20,537 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:11:20,537 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:11:20,541 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:11:20,542 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:11:20,543 INFO  [SoapUITestCaseRunner] running step [finish_successful]
01:11:20,577 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
01:11:20,578 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2410ms, status: FINISHED
01:11:20,578 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2410ms</msg>
<status status="PASS" endtime="20160128 01:11:20.586" starttime="20160128 01:11:16.315"></status>
</kw>
<msg timestamp="20160128 01:11:20.589" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:11:20.589" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:11:20.588" starttime="20160128 01:11:16.313"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:11:20.602" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:11:20.602" starttime="20160128 01:11:20.600"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.605" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:11:20.605" starttime="20160128 01:11:20.603"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.608" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:11:20.607" starttime="20160128 01:11:20.606"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.613" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:11:20.617" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:11:20.618" starttime="20160128 01:11:20.610"></status>
</kw>
<msg timestamp="20160128 01:11:20.619" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:11:20.619" level="INFO">${return_log_entry} = 2016-01-28 01:11:20,577 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:20.618" starttime="20160128 01:11:20.609"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.627" starttime="20160128 01:11:20.625"></status>
</kw>
<msg timestamp="20160128 01:11:20.628" level="INFO">${return_log_entry} = 2016-01-28 01:11:20,577 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:20.627" starttime="20160128 01:11:20.620"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.634" starttime="20160128 01:11:20.633"></status>
</kw>
<msg timestamp="20160128 01:11:20.635" level="INFO">${return_log_entry} = 2016-01-28 01:11:20,577 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:20.635" starttime="20160128 01:11:20.629"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.642" starttime="20160128 01:11:20.640"></status>
</kw>
<msg timestamp="20160128 01:11:20.643" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:20.643" starttime="20160128 01:11:20.636"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.652" starttime="20160128 01:11:20.651"></status>
</kw>
<msg timestamp="20160128 01:11:20.653" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:20.653" starttime="20160128 01:11:20.644"></status>
</kw>
<msg timestamp="20160128 01:11:20.655" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:20.654" starttime="20160128 01:11:20.592"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.664" starttime="20160128 01:11:20.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.666" starttime="20160128 01:11:20.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.668" starttime="20160128 01:11:20.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:11:20.679" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:11:20.680" starttime="20160128 01:11:20.674"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.680" starttime="20160128 01:11:20.673"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.681" starttime="20160128 01:11:20.669"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.681" starttime="20160128 01:11:20.656"></status>
</kw>
<msg timestamp="20160128 01:11:20.683" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:11:20.682" starttime="20160128 01:11:16.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:11:20.685" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:11:20.686" starttime="20160128 01:11:20.684"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Prepaid (PrP) Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:20.687" level="INFO">Test Prepaid (PrP) Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:11:20.688" starttime="20160128 01:11:20.686"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.689" starttime="20160128 01:11:16.162"></status>
</kw>
<kw type="kw" name="Create Postpaid Subscriber">
<doc>Test will create two postpaid subscribers that will be used in tests below. Subscriber will be created with postpaid tariff plan</doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160128 01:11:20.696" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160128 01:11:20.695" starttime="20160128 01:11:20.694"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS PP IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}</arg>
<arg>POSTPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${POSTPAID TARIFF PLAN ID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.705" level="INFO">msg=crce_host=10.105.125.159</msg>
<status status="PASS" endtime="20160128 01:11:20.706" starttime="20160128 01:11:20.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.708" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:11:20.708" starttime="20160128 01:11:20.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.710" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:11:20.710" starttime="20160128 01:11:20.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.712" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:11:20.712" starttime="20160128 01:11:20.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.714" level="INFO">msg=imsiRangeStart=232201667725500</msg>
<status status="PASS" endtime="20160128 01:11:20.714" starttime="20160128 01:11:20.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.716" level="INFO">msg=msisdnRangeStart=43667725500</msg>
<status status="PASS" endtime="20160128 01:11:20.717" starttime="20160128 01:11:20.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.718" level="INFO">msg=type=POSTPAID</msg>
<status status="PASS" endtime="20160128 01:11:20.719" starttime="20160128 01:11:20.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.720" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:11:20.721" starttime="20160128 01:11:20.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.723" level="INFO">msg=tariffId=101005</msg>
<status status="PASS" endtime="20160128 01:11:20.723" starttime="20160128 01:11:20.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.725" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160128 01:11:20.725" starttime="20160128 01:11:20.724"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.736" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:20.737" starttime="20160128 01:11:20.734"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.738" starttime="20160128 01:11:20.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.742" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:20.743" starttime="20160128 01:11:20.740"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.743" starttime="20160128 01:11:20.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.748" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:11:20.749" starttime="20160128 01:11:20.746"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.749" starttime="20160128 01:11:20.744"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:20.750" starttime="20160128 01:11:20.727"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:11:20.753" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:11:20.753" starttime="20160128 01:11:20.751"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.756" starttime="20160128 01:11:20.754"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.758" starttime="20160128 01:11:20.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.761" starttime="20160128 01:11:20.759"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.763" starttime="20160128 01:11:20.761"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.765" starttime="20160128 01:11:20.763"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.767" starttime="20160128 01:11:20.765"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.769" starttime="20160128 01:11:20.768"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.772" starttime="20160128 01:11:20.770"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.775" starttime="20160128 01:11:20.773"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.777" starttime="20160128 01:11:20.776"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.780" starttime="20160128 01:11:20.778"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:20.782" starttime="20160128 01:11:20.780"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:11:20.785" level="INFO">Running with the following project properties set: [u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725900', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725900', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.125.159', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=232201667725500', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=43667725500', u'HighLevelOps.createTestSubscribers.input.type=POSTPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101005', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160128 01:11:22.278" level="INFO">01:11:22,275 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:22.280" starttime="20160128 01:11:20.784"></status>
</kw>
<msg timestamp="20160128 01:11:22.283" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:11:22.284" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:11:22.282" starttime="20160128 01:11:20.783"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:11:22.297" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:11:22.296" starttime="20160128 01:11:22.293"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:11:22.302" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:11:22.301" starttime="20160128 01:11:22.299"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:11:22.306" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:11:22.305" starttime="20160128 01:11:22.303"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:11:22.313" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:11:22.314" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:11:22.315" starttime="20160128 01:11:22.310"></status>
</kw>
<msg timestamp="20160128 01:11:22.317" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:11:22.318" level="INFO">${return_log_entry} = 2016-01-28 01:11:22,275 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:22.316" starttime="20160128 01:11:22.307"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.327" starttime="20160128 01:11:22.326"></status>
</kw>
<msg timestamp="20160128 01:11:22.328" level="INFO">${return_log_entry} = 2016-01-28 01:11:22,275 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:22.328" starttime="20160128 01:11:22.319"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.333" starttime="20160128 01:11:22.332"></status>
</kw>
<msg timestamp="20160128 01:11:22.334" level="INFO">${return_log_entry} = 2016-01-28 01:11:22,275 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:11:22.333" starttime="20160128 01:11:22.329"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.339" starttime="20160128 01:11:22.338"></status>
</kw>
<msg timestamp="20160128 01:11:22.340" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:22.339" starttime="20160128 01:11:22.334"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.346" starttime="20160128 01:11:22.345"></status>
</kw>
<msg timestamp="20160128 01:11:22.347" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:22.347" starttime="20160128 01:11:22.340"></status>
</kw>
<msg timestamp="20160128 01:11:22.348" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:11:22.348" starttime="20160128 01:11:22.286"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.354" starttime="20160128 01:11:22.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.355" starttime="20160128 01:11:22.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:22.357" starttime="20160128 01:11:22.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:11:22.363" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:11:22.363" starttime="20160128 01:11:22.361"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:22.364" starttime="20160128 01:11:22.360"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:22.364" starttime="20160128 01:11:22.357"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:22.365" starttime="20160128 01:11:22.349"></status>
</kw>
<msg timestamp="20160128 01:11:22.366" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:11:22.366" starttime="20160128 01:11:20.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:11:22.368" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:11:22.369" starttime="20160128 01:11:22.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Postpaid (PoP) Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:22.370" level="INFO">Test Postpaid (PoP) Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:11:22.370" starttime="20160128 01:11:22.369"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:22.371" starttime="20160128 01:11:20.690"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:22.372" starttime="20160128 01:11:14.793"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test PrP USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:22.387" level="INFO">/home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770</msg>
<status status="PASS" endtime="20160128 01:11:22.387" starttime="20160128 01:11:22.379"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:22.976" level="INFO">=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:22.979" level="INFO">${output} = =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input...</msg>
<status status="PASS" endtime="20160128 01:11:22.977" starttime="20160128 01:11:22.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:22.981" level="INFO">USSD Start: =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:22.981" starttime="20160128 01:11:22.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:24.984" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:24.985" starttime="20160128 01:11:22.982"></status>
</kw>
<msg timestamp="20160128 01:11:24.986" level="INFO">${output} = =====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input...</msg>
<status status="PASS" endtime="20160128 01:11:24.986" starttime="20160128 01:11:22.377"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Waehlen Sie:</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:24.988" starttime="20160128 01:11:24.987"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:24.995" starttime="20160128 01:11:24.993"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:24.996" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:25.039" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:25.041" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:25.040" starttime="20160128 01:11:24.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.042" starttime="20160128 01:11:25.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.044" starttime="20160128 01:11:25.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.045" starttime="20160128 01:11:25.044"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:25.047" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:25.122" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:25.124" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:25.125" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:25.123" starttime="20160128 01:11:25.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.136" starttime="20160128 01:11:25.126"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.139" starttime="20160128 01:11:25.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.142" starttime="20160128 01:11:25.140"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.145" starttime="20160128 01:11:25.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.149" starttime="20160128 01:11:25.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.152" starttime="20160128 01:11:25.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.156" starttime="20160128 01:11:25.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.159" starttime="20160128 01:11:25.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.162" starttime="20160128 01:11:25.160"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.166" starttime="20160128 01:11:25.164"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:25.169" starttime="20160128 01:11:25.167"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:25.170" starttime="20160128 01:11:24.990"></status>
</kw>
<doc>Simple test that checks if USSD menu can be started for prepaid subscriber
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:25.172" starttime="20160128 01:11:22.373"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test PrP USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:25.193" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:25.193" starttime="20160128 01:11:25.188"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:25.777" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:25.778" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:25.778" starttime="20160128 01:11:25.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:25.780" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:25.781" starttime="20160128 01:11:25.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:27.782" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:27.783" starttime="20160128 01:11:25.781"></status>
</kw>
<msg timestamp="20160128 01:11:27.785" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:27.785" starttime="20160128 01:11:25.183"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:27.787" level="INFO">Pressing 2 for checking balance</msg>
<status status="PASS" endtime="20160128 01:11:27.787" starttime="20160128 01:11:27.786"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:27.792" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:27.792" starttime="20160128 01:11:27.788"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:27.853" level="INFO">=====================
Ihre Rechnung: 10,00 Euro laeuft am 28.03.2016 02:11 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:27.854" level="INFO">${output} = =====================
Ihre Rechnung: 10,00 Euro laeuft am 28.03.2016 02:11 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
===================...</msg>
<status status="PASS" endtime="20160128 01:11:27.854" starttime="20160128 01:11:27.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 10,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.856" starttime="20160128 01:11:27.855"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.861" starttime="20160128 01:11:27.860"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:27.862" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:27.900" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:27.901" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:27.901" starttime="20160128 01:11:27.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.903" starttime="20160128 01:11:27.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.904" starttime="20160128 01:11:27.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.906" starttime="20160128 01:11:27.905"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:27.908" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:27.978" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:27.979" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:27.979" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:27.978" starttime="20160128 01:11:27.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.983" starttime="20160128 01:11:27.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.984" starttime="20160128 01:11:27.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.986" starttime="20160128 01:11:27.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.987" starttime="20160128 01:11:27.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.989" starttime="20160128 01:11:27.988"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.990" starttime="20160128 01:11:27.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.992" starttime="20160128 01:11:27.991"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.993" starttime="20160128 01:11:27.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.995" starttime="20160128 01:11:27.994"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.996" starttime="20160128 01:11:27.995"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:27.998" starttime="20160128 01:11:27.997"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:27.998" starttime="20160128 01:11:27.857"></status>
</kw>
<doc>Basic test for balance check. Expected value is set with the default test automation subscriber
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:27.999" starttime="20160128 01:11:25.175"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test PoP USSD Check Balance">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:28.009" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:28.009" starttime="20160128 01:11:28.007"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:28.433" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:28.435" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:28.435" starttime="20160128 01:11:28.010"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:28.437" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:28.438" starttime="20160128 01:11:28.436"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:30.439" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:30.440" starttime="20160128 01:11:28.438"></status>
</kw>
<msg timestamp="20160128 01:11:30.442" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:30.441" starttime="20160128 01:11:28.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:30.444" level="INFO">Pressing 1 for checking balance</msg>
<status status="PASS" endtime="20160128 01:11:30.444" starttime="20160128 01:11:30.443"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:30.449" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:30.449" starttime="20160128 01:11:30.445"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:30.542" level="INFO">=====================
Ihr anfallendes Entgelt im aktuellen Zeitraum beträgt €0,00, exkl. Monatsentgelt, exkl. MwSt..
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurück
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:30.543" level="INFO">${output} = =====================
Ihr anfallendes Entgelt im aktuellen Zeitraum beträgt €0,00, exkl. Monatsentgelt, exkl. MwSt..
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zur...</msg>
<status status="PASS" endtime="20160128 01:11:30.543" starttime="20160128 01:11:30.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for checking monetary debt</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:30.545" level="INFO">Pressing 1 for checking monetary debt</msg>
<status status="PASS" endtime="20160128 01:11:30.545" starttime="20160128 01:11:30.544"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:30.549" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:30.550" starttime="20160128 01:11:30.546"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:30.613" level="INFO">=====================
Es tut uns leid, Sie haben keine Euro uebrig.
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:30.614" level="INFO">${output} = =====================
Es tut uns leid, Sie haben keine Euro uebrig.
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:30.613" starttime="20160128 01:11:30.550"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Es tut uns leid, Sie haben keine Euro uebrig</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.616" starttime="20160128 01:11:30.615"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.621" starttime="20160128 01:11:30.620"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:30.623" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:30.663" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:30.664" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:30.664" starttime="20160128 01:11:30.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.665" starttime="20160128 01:11:30.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.667" starttime="20160128 01:11:30.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.668" starttime="20160128 01:11:30.667"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:30.670" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:30.742" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:30.743" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:30.743" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:30.742" starttime="20160128 01:11:30.669"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.747" starttime="20160128 01:11:30.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.748" starttime="20160128 01:11:30.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.750" starttime="20160128 01:11:30.749"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.751" starttime="20160128 01:11:30.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.753" starttime="20160128 01:11:30.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.754" starttime="20160128 01:11:30.753"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.756" starttime="20160128 01:11:30.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.758" starttime="20160128 01:11:30.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.759" starttime="20160128 01:11:30.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.760" starttime="20160128 01:11:30.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:30.762" starttime="20160128 01:11:30.761"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:30.762" starttime="20160128 01:11:30.617"></status>
</kw>
<doc>Basic test for postpaid consumption check. After creation subscriber's cumsumption is 0
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:30.763" starttime="20160128 01:11:28.000"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test PrP USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:30.773" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:30.773" starttime="20160128 01:11:30.771"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:31.199" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:31.201" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:31.200" starttime="20160128 01:11:30.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:31.203" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:31.204" starttime="20160128 01:11:31.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:33.205" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:33.206" starttime="20160128 01:11:31.204"></status>
</kw>
<msg timestamp="20160128 01:11:33.208" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:33.207" starttime="20160128 01:11:30.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:33.209" level="INFO">Pressing 3 for subscription menu</msg>
<status status="PASS" endtime="20160128 01:11:33.210" starttime="20160128 01:11:33.208"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160128 01:11:33.214" level="INFO">3</msg>
<status status="PASS" endtime="20160128 01:11:33.214" starttime="20160128 01:11:33.210"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:33.228" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:33.229" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160128 01:11:33.229" starttime="20160128 01:11:33.215"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:33.231" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160128 01:11:33.231" starttime="20160128 01:11:33.230"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:33.234" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:33.235" starttime="20160128 01:11:33.232"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:33.322" level="INFO">=====================
Sie sind im Grundtarif. 
0 Anfangsmenu
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:33.323" level="INFO">${output} = =====================
Sie sind im Grundtarif. 
0 Anfangsmenu
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:33.322" starttime="20160128 01:11:33.235"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sie sind im Grundtarif.</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.325" starttime="20160128 01:11:33.323"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.330" starttime="20160128 01:11:33.329"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:33.331" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:33.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:33.371" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:33.371" starttime="20160128 01:11:33.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.372" starttime="20160128 01:11:33.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.374" starttime="20160128 01:11:33.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.375" starttime="20160128 01:11:33.374"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:33.377" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:33.449" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:33.450" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:33.450" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:33.449" starttime="20160128 01:11:33.376"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.454" starttime="20160128 01:11:33.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.455" starttime="20160128 01:11:33.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.457" starttime="20160128 01:11:33.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.458" starttime="20160128 01:11:33.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.460" starttime="20160128 01:11:33.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.461" starttime="20160128 01:11:33.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.463" starttime="20160128 01:11:33.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.464" starttime="20160128 01:11:33.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.466" starttime="20160128 01:11:33.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.467" starttime="20160128 01:11:33.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:33.469" starttime="20160128 01:11:33.468"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:33.469" starttime="20160128 01:11:33.325"></status>
</kw>
<doc>Menu entry for checking the subscriptions, if any subscription is active for subscriber it will be listed here. By default subscribers
have default (basic) tariff active</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:33.470" starttime="20160128 01:11:30.764"></status>
</test>
<test id="s1-s2-s1-s1-t5" name="Test PoP USSD Subscription Check">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:33.479" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:33.480" starttime="20160128 01:11:33.477"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:33.997" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:33.999" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:33.998" starttime="20160128 01:11:33.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:34.001" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:34.002" starttime="20160128 01:11:34.000"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:36.004" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:36.005" starttime="20160128 01:11:34.002"></status>
</kw>
<msg timestamp="20160128 01:11:36.006" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:36.006" starttime="20160128 01:11:33.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:36.008" level="INFO">Pressing 2 for subscription menu</msg>
<status status="PASS" endtime="20160128 01:11:36.009" starttime="20160128 01:11:36.007"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:36.013" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:36.013" starttime="20160128 01:11:36.009"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:36.027" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:36.028" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160128 01:11:36.028" starttime="20160128 01:11:36.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:36.030" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160128 01:11:36.030" starttime="20160128 01:11:36.029"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:36.034" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:36.034" starttime="20160128 01:11:36.031"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:36.157" level="INFO">=====================
Ihr Plan Postpaid tarifni plan 1 wird am 01.02.2016 00:00 erneuert und wird 24,92 Euro kosten. 
Auswahl:
1. Guthabenstatus
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:36.159" level="INFO">${output} = =====================
Ihr Plan Postpaid tarifni plan 1 wird am 01.02.2016 00:00 erneuert und wird 24,92 Euro kosten. 
Auswahl:
1. Guthabenstatus
* Zurueck
# Ausgang 
=====================
U...</msg>
<status status="PASS" endtime="20160128 01:11:36.158" starttime="20160128 01:11:36.035"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihr Plan Postpaid tarifni plan 1 wird am</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.160" starttime="20160128 01:11:36.159"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.166" starttime="20160128 01:11:36.165"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:36.167" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:36.209" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:36.209" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:36.209" starttime="20160128 01:11:36.166"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.211" starttime="20160128 01:11:36.210"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.212" starttime="20160128 01:11:36.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.214" starttime="20160128 01:11:36.213"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:36.216" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:36.253" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:36.254" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:36.254" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:36.253" starttime="20160128 01:11:36.214"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.258" starttime="20160128 01:11:36.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.260" starttime="20160128 01:11:36.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.261" starttime="20160128 01:11:36.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.262" starttime="20160128 01:11:36.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.264" starttime="20160128 01:11:36.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.265" starttime="20160128 01:11:36.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.267" starttime="20160128 01:11:36.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.268" starttime="20160128 01:11:36.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.270" starttime="20160128 01:11:36.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.271" starttime="20160128 01:11:36.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:36.273" starttime="20160128 01:11:36.272"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:36.273" starttime="20160128 01:11:36.162"></status>
</kw>
<doc>Menu entry for checking the subscriptions (tariff, plan), subscriber's active subscription will be listed here</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:36.274" starttime="20160128 01:11:33.471"></status>
</test>
<test id="s1-s2-s1-s1-t6" name="Test PrP Buying">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:36.283" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:36.284" starttime="20160128 01:11:36.282"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:36.827" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:36.828" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:36.828" starttime="20160128 01:11:36.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:36.830" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:36.830" starttime="20160128 01:11:36.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:38.833" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:38.834" starttime="20160128 01:11:36.831"></status>
</kw>
<msg timestamp="20160128 01:11:38.836" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:38.835" starttime="20160128 01:11:36.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:38.837" level="INFO">Pressing 3 for subscription menu</msg>
<status status="PASS" endtime="20160128 01:11:38.838" starttime="20160128 01:11:38.836"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160128 01:11:38.842" level="INFO">3</msg>
<status status="PASS" endtime="20160128 01:11:38.842" starttime="20160128 01:11:38.838"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:38.856" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:38.856" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160128 01:11:38.856" starttime="20160128 01:11:38.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for options management</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:38.858" level="INFO">Pressing 2 for options management</msg>
<status status="PASS" endtime="20160128 01:11:38.859" starttime="20160128 01:11:38.857"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:38.863" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:38.864" starttime="20160128 01:11:38.859"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.040" level="INFO">=====================
Auswahl:
1. Plan aktivieren
2. Option aktivieren
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.042" level="INFO">${output} = =====================
Auswahl:
1. Plan aktivieren
2. Option aktivieren
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:39.041" starttime="20160128 01:11:38.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying the option</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:39.044" level="INFO">Pressing 2 for buying the option</msg>
<status status="PASS" endtime="20160128 01:11:39.044" starttime="20160128 01:11:39.043"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:39.048" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:39.049" starttime="20160128 01:11:39.045"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.220" level="INFO">=====================
Auswahl:
1. Kauf der einmaligen Option
2. Kauf der erneuerbaren Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.221" level="INFO">${output} = =====================
Auswahl:
1. Kauf der einmaligen Option
2. Kauf der erneuerbaren Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:39.221" starttime="20160128 01:11:39.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for one-off bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:39.223" level="INFO">Pressing 1 for one-off bundle</msg>
<status status="PASS" endtime="20160128 01:11:39.223" starttime="20160128 01:11:39.222"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:39.226" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:39.227" starttime="20160128 01:11:39.224"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.244" level="INFO">=====================
Auswahl:
1. Data Bundles
2. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.244" level="INFO">${output} = =====================
Auswahl:
1. Data Bundles
2. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:39.244" starttime="20160128 01:11:39.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for available bundles list</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:39.246" level="INFO">Pressing 1 for available bundles list</msg>
<status status="PASS" endtime="20160128 01:11:39.246" starttime="20160128 01:11:39.245"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:39.249" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:39.250" starttime="20160128 01:11:39.247"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.322" level="INFO">=====================
Optionswahl:
1. Super Net 5,00 Euro
2. DataBundle100MB 1,00 Euro
3. DataUnlimited 1,00 Euro
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.323" level="INFO">${output} = =====================
Optionswahl:
1. Super Net 5,00 Euro
2. DataBundle100MB 1,00 Euro
3. DataUnlimited 1,00 Euro
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:39.323" starttime="20160128 01:11:39.250"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for selecting the bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:39.325" level="INFO">Pressing 1 for selecting the bundle</msg>
<status status="PASS" endtime="20160128 01:11:39.325" starttime="20160128 01:11:39.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:39.329" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:39.330" starttime="20160128 01:11:39.326"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.410" level="INFO">=====================
Sie moechten Super Net fuer den Preis von 5,00 Euro und mit einer Gueltigkeitsfrist von 15 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.412" level="INFO">${output} = =====================
Sie moechten Super Net fuer den Preis von 5,00 Euro und mit einer Gueltigkeitsfrist von 15 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
==============...</msg>
<status status="PASS" endtime="20160128 01:11:39.411" starttime="20160128 01:11:39.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sie moechten Super Net fuer den Preis von 5,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.413" starttime="20160128 01:11:39.412"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 to select</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:39.415" level="INFO">Pressing 1 to select</msg>
<status status="PASS" endtime="20160128 01:11:39.415" starttime="20160128 01:11:39.414"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:39.420" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:39.420" starttime="20160128 01:11:39.416"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:39.564" level="INFO">=====================
Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:39.565" level="INFO">${output} = =====================
Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:39.565" starttime="20160128 01:11:39.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Super Net wurde erfolgreich fuer den Preis von 5,00 Euro gekauft</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.567" starttime="20160128 01:11:39.566"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.573" starttime="20160128 01:11:39.571"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:39.574" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:39.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:39.631" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:39.630" starttime="20160128 01:11:39.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.632" starttime="20160128 01:11:39.631"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.633" starttime="20160128 01:11:39.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.635" starttime="20160128 01:11:39.634"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:39.637" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:39.714" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:39.715" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:39.715" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:39.715" starttime="20160128 01:11:39.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.719" starttime="20160128 01:11:39.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.721" starttime="20160128 01:11:39.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.722" starttime="20160128 01:11:39.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.723" starttime="20160128 01:11:39.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.725" starttime="20160128 01:11:39.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.726" starttime="20160128 01:11:39.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.728" starttime="20160128 01:11:39.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.729" starttime="20160128 01:11:39.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.731" starttime="20160128 01:11:39.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.732" starttime="20160128 01:11:39.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:39.733" starttime="20160128 01:11:39.732"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:39.734" starttime="20160128 01:11:39.568"></status>
</kw>
<doc>Activating bundle from the USSD menu. Precondition is that there is enaugh balance in account. Subscriber will buy a bundle for 5 EUR and in
balance there is 10 EUR. So activation should be OK</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:39.734" starttime="20160128 01:11:36.275"></status>
</test>
<test id="s1-s2-s1-s1-t7" name="Test PoP Buying">
<kw type="kw" name="${output} = USSD Postpaid Start">
<doc>Keyword for starting the postpaid subscriber's USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS PP MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:39.743" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:39.744" starttime="20160128 01:11:39.742"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:40.283" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:40.285" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:40.284" starttime="20160128 01:11:39.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Postpaid Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:40.287" level="INFO">USSD Postpaid Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarife
3 Weitere Services
4 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:40.287" starttime="20160128 01:11:40.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:42.290" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:42.291" starttime="20160128 01:11:40.288"></status>
</kw>
<msg timestamp="20160128 01:11:42.295" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 500 100 43667770
=====================
Waehlen Sie:
1 Guthaben abfragen
2 Informationen ueber Prepaidtarif...</msg>
<status status="PASS" endtime="20160128 01:11:42.294" starttime="20160128 01:11:39.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for subscription menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.298" level="INFO">Pressing 2 for subscription menu</msg>
<status status="PASS" endtime="20160128 01:11:42.299" starttime="20160128 01:11:42.296"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:42.304" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:42.304" starttime="20160128 01:11:42.300"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.322" level="INFO">=====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.323" level="INFO">${output} = =====================
Waehlen Sie:
1. Abonnentenstatus ueberpruefen
2. Abonnements verwalten
3. Angebotsliste
Druecken Sie * um einen Schritt zurueck zu gehen oder # um zu beenden. 
============...</msg>
<status status="PASS" endtime="20160128 01:11:42.323" starttime="20160128 01:11:42.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for offers list</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.326" level="INFO">Pressing 3 for offers list</msg>
<status status="PASS" endtime="20160128 01:11:42.327" starttime="20160128 01:11:42.324"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160128 01:11:42.330" level="INFO">3</msg>
<status status="PASS" endtime="20160128 01:11:42.331" starttime="20160128 01:11:42.327"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.423" level="INFO">=====================
Auswahl: 
1. Plaene
2. Optionen
 
* Anfangsmenue
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.424" level="INFO">${output} = =====================
Auswahl: 
1. Plaene
2. Optionen
 
* Anfangsmenue
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:42.424" starttime="20160128 01:11:42.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying the option</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.426" level="INFO">Pressing 2 for buying the option</msg>
<status status="PASS" endtime="20160128 01:11:42.427" starttime="20160128 01:11:42.425"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:42.430" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:42.431" starttime="20160128 01:11:42.427"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.584" level="INFO">=====================
Auswahl: 
1. Data Bundles
2. Data Bundles
3. Roaming Bundles
4. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.585" level="INFO">${output} = =====================
Auswahl: 
1. Data Bundles
2. Data Bundles
3. Roaming Bundles
4. Test Bundles

* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:42.585" starttime="20160128 01:11:42.431"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for one-off bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.587" level="INFO">Pressing 1 for one-off bundle</msg>
<status status="PASS" endtime="20160128 01:11:42.587" starttime="20160128 01:11:42.586"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:42.590" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:42.591" starttime="20160128 01:11:42.588"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.648" level="INFO">=====================
Fuer die Informationen ueber die Optionen waehlen Sie:
1. Tarifni dodatak 1 4,17 Euro
2. testbundle 2,00 Euro
3. 2nd periodic bundle 3,00 Euro
4. DataBundle100MB 1,00 Euro

0 Naechste Seite
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.649" level="INFO">${output} = =====================
Fuer die Informationen ueber die Optionen waehlen Sie:
1. Tarifni dodatak 1 4,17 Euro
2. testbundle 2,00 Euro
3. 2nd periodic bundle 3,00 Euro
4. DataBundle100MB 1,00 Euro...</msg>
<status status="PASS" endtime="20160128 01:11:42.649" starttime="20160128 01:11:42.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for selecting the bundle</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.651" level="INFO">Pressing 1 for selecting the bundle</msg>
<status status="PASS" endtime="20160128 01:11:42.651" starttime="20160128 01:11:42.650"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:42.654" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:42.655" starttime="20160128 01:11:42.652"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.684" level="INFO">=====================
Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro. Die Option enthaelt
0,98 MB Data
Eingeben
1. Tarifni dodatak 1 kaufen
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.685" level="INFO">${output} = =====================
Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro. Die Option enthaelt
0,98 MB Data
Eingeben
1. Tarifni dodatak 1 kaufen
* Zurueck
# Ausgang 
===========...</msg>
<status status="PASS" endtime="20160128 01:11:42.684" starttime="20160128 01:11:42.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for info</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.686" level="INFO">Pressing 1 for info</msg>
<status status="PASS" endtime="20160128 01:11:42.687" starttime="20160128 01:11:42.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tarifni dodatak 1 ist gueltig bis 30 Tage und kostet 4,17 Euro</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.688" starttime="20160128 01:11:42.687"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:42.691" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:42.692" starttime="20160128 01:11:42.689"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.765" level="INFO">=====================
Sie moechten Tarifni dodatak 1 fuer den Preis von 4,17 Euro und mit einer Gueltigkeitsfrist von 30 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.766" level="INFO">${output} = =====================
Sie moechten Tarifni dodatak 1 fuer den Preis von 4,17 Euro und mit einer Gueltigkeitsfrist von 30 DAYS(n) kaufen. 
Auswahl:
1. Bestaetigung
* Zurueck
# Ausgang 
======...</msg>
<status status="PASS" endtime="20160128 01:11:42.765" starttime="20160128 01:11:42.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 to select</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:42.767" level="INFO">Pressing 1 to select</msg>
<status status="PASS" endtime="20160128 01:11:42.768" starttime="20160128 01:11:42.766"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:42.771" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:42.772" starttime="20160128 01:11:42.768"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:42.902" level="INFO">=====================
Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:42.903" level="INFO">${output} = =====================
Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.
Auswahl:
1. Weitere Option
0 Anfangsmenu
* Zurueck
# Ausgang 
=====================
User in...</msg>
<status status="PASS" endtime="20160128 01:11:42.902" starttime="20160128 01:11:42.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Tarifni dodatak 1 wurde erfolgreich fuer den Preis von 4,17 Euro gekauft.</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.904" starttime="20160128 01:11:42.903"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.910" starttime="20160128 01:11:42.909"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:42.911" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:42.953" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:42.954" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:42.953" starttime="20160128 01:11:42.910"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.955" starttime="20160128 01:11:42.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.956" starttime="20160128 01:11:42.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:42.958" starttime="20160128 01:11:42.957"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:42.959" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:43.031" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:43.032" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:43.032" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:43.032" starttime="20160128 01:11:42.958"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.037" starttime="20160128 01:11:43.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.038" starttime="20160128 01:11:43.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.040" starttime="20160128 01:11:43.039"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.041" starttime="20160128 01:11:43.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.042" starttime="20160128 01:11:43.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.044" starttime="20160128 01:11:43.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.045" starttime="20160128 01:11:43.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.046" starttime="20160128 01:11:43.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.048" starttime="20160128 01:11:43.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.049" starttime="20160128 01:11:43.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:43.050" starttime="20160128 01:11:43.050"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:43.051" starttime="20160128 01:11:42.905"></status>
</kw>
<doc>Activating bundle from the USSD menu.</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:43.052" starttime="20160128 01:11:39.736"></status>
</test>
<test id="s1-s2-s1-s1-t8" name="Test PrP What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:43.064" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:43.064" starttime="20160128 01:11:43.059"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:43.598" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:43.599" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:43.599" starttime="20160128 01:11:43.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:43.601" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:43.601" starttime="20160128 01:11:43.600"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:45.603" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:45.604" starttime="20160128 01:11:43.602"></status>
</kw>
<msg timestamp="20160128 01:11:45.606" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:45.605" starttime="20160128 01:11:43.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for other services</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:45.607" level="INFO">Pressing 4 for other services</msg>
<status status="PASS" endtime="20160128 01:11:45.608" starttime="20160128 01:11:45.606"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160128 01:11:45.612" level="INFO">4</msg>
<status status="PASS" endtime="20160128 01:11:45.612" starttime="20160128 01:11:45.608"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:45.626" level="INFO">=====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:45.627" level="INFO">${output} = =====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:45.627" starttime="20160128 01:11:45.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:45.628" level="INFO">Pressing 2 for what is my number service</msg>
<status status="PASS" endtime="20160128 01:11:45.629" starttime="20160128 01:11:45.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:11:45.634" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:11:45.634" starttime="20160128 01:11:45.629"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:45.659" level="INFO">=====================
Ihre Nummer lautet:
43667725900
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:45.659" level="INFO">${output} = =====================
Ihre Nummer lautet:
43667725900
* Zurueck
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:45.659" starttime="20160128 01:11:45.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.661" starttime="20160128 01:11:45.660"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.666" starttime="20160128 01:11:45.665"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:45.667" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:45.707" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:45.708" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:45.707" starttime="20160128 01:11:45.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.709" starttime="20160128 01:11:45.708"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.710" starttime="20160128 01:11:45.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.712" starttime="20160128 01:11:45.711"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:45.713" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:45.789" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:45.790" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:45.790" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:45.789" starttime="20160128 01:11:45.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.793" starttime="20160128 01:11:45.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.795" starttime="20160128 01:11:45.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.796" starttime="20160128 01:11:45.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.797" starttime="20160128 01:11:45.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.799" starttime="20160128 01:11:45.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.800" starttime="20160128 01:11:45.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.801" starttime="20160128 01:11:45.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.803" starttime="20160128 01:11:45.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.804" starttime="20160128 01:11:45.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.805" starttime="20160128 01:11:45.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:45.807" starttime="20160128 01:11:45.806"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:45.807" starttime="20160128 01:11:45.662"></status>
</kw>
<doc>Default service offered in USSD menu under "other services". Menu returns subscriber's MSISDN
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:45.808" starttime="20160128 01:11:43.053"></status>
</test>
<test id="s1-s2-s1-s1-t9" name="Test PrP Call Me Back">
<kw type="kw" name="${output} = USSD Start">
<doc>Keyword for starting the USSD menu and getting to the initial point. Returns the complete menu for evaluation</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:45.817" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:45.840" starttime="20160128 01:11:45.815"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:46.332" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:46.334" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:46.333" starttime="20160128 01:11:45.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:11:46.336" level="INFO">USSD Start: [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Informationen ueber Prepaidtarife
4 Weitere Services
5 Sprache aendern
# Ausgang 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:46.336" starttime="20160128 01:11:46.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:11:48.338" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:11:48.339" starttime="20160128 01:11:46.337"></status>
</kw>
<msg timestamp="20160128 01:11:48.341" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 900 100 43667770
=====================
Waehlen Sie:
1 Guthaben aufladen
2 Guthaben abfragen
3 Information...</msg>
<status status="PASS" endtime="20160128 01:11:48.340" starttime="20160128 01:11:45.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for other services</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:48.342" level="INFO">Pressing 4 for other services</msg>
<status status="PASS" endtime="20160128 01:11:48.343" starttime="20160128 01:11:48.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160128 01:11:48.347" level="INFO">4</msg>
<status status="PASS" endtime="20160128 01:11:48.347" starttime="20160128 01:11:48.343"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:48.362" level="INFO">=====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:48.363" level="INFO">${output} = =====================
Waehlen Sie:
1. Ruf mich zurueck
2. Eigene Rufnummer anzeigen
Druecken Sie *, um einen Schritt zurueck zu gehen oder #, um zu beenden. 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:48.363" starttime="20160128 01:11:48.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for call me back service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:48.364" level="INFO">Pressing 1 for call me back service</msg>
<status status="PASS" endtime="20160128 01:11:48.365" starttime="20160128 01:11:48.364"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:11:48.368" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:11:48.369" starttime="20160128 01:11:48.365"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:48.417" level="INFO">=====================
Bitte geben Sie die Rufnummer an, von der Sie angerufen werden moechten.  
Verwenden Sie das Format
06671234567 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:48.418" level="INFO">${output} = =====================
Bitte geben Sie die Rufnummer an, von der Sie angerufen werden moechten.  
Verwenden Sie das Format
06671234567 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:48.418" starttime="20160128 01:11:48.369"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering the mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:48.420" level="INFO">Entering the mobile number</msg>
<status status="PASS" endtime="20160128 01:11:48.420" starttime="20160128 01:11:48.419"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:11:48.425" level="INFO">${recipient} = 43667725901</msg>
<status status="PASS" endtime="20160128 01:11:48.425" starttime="20160128 01:11:48.421"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160128 01:11:48.428" level="INFO">43667725901</msg>
<status status="PASS" endtime="20160128 01:11:48.429" starttime="20160128 01:11:48.425"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:48.495" level="INFO">=====================
Eine SMS wurde an die Nummer 667725901 verschickt.
Sie nutzten 1 von 3 Moglichkeiten pro Tag. 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:48.496" level="INFO">${output} = =====================
Eine SMS wurde an die Nummer 667725901 verschickt.
Sie nutzten 1 von 3 Moglichkeiten pro Tag. 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:11:48.496" starttime="20160128 01:11:48.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Eine SMS wurde an die Nummer</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.498" starttime="20160128 01:11:48.497"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.503" starttime="20160128 01:11:48.502"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:48.504" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:48.543" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:48.544" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:48.543" starttime="20160128 01:11:48.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.545" starttime="20160128 01:11:48.544"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.546" starttime="20160128 01:11:48.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.548" starttime="20160128 01:11:48.547"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:48.549" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:48.623" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:48.623" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:48.624" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:48.623" starttime="20160128 01:11:48.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.627" starttime="20160128 01:11:48.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.629" starttime="20160128 01:11:48.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.630" starttime="20160128 01:11:48.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.631" starttime="20160128 01:11:48.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.633" starttime="20160128 01:11:48.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.634" starttime="20160128 01:11:48.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.635" starttime="20160128 01:11:48.634"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.637" starttime="20160128 01:11:48.636"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.638" starttime="20160128 01:11:48.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.639" starttime="20160128 01:11:48.638"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:48.641" starttime="20160128 01:11:48.640"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:48.641" starttime="20160128 01:11:48.499"></status>
</kw>
<doc>Default service offered in USSD menu under "other services". Menu offers to send a SMS to MSISDN of subscriber's choice
to return a call</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:48.642" starttime="20160128 01:11:45.809"></status>
</test>
<test id="s1-s2-s1-s1-t10" name="Test PrP Direct Access To Balance Check">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Going to USSD code 102 directly to check the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:48.647" level="INFO">Going to USSD code 102 directly to check the balance</msg>
<status status="PASS" endtime="20160128 01:11:48.648" starttime="20160128 01:11:48.646"></status>
</kw>
<kw type="kw" name="${subs} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:11:48.651" level="INFO">${subs} = 43667725901</msg>
<status status="PASS" endtime="20160128 01:11:48.651" starttime="20160128 01:11:48.648"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${subs} 102 ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:48.654" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:48.655" starttime="20160128 01:11:48.652"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:49.218" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 901 102 43667770
=====================
Ihre Rechnung: 10,00 Euro laeuft am 28.03.2016 02:11 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:49.220" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 901 102 43667770
=====================
Ihre Rechnung: 10,00 Euro laeuft am 28.03.2016 02:11 ab.
Mehr Infor...</msg>
<status status="PASS" endtime="20160128 01:11:49.219" starttime="20160128 01:11:48.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 10,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.222" starttime="20160128 01:11:49.220"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.227" starttime="20160128 01:11:49.226"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:49.228" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:49.269" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:49.270" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:49.270" starttime="20160128 01:11:49.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.271" starttime="20160128 01:11:49.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.273" starttime="20160128 01:11:49.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.274" starttime="20160128 01:11:49.273"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:49.276" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:49.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:49.349" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:49.349" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:49.348" starttime="20160128 01:11:49.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.353" starttime="20160128 01:11:49.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.354" starttime="20160128 01:11:49.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.356" starttime="20160128 01:11:49.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.357" starttime="20160128 01:11:49.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.358" starttime="20160128 01:11:49.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.360" starttime="20160128 01:11:49.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.361" starttime="20160128 01:11:49.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.362" starttime="20160128 01:11:49.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.363" starttime="20160128 01:11:49.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.365" starttime="20160128 01:11:49.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.366" starttime="20160128 01:11:49.365"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:49.366" starttime="20160128 01:11:49.223"></status>
</kw>
<doc>mTel offers USSD code 102 as shortcut for balance check for prepaid subscribers
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:49.367" starttime="20160128 01:11:48.643"></status>
</test>
<test id="s1-s2-s1-s1-t11" name="Test PoP Direct Access To Balance Check">
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Going to USSD code 102 directly to check the balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:49.372" level="INFO">Going to USSD code 102 directly to check the balance</msg>
<status status="PASS" endtime="20160128 01:11:49.373" starttime="20160128 01:11:49.372"></status>
</kw>
<kw type="kw" name="${subs} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS PP MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:11:49.376" level="INFO">${subs} = 43667725501</msg>
<status status="PASS" endtime="20160128 01:11:49.376" starttime="20160128 01:11:49.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${subs} 102 ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:11:49.378" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:11:49.378" starttime="20160128 01:11:49.377"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:11:49.957" level="INFO">[1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 501 102 43667770
=====================
Ihre Rechnung: 0,00 Euro laeuft am 28.01.2026 01:11 ab.
Mehr Informationen:
1. Geldabrechnung
2. Minuten
3. Daten
4. SMS
* Zurueck
# Ausgang 
=====================
User input:</msg>
<msg timestamp="20160128 01:11:49.958" level="INFO">${output} = [1m[qa_automation@ivr-app01.tb25 ~]$[m /home/qa_automation//ussd/USSDtest.py 43667725 501 102 43667770
=====================
Ihre Rechnung: 0,00 Euro laeuft am 28.01.2026 01:11 ab.
Mehr Inform...</msg>
<status status="PASS" endtime="20160128 01:11:49.957" starttime="20160128 01:11:49.379"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Ihre Rechnung: 0,00 Euro</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.959" starttime="20160128 01:11:49.958"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:49.964" starttime="20160128 01:11:49.963"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:11:49.965" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:11:50.004" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:50.005" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:11:50.004" starttime="20160128 01:11:49.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.006" starttime="20160128 01:11:50.006"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.008" starttime="20160128 01:11:50.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.009" starttime="20160128 01:11:50.008"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:11:50.011" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:11:50.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:50.084" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:11:50.084" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:11:50.084" starttime="20160128 01:11:50.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.088" starttime="20160128 01:11:50.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.089" starttime="20160128 01:11:50.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.090" starttime="20160128 01:11:50.090"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.092" starttime="20160128 01:11:50.091"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.093" starttime="20160128 01:11:50.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.094" starttime="20160128 01:11:50.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.096" starttime="20160128 01:11:50.095"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.097" starttime="20160128 01:11:50.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.098" starttime="20160128 01:11:50.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.099" starttime="20160128 01:11:50.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.101" starttime="20160128 01:11:50.100"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:50.101" starttime="20160128 01:11:49.960"></status>
</kw>
<doc>mTel offers USSD code 102 as shortcut for balance check as well as for postpaid subscribers
</doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>MTEL_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:11:50.102" starttime="20160128 01:11:49.368"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.127" starttime="20160128 01:11:50.123"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:50.127" starttime="20160128 01:11:50.120"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked. As USSD self care menus are different from customer to customer - so are these tests. The goal is to make a rough check of the main (and not all) functions - menu items.</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:11:50.128" starttime="20160128 01:11:14.577"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:11:50.172" starttime="20160128 01:11:14.550"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:11:50.214" starttime="20160128 01:11:14.521"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:11:50.361" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:11:50.362" level="INFO">${time} = Thu Jan 28 01:11:50 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:50.362" starttime="20160128 01:11:50.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:50.364" level="INFO">Date and time: Thu Jan 28 01:11:50 CET 2016</msg>
<status status="PASS" endtime="20160128 01:11:50.364" starttime="20160128 01:11:50.363"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:50.405" starttime="20160128 01:11:50.368"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:11:50.407" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:51.664" level="INFO">Read output: Last login: Thu Jan 28 00:11:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m</msg>
<msg timestamp="20160128 01:11:51.666" level="INFO">${output_login} = Last login: Thu Jan 28 00:11:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:51.665" starttime="20160128 01:11:50.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:11:51.667" level="INFO">Last login: Thu Jan 28 00:11:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:51.668" starttime="20160128 01:11:51.666"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160128 01:11:51.669" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160128 01:11:51.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:51.692" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 61 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160128 01:11:51.692" starttime="20160128 01:11:51.668"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:51.697" starttime="20160128 01:11:51.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:51.700" starttime="20160128 01:11:51.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:51.703" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160128 01:11:51.704" starttime="20160128 01:11:51.702"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:51.705" starttime="20160128 01:11:50.365"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:51.749" starttime="20160128 01:11:51.713"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:11:51.752" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:52.943" level="INFO">Read output: Last login: Thu Jan 28 00:11:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m</msg>
<msg timestamp="20160128 01:11:52.945" level="INFO">${output_login} = Last login: Thu Jan 28 00:11:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:52.944" starttime="20160128 01:11:51.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:11:52.946" level="INFO">Last login: Thu Jan 28 00:11:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:11:52.947" starttime="20160128 01:11:52.946"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160128 01:11:52.948" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:11:53.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:53.316" level="INFO">${output} = I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:53.316" starttime="20160128 01:11:52.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:53.318" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR 6.2.0 is running PID: 14092 </msg>
<status status="PASS" endtime="20160128 01:11:53.319" starttime="20160128 01:11:53.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:53.320" starttime="20160128 01:11:53.319"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:53.322" starttime="20160128 01:11:53.321"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:53.324" starttime="20160128 01:11:51.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:53.329" level="INFO">SUT:/opt/robot/robotworkspace/suts/mTel-resource.txt</msg>
<status status="PASS" endtime="20160128 01:11:53.330" starttime="20160128 01:11:53.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:53.333" level="INFO">XDR IP address:10.105.125.171</msg>
<status status="PASS" endtime="20160128 01:11:53.334" starttime="20160128 01:11:53.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:53.337" level="INFO">Using R6.2 tickets</msg>
<status status="PASS" endtime="20160128 01:11:53.338" starttime="20160128 01:11:53.335"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:53.377" starttime="20160128 01:11:53.346"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:11:53.378" level="INFO">Logging into '10.105.125.123:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:54.615" level="INFO">Read output: Last login: Wed Jan 27 02:24:27 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1;32mqa_automation@amq01:~$[m</msg>
<msg timestamp="20160128 01:11:54.617" level="INFO">${output_login} = Last login: Wed Jan 27 02:24:27 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1;32mqa_automation@amq01:~$[m</msg>
<status status="PASS" endtime="20160128 01:11:54.616" starttime="20160128 01:11:53.377"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160128 01:11:54.619" level="INFO">Executing command 'netstat -an | grep 61626'.</msg>
<msg timestamp="20160128 01:11:54.724" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:54.725" level="INFO">${output} = tcp        0      0 :::61626                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.125.123:61626 ::ffff:10.105.125.171:48443 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160128 01:11:54.724" starttime="20160128 01:11:54.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.726" starttime="20160128 01:11:54.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.728" starttime="20160128 01:11:54.727"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160128 01:11:54.729" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr status'.</msg>
<msg timestamp="20160128 01:11:54.823" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:11:54.824" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160128 01:11:54.823" starttime="20160128 01:11:54.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.825" starttime="20160128 01:11:54.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.827" starttime="20160128 01:11:54.826"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.828" starttime="20160128 01:11:54.827"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.830" starttime="20160128 01:11:54.829"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:54.830" starttime="20160128 01:11:53.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:11:54.832" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160128 01:11:54.832" starttime="20160128 01:11:54.831"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.878" starttime="20160128 01:11:54.833"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:54.903" starttime="20160128 01:11:54.886"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:54.903" starttime="20160128 01:11:54.883"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.048" starttime="20160128 01:11:54.911"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.049" starttime="20160128 01:11:54.909"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160128 01:11:55.052" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.125.123:61626?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160128 01:11:55.052" starttime="20160128 01:11:55.050"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.399" starttime="20160128 01:11:55.053"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.399" starttime="20160128 01:11:50.352"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.425" starttime="20160128 01:11:55.425"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.465" starttime="20160128 01:11:55.429"></status>
</kw>
<msg timestamp="20160128 01:11:55.467" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:11:55.466" starttime="20160128 01:11:55.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:11:55.478" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:11:55.750" level="INFO">Read output: Last login: Thu Jan 28 00:11:51 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:11:55.752" starttime="20160128 01:11:55.476"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.753" starttime="20160128 01:11:55.468"></status>
</kw>
<msg timestamp="20160128 01:11:55.755" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:11:55.755" starttime="20160128 01:11:55.420"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.767" starttime="20160128 01:11:55.765"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:11:55.814" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160128 01:11:55.820" starttime="20160128 01:11:55.811"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.821" starttime="20160128 01:11:55.757"></status>
</kw>
<msg timestamp="20160128 01:11:55.823" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:11:55.822" starttime="20160128 01:11:55.415"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.850" starttime="20160128 01:11:55.844"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.851" starttime="20160128 01:11:55.837"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.864" starttime="20160128 01:11:55.855"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:11:55.869" starttime="20160128 01:11:55.864"></status>
</kw>
<status status="PASS" endtime="20160128 01:11:55.870" starttime="20160128 01:11:55.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:12:05.872" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:12:05.874" starttime="20160128 01:11:55.870"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:05.885" starttime="20160128 01:12:05.884"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:12:05.890" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:12:05.889" starttime="20160128 01:12:05.885"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:12:05.894" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:12:05.894" starttime="20160128 01:12:05.890"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:05.899" starttime="20160128 01:12:05.898"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:12:05.901" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:12:05.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:05.943" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:12:05.943" starttime="20160128 01:12:05.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:05.945" starttime="20160128 01:12:05.944"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:05.946" starttime="20160128 01:12:05.945"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:05.947" starttime="20160128 01:12:05.946"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:12:05.949" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:12:06.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:06.023" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:12:06.023" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:12:06.022" starttime="20160128 01:12:05.948"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.027" starttime="20160128 01:12:06.024"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.028" starttime="20160128 01:12:06.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.029" starttime="20160128 01:12:06.029"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.031" starttime="20160128 01:12:06.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.032" starttime="20160128 01:12:06.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.034" starttime="20160128 01:12:06.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.035" starttime="20160128 01:12:06.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.037" starttime="20160128 01:12:06.036"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.038" starttime="20160128 01:12:06.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.039" starttime="20160128 01:12:06.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.040" starttime="20160128 01:12:06.040"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.041" starttime="20160128 01:12:05.895"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:06.043" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160128 01:12:06.046" starttime="20160128 01:12:06.042"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:12:06.047" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160128 01:12:06.080" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:06.081" level="INFO">${stdout_string} = [2016-01-28T00:11:55,865][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:06.080" starttime="20160128 01:12:06.046"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:06.082" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160128 01:12:06.157" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:12:06.157" starttime="20160128 01:12:06.081"></status>
</kw>
<msg timestamp="20160128 01:12:06.159" level="INFO">${tailed_text} = [2016-01-28T00:11:55,865][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:06.158" starttime="20160128 01:12:05.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.164" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:12:06.164" starttime="20160128 01:12:06.162"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.165" starttime="20160128 01:12:06.159"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.170" starttime="20160128 01:12:06.169"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.171" starttime="20160128 01:12:06.170"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.172" starttime="20160128 01:12:06.165"></status>
</kw>
<msg timestamp="20160128 01:12:06.173" level="INFO">${tailed_text} = [2016-01-28T00:11:55,865][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:06.172" starttime="20160128 01:12:05.876"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.187" starttime="20160128 01:12:06.186"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.207" starttime="20160128 01:12:06.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.209" starttime="20160128 01:12:06.208"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.210" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:12:06.211" level="INFO">${queryResultSetLines} = 1027968|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|Basic...</msg>
<status status="PASS" endtime="20160128 01:12:06.211" starttime="20160128 01:12:06.209"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.212" starttime="20160128 01:12:06.212"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.214" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:12:06.215" level="INFO">@{queryResultSet} = [ 1027968|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|Bas...</msg>
<status status="PASS" endtime="20160128 01:12:06.214" starttime="20160128 01:12:06.213"></status>
</kw>
<msg timestamp="20160128 01:12:06.217" level="INFO">@{queryRows} = [ 1027968|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|Charge|null|Bas...</msg>
<status status="PASS" endtime="20160128 01:12:06.216" starttime="20160128 01:12:06.183"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.218" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:12:06.219" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:12:06.219" starttime="20160128 01:12:06.217"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.220" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:12:06.221" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:12:06.221" starttime="20160128 01:12:06.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:12:06.226" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:12:06.226" starttime="20160128 01:12:06.225"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.226" starttime="20160128 01:12:06.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.229" starttime="20160128 01:12:06.227"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.230" starttime="20160128 01:12:06.179"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.233" starttime="20160128 01:12:06.230"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.233" starttime="20160128 01:11:55.405"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:12:06.234" starttime="20160128 01:11:55.400"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.262" starttime="20160128 01:12:06.262"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.314" starttime="20160128 01:12:06.266"></status>
</kw>
<msg timestamp="20160128 01:12:06.317" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:12:06.316" starttime="20160128 01:12:06.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:12:06.328" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:12:06.688" level="INFO">Read output: Last login: Thu Jan 28 00:11:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:12:06.690" starttime="20160128 01:12:06.325"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.691" starttime="20160128 01:12:06.318"></status>
</kw>
<msg timestamp="20160128 01:12:06.693" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:12:06.692" starttime="20160128 01:12:06.257"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.703" starttime="20160128 01:12:06.702"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:06.705" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160128 01:12:06.707" starttime="20160128 01:12:06.703"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.708" starttime="20160128 01:12:06.695"></status>
</kw>
<msg timestamp="20160128 01:12:06.709" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:12:06.709" starttime="20160128 01:12:06.251"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.723" starttime="20160128 01:12:06.718"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.723" starttime="20160128 01:12:06.714"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.729" starttime="20160128 01:12:06.728"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:06.734" starttime="20160128 01:12:06.729"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:06.734" starttime="20160128 01:12:06.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:12:16.736" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:12:16.737" starttime="20160128 01:12:06.735"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.747" starttime="20160128 01:12:16.746"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:12:16.750" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:12:16.750" starttime="20160128 01:12:16.747"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:12:16.758" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:12:16.758" starttime="20160128 01:12:16.751"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.763" starttime="20160128 01:12:16.762"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:12:16.764" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:12:16.808" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:16.809" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:12:16.808" starttime="20160128 01:12:16.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.810" starttime="20160128 01:12:16.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.811" starttime="20160128 01:12:16.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.812" starttime="20160128 01:12:16.812"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:12:16.814" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:12:16.889" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:16.890" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:12:16.890" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:12:16.890" starttime="20160128 01:12:16.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.894" starttime="20160128 01:12:16.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.895" starttime="20160128 01:12:16.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.896" starttime="20160128 01:12:16.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.898" starttime="20160128 01:12:16.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.899" starttime="20160128 01:12:16.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.900" starttime="20160128 01:12:16.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.901" starttime="20160128 01:12:16.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.903" starttime="20160128 01:12:16.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.904" starttime="20160128 01:12:16.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.905" starttime="20160128 01:12:16.904"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:16.906" starttime="20160128 01:12:16.906"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:16.907" starttime="20160128 01:12:16.759"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:16.908" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160128 01:12:16.911" starttime="20160128 01:12:16.907"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:12:16.912" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160128 01:12:16.947" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:16.948" level="INFO">${stdout_string} = [2016-01-28T00:12:06,756][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|101|...</msg>
<status status="PASS" endtime="20160128 01:12:16.948" starttime="20160128 01:12:16.912"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:16.949" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160128 01:12:17.026" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:12:17.026" starttime="20160128 01:12:16.949"></status>
</kw>
<msg timestamp="20160128 01:12:17.028" level="INFO">${tailed_text} = [2016-01-28T00:12:06,756][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|101|...</msg>
<status status="PASS" endtime="20160128 01:12:17.027" starttime="20160128 01:12:16.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.034" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:12:17.034" starttime="20160128 01:12:17.032"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.034" starttime="20160128 01:12:17.029"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.039" starttime="20160128 01:12:17.038"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.041" starttime="20160128 01:12:17.040"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.041" starttime="20160128 01:12:17.035"></status>
</kw>
<msg timestamp="20160128 01:12:17.043" level="INFO">${tailed_text} = [2016-01-28T00:12:06,756][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|101|...</msg>
<status status="PASS" endtime="20160128 01:12:17.042" starttime="20160128 01:12:16.739"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.057" starttime="20160128 01:12:17.057"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.062" starttime="20160128 01:12:17.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.063" starttime="20160128 01:12:17.063"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.065" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:12:17.066" level="INFO">${queryResultSetLines} = 1027969|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|Short...</msg>
<status status="PASS" endtime="20160128 01:12:17.066" starttime="20160128 01:12:17.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.067" starttime="20160128 01:12:17.066"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.069" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:12:17.069" level="INFO">@{queryResultSet} = [ 1027969|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|Sho...</msg>
<status status="PASS" endtime="20160128 01:12:17.069" starttime="20160128 01:12:17.068"></status>
</kw>
<msg timestamp="20160128 01:12:17.070" level="INFO">@{queryRows} = [ 1027969|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.0|Charge|null|Sho...</msg>
<status status="PASS" endtime="20160128 01:12:17.070" starttime="20160128 01:12:17.053"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.072" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:12:17.073" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:12:17.072" starttime="20160128 01:12:17.071"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.074" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:12:17.075" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:12:17.075" starttime="20160128 01:12:17.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:12:17.080" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:12:17.081" starttime="20160128 01:12:17.079"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.081" starttime="20160128 01:12:17.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.084" starttime="20160128 01:12:17.082"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.085" starttime="20160128 01:12:17.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.088" starttime="20160128 01:12:17.085"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.088" starttime="20160128 01:12:06.240"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:12:17.089" starttime="20160128 01:12:06.236"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.115" starttime="20160128 01:12:17.114"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:17.168" starttime="20160128 01:12:17.118"></status>
</kw>
<msg timestamp="20160128 01:12:17.170" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:12:17.169" starttime="20160128 01:12:17.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:12:17.181" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:12:17.983" level="INFO">Read output: Last login: Thu Jan 28 00:12:06 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:12:17.984" starttime="20160128 01:12:17.178"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:17.985" starttime="20160128 01:12:17.171"></status>
</kw>
<msg timestamp="20160128 01:12:17.989" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:12:17.988" starttime="20160128 01:12:17.110"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:18.016" starttime="20160128 01:12:18.014"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:18.020" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160128 01:12:18.024" starttime="20160128 01:12:18.017"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:18.025" starttime="20160128 01:12:18.005"></status>
</kw>
<msg timestamp="20160128 01:12:18.028" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:12:18.027" starttime="20160128 01:12:17.104"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:18.105" starttime="20160128 01:12:18.048"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:18.106" starttime="20160128 01:12:18.041"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:18.111" starttime="20160128 01:12:18.110"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:18.116" starttime="20160128 01:12:18.112"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:18.116" starttime="20160128 01:12:18.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.119" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:12:28.121" starttime="20160128 01:12:18.117"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.141" starttime="20160128 01:12:28.139"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:12:28.150" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:12:28.149" starttime="20160128 01:12:28.143"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.163" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:12:28.164" starttime="20160128 01:12:28.151"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.175" starttime="20160128 01:12:28.173"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:12:28.178" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:12:28.223" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:28.224" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:12:28.224" starttime="20160128 01:12:28.176"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.227" starttime="20160128 01:12:28.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.230" starttime="20160128 01:12:28.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.232" starttime="20160128 01:12:28.231"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:12:28.236" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:12:28.306" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:28.307" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:12:28.308" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:12:28.306" starttime="20160128 01:12:28.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.314" starttime="20160128 01:12:28.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.317" starttime="20160128 01:12:28.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.319" starttime="20160128 01:12:28.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.322" starttime="20160128 01:12:28.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.324" starttime="20160128 01:12:28.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.327" starttime="20160128 01:12:28.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.328" starttime="20160128 01:12:28.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.329" starttime="20160128 01:12:28.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.331" starttime="20160128 01:12:28.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.332" starttime="20160128 01:12:28.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.333" starttime="20160128 01:12:28.333"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.334" starttime="20160128 01:12:28.166"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:28.335" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160128 01:12:28.339" starttime="20160128 01:12:28.334"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:12:28.340" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160128 01:12:28.376" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:28.377" level="INFO">${stdout_string} = [2016-01-28T00:12:18,110][INFO ][Camel (ticket-router) thread #76 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:28.376" starttime="20160128 01:12:28.339"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:28.378" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160128 01:12:28.458" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:12:28.458" starttime="20160128 01:12:28.377"></status>
</kw>
<msg timestamp="20160128 01:12:28.459" level="INFO">${tailed_text} = [2016-01-28T00:12:18,110][INFO ][Camel (ticket-router) thread #76 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:28.459" starttime="20160128 01:12:28.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.465" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:12:28.465" starttime="20160128 01:12:28.463"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.466" starttime="20160128 01:12:28.460"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.471" starttime="20160128 01:12:28.470"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.472" starttime="20160128 01:12:28.471"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.472" starttime="20160128 01:12:28.466"></status>
</kw>
<msg timestamp="20160128 01:12:28.473" level="INFO">${tailed_text} = [2016-01-28T00:12:18,110][INFO ][Camel (ticket-router) thread #76 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:28.473" starttime="20160128 01:12:28.124"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.488" starttime="20160128 01:12:28.487"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.521" starttime="20160128 01:12:28.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.522" starttime="20160128 01:12:28.522"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.524" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:12:28.525" level="INFO">${queryResultSetLines} = 1027970|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|Bas...</msg>
<status status="PASS" endtime="20160128 01:12:28.524" starttime="20160128 01:12:28.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.526" starttime="20160128 01:12:28.525"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.527" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:12:28.528" level="INFO">@{queryResultSet} = [ 1027970|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|B...</msg>
<status status="PASS" endtime="20160128 01:12:28.527" starttime="20160128 01:12:28.526"></status>
</kw>
<msg timestamp="20160128 01:12:28.529" level="INFO">@{queryRows} = [ 1027970|6.2|101|CDR|1|CRCE|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.2|FinalCommit|null|B...</msg>
<status status="PASS" endtime="20160128 01:12:28.529" starttime="20160128 01:12:28.483"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.530" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:12:28.531" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:12:28.531" starttime="20160128 01:12:28.529"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.532" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:12:28.533" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:12:28.533" starttime="20160128 01:12:28.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:12:28.537" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:12:28.538" starttime="20160128 01:12:28.536"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.538" starttime="20160128 01:12:28.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.541" starttime="20160128 01:12:28.539"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.542" starttime="20160128 01:12:28.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.545" starttime="20160128 01:12:28.542"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:28.545" starttime="20160128 01:12:17.095"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:12:28.546" starttime="20160128 01:12:17.091"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.572" starttime="20160128 01:12:28.571"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:28.623" starttime="20160128 01:12:28.575"></status>
</kw>
<msg timestamp="20160128 01:12:28.625" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:12:28.625" starttime="20160128 01:12:28.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:12:28.636" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:12:29.017" level="INFO">Read output: Last login: Thu Jan 28 00:12:17 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:12:29.018" starttime="20160128 01:12:28.634"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:29.019" starttime="20160128 01:12:28.627"></status>
</kw>
<msg timestamp="20160128 01:12:29.021" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:12:29.020" starttime="20160128 01:12:28.567"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:29.026" starttime="20160128 01:12:29.025"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:29.028" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160128 01:12:29.031" starttime="20160128 01:12:29.027"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:29.032" starttime="20160128 01:12:29.021"></status>
</kw>
<msg timestamp="20160128 01:12:29.033" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:12:29.032" starttime="20160128 01:12:28.561"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:29.054" starttime="20160128 01:12:29.042"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:29.055" starttime="20160128 01:12:29.038"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:29.059" starttime="20160128 01:12:29.059"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:29.064" starttime="20160128 01:12:29.060"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:29.064" starttime="20160128 01:12:29.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.066" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:12:39.068" starttime="20160128 01:12:29.065"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.089" starttime="20160128 01:12:39.087"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:12:39.096" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:12:39.096" starttime="20160128 01:12:39.090"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.103" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:12:39.104" starttime="20160128 01:12:39.097"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.115" starttime="20160128 01:12:39.113"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:12:39.118" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:12:39.160" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:39.162" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:12:39.161" starttime="20160128 01:12:39.116"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.164" starttime="20160128 01:12:39.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.167" starttime="20160128 01:12:39.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.170" starttime="20160128 01:12:39.168"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:12:39.174" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:12:39.244" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:39.245" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:12:39.246" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:12:39.244" starttime="20160128 01:12:39.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.253" starttime="20160128 01:12:39.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.255" starttime="20160128 01:12:39.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.258" starttime="20160128 01:12:39.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.261" starttime="20160128 01:12:39.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.263" starttime="20160128 01:12:39.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.267" starttime="20160128 01:12:39.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.270" starttime="20160128 01:12:39.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.273" starttime="20160128 01:12:39.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.275" starttime="20160128 01:12:39.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.278" starttime="20160128 01:12:39.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.280" starttime="20160128 01:12:39.279"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.282" starttime="20160128 01:12:39.105"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:39.285" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160128 01:12:39.289" starttime="20160128 01:12:39.283"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:12:39.292" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160128 01:12:39.328" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:39.330" level="INFO">${stdout_string} = [2016-01-28T00:12:29,088][INFO ][Camel (ticket-router) thread #81 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|110|...</msg>
<status status="PASS" endtime="20160128 01:12:39.329" starttime="20160128 01:12:39.291"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:39.333" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160128 01:12:39.408" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:12:39.409" starttime="20160128 01:12:39.331"></status>
</kw>
<msg timestamp="20160128 01:12:39.412" level="INFO">${tailed_text} = [2016-01-28T00:12:29,088][INFO ][Camel (ticket-router) thread #81 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|110|...</msg>
<status status="PASS" endtime="20160128 01:12:39.411" starttime="20160128 01:12:39.080"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.423" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:12:39.424" starttime="20160128 01:12:39.419"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.425" starttime="20160128 01:12:39.413"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.435" starttime="20160128 01:12:39.433"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.439" starttime="20160128 01:12:39.437"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.440" starttime="20160128 01:12:39.426"></status>
</kw>
<msg timestamp="20160128 01:12:39.442" level="INFO">${tailed_text} = [2016-01-28T00:12:29,088][INFO ][Camel (ticket-router) thread #81 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|110|...</msg>
<status status="PASS" endtime="20160128 01:12:39.441" starttime="20160128 01:12:39.071"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.473" starttime="20160128 01:12:39.472"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.485" starttime="20160128 01:12:39.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.487" starttime="20160128 01:12:39.486"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.489" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:12:39.489" level="INFO">${queryResultSetLines} = 1006993|6.2|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002+00|2015-02-23 09:18:38.996+00|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3...</msg>
<status status="PASS" endtime="20160128 01:12:39.489" starttime="20160128 01:12:39.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.491" starttime="20160128 01:12:39.490"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.492" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:12:39.493" level="INFO">@{queryResultSet} = [ 1006993|6.2|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002+00|2015-02-23 09:18:38.996+00|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1...</msg>
<status status="PASS" endtime="20160128 01:12:39.492" starttime="20160128 01:12:39.491"></status>
</kw>
<msg timestamp="20160128 01:12:39.494" level="INFO">@{queryRows} = [ 1006993|6.2|110|RECHARGE|1|CRCE|crce01|2015-02-23 09:18:39.002+00|2015-02-23 09:18:38.996+00|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1...</msg>
<status status="PASS" endtime="20160128 01:12:39.493" starttime="20160128 01:12:39.464"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.495" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:12:39.496" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:12:39.496" starttime="20160128 01:12:39.494"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.497" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:12:39.498" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:12:39.498" starttime="20160128 01:12:39.497"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:12:39.502" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:12:39.503" starttime="20160128 01:12:39.501"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.503" starttime="20160128 01:12:39.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.506" starttime="20160128 01:12:39.504"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.507" starttime="20160128 01:12:39.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.509" starttime="20160128 01:12:39.507"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:39.510" starttime="20160128 01:12:28.552"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:12:39.511" starttime="20160128 01:12:28.548"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.538" starttime="20160128 01:12:39.537"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:39.590" starttime="20160128 01:12:39.542"></status>
</kw>
<msg timestamp="20160128 01:12:39.592" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:12:39.592" starttime="20160128 01:12:39.539"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:12:39.603" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:12:40.007" level="INFO">Read output: Last login: Thu Jan 28 00:12:28 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:12:40.008" starttime="20160128 01:12:39.601"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:40.009" starttime="20160128 01:12:39.594"></status>
</kw>
<msg timestamp="20160128 01:12:40.010" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:12:40.010" starttime="20160128 01:12:39.532"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:40.016" starttime="20160128 01:12:40.015"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:40.018" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160128 01:12:40.021" starttime="20160128 01:12:40.017"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:40.022" starttime="20160128 01:12:40.011"></status>
</kw>
<msg timestamp="20160128 01:12:40.023" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:12:40.022" starttime="20160128 01:12:39.526"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:40.091" starttime="20160128 01:12:40.032"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:40.091" starttime="20160128 01:12:40.029"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:40.096" starttime="20160128 01:12:40.095"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:40.101" starttime="20160128 01:12:40.097"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:40.101" starttime="20160128 01:12:40.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.103" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:12:50.104" starttime="20160128 01:12:40.102"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.114" starttime="20160128 01:12:50.113"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:12:50.117" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:12:50.117" starttime="20160128 01:12:50.114"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.122" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:12:50.122" starttime="20160128 01:12:50.118"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.127" starttime="20160128 01:12:50.126"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:12:50.129" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:12:50.170" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:50.170" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:12:50.170" starttime="20160128 01:12:50.128"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.172" starttime="20160128 01:12:50.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.173" starttime="20160128 01:12:50.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.174" starttime="20160128 01:12:50.173"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:12:50.176" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:12:50.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:50.251" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:12:50.251" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:12:50.251" starttime="20160128 01:12:50.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.254" starttime="20160128 01:12:50.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.256" starttime="20160128 01:12:50.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.257" starttime="20160128 01:12:50.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.258" starttime="20160128 01:12:50.257"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.260" starttime="20160128 01:12:50.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.261" starttime="20160128 01:12:50.260"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.263" starttime="20160128 01:12:50.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.264" starttime="20160128 01:12:50.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.265" starttime="20160128 01:12:50.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.267" starttime="20160128 01:12:50.266"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.268" starttime="20160128 01:12:50.267"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.268" starttime="20160128 01:12:50.123"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:50.270" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160128 01:12:50.274" starttime="20160128 01:12:50.269"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:12:50.275" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160128 01:12:50.310" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:12:50.311" level="INFO">${stdout_string} = [2016-01-28T00:12:40,096][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:50.311" starttime="20160128 01:12:50.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:50.312" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160128 01:12:50.391" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:12:50.392" starttime="20160128 01:12:50.311"></status>
</kw>
<msg timestamp="20160128 01:12:50.393" level="INFO">${tailed_text} = [2016-01-28T00:12:40,096][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:50.392" starttime="20160128 01:12:50.110"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.398" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:12:50.398" starttime="20160128 01:12:50.396"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.399" starttime="20160128 01:12:50.393"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.404" starttime="20160128 01:12:50.403"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.405" starttime="20160128 01:12:50.404"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.406" starttime="20160128 01:12:50.399"></status>
</kw>
<msg timestamp="20160128 01:12:50.407" level="INFO">${tailed_text} = [2016-01-28T00:12:40,096][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:12:50.406" starttime="20160128 01:12:50.106"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.422" starttime="20160128 01:12:50.421"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.457" starttime="20160128 01:12:50.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.458" starttime="20160128 01:12:50.458"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.460" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:12:50.461" level="INFO">${queryResultSetLines} = 1044955|6.2|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969+00|2015-02-23 09:18:38.619+00|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|...</msg>
<status status="PASS" endtime="20160128 01:12:50.460" starttime="20160128 01:12:50.459"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.462" starttime="20160128 01:12:50.461"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.463" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:12:50.464" level="INFO">@{queryResultSet} = [ 1044955|6.2|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969+00|2015-02-23 09:18:38.619+00|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTarif...</msg>
<status status="PASS" endtime="20160128 01:12:50.464" starttime="20160128 01:12:50.462"></status>
</kw>
<msg timestamp="20160128 01:12:50.465" level="INFO">@{queryRows} = [ 1044955|6.2|130|CONF|1|CRCE|crce01|2015-02-23 09:18:38.969+00|2015-02-23 09:18:38.619+00|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTarif...</msg>
<status status="PASS" endtime="20160128 01:12:50.465" starttime="20160128 01:12:50.418"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.467" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:12:50.467" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:12:50.467" starttime="20160128 01:12:50.465"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.469" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:12:50.469" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:12:50.469" starttime="20160128 01:12:50.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:12:50.474" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:12:50.474" starttime="20160128 01:12:50.473"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.474" starttime="20160128 01:12:50.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.477" starttime="20160128 01:12:50.475"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.478" starttime="20160128 01:12:50.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.480" starttime="20160128 01:12:50.478"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.481" starttime="20160128 01:12:39.516"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:12:50.482" starttime="20160128 01:12:39.512"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.507" starttime="20160128 01:12:50.506"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.545" starttime="20160128 01:12:50.510"></status>
</kw>
<msg timestamp="20160128 01:12:50.546" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:12:50.546" starttime="20160128 01:12:50.507"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:12:50.550" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:12:50.873" level="INFO">Read output: Last login: Thu Jan 28 00:12:39 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:12:50.874" starttime="20160128 01:12:50.549"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.874" starttime="20160128 01:12:50.546"></status>
</kw>
<msg timestamp="20160128 01:12:50.875" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:12:50.875" starttime="20160128 01:12:50.502"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.881" starttime="20160128 01:12:50.880"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:12:50.882" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160128 01:12:50.887" starttime="20160128 01:12:50.881"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.888" starttime="20160128 01:12:50.876"></status>
</kw>
<msg timestamp="20160128 01:12:50.889" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:12:50.888" starttime="20160128 01:12:50.496"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.916" starttime="20160128 01:12:50.898"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.917" starttime="20160128 01:12:50.894"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.921" starttime="20160128 01:12:50.920"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:12:50.926" starttime="20160128 01:12:50.922"></status>
</kw>
<status status="PASS" endtime="20160128 01:12:50.926" starttime="20160128 01:12:50.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:00.928" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:00.931" starttime="20160128 01:12:50.927"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:00.951" starttime="20160128 01:13:00.949"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:00.954" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:00.954" starttime="20160128 01:13:00.952"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:00.959" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:00.959" starttime="20160128 01:13:00.955"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:00.964" starttime="20160128 01:13:00.963"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:00.965" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:01.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:01.011" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:01.010" starttime="20160128 01:13:00.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.012" starttime="20160128 01:13:01.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.013" starttime="20160128 01:13:01.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.015" starttime="20160128 01:13:01.014"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:01.017" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:01.091" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:01.092" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:01.092" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:01.092" starttime="20160128 01:13:01.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.096" starttime="20160128 01:13:01.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.097" starttime="20160128 01:13:01.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.099" starttime="20160128 01:13:01.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.100" starttime="20160128 01:13:01.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.101" starttime="20160128 01:13:01.100"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.102" starttime="20160128 01:13:01.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.104" starttime="20160128 01:13:01.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.105" starttime="20160128 01:13:01.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.106" starttime="20160128 01:13:01.105"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.108" starttime="20160128 01:13:01.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.109" starttime="20160128 01:13:01.108"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.109" starttime="20160128 01:13:00.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:01.111" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160128 01:13:01.114" starttime="20160128 01:13:01.110"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:01.115" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160128 01:13:01.151" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:01.152" level="INFO">${stdout_string} = [2016-01-28T00:12:50,920][INFO ][Camel (ticket-router) thread #85 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:13:01.152" starttime="20160128 01:13:01.115"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:01.153" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160128 01:13:01.239" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:01.239" starttime="20160128 01:13:01.152"></status>
</kw>
<msg timestamp="20160128 01:13:01.241" level="INFO">${tailed_text} = [2016-01-28T00:12:50,920][INFO ][Camel (ticket-router) thread #85 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:13:01.240" starttime="20160128 01:13:00.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.248" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:01.248" starttime="20160128 01:13:01.245"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.249" starttime="20160128 01:13:01.242"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.254" starttime="20160128 01:13:01.253"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.255" starttime="20160128 01:13:01.254"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.255" starttime="20160128 01:13:01.249"></status>
</kw>
<msg timestamp="20160128 01:13:01.257" level="INFO">${tailed_text} = [2016-01-28T00:12:50,920][INFO ][Camel (ticket-router) thread #85 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=6.2|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:13:01.256" starttime="20160128 01:13:00.935"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.272" starttime="20160128 01:13:01.272"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.288" starttime="20160128 01:13:01.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.289" starttime="20160128 01:13:01.289"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.291" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:01.293" level="INFO">${queryResultSetLines} = 1015049|6.2|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661+00|2015-02-23 08:37:21.659+00|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|...</msg>
<status status="PASS" endtime="20160128 01:13:01.292" starttime="20160128 01:13:01.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.294" starttime="20160128 01:13:01.293"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.295" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:01.296" level="INFO">@{queryResultSet} = [ 1015049|6.2|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661+00|2015-02-23 08:37:21.659+00|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|...</msg>
<status status="PASS" endtime="20160128 01:13:01.296" starttime="20160128 01:13:01.295"></status>
</kw>
<msg timestamp="20160128 01:13:01.297" level="INFO">@{queryRows} = [ 1015049|6.2|140|ACCOUNT_CHANGE|1|CRCE|crce01|2015-02-23 08:37:21.661+00|2015-02-23 08:37:21.659+00|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|...</msg>
<status status="PASS" endtime="20160128 01:13:01.297" starttime="20160128 01:13:01.268"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.299" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:01.300" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:01.299" starttime="20160128 01:13:01.298"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.301" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:01.302" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:01.301" starttime="20160128 01:13:01.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:01.306" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:01.306" starttime="20160128 01:13:01.305"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.307" starttime="20160128 01:13:01.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.310" starttime="20160128 01:13:01.307"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.311" starttime="20160128 01:13:01.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.314" starttime="20160128 01:13:01.312"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.314" starttime="20160128 01:12:50.487"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:01.315" starttime="20160128 01:12:50.483"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.343" starttime="20160128 01:13:01.342"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.410" starttime="20160128 01:13:01.347"></status>
</kw>
<msg timestamp="20160128 01:13:01.412" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:13:01.411" starttime="20160128 01:13:01.344"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:01.418" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:01.807" level="INFO">Read output: Last login: Thu Jan 28 00:12:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:01.808" starttime="20160128 01:13:01.417"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.809" starttime="20160128 01:13:01.413"></status>
</kw>
<msg timestamp="20160128 01:13:01.810" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:13:01.810" starttime="20160128 01:13:01.338"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.817" starttime="20160128 01:13:01.816"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:01.819" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160128 01:13:01.822" starttime="20160128 01:13:01.817"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.823" starttime="20160128 01:13:01.812"></status>
</kw>
<msg timestamp="20160128 01:13:01.824" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:13:01.823" starttime="20160128 01:13:01.332"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.839" starttime="20160128 01:13:01.833"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.839" starttime="20160128 01:13:01.830"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.844" starttime="20160128 01:13:01.843"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:01.849" starttime="20160128 01:13:01.844"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:01.849" starttime="20160128 01:13:01.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:11.851" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:11.852" starttime="20160128 01:13:01.850"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:11.861" starttime="20160128 01:13:11.860"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:11.864" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:11.864" starttime="20160128 01:13:11.862"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:11.869" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:11.870" starttime="20160128 01:13:11.865"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:11.874" starttime="20160128 01:13:11.873"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:11.875" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:11.916" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:11.917" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:11.916" starttime="20160128 01:13:11.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:11.918" starttime="20160128 01:13:11.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:11.919" starttime="20160128 01:13:11.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:11.921" starttime="20160128 01:13:11.920"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:11.923" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:12.006" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:12.007" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:12.007" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:12.006" starttime="20160128 01:13:11.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.010" starttime="20160128 01:13:12.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.012" starttime="20160128 01:13:12.011"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.013" starttime="20160128 01:13:12.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.014" starttime="20160128 01:13:12.013"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.015" starttime="20160128 01:13:12.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.017" starttime="20160128 01:13:12.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.018" starttime="20160128 01:13:12.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.019" starttime="20160128 01:13:12.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.021" starttime="20160128 01:13:12.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.022" starttime="20160128 01:13:12.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.023" starttime="20160128 01:13:12.022"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.023" starttime="20160128 01:13:11.870"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:12.025" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160128 01:13:12.028" starttime="20160128 01:13:12.024"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:12.029" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160128 01:13:12.065" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:12.065" level="INFO">${stdout_string} = [2016-01-28T00:13:01,868][INFO ][Camel (ticket-router) thread #83 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|910|...</msg>
<status status="PASS" endtime="20160128 01:13:12.065" starttime="20160128 01:13:12.029"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:12.067" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160128 01:13:12.142" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:12.142" starttime="20160128 01:13:12.066"></status>
</kw>
<msg timestamp="20160128 01:13:12.144" level="INFO">${tailed_text} = [2016-01-28T00:13:01,868][INFO ][Camel (ticket-router) thread #83 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|910|...</msg>
<status status="PASS" endtime="20160128 01:13:12.143" starttime="20160128 01:13:11.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.149" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:12.149" starttime="20160128 01:13:12.147"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.150" starttime="20160128 01:13:12.144"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.155" starttime="20160128 01:13:12.154"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.156" starttime="20160128 01:13:12.155"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.156" starttime="20160128 01:13:12.150"></status>
</kw>
<msg timestamp="20160128 01:13:12.158" level="INFO">${tailed_text} = [2016-01-28T00:13:01,868][INFO ][Camel (ticket-router) thread #83 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|910|...</msg>
<status status="PASS" endtime="20160128 01:13:12.157" starttime="20160128 01:13:11.853"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.171" starttime="20160128 01:13:12.171"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.176" starttime="20160128 01:13:12.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.177" starttime="20160128 01:13:12.177"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.179" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:12.180" level="INFO">${queryResultSetLines} = 1001690|6.2|910|1|soa01|2015-02-23 10:45:09.197+00|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160128 01:13:12.179" starttime="20160128 01:13:12.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.181" starttime="20160128 01:13:12.180"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.182" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:12.183" level="INFO">@{queryResultSet} = [ 1001690|6.2|910|1|soa01|2015-02-23 10:45:09.197+00|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160128 01:13:12.183" starttime="20160128 01:13:12.182"></status>
</kw>
<msg timestamp="20160128 01:13:12.184" level="INFO">@{queryRows} = [ 1001690|6.2|910|1|soa01|2015-02-23 10:45:09.197+00|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160128 01:13:12.184" starttime="20160128 01:13:12.167"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.185" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:12.186" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:12.186" starttime="20160128 01:13:12.184"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.187" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:12.188" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:12.188" starttime="20160128 01:13:12.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:12.192" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:12.192" starttime="20160128 01:13:12.191"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.193" starttime="20160128 01:13:12.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.196" starttime="20160128 01:13:12.193"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.196" starttime="20160128 01:13:12.163"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.199" starttime="20160128 01:13:12.197"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.199" starttime="20160128 01:13:01.322"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:12.200" starttime="20160128 01:13:01.317"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.225" starttime="20160128 01:13:12.224"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.266" starttime="20160128 01:13:12.228"></status>
</kw>
<msg timestamp="20160128 01:13:12.267" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:13:12.266" starttime="20160128 01:13:12.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:12.271" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:12.650" level="INFO">Read output: Last login: Thu Jan 28 00:13:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:12.651" starttime="20160128 01:13:12.270"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.651" starttime="20160128 01:13:12.267"></status>
</kw>
<msg timestamp="20160128 01:13:12.652" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:13:12.652" starttime="20160128 01:13:12.220"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.659" starttime="20160128 01:13:12.657"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:12.661" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160128 01:13:12.664" starttime="20160128 01:13:12.659"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.664" starttime="20160128 01:13:12.653"></status>
</kw>
<msg timestamp="20160128 01:13:12.665" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:13:12.665" starttime="20160128 01:13:12.215"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.679" starttime="20160128 01:13:12.674"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.679" starttime="20160128 01:13:12.671"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.684" starttime="20160128 01:13:12.683"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:12.689" starttime="20160128 01:13:12.685"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:12.690" starttime="20160128 01:13:12.680"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:22.691" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:22.692" starttime="20160128 01:13:12.690"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.703" starttime="20160128 01:13:22.702"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:22.706" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:22.706" starttime="20160128 01:13:22.703"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:22.711" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:22.711" starttime="20160128 01:13:22.707"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.716" starttime="20160128 01:13:22.715"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:22.717" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:22.760" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:22.760" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:22.760" starttime="20160128 01:13:22.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.761" starttime="20160128 01:13:22.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.763" starttime="20160128 01:13:22.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.764" starttime="20160128 01:13:22.763"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:22.766" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:22.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:22.843" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:22.844" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:22.843" starttime="20160128 01:13:22.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.847" starttime="20160128 01:13:22.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.848" starttime="20160128 01:13:22.847"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.849" starttime="20160128 01:13:22.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.851" starttime="20160128 01:13:22.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.852" starttime="20160128 01:13:22.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.853" starttime="20160128 01:13:22.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.854" starttime="20160128 01:13:22.853"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.855" starttime="20160128 01:13:22.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.857" starttime="20160128 01:13:22.856"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.858" starttime="20160128 01:13:22.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.859" starttime="20160128 01:13:22.858"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:22.859" starttime="20160128 01:13:22.712"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:22.861" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160128 01:13:22.867" starttime="20160128 01:13:22.860"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:22.868" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160128 01:13:22.905" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:22.906" level="INFO">${stdout_string} = [2016-01-28T00:13:12,711][INFO ][Camel (ticket-router) thread #78 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|701|...</msg>
<status status="PASS" endtime="20160128 01:13:22.905" starttime="20160128 01:13:22.867"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:22.907" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160128 01:13:22.985" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:22.986" starttime="20160128 01:13:22.906"></status>
</kw>
<msg timestamp="20160128 01:13:22.987" level="INFO">${tailed_text} = [2016-01-28T00:13:12,711][INFO ][Camel (ticket-router) thread #78 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|701|...</msg>
<status status="PASS" endtime="20160128 01:13:22.986" starttime="20160128 01:13:22.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:22.992" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:22.992" starttime="20160128 01:13:22.990"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:22.993" starttime="20160128 01:13:22.987"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.997" starttime="20160128 01:13:22.996"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:22.999" starttime="20160128 01:13:22.998"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:22.999" starttime="20160128 01:13:22.993"></status>
</kw>
<msg timestamp="20160128 01:13:23.001" level="INFO">${tailed_text} = [2016-01-28T00:13:12,711][INFO ][Camel (ticket-router) thread #78 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|701|...</msg>
<status status="PASS" endtime="20160128 01:13:23.000" starttime="20160128 01:13:22.694"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.015" starttime="20160128 01:13:23.014"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.019" starttime="20160128 01:13:23.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.020" starttime="20160128 01:13:23.020"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:23.022" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:23.023" level="INFO">${queryResultSetLines} = 1002732|6.2|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59+00|2015-02-23 23:29:53.561+00|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.2|FEAT|NEW|2015-02...</msg>
<status status="PASS" endtime="20160128 01:13:23.022" starttime="20160128 01:13:23.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.024" starttime="20160128 01:13:23.023"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:23.025" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:23.026" level="INFO">@{queryResultSet} = [ 1002732|6.2|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59+00|2015-02-23 23:29:53.561+00|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.2|FEAT|NEW|2015-...</msg>
<status status="PASS" endtime="20160128 01:13:23.026" starttime="20160128 01:13:23.024"></status>
</kw>
<msg timestamp="20160128 01:13:23.027" level="INFO">@{queryRows} = [ 1002732|6.2|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59+00|2015-02-23 23:29:53.561+00|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|6.2|FEAT|NEW|2015-...</msg>
<status status="PASS" endtime="20160128 01:13:23.027" starttime="20160128 01:13:23.010"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:23.029" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:23.030" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:23.030" starttime="20160128 01:13:23.028"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:23.031" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:23.032" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:23.032" starttime="20160128 01:13:23.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:23.036" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:23.037" starttime="20160128 01:13:23.035"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.037" starttime="20160128 01:13:23.033"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.040" starttime="20160128 01:13:23.038"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.040" starttime="20160128 01:13:23.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.043" starttime="20160128 01:13:23.041"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.044" starttime="20160128 01:13:12.206"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:23.045" starttime="20160128 01:13:12.202"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.069" starttime="20160128 01:13:23.068"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.110" starttime="20160128 01:13:23.073"></status>
</kw>
<msg timestamp="20160128 01:13:23.111" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:13:23.111" starttime="20160128 01:13:23.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:23.115" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:23.497" level="INFO">Read output: Last login: Thu Jan 28 00:13:12 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:23.498" starttime="20160128 01:13:23.114"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.499" starttime="20160128 01:13:23.112"></status>
</kw>
<msg timestamp="20160128 01:13:23.500" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:13:23.499" starttime="20160128 01:13:23.064"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.505" starttime="20160128 01:13:23.504"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:23.507" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160128 01:13:23.510" starttime="20160128 01:13:23.506"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.510" starttime="20160128 01:13:23.501"></status>
</kw>
<msg timestamp="20160128 01:13:23.511" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:13:23.511" starttime="20160128 01:13:23.059"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.534" starttime="20160128 01:13:23.520"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.534" starttime="20160128 01:13:23.517"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.539" starttime="20160128 01:13:23.538"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:23.544" starttime="20160128 01:13:23.539"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:23.545" starttime="20160128 01:13:23.535"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.546" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:33.547" starttime="20160128 01:13:23.545"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.567" starttime="20160128 01:13:33.565"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:33.574" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:33.574" starttime="20160128 01:13:33.568"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.579" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:33.580" starttime="20160128 01:13:33.575"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.584" starttime="20160128 01:13:33.583"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:33.586" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:33.625" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:33.626" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:33.626" starttime="20160128 01:13:33.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.627" starttime="20160128 01:13:33.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.629" starttime="20160128 01:13:33.628"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.630" starttime="20160128 01:13:33.629"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:33.632" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:33.708" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:33.708" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:33.709" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:33.708" starttime="20160128 01:13:33.630"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.712" starttime="20160128 01:13:33.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.713" starttime="20160128 01:13:33.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.714" starttime="20160128 01:13:33.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.716" starttime="20160128 01:13:33.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.717" starttime="20160128 01:13:33.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.718" starttime="20160128 01:13:33.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.719" starttime="20160128 01:13:33.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.721" starttime="20160128 01:13:33.720"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.722" starttime="20160128 01:13:33.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.723" starttime="20160128 01:13:33.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.724" starttime="20160128 01:13:33.724"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.725" starttime="20160128 01:13:33.580"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:33.726" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160128 01:13:33.729" starttime="20160128 01:13:33.725"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:33.731" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160128 01:13:33.766" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:33.767" level="INFO">${stdout_string} = [2016-01-28T00:13:23,560][INFO ][Camel (ticket-router) thread #82 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:13:33.766" starttime="20160128 01:13:33.730"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:33.768" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160128 01:13:33.847" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:33.847" starttime="20160128 01:13:33.767"></status>
</kw>
<msg timestamp="20160128 01:13:33.848" level="INFO">${tailed_text} = [2016-01-28T00:13:23,560][INFO ][Camel (ticket-router) thread #82 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:13:33.848" starttime="20160128 01:13:33.559"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.854" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:33.854" starttime="20160128 01:13:33.852"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.854" starttime="20160128 01:13:33.849"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.859" starttime="20160128 01:13:33.858"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.861" starttime="20160128 01:13:33.860"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.861" starttime="20160128 01:13:33.855"></status>
</kw>
<msg timestamp="20160128 01:13:33.862" level="INFO">${tailed_text} = [2016-01-28T00:13:23,560][INFO ][Camel (ticket-router) thread #82 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:13:33.862" starttime="20160128 01:13:33.551"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.876" starttime="20160128 01:13:33.875"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.886" starttime="20160128 01:13:33.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.887" starttime="20160128 01:13:33.886"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.888" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:33.889" level="INFO">${queryResultSetLines} = 1010683|1.0|601|2015-02-23 11:43:07.287+00|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237+00|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.2...</msg>
<status status="PASS" endtime="20160128 01:13:33.889" starttime="20160128 01:13:33.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.890" starttime="20160128 01:13:33.890"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.892" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:33.892" level="INFO">@{queryResultSet} = [ 1010683|1.0|601|2015-02-23 11:43:07.287+00|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237+00|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07...</msg>
<status status="PASS" endtime="20160128 01:13:33.892" starttime="20160128 01:13:33.891"></status>
</kw>
<msg timestamp="20160128 01:13:33.893" level="INFO">@{queryRows} = [ 1010683|1.0|601|2015-02-23 11:43:07.287+00|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237+00|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07...</msg>
<status status="PASS" endtime="20160128 01:13:33.893" starttime="20160128 01:13:33.872"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.895" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:33.895" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:33.895" starttime="20160128 01:13:33.894"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:33.897" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:33.897" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:33.897" starttime="20160128 01:13:33.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:33.902" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:33.902" starttime="20160128 01:13:33.901"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.903" starttime="20160128 01:13:33.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.905" starttime="20160128 01:13:33.903"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.906" starttime="20160128 01:13:33.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.909" starttime="20160128 01:13:33.906"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:33.909" starttime="20160128 01:13:23.050"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:33.910" starttime="20160128 01:13:23.046"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.934" starttime="20160128 01:13:33.934"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:33.989" starttime="20160128 01:13:33.938"></status>
</kw>
<msg timestamp="20160128 01:13:33.991" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:13:33.990" starttime="20160128 01:13:33.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:34.002" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:34.384" level="INFO">Read output: Last login: Thu Jan 28 00:13:23 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:34.385" starttime="20160128 01:13:33.999"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:34.386" starttime="20160128 01:13:33.992"></status>
</kw>
<msg timestamp="20160128 01:13:34.387" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:13:34.387" starttime="20160128 01:13:33.929"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:34.393" starttime="20160128 01:13:34.392"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:34.394" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160128 01:13:34.398" starttime="20160128 01:13:34.393"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:34.398" starttime="20160128 01:13:34.388"></status>
</kw>
<msg timestamp="20160128 01:13:34.400" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:13:34.399" starttime="20160128 01:13:33.924"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:34.417" starttime="20160128 01:13:34.408"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:34.418" starttime="20160128 01:13:34.405"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:34.423" starttime="20160128 01:13:34.422"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:34.428" starttime="20160128 01:13:34.423"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:34.428" starttime="20160128 01:13:34.418"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.429" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:44.430" starttime="20160128 01:13:34.428"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.439" starttime="20160128 01:13:44.438"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:44.443" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:44.442" starttime="20160128 01:13:44.440"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.448" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:44.448" starttime="20160128 01:13:44.443"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.453" starttime="20160128 01:13:44.452"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:44.454" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:44.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:44.497" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:44.497" starttime="20160128 01:13:44.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.499" starttime="20160128 01:13:44.498"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.500" starttime="20160128 01:13:44.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.501" starttime="20160128 01:13:44.500"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:44.503" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:44.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:44.579" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:44.579" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:44.579" starttime="20160128 01:13:44.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.583" starttime="20160128 01:13:44.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.584" starttime="20160128 01:13:44.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.585" starttime="20160128 01:13:44.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.586" starttime="20160128 01:13:44.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.587" starttime="20160128 01:13:44.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.589" starttime="20160128 01:13:44.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.590" starttime="20160128 01:13:44.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.592" starttime="20160128 01:13:44.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.593" starttime="20160128 01:13:44.592"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.594" starttime="20160128 01:13:44.593"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.595" starttime="20160128 01:13:44.595"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.596" starttime="20160128 01:13:44.449"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:44.597" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160128 01:13:44.602" starttime="20160128 01:13:44.596"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:44.603" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160128 01:13:44.638" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:44.639" level="INFO">${stdout_string} = [2016-01-28T00:13:34,447][INFO ][Camel (ticket-router) thread #80 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|321|...</msg>
<status status="PASS" endtime="20160128 01:13:44.639" starttime="20160128 01:13:44.603"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:44.640" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160128 01:13:44.718" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:44.718" starttime="20160128 01:13:44.639"></status>
</kw>
<msg timestamp="20160128 01:13:44.719" level="INFO">${tailed_text} = [2016-01-28T00:13:34,447][INFO ][Camel (ticket-router) thread #80 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|321|...</msg>
<status status="PASS" endtime="20160128 01:13:44.719" starttime="20160128 01:13:44.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.725" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:44.725" starttime="20160128 01:13:44.723"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.725" starttime="20160128 01:13:44.720"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.730" starttime="20160128 01:13:44.729"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.732" starttime="20160128 01:13:44.731"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.732" starttime="20160128 01:13:44.726"></status>
</kw>
<msg timestamp="20160128 01:13:44.733" level="INFO">${tailed_text} = [2016-01-28T00:13:34,447][INFO ][Camel (ticket-router) thread #80 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|321|...</msg>
<status status="PASS" endtime="20160128 01:13:44.733" starttime="20160128 01:13:44.432"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.747" starttime="20160128 01:13:44.746"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.754" starttime="20160128 01:13:44.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.755" starttime="20160128 01:13:44.755"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.757" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:44.757" level="INFO">${queryResultSetLines} = 1005391|6.2|321|1|prov01|2015-02-23 16:52:19.006+00|2015-02-23 16:52:18.253+00|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null...</msg>
<status status="PASS" endtime="20160128 01:13:44.757" starttime="20160128 01:13:44.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.759" starttime="20160128 01:13:44.758"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.760" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:44.761" level="INFO">@{queryResultSet} = [ 1005391|6.2|321|1|prov01|2015-02-23 16:52:19.006+00|2015-02-23 16:52:18.253+00|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|nu...</msg>
<status status="PASS" endtime="20160128 01:13:44.760" starttime="20160128 01:13:44.759"></status>
</kw>
<msg timestamp="20160128 01:13:44.762" level="INFO">@{queryRows} = [ 1005391|6.2|321|1|prov01|2015-02-23 16:52:19.006+00|2015-02-23 16:52:18.253+00|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|nu...</msg>
<status status="PASS" endtime="20160128 01:13:44.761" starttime="20160128 01:13:44.743"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.763" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:44.764" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:44.763" starttime="20160128 01:13:44.762"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.765" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:44.766" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:44.765" starttime="20160128 01:13:44.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:44.770" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:44.771" starttime="20160128 01:13:44.769"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.771" starttime="20160128 01:13:44.766"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.774" starttime="20160128 01:13:44.772"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.775" starttime="20160128 01:13:44.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.778" starttime="20160128 01:13:44.775"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:44.778" starttime="20160128 01:13:33.915"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:44.779" starttime="20160128 01:13:33.911"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.805" starttime="20160128 01:13:44.804"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:44.855" starttime="20160128 01:13:44.808"></status>
</kw>
<msg timestamp="20160128 01:13:44.857" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:13:44.856" starttime="20160128 01:13:44.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:44.868" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:45.253" level="INFO">Read output: Last login: Thu Jan 28 00:13:34 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:45.254" starttime="20160128 01:13:44.865"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:45.255" starttime="20160128 01:13:44.858"></status>
</kw>
<msg timestamp="20160128 01:13:45.257" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:13:45.256" starttime="20160128 01:13:44.800"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:45.263" starttime="20160128 01:13:45.262"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:45.264" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160128 01:13:45.268" starttime="20160128 01:13:45.263"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:45.268" starttime="20160128 01:13:45.258"></status>
</kw>
<msg timestamp="20160128 01:13:45.270" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:13:45.269" starttime="20160128 01:13:44.794"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:45.283" starttime="20160128 01:13:45.278"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:45.284" starttime="20160128 01:13:45.275"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:45.288" starttime="20160128 01:13:45.287"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:45.292" starttime="20160128 01:13:45.289"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:45.293" starttime="20160128 01:13:45.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.294" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:13:55.296" starttime="20160128 01:13:45.293"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.305" starttime="20160128 01:13:55.304"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:13:55.308" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:13:55.308" starttime="20160128 01:13:55.306"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.312" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:13:55.313" starttime="20160128 01:13:55.309"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.317" starttime="20160128 01:13:55.316"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:13:55.318" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:13:55.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:55.362" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:13:55.362" starttime="20160128 01:13:55.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.364" starttime="20160128 01:13:55.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.365" starttime="20160128 01:13:55.364"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.367" starttime="20160128 01:13:55.365"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:13:55.370" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:13:55.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:55.444" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:13:55.444" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:13:55.443" starttime="20160128 01:13:55.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.447" starttime="20160128 01:13:55.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.449" starttime="20160128 01:13:55.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.450" starttime="20160128 01:13:55.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.451" starttime="20160128 01:13:55.450"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.452" starttime="20160128 01:13:55.452"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.454" starttime="20160128 01:13:55.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.455" starttime="20160128 01:13:55.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.456" starttime="20160128 01:13:55.455"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.457" starttime="20160128 01:13:55.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.459" starttime="20160128 01:13:55.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.460" starttime="20160128 01:13:55.459"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.460" starttime="20160128 01:13:55.313"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:55.462" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160128 01:13:55.465" starttime="20160128 01:13:55.461"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:13:55.466" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160128 01:13:55.503" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:13:55.503" level="INFO">${stdout_string} = [2016-01-28T00:13:45,312][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|120|...</msg>
<status status="PASS" endtime="20160128 01:13:55.503" starttime="20160128 01:13:55.465"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:55.505" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160128 01:13:55.582" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:13:55.582" starttime="20160128 01:13:55.504"></status>
</kw>
<msg timestamp="20160128 01:13:55.583" level="INFO">${tailed_text} = [2016-01-28T00:13:45,312][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|120|...</msg>
<status status="PASS" endtime="20160128 01:13:55.583" starttime="20160128 01:13:55.301"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.588" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:13:55.589" starttime="20160128 01:13:55.587"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.589" starttime="20160128 01:13:55.584"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.594" starttime="20160128 01:13:55.593"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.596" starttime="20160128 01:13:55.595"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.597" starttime="20160128 01:13:55.590"></status>
</kw>
<msg timestamp="20160128 01:13:55.598" level="INFO">${tailed_text} = [2016-01-28T00:13:45,312][INFO ][Camel (ticket-router) thread #77 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|120|...</msg>
<status status="PASS" endtime="20160128 01:13:55.597" starttime="20160128 01:13:55.297"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.611" starttime="20160128 01:13:55.611"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.616" starttime="20160128 01:13:55.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.617" starttime="20160128 01:13:55.616"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.619" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:13:55.620" level="INFO">${queryResultSetLines} = 1000196|6.2|120|MONEYTX|1|CRCE|crce01|2015-02-23 09:45:57.996+00|2015-02-23 09:45:57.996+00|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|6.2|moneyTrans...</msg>
<status status="PASS" endtime="20160128 01:13:55.619" starttime="20160128 01:13:55.618"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.621" starttime="20160128 01:13:55.620"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.622" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:13:55.623" level="INFO">@{queryResultSet} = [ 1000196|6.2|120|MONEYTX|1|CRCE|crce01|2015-02-23 09:45:57.996+00|2015-02-23 09:45:57.996+00|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|6.2|moneyTra...</msg>
<status status="PASS" endtime="20160128 01:13:55.623" starttime="20160128 01:13:55.621"></status>
</kw>
<msg timestamp="20160128 01:13:55.624" level="INFO">@{queryRows} = [ 1000196|6.2|120|MONEYTX|1|CRCE|crce01|2015-02-23 09:45:57.996+00|2015-02-23 09:45:57.996+00|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|6.2|moneyTra...</msg>
<status status="PASS" endtime="20160128 01:13:55.624" starttime="20160128 01:13:55.607"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.625" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:13:55.626" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:13:55.626" starttime="20160128 01:13:55.624"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.627" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:13:55.628" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:13:55.628" starttime="20160128 01:13:55.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:13:55.632" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:13:55.633" starttime="20160128 01:13:55.631"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.633" starttime="20160128 01:13:55.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.636" starttime="20160128 01:13:55.634"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.636" starttime="20160128 01:13:55.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.639" starttime="20160128 01:13:55.637"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:55.640" starttime="20160128 01:13:44.785"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:13:55.640" starttime="20160128 01:13:44.781"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.667" starttime="20160128 01:13:55.666"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:55.721" starttime="20160128 01:13:55.670"></status>
</kw>
<msg timestamp="20160128 01:13:55.723" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:13:55.722" starttime="20160128 01:13:55.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:13:55.733" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:13:56.117" level="INFO">Read output: Last login: Thu Jan 28 00:13:45 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:13:56.118" starttime="20160128 01:13:55.731"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:56.119" starttime="20160128 01:13:55.724"></status>
</kw>
<msg timestamp="20160128 01:13:56.121" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:13:56.120" starttime="20160128 01:13:55.662"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:56.126" starttime="20160128 01:13:56.125"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:13:56.128" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160128 01:13:56.134" starttime="20160128 01:13:56.127"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:56.135" starttime="20160128 01:13:56.122"></status>
</kw>
<msg timestamp="20160128 01:13:56.136" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:13:56.135" starttime="20160128 01:13:55.656"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:56.151" starttime="20160128 01:13:56.144"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:56.151" starttime="20160128 01:13:56.141"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:56.156" starttime="20160128 01:13:56.155"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:13:56.161" starttime="20160128 01:13:56.157"></status>
</kw>
<status status="PASS" endtime="20160128 01:13:56.161" starttime="20160128 01:13:56.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.164" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:14:06.166" starttime="20160128 01:13:56.162"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.177" starttime="20160128 01:14:06.176"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:14:06.181" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:14:06.181" starttime="20160128 01:14:06.178"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.185" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:14:06.186" starttime="20160128 01:14:06.182"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.191" starttime="20160128 01:14:06.190"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:14:06.192" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:14:06.237" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:06.237" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:14:06.237" starttime="20160128 01:14:06.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.239" starttime="20160128 01:14:06.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.240" starttime="20160128 01:14:06.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.241" starttime="20160128 01:14:06.241"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:14:06.243" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:14:06.349" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:06.350" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:14:06.350" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:14:06.350" starttime="20160128 01:14:06.242"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.354" starttime="20160128 01:14:06.351"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.356" starttime="20160128 01:14:06.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.357" starttime="20160128 01:14:06.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.358" starttime="20160128 01:14:06.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.359" starttime="20160128 01:14:06.359"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.360" starttime="20160128 01:14:06.360"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.362" starttime="20160128 01:14:06.361"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.363" starttime="20160128 01:14:06.362"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.364" starttime="20160128 01:14:06.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.365" starttime="20160128 01:14:06.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.366" starttime="20160128 01:14:06.366"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.367" starttime="20160128 01:14:06.187"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:06.368" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160128 01:14:06.372" starttime="20160128 01:14:06.367"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:06.373" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160128 01:14:06.465" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:06.466" level="INFO">${stdout_string} = [2016-01-28T00:13:56,178][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|160|...</msg>
<status status="PASS" endtime="20160128 01:14:06.465" starttime="20160128 01:14:06.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:06.467" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160128 01:14:06.559" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:14:06.560" starttime="20160128 01:14:06.466"></status>
</kw>
<msg timestamp="20160128 01:14:06.562" level="INFO">${tailed_text} = [2016-01-28T00:13:56,178][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|160|...</msg>
<status status="PASS" endtime="20160128 01:14:06.561" starttime="20160128 01:14:06.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.575" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:14:06.576" starttime="20160128 01:14:06.570"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.577" starttime="20160128 01:14:06.563"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.588" starttime="20160128 01:14:06.586"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.592" starttime="20160128 01:14:06.590"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.593" starttime="20160128 01:14:06.579"></status>
</kw>
<msg timestamp="20160128 01:14:06.595" level="INFO">${tailed_text} = [2016-01-28T00:13:56,178][INFO ][Camel (ticket-router) thread #84 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 426] Ticket successfully routed [ticket=6.2|160|...</msg>
<status status="PASS" endtime="20160128 01:14:06.594" starttime="20160128 01:14:06.168"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.626" starttime="20160128 01:14:06.624"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.633" starttime="20160128 01:14:06.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.636" starttime="20160128 01:14:06.634"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.639" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:14:06.641" level="INFO">${queryResultSetLines} = 1000218|6.2|160|SIM_SWAP|1|CRCE|crce01|2015-02-23 12:42:43.815+00|2015-02-23 12:42:43.814+00|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE...</msg>
<status status="PASS" endtime="20160128 01:14:06.640" starttime="20160128 01:14:06.637"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.644" starttime="20160128 01:14:06.642"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.646" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:14:06.648" level="INFO">@{queryResultSet} = [ 1000218|6.2|160|SIM_SWAP|1|CRCE|crce01|2015-02-23 12:42:43.815+00|2015-02-23 12:42:43.814+00|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NO...</msg>
<status status="PASS" endtime="20160128 01:14:06.647" starttime="20160128 01:14:06.645"></status>
</kw>
<msg timestamp="20160128 01:14:06.650" level="INFO">@{queryRows} = [ 1000218|6.2|160|SIM_SWAP|1|CRCE|crce01|2015-02-23 12:42:43.815+00|2015-02-23 12:42:43.814+00|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NO...</msg>
<status status="PASS" endtime="20160128 01:14:06.649" starttime="20160128 01:14:06.617"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.654" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:14:06.655" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:14:06.654" starttime="20160128 01:14:06.651"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.658" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:14:06.659" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:14:06.659" starttime="20160128 01:14:06.656"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:14:06.669" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:14:06.669" starttime="20160128 01:14:06.667"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.670" starttime="20160128 01:14:06.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.677" starttime="20160128 01:14:06.672"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.678" starttime="20160128 01:14:06.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.684" starttime="20160128 01:14:06.679"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:06.685" starttime="20160128 01:13:55.646"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:14:06.687" starttime="20160128 01:13:55.642"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.750" starttime="20160128 01:14:06.748"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:06.807" starttime="20160128 01:14:06.756"></status>
</kw>
<msg timestamp="20160128 01:14:06.809" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:14:06.808" starttime="20160128 01:14:06.751"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:14:06.820" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:14:07.334" level="INFO">Read output: Last login: Thu Jan 28 00:13:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:14:07.335" starttime="20160128 01:14:06.817"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:07.336" starttime="20160128 01:14:06.810"></status>
</kw>
<msg timestamp="20160128 01:14:07.338" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:14:07.337" starttime="20160128 01:14:06.740"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:07.343" starttime="20160128 01:14:07.342"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:07.345" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160128 01:14:07.348" starttime="20160128 01:14:07.344"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:07.348" starttime="20160128 01:14:07.339"></status>
</kw>
<msg timestamp="20160128 01:14:07.350" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:14:07.349" starttime="20160128 01:14:06.729"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:07.362" starttime="20160128 01:14:07.359"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:07.362" starttime="20160128 01:14:07.355"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:07.368" starttime="20160128 01:14:07.367"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:07.373" starttime="20160128 01:14:07.368"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:07.373" starttime="20160128 01:14:07.363"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.570" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:14:17.571" starttime="20160128 01:14:07.373"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.582" starttime="20160128 01:14:17.581"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:14:17.585" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:14:17.585" starttime="20160128 01:14:17.582"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.589" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:14:17.589" starttime="20160128 01:14:17.586"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.594" starttime="20160128 01:14:17.593"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:14:17.595" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:14:17.639" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:17.639" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:14:17.639" starttime="20160128 01:14:17.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.641" starttime="20160128 01:14:17.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.642" starttime="20160128 01:14:17.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.643" starttime="20160128 01:14:17.642"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:14:17.645" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:14:17.722" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:17.723" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:14:17.723" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:14:17.723" starttime="20160128 01:14:17.644"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.727" starttime="20160128 01:14:17.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.728" starttime="20160128 01:14:17.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.729" starttime="20160128 01:14:17.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.730" starttime="20160128 01:14:17.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.731" starttime="20160128 01:14:17.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.733" starttime="20160128 01:14:17.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.734" starttime="20160128 01:14:17.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.735" starttime="20160128 01:14:17.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.736" starttime="20160128 01:14:17.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.737" starttime="20160128 01:14:17.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.739" starttime="20160128 01:14:17.738"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.739" starttime="20160128 01:14:17.590"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:17.741" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160128 01:14:17.750" starttime="20160128 01:14:17.740"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:17.751" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160128 01:14:17.787" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:17.787" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160128 01:14:17.787" starttime="20160128 01:14:17.750"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:17.789" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160128 01:14:17.867" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:14:17.867" starttime="20160128 01:14:17.788"></status>
</kw>
<msg timestamp="20160128 01:14:17.868" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:17.868" starttime="20160128 01:14:17.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.873" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:14:17.873" starttime="20160128 01:14:17.871"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.874" starttime="20160128 01:14:17.869"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.879" starttime="20160128 01:14:17.878"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.880" starttime="20160128 01:14:17.879"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.880" starttime="20160128 01:14:17.875"></status>
</kw>
<msg timestamp="20160128 01:14:17.881" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:17.881" starttime="20160128 01:14:17.573"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.895" starttime="20160128 01:14:17.895"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.899" starttime="20160128 01:14:17.896"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.900" starttime="20160128 01:14:17.900"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.902" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:14:17.902" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160128 01:14:17.902" starttime="20160128 01:14:17.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.904" starttime="20160128 01:14:17.903"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.905" level="INFO">0 lines returned</msg>
<msg timestamp="20160128 01:14:17.905" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:17.905" starttime="20160128 01:14:17.904"></status>
</kw>
<msg timestamp="20160128 01:14:17.906" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:17.906" starttime="20160128 01:14:17.891"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.908" level="INFO">Length is 0</msg>
<msg timestamp="20160128 01:14:17.909" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160128 01:14:17.908" starttime="20160128 01:14:17.907"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:14:17.910" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:14:17.911" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160128 01:14:17.910" starttime="20160128 01:14:17.909"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.914" starttime="20160128 01:14:17.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:14:17.918" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:14:17.918" starttime="20160128 01:14:17.917"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.918" starttime="20160128 01:14:17.914"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.919" starttime="20160128 01:14:17.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.922" starttime="20160128 01:14:17.919"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.922" starttime="20160128 01:14:06.710"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:17.923" starttime="20160128 01:14:06.700"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:14:17.924" starttime="20160128 01:14:06.690"></status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.954" starttime="20160128 01:14:17.953"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:17.995" starttime="20160128 01:14:17.957"></status>
</kw>
<msg timestamp="20160128 01:14:17.995" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:14:17.995" starttime="20160128 01:14:17.954"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:14:18.000" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:14:18.395" level="INFO">Read output: Last login: Thu Jan 28 00:14:07 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:14:18.395" starttime="20160128 01:14:17.999"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:18.396" starttime="20160128 01:14:17.996"></status>
</kw>
<msg timestamp="20160128 01:14:18.398" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:14:18.397" starttime="20160128 01:14:17.949"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:18.403" starttime="20160128 01:14:18.402"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:18.405" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20160128 01:14:18.408" starttime="20160128 01:14:18.404"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:18.408" starttime="20160128 01:14:18.399"></status>
</kw>
<msg timestamp="20160128 01:14:18.410" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:14:18.409" starttime="20160128 01:14:17.943"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:18.426" starttime="20160128 01:14:18.423"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:18.426" starttime="20160128 01:14:18.418"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:18.431" starttime="20160128 01:14:18.430"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:18.435" starttime="20160128 01:14:18.432"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:18.436" starttime="20160128 01:14:18.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.438" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:14:28.439" starttime="20160128 01:14:18.436"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.448" starttime="20160128 01:14:28.447"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:14:28.452" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:14:28.451" starttime="20160128 01:14:28.449"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.456" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:14:28.457" starttime="20160128 01:14:28.452"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.461" starttime="20160128 01:14:28.460"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:14:28.463" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:14:28.510" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:28.511" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:14:28.511" starttime="20160128 01:14:28.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.512" starttime="20160128 01:14:28.512"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.514" starttime="20160128 01:14:28.513"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.515" starttime="20160128 01:14:28.514"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:14:28.517" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:14:28.598" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:28.599" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:14:28.599" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:14:28.598" starttime="20160128 01:14:28.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.602" starttime="20160128 01:14:28.599"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.603" starttime="20160128 01:14:28.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.605" starttime="20160128 01:14:28.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.606" starttime="20160128 01:14:28.605"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.607" starttime="20160128 01:14:28.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.608" starttime="20160128 01:14:28.608"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.610" starttime="20160128 01:14:28.609"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.611" starttime="20160128 01:14:28.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.612" starttime="20160128 01:14:28.612"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.613" starttime="20160128 01:14:28.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.614" starttime="20160128 01:14:28.614"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.615" starttime="20160128 01:14:28.457"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:28.616" level="INFO">Starting command 'cat tmpfilemonitor17.log'.</msg>
<status status="PASS" endtime="20160128 01:14:28.627" starttime="20160128 01:14:28.615"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:28.628" level="INFO">Reading output of command 'cat tmpfilemonitor17.log'.</msg>
<msg timestamp="20160128 01:14:28.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:28.664" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160128 01:14:28.664" starttime="20160128 01:14:28.627"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:28.666" level="INFO">Executing command 'rm tmpfilemonitor17.log'.</msg>
<msg timestamp="20160128 01:14:28.747" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:14:28.748" starttime="20160128 01:14:28.665"></status>
</kw>
<msg timestamp="20160128 01:14:28.749" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:28.748" starttime="20160128 01:14:28.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.754" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SMS_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/SMS_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:14:28.754" starttime="20160128 01:14:28.752"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.754" starttime="20160128 01:14:28.749"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.759" starttime="20160128 01:14:28.758"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.760" starttime="20160128 01:14:28.760"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.761" starttime="20160128 01:14:28.755"></status>
</kw>
<msg timestamp="20160128 01:14:28.762" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:28.762" starttime="20160128 01:14:28.440"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.776" starttime="20160128 01:14:28.775"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.780" starttime="20160128 01:14:28.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.781" starttime="20160128 01:14:28.780"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.783" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:14:28.783" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160128 01:14:28.783" starttime="20160128 01:14:28.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.784" starttime="20160128 01:14:28.784"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.786" level="INFO">0 lines returned</msg>
<msg timestamp="20160128 01:14:28.786" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:28.786" starttime="20160128 01:14:28.785"></status>
</kw>
<msg timestamp="20160128 01:14:28.787" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:28.787" starttime="20160128 01:14:28.771"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.789" level="INFO">Length is 0</msg>
<msg timestamp="20160128 01:14:28.789" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160128 01:14:28.789" starttime="20160128 01:14:28.788"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.791" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:14:28.791" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160128 01:14:28.791" starttime="20160128 01:14:28.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.795" starttime="20160128 01:14:28.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:14:28.798" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:14:28.799" starttime="20160128 01:14:28.797"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.799" starttime="20160128 01:14:28.795"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.800" starttime="20160128 01:14:28.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.802" starttime="20160128 01:14:28.800"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.803" starttime="20160128 01:14:17.934"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:28.804" starttime="20160128 01:14:17.929"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:14:28.804" starttime="20160128 01:14:17.925"></status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.834" starttime="20160128 01:14:28.834"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:28.875" starttime="20160128 01:14:28.838"></status>
</kw>
<msg timestamp="20160128 01:14:28.875" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:14:28.875" starttime="20160128 01:14:28.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:14:28.880" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:14:29.270" level="INFO">Read output: Last login: Thu Jan 28 00:14:18 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:14:29.271" starttime="20160128 01:14:28.879"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:29.272" starttime="20160128 01:14:28.876"></status>
</kw>
<msg timestamp="20160128 01:14:29.273" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:14:29.273" starttime="20160128 01:14:28.829"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:29.279" starttime="20160128 01:14:29.278"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:29.280" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20160128 01:14:29.284" starttime="20160128 01:14:29.279"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:29.285" starttime="20160128 01:14:29.274"></status>
</kw>
<msg timestamp="20160128 01:14:29.286" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:14:29.286" starttime="20160128 01:14:28.824"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:29.352" starttime="20160128 01:14:29.295"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:29.353" starttime="20160128 01:14:29.292"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:29.357" starttime="20160128 01:14:29.357"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:29.362" starttime="20160128 01:14:29.358"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:29.363" starttime="20160128 01:14:29.354"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.365" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:14:39.366" starttime="20160128 01:14:29.363"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.375" starttime="20160128 01:14:39.374"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:14:39.379" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:14:39.378" starttime="20160128 01:14:39.376"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.383" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:14:39.384" starttime="20160128 01:14:39.379"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.388" starttime="20160128 01:14:39.387"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:14:39.390" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:14:39.438" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:39.438" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:14:39.438" starttime="20160128 01:14:39.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.440" starttime="20160128 01:14:39.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.441" starttime="20160128 01:14:39.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.442" starttime="20160128 01:14:39.441"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:14:39.444" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:14:39.522" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:39.523" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:14:39.523" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:14:39.523" starttime="20160128 01:14:39.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.526" starttime="20160128 01:14:39.524"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.528" starttime="20160128 01:14:39.527"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.529" starttime="20160128 01:14:39.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.530" starttime="20160128 01:14:39.529"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.531" starttime="20160128 01:14:39.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.532" starttime="20160128 01:14:39.532"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.534" starttime="20160128 01:14:39.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.535" starttime="20160128 01:14:39.534"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.536" starttime="20160128 01:14:39.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.537" starttime="20160128 01:14:39.537"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.539" starttime="20160128 01:14:39.538"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.539" starttime="20160128 01:14:39.384"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:39.541" level="INFO">Starting command 'cat tmpfilemonitor18.log'.</msg>
<status status="PASS" endtime="20160128 01:14:39.545" starttime="20160128 01:14:39.540"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:39.546" level="INFO">Reading output of command 'cat tmpfilemonitor18.log'.</msg>
<msg timestamp="20160128 01:14:39.589" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:39.590" level="INFO">${stdout_string} = [2016-01-28T00:14:29,357][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=55555555|101|ssssss...</msg>
<status status="PASS" endtime="20160128 01:14:39.589" starttime="20160128 01:14:39.545"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:39.591" level="INFO">Executing command 'rm tmpfilemonitor18.log'.</msg>
<msg timestamp="20160128 01:14:39.676" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:14:39.677" starttime="20160128 01:14:39.590"></status>
</kw>
<msg timestamp="20160128 01:14:39.678" level="INFO">${tailed_text} = [2016-01-28T00:14:29,357][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=55555555|101|ssssss...</msg>
<status status="PASS" endtime="20160128 01:14:39.678" starttime="20160128 01:14:39.371"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.683" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/DATA_NOK_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/DATA_NOK_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:14:39.684" starttime="20160128 01:14:39.682"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.684" starttime="20160128 01:14:39.679"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.689" starttime="20160128 01:14:39.688"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.691" starttime="20160128 01:14:39.690"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.691" starttime="20160128 01:14:39.685"></status>
</kw>
<msg timestamp="20160128 01:14:39.692" level="INFO">${tailed_text} = [2016-01-28T00:14:29,357][INFO ][Camel (ticket-router) thread #79 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 176] Received ticket [ticket=55555555|101|ssssss...</msg>
<status status="PASS" endtime="20160128 01:14:39.692" starttime="20160128 01:14:39.368"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.707" starttime="20160128 01:14:39.706"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.741" starttime="20160128 01:14:39.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.742" starttime="20160128 01:14:39.742"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.744" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:14:39.745" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160128 01:14:39.744" starttime="20160128 01:14:39.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.746" starttime="20160128 01:14:39.745"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.747" level="INFO">0 lines returned</msg>
<msg timestamp="20160128 01:14:39.748" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:39.748" starttime="20160128 01:14:39.746"></status>
</kw>
<msg timestamp="20160128 01:14:39.749" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:39.749" starttime="20160128 01:14:39.702"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.750" level="INFO">Length is 0</msg>
<msg timestamp="20160128 01:14:39.751" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160128 01:14:39.751" starttime="20160128 01:14:39.749"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.752" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:14:39.753" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160128 01:14:39.753" starttime="20160128 01:14:39.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.757" starttime="20160128 01:14:39.754"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:14:39.761" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:14:39.762" starttime="20160128 01:14:39.760"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.762" starttime="20160128 01:14:39.757"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.763" starttime="20160128 01:14:39.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.766" starttime="20160128 01:14:39.764"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.766" starttime="20160128 01:14:28.815"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:39.767" starttime="20160128 01:14:28.810"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:14:39.768" starttime="20160128 01:14:28.806"></status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.792" starttime="20160128 01:14:39.792"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:39.837" starttime="20160128 01:14:39.796"></status>
</kw>
<msg timestamp="20160128 01:14:39.838" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:14:39.837" starttime="20160128 01:14:39.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:14:39.842" level="INFO">Logging into '10.105.125.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:14:40.251" level="INFO">Read output: Last login: Thu Jan 28 00:14:29 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@xdr01.tb25 ~]$</msg>
<status status="PASS" endtime="20160128 01:14:40.252" starttime="20160128 01:14:39.841"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:40.252" starttime="20160128 01:14:39.838"></status>
</kw>
<msg timestamp="20160128 01:14:40.254" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:14:40.253" starttime="20160128 01:14:39.787"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:40.259" starttime="20160128 01:14:40.258"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:40.261" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/6.2.0/inew-mvno-xdr.log &gt; tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20160128 01:14:40.264" starttime="20160128 01:14:40.260"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:40.265" starttime="20160128 01:14:40.255"></status>
</kw>
<msg timestamp="20160128 01:14:40.267" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:14:40.265" starttime="20160128 01:14:39.782"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:40.279" starttime="20160128 01:14:40.276"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:40.279" starttime="20160128 01:14:40.273"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:40.284" starttime="20160128 01:14:40.283"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:40.289" starttime="20160128 01:14:40.285"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:40.290" starttime="20160128 01:14:40.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.291" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:14:50.292" starttime="20160128 01:14:40.290"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.302" starttime="20160128 01:14:50.301"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:14:50.311" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:14:50.311" starttime="20160128 01:14:50.302"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.315" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:14:50.316" starttime="20160128 01:14:50.312"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.321" starttime="20160128 01:14:50.320"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:14:50.322" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:14:50.377" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:50.378" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:14:50.378" starttime="20160128 01:14:50.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.379" starttime="20160128 01:14:50.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.381" starttime="20160128 01:14:50.380"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.382" starttime="20160128 01:14:50.381"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:14:50.384" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:14:50.462" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:50.463" level="INFO">${stderr} = id: cannot find name for group ID 20007</msg>
<msg timestamp="20160128 01:14:50.464" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:14:50.463" starttime="20160128 01:14:50.383"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.467" starttime="20160128 01:14:50.464"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.468" starttime="20160128 01:14:50.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.470" starttime="20160128 01:14:50.469"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.471" starttime="20160128 01:14:50.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.473" starttime="20160128 01:14:50.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.475" starttime="20160128 01:14:50.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.476" starttime="20160128 01:14:50.475"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.478" starttime="20160128 01:14:50.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.479" starttime="20160128 01:14:50.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.480" starttime="20160128 01:14:50.479"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.481" starttime="20160128 01:14:50.480"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.482" starttime="20160128 01:14:50.316"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:50.483" level="INFO">Starting command 'cat tmpfilemonitor19.log'.</msg>
<status status="PASS" endtime="20160128 01:14:50.486" starttime="20160128 01:14:50.482"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:50.487" level="INFO">Reading output of command 'cat tmpfilemonitor19.log'.</msg>
<msg timestamp="20160128 01:14:50.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:14:50.528" level="INFO">${stdout_string} = </msg>
<status status="PASS" endtime="20160128 01:14:50.528" starttime="20160128 01:14:50.487"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:14:50.530" level="INFO">Executing command 'rm tmpfilemonitor19.log'.</msg>
<msg timestamp="20160128 01:14:50.612" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:14:50.613" starttime="20160128 01:14:50.529"></status>
</kw>
<msg timestamp="20160128 01:14:50.614" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:50.613" starttime="20160128 01:14:50.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.619" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:14:50.619" starttime="20160128 01:14:50.617"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.619" starttime="20160128 01:14:50.614"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.624" starttime="20160128 01:14:50.623"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.625" starttime="20160128 01:14:50.625"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.626" starttime="20160128 01:14:50.620"></status>
</kw>
<msg timestamp="20160128 01:14:50.627" level="INFO">${tailed_text} = </msg>
<status status="PASS" endtime="20160128 01:14:50.626" starttime="20160128 01:14:50.294"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.641" starttime="20160128 01:14:50.640"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.645" starttime="20160128 01:14:50.641"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.647" starttime="20160128 01:14:50.646"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.648" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/mTel/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:14:50.649" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160128 01:14:50.648" starttime="20160128 01:14:50.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.650" starttime="20160128 01:14:50.649"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.651" level="INFO">0 lines returned</msg>
<msg timestamp="20160128 01:14:50.652" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:50.652" starttime="20160128 01:14:50.650"></status>
</kw>
<msg timestamp="20160128 01:14:50.653" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160128 01:14:50.652" starttime="20160128 01:14:50.637"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.654" level="INFO">Length is 0</msg>
<msg timestamp="20160128 01:14:50.655" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160128 01:14:50.654" starttime="20160128 01:14:50.653"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:14:50.656" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:14:50.657" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160128 01:14:50.656" starttime="20160128 01:14:50.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.660" starttime="20160128 01:14:50.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:14:50.664" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:14:50.664" starttime="20160128 01:14:50.663"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.664" starttime="20160128 01:14:50.660"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.665" starttime="20160128 01:14:50.633"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.667" starttime="20160128 01:14:50.665"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.668" starttime="20160128 01:14:39.774"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:14:50.669" starttime="20160128 01:14:39.770"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:14:50.699" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160128 01:14:50.700" starttime="20160128 01:14:50.698"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:14:50.702" starttime="20160128 01:14:50.700"></status>
</kw>
<status status="PASS" endtime="20160128 01:14:50.702" starttime="20160128 01:14:50.696"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:14:50.702" starttime="20160128 01:11:50.264"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:14:50.794" starttime="20160128 01:11:50.251"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:14:50.854" starttime="20160128 01:11:50.237"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="FAIL" endtime="20160128 01:14:50.946" starttime="20160128 01:10:01.468"></status>
</suite>
<statistics>
<total>
<stat pass="27" fail="31">Critical Tests</stat>
<stat pass="27" fail="31">All Tests</stat>
</total>
<tag>
<stat pass="0" info="" doc="" combined="" fail="31" links="">calls</stat>
<stat pass="16" info="" doc="" combined="" fail="0" links="">ComponentTest</stat>
<stat pass="0" info="" doc="" combined="" fail="9" links="">DATA_only</stat>
<stat pass="27" info="" doc="" combined="" fail="31" links="">matko.sanseovic</stat>
<stat pass="0" info="" doc="" combined="" fail="2" links="">MFC_only</stat>
<stat pass="0" info="" doc="" combined="" fail="12" links="">MOC_only</stat>
<stat pass="0" info="" doc="" combined="" fail="8" links="">MTC_only</stat>
<stat pass="11" info="" doc="" combined="" fail="0" links="">MTEL_specific</stat>
<stat pass="16" info="" doc="" combined="" fail="31" links="">MTEL_supported</stat>
<stat pass="16" info="" doc="" combined="" fail="12" links="">MVNA_MEX_supported</stat>
<stat pass="0" info="" doc="" combined="" fail="9" links="">POSTPAID_only</stat>
<stat pass="0" info="" doc="" combined="" fail="4" links="">POSTPAID_supported</stat>
<stat pass="16" info="" doc="" combined="" fail="11" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="16" info="" doc="" combined="" fail="11" links="">TNZ_supported</stat>
<stat pass="11" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="7" info="" doc="" combined="" fail="10" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="16" info="" doc="" combined="" fail="0" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="27" id="s1" fail="31" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="0" id="s1-s1" fail="31" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="0" id="s1-s1-s1" fail="13" name="PostPaid">Robot Testsuites.Basic.PostPaid</stat>
<stat pass="0" id="s1-s1-s1-s1" fail="3" name="DATA">Robot Testsuites.Basic.PostPaid.DATA</stat>
<stat pass="0" id="s1-s1-s1-s1-s1" fail="3" name="Postpaid-Data-Regression-Suite">Robot Testsuites.Basic.PostPaid.DATA.Postpaid-Data-Regression-Suite</stat>
<stat pass="0" id="s1-s1-s1-s2" fail="1" name="MFC">Robot Testsuites.Basic.PostPaid.MFC</stat>
<stat pass="0" id="s1-s1-s1-s2-s1" fail="1" name="MFC POSTPAID-ShortDuration">Robot Testsuites.Basic.PostPaid.MFC.MFC POSTPAID-ShortDuration</stat>
<stat pass="0" id="s1-s1-s1-s2-s1-s1" fail="1" name="MFC POSTPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PostPaid.MFC.MFC POSTPAID-ShortDuration.MFC POSTPAID-ShortDuration-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s3" fail="5" name="MOC">Robot Testsuites.Basic.PostPaid.MOC</stat>
<stat pass="0" id="s1-s1-s1-s3-s1" fail="5" name="OnNet">Robot Testsuites.Basic.PostPaid.MOC.OnNet</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s1" fail="1" name="MOC POSTPAID ONNET Abandon">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET Abandon</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s1-s1" fail="1" name="MOC POSTPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET Abandon.MOC POSTPAID ONNET-Abandon-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s2" fail="1" name="MOC POSTPAID ONNET Busy">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET Busy</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s2-s1" fail="1" name="MOC POSTPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET Busy.MOC POSTPAID ONNET-Busy-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s3" fail="1" name="MOC POSTPAID ONNET LongDuration196s">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET LongDuration196s</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s3-s1" fail="1" name="MOC POSTPAID ONNET-LongDuration196s-robot-suite">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET LongDuration196s.MOC POSTPAID ONNET-LongDuration196s-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s4" fail="1" name="MOC POSTPAID ONNET NoAnswer">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET NoAnswer</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s4-s1" fail="1" name="MOC POSTPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET NoAnswer.MOC POSTPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s5" fail="1" name="MOC POSTPAID ONNET ShortDuration">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET ShortDuration</stat>
<stat pass="0" id="s1-s1-s1-s3-s1-s5-s1" fail="1" name="MOC POSTPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PostPaid.MOC.OnNet.MOC POSTPAID ONNET ShortDuration.MOC POSTPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s4" fail="4" name="MTC">Robot Testsuites.Basic.PostPaid.MTC</stat>
<stat pass="0" id="s1-s1-s1-s4-s1" fail="1" name="MTC POSTPAID-Abandon">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-Abandon</stat>
<stat pass="0" id="s1-s1-s1-s4-s1-s1" fail="1" name="MTC POSTPAID-Abandon-robot-suite">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-Abandon.MTC POSTPAID-Abandon-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s4-s2" fail="1" name="MTC POSTPAID-Busy">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-Busy</stat>
<stat pass="0" id="s1-s1-s1-s4-s2-s1" fail="1" name="MTC POSTPAID-Busy-robot-suite">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-Busy.MTC POSTPAID-Busy-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s4-s3" fail="1" name="MTC POSTPAID-NoAnswer">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-NoAnswer</stat>
<stat pass="0" id="s1-s1-s1-s4-s3-s1" fail="1" name="MTC POSTPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-NoAnswer.MTC POSTPAID-NoAnswer-robot-suite</stat>
<stat pass="0" id="s1-s1-s1-s4-s4" fail="1" name="MTC POSTPAID-ShortDuration">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-ShortDuration</stat>
<stat pass="0" id="s1-s1-s1-s4-s4-s1" fail="1" name="MTC POSTPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PostPaid.MTC.MTC POSTPAID-ShortDuration.MTC POSTPAID-ShortDuration-robot-suite</stat>
<stat pass="0" id="s1-s1-s2" fail="18" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="0" id="s1-s1-s2-s1" fail="6" name="DATA">Robot Testsuites.Basic.PrePaid.DATA</stat>
<stat pass="0" id="s1-s1-s2-s1-s1" fail="6" name="Data-Regression-Suite">Robot Testsuites.Basic.PrePaid.DATA.Data-Regression-Suite</stat>
<stat pass="0" id="s1-s1-s2-s2" fail="1" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="0" id="s1-s1-s2-s2-s1" fail="1" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="0" id="s1-s1-s2-s2-s1-s1" fail="1" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3" fail="7" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="0" id="s1-s1-s2-s3-s1" fail="7" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s1" fail="1" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s1-s1" fail="1" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s2" fail="1" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s2-s1" fail="1" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s3" fail="1" name="MOC PREPAID ONNET-LongDuration196s">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration196s</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s3-s1" fail="1" name="MOC PREPAID ONNET-LongDuration196s-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration196s.MOC PREPAID ONNET-LongDuration196s-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s4" fail="1" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s4-s1" fail="1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s5" fail="1" name="MOC PREPAID ONNET-NoCredit">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s5-s1" fail="1" name="MOC PREPAID ONNET-NoCredit-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit.MOC PREPAID ONNET-NoCredit-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s6" fail="1" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s6-s1" fail="1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s7" fail="1" name="MOC PREPAID ONNET-ToUnknown">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown</stat>
<stat pass="0" id="s1-s1-s2-s3-s1-s7-s1" fail="1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown.MOC PREPAID ONNET-ToUnknown-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s4" fail="4" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="0" id="s1-s1-s2-s4-s1" fail="1" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="0" id="s1-s1-s2-s4-s1-s1" fail="1" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s4-s2" fail="1" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="0" id="s1-s1-s2-s4-s2-s1" fail="1" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s4-s3" fail="1" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="0" id="s1-s1-s2-s4-s3-s1" fail="1" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="0" id="s1-s1-s2-s4-s4" fail="1" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="0" id="s1-s1-s2-s4-s4-s1" fail="1" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="11" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="11" id="s1-s2-s1" fail="0" name="mTel">Robot Testsuites.Ussd.mTel</stat>
<stat pass="11" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.mTel.Ussd-Robot-Suite</stat>
<stat pass="16" id="s1-s3" fail="0" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="16" id="s1-s3-s1" fail="0" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="16" id="s1-s3-s1-s1" fail="0" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
