<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.8.7 (Jython 2.7rc1 on java1.7.0_79)" generated="20160128 01:00:53.508">
<suite source="/opt/robot/robotworkspace/robot_testsuites" id="s1" name="Robot Testsuites">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic" id="s1-s1" name="Basic">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid" id="s1-s1-s1" name="PrePaid">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC" id="s1-s1-s1-s1" name="MFC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration" id="s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MFC/MFC_PREPAID-ShortDuration/MFC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s1-s1-s1" name="MFC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:00:54.730" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:00:54.733" level="INFO">${date} = Thu Jan 28 01:00:54 CET 2016</msg>
<status status="PASS" endtime="20160128 01:00:54.732" starttime="20160128 01:00:54.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:54.736" level="INFO">Date and time: Thu Jan 28 01:00:54 CET 2016</msg>
<status status="PASS" endtime="20160128 01:00:54.737" starttime="20160128 01:00:54.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:54.740" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:00:54.741" starttime="20160128 01:00:54.738"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:54.798" starttime="20160128 01:00:54.796"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.044" starttime="20160128 01:00:54.810"></status>
</kw>
<msg timestamp="20160128 01:00:55.047" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160128 01:00:55.046" starttime="20160128 01:00:54.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:00:55.059" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:00:55.554" level="INFO">Read output: Last login: Wed Jan 27 02:42:01 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:00:55.557" starttime="20160128 01:00:55.055"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:55.559" starttime="20160128 01:00:55.049"></status>
</kw>
<msg timestamp="20160128 01:00:55.565" level="INFO">${ssh_connection} = 1</msg>
<status status="PASS" endtime="20160128 01:00:55.563" starttime="20160128 01:00:54.785"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:00:55.580" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:00:55.579" starttime="20160128 01:00:55.568"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:00:55.587" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:00:55.938" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:00:55.940" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:00:55.939" starttime="20160128 01:00:55.583"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.947" starttime="20160128 01:00:55.944"></status>
</kw>
<msg timestamp="20160128 01:00:55.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:00:55.949" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:00:55.948" starttime="20160128 01:00:55.941"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.958" starttime="20160128 01:00:55.956"></status>
</kw>
<msg timestamp="20160128 01:00:55.960" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:00:55.959" starttime="20160128 01:00:55.951"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:00:55.964" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:00:55.964" starttime="20160128 01:00:55.961"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:00:55.968" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:00:55.968" starttime="20160128 01:00:55.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.971" starttime="20160128 01:00:55.970"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.984" starttime="20160128 01:00:55.981"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.991" starttime="20160128 01:00:55.985"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:55.992" starttime="20160128 01:00:55.973"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:55.999" starttime="20160128 01:00:55.997"></status>
</kw>
<msg timestamp="20160128 01:00:56.001" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:00:56.000" starttime="20160128 01:00:55.993"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:56.004" starttime="20160128 01:00:56.002"></status>
</kw>
<msg timestamp="20160128 01:00:56.007" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:00:56.008" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:00:56.006" starttime="20160128 01:00:54.758"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:56.060" starttime="20160128 01:00:56.058"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:56.110" starttime="20160128 01:00:56.067"></status>
</kw>
<msg timestamp="20160128 01:00:56.112" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160128 01:00:56.111" starttime="20160128 01:00:56.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:00:56.122" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:00:56.857" level="INFO">Read output: Last login: Wed Jan 27 02:44:55 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:00:56.859" starttime="20160128 01:00:56.120"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:56.860" starttime="20160128 01:00:56.113"></status>
</kw>
<msg timestamp="20160128 01:00:56.862" level="INFO">${ssh_connection} = 2</msg>
<status status="PASS" endtime="20160128 01:00:56.861" starttime="20160128 01:00:56.047"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:00:56.868" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:00:56.867" starttime="20160128 01:00:56.863"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:00:56.871" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:00:57.399" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:00:57.401" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:00:57.400" starttime="20160128 01:00:56.869"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.407" starttime="20160128 01:00:57.405"></status>
</kw>
<msg timestamp="20160128 01:00:57.408" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:00:57.409" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:00:57.408" starttime="20160128 01:00:57.402"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.417" starttime="20160128 01:00:57.415"></status>
</kw>
<msg timestamp="20160128 01:00:57.418" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:00:57.417" starttime="20160128 01:00:57.410"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:00:57.421" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:00:57.421" starttime="20160128 01:00:57.419"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:00:57.425" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:00:57.424" starttime="20160128 01:00:57.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.427" starttime="20160128 01:00:57.426"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.438" starttime="20160128 01:00:57.436"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.441" starttime="20160128 01:00:57.439"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:57.443" starttime="20160128 01:00:57.428"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.451" starttime="20160128 01:00:57.449"></status>
</kw>
<msg timestamp="20160128 01:00:57.452" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:00:57.451" starttime="20160128 01:00:57.444"></status>
</kw>
<msg timestamp="20160128 01:00:57.454" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:00:57.455" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:00:57.453" starttime="20160128 01:00:56.022"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.503" starttime="20160128 01:00:57.501"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:57.565" starttime="20160128 01:00:57.508"></status>
</kw>
<msg timestamp="20160128 01:00:57.568" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160128 01:00:57.567" starttime="20160128 01:00:57.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:00:57.587" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:00:58.043" level="INFO">Read output: Last login: Wed Jan 27 02:42:03 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:00:58.044" starttime="20160128 01:00:57.583"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:58.046" starttime="20160128 01:00:57.571"></status>
</kw>
<msg timestamp="20160128 01:00:58.049" level="INFO">${ssh_connection} = 3</msg>
<status status="PASS" endtime="20160128 01:00:58.048" starttime="20160128 01:00:57.492"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:00:58.054" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:00:58.054" starttime="20160128 01:00:58.050"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:00:58.058" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:00:58.240" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:00:58.241" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:00:58.240" starttime="20160128 01:00:58.056"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.248" starttime="20160128 01:00:58.245"></status>
</kw>
<msg timestamp="20160128 01:00:58.249" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:00:58.250" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:00:58.249" starttime="20160128 01:00:58.243"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.257" starttime="20160128 01:00:58.255"></status>
</kw>
<msg timestamp="20160128 01:00:58.258" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:00:58.257" starttime="20160128 01:00:58.251"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:00:58.261" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:00:58.261" starttime="20160128 01:00:58.259"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:00:58.265" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:00:58.264" starttime="20160128 01:00:58.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.267" starttime="20160128 01:00:58.266"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.277" starttime="20160128 01:00:58.275"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.279" starttime="20160128 01:00:58.277"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:58.282" starttime="20160128 01:00:58.268"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.289" starttime="20160128 01:00:58.287"></status>
</kw>
<msg timestamp="20160128 01:00:58.290" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:00:58.290" starttime="20160128 01:00:58.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.293" starttime="20160128 01:00:58.291"></status>
</kw>
<msg timestamp="20160128 01:00:58.295" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:00:58.296" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:00:58.294" starttime="20160128 01:00:57.467"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.339" starttime="20160128 01:00:58.337"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:58.402" starttime="20160128 01:00:58.345"></status>
</kw>
<msg timestamp="20160128 01:00:58.405" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:00:58.404" starttime="20160128 01:00:58.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:00:58.423" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:00:58.988" level="INFO">Read output: Last login: Wed Jan 27 02:42:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:00:58.989" starttime="20160128 01:00:58.419"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:58.990" starttime="20160128 01:00:58.407"></status>
</kw>
<msg timestamp="20160128 01:00:58.992" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:00:58.991" starttime="20160128 01:00:58.329"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:00:58.998" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:00:58.997" starttime="20160128 01:00:58.993"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:00:59.001" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:00:59.160" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:00:59.165" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:00:59.162" starttime="20160128 01:00:58.999"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.177" starttime="20160128 01:00:59.172"></status>
</kw>
<msg timestamp="20160128 01:00:59.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:00:59.181" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:00:59.179" starttime="20160128 01:00:59.167"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.196" starttime="20160128 01:00:59.193"></status>
</kw>
<msg timestamp="20160128 01:00:59.199" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:00:59.198" starttime="20160128 01:00:59.183"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:00:59.206" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:00:59.205" starttime="20160128 01:00:59.201"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:00:59.213" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:00:59.212" starttime="20160128 01:00:59.208"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.218" starttime="20160128 01:00:59.215"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.237" starttime="20160128 01:00:59.233"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.245" starttime="20160128 01:00:59.238"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.247" starttime="20160128 01:00:59.221"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.261" starttime="20160128 01:00:59.258"></status>
</kw>
<msg timestamp="20160128 01:00:59.264" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:00:59.263" starttime="20160128 01:00:59.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.269" starttime="20160128 01:00:59.266"></status>
</kw>
<msg timestamp="20160128 01:00:59.274" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:00:59.275" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:00:59.272" starttime="20160128 01:00:58.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:59.286" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:00:59.288" starttime="20160128 01:00:59.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:59.294" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:00:59.296" starttime="20160128 01:00:59.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:59.302" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:00:59.303" starttime="20160128 01:00:59.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:00:59.310" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:00:59.311" starttime="20160128 01:00:59.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:00:59.317" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:00:59.324" starttime="20160128 01:00:59.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:00:59.330" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:00:59.331" starttime="20160128 01:00:59.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:00:59.337" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:00:59.338" starttime="20160128 01:00:59.333"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:00:59.344" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:00:59.346" starttime="20160128 01:00:59.340"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.364" starttime="20160128 01:00:59.356"></status>
</kw>
<msg timestamp="20160128 01:00:59.367" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:00:59.366" starttime="20160128 01:00:59.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.374" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:00:59.375" starttime="20160128 01:00:59.369"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.377" starttime="20160128 01:00:54.708"></status>
</kw>
<test id="s1-s1-s1-s1-s1-s1-t1" name="Run MFC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.398" starttime="20160128 01:00:59.395"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:00:59.404" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:00:59.403" starttime="20160128 01:00:59.400"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>3</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.430" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:00:59.431" starttime="20160128 01:00:59.427"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.437" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:00:59.438" starttime="20160128 01:00:59.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.443" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:00:59.444" starttime="20160128 01:00:59.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.449" level="INFO">msg=amount=3</msg>
<status status="PASS" endtime="20160128 01:00:59.450" starttime="20160128 01:00:59.446"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.453" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:00:59.453" starttime="20160128 01:00:59.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.456" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:00:59.456" starttime="20160128 01:00:59.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.458" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:00:59.459" starttime="20160128 01:00:59.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.461" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:00:59.462" starttime="20160128 01:00:59.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.464" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:00:59.465" starttime="20160128 01:00:59.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.467" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:00:59.468" starttime="20160128 01:00:59.466"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.479" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:00:59.479" starttime="20160128 01:00:59.476"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.480" starttime="20160128 01:00:59.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.484" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:00:59.485" starttime="20160128 01:00:59.482"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.486" starttime="20160128 01:00:59.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.490" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:00:59.491" starttime="20160128 01:00:59.488"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.491" starttime="20160128 01:00:59.487"></status>
</kw>
<status status="PASS" endtime="20160128 01:00:59.492" starttime="20160128 01:00:59.470"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:00:59.496" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:00:59.496" starttime="20160128 01:00:59.493"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.499" starttime="20160128 01:00:59.497"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.502" starttime="20160128 01:00:59.500"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.504" starttime="20160128 01:00:59.502"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.506" starttime="20160128 01:00:59.505"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.508" starttime="20160128 01:00:59.507"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.511" starttime="20160128 01:00:59.509"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.514" starttime="20160128 01:00:59.512"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.516" starttime="20160128 01:00:59.514"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.519" starttime="20160128 01:00:59.517"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.521" starttime="20160128 01:00:59.520"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.524" starttime="20160128 01:00:59.522"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:00:59.526" starttime="20160128 01:00:59.525"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:00:59.530" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:01:04.537" level="INFO">01:00:59,706 WARN  [SoapUI] Missing folder [/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/ext] for external libraries
01:00:59,707 INFO  [DefaultSoapUICore] Creating new settings at [/root/soapui-settings.xml]
01:01:01,496 INFO  [WsdlProject] Loaded project from [file:/opt/robot/robotworkspace/libs/global-keyword-resources/crce-subscriberadmin/robot_crce_bridge-soapui-project.xml]
01:01:01,513 INFO  [SoapUITestCaseRunner] Setting project property [crceHost] to [10.105.113.125]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [crcePort] to [8080]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [crceWebservicesBasePath] to [/inew-mvno-crce-webservices/]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.amount] to [3]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.imsiRangeStart] to [530052041010000]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.msisdnRangeStart] to [642041010000]
01:01:01,514 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.type] to [PREPAID]
01:01:01,515 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.languageid] to [1]
01:01:01,515 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.tariffId] to [101001]
01:01:01,515 INFO  [SoapUITestCaseRunner] Setting project property [HighLevelOps.createTestSubscribers.input.balance] to [10000000]
01:01:01,515 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Robotframework_CRCE-Bridge]
01:01:01,515 INFO  [SoapUITestCaseRunner] Running TestCase [createTestSubscribers]
01:01:01,525 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [createTestSubscribers]
01:01:01,531 INFO  [SoapUITestCaseRunner] running step [init_repeat_counter]
01:01:02,021 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:02,082 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:02,235 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:02,235 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:02,269 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:02,288 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:02,403 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:02,403 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:02,403 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:02,403 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:02,470 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:02,778 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:02,809 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:02,811 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:02,813 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:02,813 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:02,957 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:02,958 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:02,965 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:02,966 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:02,966 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:02,966 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:03,040 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:03,046 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:03,086 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:03,088 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,089 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,089 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:03,108 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,108 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,111 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,111 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,111 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,111 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:03,144 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:03,149 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:03,169 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:03,171 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,172 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,173 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:03,222 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,222 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,227 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,227 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,227 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,227 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:03,273 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:03,277 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:03,320 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:03,323 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,325 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,325 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:03,344 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,344 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,358 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,358 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,358 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,358 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:03,424 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:03,445 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:03,491 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:03,494 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,496 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,496 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:03,533 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,533 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,544 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,544 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,545 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,545 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:03,612 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:03,622 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:03,668 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:03,715 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:03,718 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:03,719 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,720 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,720 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:03,731 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,731 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,739 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,739 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,739 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,739 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:03,739 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:03,751 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:03,751 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:03,752 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,754 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,754 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:03,833 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,834 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,839 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,839 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,840 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,840 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:03,840 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:03,845 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:03,847 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:03,850 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,852 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,852 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:03,866 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,867 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,872 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,872 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,873 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,873 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:03,873 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:03,884 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:03,885 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:03,888 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,890 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,890 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:03,945 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,945 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,950 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,951 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,951 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,951 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:03,951 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:03,956 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:03,957 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:03,959 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:03,961 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:03,961 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:03,977 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:03,978 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:03,989 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:03,989 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:03,990 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:03,990 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:03,990 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:04,011 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:04,012 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:04,014 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,015 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,016 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:04,053 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,054 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,065 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,065 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,065 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,065 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:04,066 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:04,074 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:04,075 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:04,078 INFO  [SoapUITestCaseRunner] running step [01_init_next_subscriber]
01:01:04,081 INFO  [SoapUITestCaseRunner] running step [getSubscriberProfileByImsi]
01:01:04,083 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,085 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,085 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:04,097 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,097 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,113 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,113 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,113 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,113 INFO  [SoapUITestCaseRunner] running step [cancel_on_SOAP_error]
01:01:04,114 INFO  [SoapUITestCaseRunner] running step [transfer_response_values]
01:01:04,137 INFO  [SoapUITestCaseRunner] running step [cancel_on_CRCE_error_OR_skip_delete_on_UnknownSubscriber]
01:01:04,138 INFO  [SoapUITestCaseRunner] running step [deleteSubscriber]
01:01:04,140 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,141 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,141 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:04,213 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,214 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,219 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,219 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,219 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,219 INFO  [SoapUITestCaseRunner] running step [2nd_cancel_on_SOAP_error]
01:01:04,220 INFO  [SoapUITestCaseRunner] running step [2nd_transfer_response_values]
01:01:04,225 INFO  [SoapUITestCaseRunner] running step [cancel_on_deletion_error]
01:01:04,226 INFO  [SoapUITestCaseRunner] running step [02_createSubscriber]
01:01:04,228 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,230 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,230 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/provisioning HTTP/1.1
01:01:04,244 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,244 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,249 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,249 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,249 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,250 INFO  [SoapUITestCaseRunner] running step [3rd_cancel_on_SOAP_error]
01:01:04,250 INFO  [SoapUITestCaseRunner] running step [3rd_transfer_response_values]
01:01:04,259 INFO  [SoapUITestCaseRunner] running step [cancel_on_create_error]
01:01:04,260 INFO  [SoapUITestCaseRunner] running step [activateSubscriber]
01:01:04,262 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,263 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,263 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/profiler/subscriber HTTP/1.1
01:01:04,319 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,320 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,327 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,327 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,327 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,328 INFO  [SoapUITestCaseRunner] running step [4th_cancel_on_SOAP_error]
01:01:04,329 INFO  [SoapUITestCaseRunner] running step [4th_transfer_response_values]
01:01:04,333 INFO  [SoapUITestCaseRunner] running step [cancel_on_activate_error]
01:01:04,334 INFO  [SoapUITestCaseRunner] running step [getMainAccount]
01:01:04,336 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,338 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,338 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/accounts HTTP/1.1
01:01:04,354 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,354 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,366 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,366 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,366 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,366 INFO  [SoapUITestCaseRunner] running step [5th_cancel_on_SOAP_error]
01:01:04,367 INFO  [SoapUITestCaseRunner] running step [5th_transfer_response_values]
01:01:04,383 INFO  [SoapUITestCaseRunner] running step [cancel_on_getmainaccount_error]
01:01:04,384 INFO  [SoapUITestCaseRunner] running step [setBalance]
01:01:04,386 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check
01:01:04,388 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request
01:01:04,388 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /inew-mvno-crce-webservices/accounting/account_administration HTTP/1.1
01:01:04,428 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK
01:01:04,429 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely
01:01:04,439 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID
01:01:04,440 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN
01:01:04,440 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID
01:01:04,440 INFO  [SoapUITestCaseRunner] running step [6th_cancel_on_SOAP_error]
01:01:04,440 INFO  [SoapUITestCaseRunner] running step [6th_transfer_response_values]
01:01:04,448 INFO  [SoapUITestCaseRunner] running step [cancel_on_setbalance_error]
01:01:04,449 INFO  [SoapUITestCaseRunner] running step [repeat_01_amount_times]
01:01:04,450 INFO  [SoapUITestCaseRunner] running step [finish_successful]
01:01:04,521 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK
01:01:04,522 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [createTestSubscribers], time taken: 2920ms, status: FINISHED
01:01:04,523 INFO  [SoapUITestCaseRunner] TestCase [createTestSubscribers] finished with status [FINISHED] in 2920ms</msg>
<status status="PASS" endtime="20160128 01:01:04.554" starttime="20160128 01:00:59.529"></status>
</kw>
<msg timestamp="20160128 01:01:04.561" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:04.562" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:04.557" starttime="20160128 01:00:59.527"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:04.583" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:04.583" starttime="20160128 01:01:04.580"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:04.587" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:04.586" starttime="20160128 01:01:04.585"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:04.590" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:04.590" starttime="20160128 01:01:04.588"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:04.596" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:04.601" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:04.602" starttime="20160128 01:01:04.594"></status>
</kw>
<msg timestamp="20160128 01:01:04.603" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:04.604" level="INFO">${return_log_entry} = 2016-01-28 01:01:04,521 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:04.603" starttime="20160128 01:01:04.592"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.613" starttime="20160128 01:01:04.611"></status>
</kw>
<msg timestamp="20160128 01:01:04.615" level="INFO">${return_log_entry} = 2016-01-28 01:01:04,521 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:04.614" starttime="20160128 01:01:04.605"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.623" starttime="20160128 01:01:04.621"></status>
</kw>
<msg timestamp="20160128 01:01:04.624" level="INFO">${return_log_entry} = 2016-01-28 01:01:04,521 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:04.624" starttime="20160128 01:01:04.616"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.636" starttime="20160128 01:01:04.631"></status>
</kw>
<msg timestamp="20160128 01:01:04.638" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:04.637" starttime="20160128 01:01:04.626"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.660" starttime="20160128 01:01:04.657"></status>
</kw>
<msg timestamp="20160128 01:01:04.663" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:04.662" starttime="20160128 01:01:04.641"></status>
</kw>
<msg timestamp="20160128 01:01:04.667" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:04.666" starttime="20160128 01:01:04.567"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.687" starttime="20160128 01:01:04.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.692" starttime="20160128 01:01:04.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.698" starttime="20160128 01:01:04.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:04.715" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:04.715" starttime="20160128 01:01:04.708"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:04.716" starttime="20160128 01:01:04.706"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:04.717" starttime="20160128 01:01:04.700"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:04.718" starttime="20160128 01:01:04.670"></status>
</kw>
<msg timestamp="20160128 01:01:04.721" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:01:04.720" starttime="20160128 01:00:59.408"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:01:04.725" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:04.726" starttime="20160128 01:01:04.723"></status>
</kw>
<kw type="kw" name="${b_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:01:04.733" level="INFO">${b_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:01:04.732" starttime="20160128 01:01:04.727"></status>
</kw>
<kw type="kw" name="${b_party_imsi} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:01:04.739" level="INFO">${b_party_imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160128 01:01:04.738" starttime="20160128 01:01:04.734"></status>
</kw>
<kw type="kw" name="${c_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+2</arg>
</arguments>
<msg timestamp="20160128 01:01:04.745" level="INFO">${c_party_msisdn} = 642041010002</msg>
<status status="PASS" endtime="20160128 01:01:04.744" starttime="20160128 01:01:04.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:04.748" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:01:04.749" starttime="20160128 01:01:04.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MFC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.752" starttime="20160128 01:01:04.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MFC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:04.755" level="INFO">Running the short MFC call...</msg>
<status status="PASS" endtime="20160128 01:01:04.755" starttime="20160128 01:01:04.753"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MFC 1s">
<doc>Runs a standard MFC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${b_party_imsi}</arg>
<arg>${b_party_msisdn}</arg>
<arg>${c_party_msisdn}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MFC CGS">
<doc>Runs a standard MFC session (meaning a session that needs only mscAddress, mfcAPartyMsisdn and mfcCPartyMsisdn paramters) for the passed cgs file</doc>
<arguments>
<arg>mfc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${rd_imsi}</arg>
<arg>${rd_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mfc_req}</arg>
<arg>${queue_mfc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:04.794" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:01:04.793" starttime="20160128 01:01:04.791"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:04.798" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:01:04.797" starttime="20160128 01:01:04.795"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:01:04.802" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:01:04.801" starttime="20160128 01:01:04.799"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:01:04.806" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs</msg>
<status status="PASS" endtime="20160128 01:01:04.806" starttime="20160128 01:01:04.803"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.809" starttime="20160128 01:01:04.807"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${rd_imsi};${rd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:04.814" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:04.815" starttime="20160128 01:01:04.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.818" starttime="20160128 01:01:04.816"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;gmscAddress;mfcAPartyMsisdn;mfcCPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:01:04.822" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:04.823" starttime="20160128 01:01:04.819"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${msc_address};${cg_msisdn};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:04.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:04.829" starttime="20160128 01:01:04.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.831" starttime="20160128 01:01:04.830"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:01:04.834" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:04.835" starttime="20160128 01:01:04.832"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MFC;${queue_mfc_req};${queue_mfc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:01:04.839" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:04.840" starttime="20160128 01:01:04.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:04.842" starttime="20160128 01:01:04.841"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:01:04.854" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mfc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mfc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:08.886" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:08.883" starttime="20160128 01:01:04.843"></status>
</kw>
<msg timestamp="20160128 01:01:08.893" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:08.891" starttime="20160128 01:01:04.775"></status>
</kw>
<msg timestamp="20160128 01:01:08.896" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:08.895" starttime="20160128 01:01:04.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:08.902" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:01:08.903" starttime="20160128 01:01:08.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:01:08.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:08.911" starttime="20160128 01:01:08.905"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:08.916" starttime="20160128 01:01:08.913"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:08.955" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:08.956" starttime="20160128 01:01:08.950"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:08.958" starttime="20160128 01:01:08.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:08.967" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:08.969" starttime="20160128 01:01:08.963"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:08.970" starttime="20160128 01:01:08.960"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:08.980" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:08.981" starttime="20160128 01:01:08.976"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:08.982" starttime="20160128 01:01:08.972"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:08.984" starttime="20160128 01:01:08.937"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:08.991" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:08.991" starttime="20160128 01:01:08.986"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:08.997" starttime="20160128 01:01:08.993"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.003" starttime="20160128 01:01:08.999"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.009" starttime="20160128 01:01:09.005"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.014" starttime="20160128 01:01:09.011"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.019" starttime="20160128 01:01:09.016"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.024" starttime="20160128 01:01:09.020"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:09.032" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:01:09.414" level="INFO">01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421051
01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:01:09,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:01:09,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:01:09.415" starttime="20160128 01:01:09.029"></status>
</kw>
<msg timestamp="20160128 01:01:09.417" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.417" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:09.416" starttime="20160128 01:01:09.026"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.426" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:09.426" starttime="20160128 01:01:09.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.429" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.429" starttime="20160128 01:01:09.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.432" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.431" starttime="20160128 01:01:09.430"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.436" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.441" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.442" starttime="20160128 01:01:09.434"></status>
</kw>
<msg timestamp="20160128 01:01:09.445" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.446" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:09.444" starttime="20160128 01:01:09.433"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.457" starttime="20160128 01:01:09.454"></status>
</kw>
<msg timestamp="20160128 01:01:09.458" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:09.457" starttime="20160128 01:01:09.448"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.467" starttime="20160128 01:01:09.465"></status>
</kw>
<msg timestamp="20160128 01:01:09.468" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:09.468" starttime="20160128 01:01:09.459"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.477" starttime="20160128 01:01:09.475"></status>
</kw>
<msg timestamp="20160128 01:01:09.479" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:09.478" starttime="20160128 01:01:09.469"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.490" starttime="20160128 01:01:09.488"></status>
</kw>
<msg timestamp="20160128 01:01:09.491" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:09.491" starttime="20160128 01:01:09.480"></status>
</kw>
<msg timestamp="20160128 01:01:09.493" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:09.492" starttime="20160128 01:01:09.419"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.504" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:01:09.503" starttime="20160128 01:01:09.501"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.507" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.507" starttime="20160128 01:01:09.505"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.511" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.510" starttime="20160128 01:01:09.508"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.516" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.520" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.521" starttime="20160128 01:01:09.514"></status>
</kw>
<msg timestamp="20160128 01:01:09.522" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.523" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:09.522" starttime="20160128 01:01:09.512"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.531" starttime="20160128 01:01:09.529"></status>
</kw>
<msg timestamp="20160128 01:01:09.533" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:09.532" starttime="20160128 01:01:09.524"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.541" starttime="20160128 01:01:09.539"></status>
</kw>
<msg timestamp="20160128 01:01:09.543" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:09.542" starttime="20160128 01:01:09.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.551" starttime="20160128 01:01:09.549"></status>
</kw>
<msg timestamp="20160128 01:01:09.553" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:09.552" starttime="20160128 01:01:09.544"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.564" starttime="20160128 01:01:09.562"></status>
</kw>
<msg timestamp="20160128 01:01:09.565" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:09.565" starttime="20160128 01:01:09.554"></status>
</kw>
<msg timestamp="20160128 01:01:09.567" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:09.566" starttime="20160128 01:01:09.495"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.577" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:01:09.577" starttime="20160128 01:01:09.575"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.580" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.580" starttime="20160128 01:01:09.578"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.583" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.582" starttime="20160128 01:01:09.581"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.587" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.590" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.591" starttime="20160128 01:01:09.585"></status>
</kw>
<msg timestamp="20160128 01:01:09.592" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.592" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.591" starttime="20160128 01:01:09.584"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.599" starttime="20160128 01:01:09.597"></status>
</kw>
<msg timestamp="20160128 01:01:09.600" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.600" starttime="20160128 01:01:09.593"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.606" starttime="20160128 01:01:09.605"></status>
</kw>
<msg timestamp="20160128 01:01:09.607" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.607" starttime="20160128 01:01:09.601"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.614" starttime="20160128 01:01:09.612"></status>
</kw>
<msg timestamp="20160128 01:01:09.615" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.615" starttime="20160128 01:01:09.608"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.624" starttime="20160128 01:01:09.623"></status>
</kw>
<msg timestamp="20160128 01:01:09.625" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.625" starttime="20160128 01:01:09.616"></status>
</kw>
<msg timestamp="20160128 01:01:09.627" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:09.626" starttime="20160128 01:01:09.569"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.636" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:01:09.635" starttime="20160128 01:01:09.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.638" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.638" starttime="20160128 01:01:09.636"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.641" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.641" starttime="20160128 01:01:09.639"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.646" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.649" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.649" starttime="20160128 01:01:09.643"></status>
</kw>
<msg timestamp="20160128 01:01:09.650" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.651" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.650" starttime="20160128 01:01:09.642"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.658" starttime="20160128 01:01:09.656"></status>
</kw>
<msg timestamp="20160128 01:01:09.659" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.658" starttime="20160128 01:01:09.652"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.666" starttime="20160128 01:01:09.664"></status>
</kw>
<msg timestamp="20160128 01:01:09.667" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,411 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.666" starttime="20160128 01:01:09.660"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.674" starttime="20160128 01:01:09.672"></status>
</kw>
<msg timestamp="20160128 01:01:09.675" level="INFO">${resultCode} = 2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.674" starttime="20160128 01:01:09.668"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.684" starttime="20160128 01:01:09.682"></status>
</kw>
<msg timestamp="20160128 01:01:09.685" level="INFO">${resultCode} = 2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.684" starttime="20160128 01:01:09.676"></status>
</kw>
<msg timestamp="20160128 01:01:09.686" level="INFO">${id} = 2421051</msg>
<status status="PASS" endtime="20160128 01:01:09.686" starttime="20160128 01:01:09.628"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.695" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:01:09.695" starttime="20160128 01:01:09.693"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.698" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.698" starttime="20160128 01:01:09.696"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.701" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.701" starttime="20160128 01:01:09.699"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.706" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.709" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.710" starttime="20160128 01:01:09.704"></status>
</kw>
<msg timestamp="20160128 01:01:09.711" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.711" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.710" starttime="20160128 01:01:09.702"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.718" starttime="20160128 01:01:09.717"></status>
</kw>
<msg timestamp="20160128 01:01:09.719" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.719" starttime="20160128 01:01:09.712"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.726" starttime="20160128 01:01:09.724"></status>
</kw>
<msg timestamp="20160128 01:01:09.727" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.727" starttime="20160128 01:01:09.720"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.734" starttime="20160128 01:01:09.732"></status>
</kw>
<msg timestamp="20160128 01:01:09.735" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.735" starttime="20160128 01:01:09.728"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.744" starttime="20160128 01:01:09.743"></status>
</kw>
<msg timestamp="20160128 01:01:09.745" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.745" starttime="20160128 01:01:09.736"></status>
</kw>
<msg timestamp="20160128 01:01:09.747" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:09.746" starttime="20160128 01:01:09.687"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.756" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:01:09.755" starttime="20160128 01:01:09.753"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.758" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.758" starttime="20160128 01:01:09.756"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.761" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.761" starttime="20160128 01:01:09.759"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.765" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.769" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.769" starttime="20160128 01:01:09.763"></status>
</kw>
<msg timestamp="20160128 01:01:09.770" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.771" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:09.770" starttime="20160128 01:01:09.762"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.778" starttime="20160128 01:01:09.776"></status>
</kw>
<msg timestamp="20160128 01:01:09.779" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:09.778" starttime="20160128 01:01:09.772"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.785" starttime="20160128 01:01:09.784"></status>
</kw>
<msg timestamp="20160128 01:01:09.787" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,412 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:09.786" starttime="20160128 01:01:09.780"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.794" starttime="20160128 01:01:09.792"></status>
</kw>
<msg timestamp="20160128 01:01:09.795" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:09.795" starttime="20160128 01:01:09.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.804" starttime="20160128 01:01:09.803"></status>
</kw>
<msg timestamp="20160128 01:01:09.806" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:09.805" starttime="20160128 01:01:09.796"></status>
</kw>
<msg timestamp="20160128 01:01:09.807" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:09.807" starttime="20160128 01:01:09.748"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:09.816" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:01:09.816" starttime="20160128 01:01:09.814"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.819" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:09.819" starttime="20160128 01:01:09.817"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.822" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:09.821" starttime="20160128 01:01:09.820"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.826" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:09.829" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:09.830" starttime="20160128 01:01:09.824"></status>
</kw>
<msg timestamp="20160128 01:01:09.831" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:09.832" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.831" starttime="20160128 01:01:09.823"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.839" starttime="20160128 01:01:09.837"></status>
</kw>
<msg timestamp="20160128 01:01:09.840" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.840" starttime="20160128 01:01:09.833"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.849" starttime="20160128 01:01:09.846"></status>
</kw>
<msg timestamp="20160128 01:01:09.850" level="INFO">${return_log_entry} = 2016-01-28 01:01:09,413 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.849" starttime="20160128 01:01:09.841"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.861" starttime="20160128 01:01:09.856"></status>
</kw>
<msg timestamp="20160128 01:01:09.863" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.862" starttime="20160128 01:01:09.851"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.882" starttime="20160128 01:01:09.879"></status>
</kw>
<msg timestamp="20160128 01:01:09.886" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.885" starttime="20160128 01:01:09.865"></status>
</kw>
<msg timestamp="20160128 01:01:09.889" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.888" starttime="20160128 01:01:09.808"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.899" starttime="20160128 01:01:09.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.901" starttime="20160128 01:01:09.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:09.903" starttime="20160128 01:01:09.901"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:09.914" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:09.916" starttime="20160128 01:01:09.909"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.917" starttime="20160128 01:01:09.908"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.919" starttime="20160128 01:01:09.904"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.920" starttime="20160128 01:01:09.891"></status>
</kw>
<msg timestamp="20160128 01:01:09.927" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:01:09.928" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:01:09.928" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:01:09.929" level="INFO">${id} = 2421051</msg>
<msg timestamp="20160128 01:01:09.930" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:01:09.931" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:01:09.932" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:09.925" starttime="20160128 01:01:08.921"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.966" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:09.967" starttime="20160128 01:01:09.962"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.968" starttime="20160128 01:01:09.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.976" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:09.977" starttime="20160128 01:01:09.973"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.979" starttime="20160128 01:01:09.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.987" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:09.988" starttime="20160128 01:01:09.983"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.989" starttime="20160128 01:01:09.980"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:09.991" starttime="20160128 01:01:09.951"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:09.996" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:09.997" starttime="20160128 01:01:09.992"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.002" starttime="20160128 01:01:09.999"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.009" starttime="20160128 01:01:10.005"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.014" starttime="20160128 01:01:10.010"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.018" starttime="20160128 01:01:10.015"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.022" starttime="20160128 01:01:10.019"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.027" starttime="20160128 01:01:10.023"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:10.034" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=3', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421051']</msg>
<msg timestamp="20160128 01:01:10.267" level="INFO">01:01:10,261 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:01:10,262 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421052
01:01:10,263 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:01:10,264 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:01:10,265 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:10.269" starttime="20160128 01:01:10.031"></status>
</kw>
<msg timestamp="20160128 01:01:10.271" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.272" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:10.270" starttime="20160128 01:01:10.028"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:10.291" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:10.290" starttime="20160128 01:01:10.286"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.297" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:10.296" starttime="20160128 01:01:10.293"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.302" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:10.301" starttime="20160128 01:01:10.298"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.311" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:10.317" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:10.319" starttime="20160128 01:01:10.307"></status>
</kw>
<msg timestamp="20160128 01:01:10.321" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.322" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,261 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:10.320" starttime="20160128 01:01:10.304"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.336" starttime="20160128 01:01:10.333"></status>
</kw>
<msg timestamp="20160128 01:01:10.339" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,261 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:10.338" starttime="20160128 01:01:10.324"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.352" starttime="20160128 01:01:10.349"></status>
</kw>
<msg timestamp="20160128 01:01:10.355" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,261 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:10.354" starttime="20160128 01:01:10.341"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.369" starttime="20160128 01:01:10.365"></status>
</kw>
<msg timestamp="20160128 01:01:10.372" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:10.371" starttime="20160128 01:01:10.357"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.390" starttime="20160128 01:01:10.387"></status>
</kw>
<msg timestamp="20160128 01:01:10.393" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:10.392" starttime="20160128 01:01:10.373"></status>
</kw>
<msg timestamp="20160128 01:01:10.396" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:10.395" starttime="20160128 01:01:10.275"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:10.415" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:01:10.414" starttime="20160128 01:01:10.410"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.421" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:10.420" starttime="20160128 01:01:10.417"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.427" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:10.426" starttime="20160128 01:01:10.423"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.436" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:10.442" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:10.443" starttime="20160128 01:01:10.432"></status>
</kw>
<msg timestamp="20160128 01:01:10.446" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.446" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,262 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.445" starttime="20160128 01:01:10.428"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.455" starttime="20160128 01:01:10.454"></status>
</kw>
<msg timestamp="20160128 01:01:10.456" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,262 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.456" starttime="20160128 01:01:10.448"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.462" starttime="20160128 01:01:10.461"></status>
</kw>
<msg timestamp="20160128 01:01:10.463" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,262 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.463" starttime="20160128 01:01:10.457"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.470" starttime="20160128 01:01:10.468"></status>
</kw>
<msg timestamp="20160128 01:01:10.471" level="INFO">${resultCode} = 2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.471" starttime="20160128 01:01:10.464"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.479" starttime="20160128 01:01:10.478"></status>
</kw>
<msg timestamp="20160128 01:01:10.480" level="INFO">${resultCode} = 2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.480" starttime="20160128 01:01:10.472"></status>
</kw>
<msg timestamp="20160128 01:01:10.482" level="INFO">${accountId} = 2421052</msg>
<status status="PASS" endtime="20160128 01:01:10.481" starttime="20160128 01:01:10.399"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:10.494" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:01:10.492" starttime="20160128 01:01:10.489"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.499" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:10.499" starttime="20160128 01:01:10.495"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.502" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:10.501" starttime="20160128 01:01:10.500"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.506" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:10.509" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:10.509" starttime="20160128 01:01:10.504"></status>
</kw>
<msg timestamp="20160128 01:01:10.510" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.511" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,263 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.510" starttime="20160128 01:01:10.502"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.517" starttime="20160128 01:01:10.516"></status>
</kw>
<msg timestamp="20160128 01:01:10.518" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,263 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.518" starttime="20160128 01:01:10.511"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.524" starttime="20160128 01:01:10.523"></status>
</kw>
<msg timestamp="20160128 01:01:10.525" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,263 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.525" starttime="20160128 01:01:10.519"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.532" starttime="20160128 01:01:10.530"></status>
</kw>
<msg timestamp="20160128 01:01:10.533" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.532" starttime="20160128 01:01:10.526"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.541" starttime="20160128 01:01:10.539"></status>
</kw>
<msg timestamp="20160128 01:01:10.542" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.541" starttime="20160128 01:01:10.533"></status>
</kw>
<msg timestamp="20160128 01:01:10.543" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.543" starttime="20160128 01:01:10.483"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:10.551" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:01:10.551" starttime="20160128 01:01:10.549"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.554" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:10.553" starttime="20160128 01:01:10.552"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.556" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:10.556" starttime="20160128 01:01:10.555"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.560" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:10.563" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:10.564" starttime="20160128 01:01:10.559"></status>
</kw>
<msg timestamp="20160128 01:01:10.565" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.565" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,264 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.564" starttime="20160128 01:01:10.557"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.572" starttime="20160128 01:01:10.570"></status>
</kw>
<msg timestamp="20160128 01:01:10.573" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,264 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.573" starttime="20160128 01:01:10.566"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.579" starttime="20160128 01:01:10.578"></status>
</kw>
<msg timestamp="20160128 01:01:10.580" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,264 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.580" starttime="20160128 01:01:10.574"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.587" starttime="20160128 01:01:10.585"></status>
</kw>
<msg timestamp="20160128 01:01:10.588" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.587" starttime="20160128 01:01:10.581"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.596" starttime="20160128 01:01:10.594"></status>
</kw>
<msg timestamp="20160128 01:01:10.597" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.596" starttime="20160128 01:01:10.588"></status>
</kw>
<msg timestamp="20160128 01:01:10.598" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:10.598" starttime="20160128 01:01:10.544"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:10.606" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:01:10.606" starttime="20160128 01:01:10.604"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.609" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:10.608" starttime="20160128 01:01:10.607"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.611" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:10.611" starttime="20160128 01:01:10.609"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:10.616" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:10.619" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:10.619" starttime="20160128 01:01:10.614"></status>
</kw>
<msg timestamp="20160128 01:01:10.620" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:10.621" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,265 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:10.620" starttime="20160128 01:01:10.612"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.627" starttime="20160128 01:01:10.625"></status>
</kw>
<msg timestamp="20160128 01:01:10.628" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,265 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:10.627" starttime="20160128 01:01:10.621"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.636" starttime="20160128 01:01:10.633"></status>
</kw>
<msg timestamp="20160128 01:01:10.639" level="INFO">${return_log_entry} = 2016-01-28 01:01:10,265 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:10.638" starttime="20160128 01:01:10.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.653" starttime="20160128 01:01:10.649"></status>
</kw>
<msg timestamp="20160128 01:01:10.655" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:10.654" starttime="20160128 01:01:10.641"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.673" starttime="20160128 01:01:10.670"></status>
</kw>
<msg timestamp="20160128 01:01:10.675" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:10.674" starttime="20160128 01:01:10.657"></status>
</kw>
<msg timestamp="20160128 01:01:10.678" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:10.677" starttime="20160128 01:01:10.599"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.693" starttime="20160128 01:01:10.691"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.698" starttime="20160128 01:01:10.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.702" starttime="20160128 01:01:10.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:10.723" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:10.724" starttime="20160128 01:01:10.715"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:10.725" starttime="20160128 01:01:10.712"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:10.727" starttime="20160128 01:01:10.704"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:10.728" starttime="20160128 01:01:10.681"></status>
</kw>
<msg timestamp="20160128 01:01:10.734" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:01:10.734" level="INFO">${accId} = 2421052</msg>
<msg timestamp="20160128 01:01:10.735" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160128 01:01:10.736" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:01:10.737" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:01:10.732" starttime="20160128 01:01:09.936"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.742" starttime="20160128 01:01:10.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:10.747" starttime="20160128 01:01:10.744"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:10.752" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160128 01:01:10.753" starttime="20160128 01:01:10.749"></status>
</kw>
<doc>Test will make a short MFC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MFC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:01:10.755" starttime="20160128 01:00:59.380"></status>
</test>
<doc>Testing the prepaid MFC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:10.767" starttime="20160128 01:00:53.904"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:10.789" starttime="20160128 01:00:53.881"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:10.809" starttime="20160128 01:00:53.860"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC" id="s1-s1-s1-s2" name="MOC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet" id="s1-s1-s1-s2-s1" name="OnNet">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon" id="s1-s1-s1-s2-s1-s1" name="MOC PREPAID ONNET-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Abandon/MOC_PREPAID_ONNET-Abandon-robot-suite.txt" id="s1-s1-s1-s2-s1-s1-s1" name="MOC PREPAID ONNET-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:01:11.108" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:11.116" level="INFO">${date} = Thu Jan 28 01:01:11 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:11.115" starttime="20160128 01:01:11.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:11.121" level="INFO">Date and time: Thu Jan 28 01:01:11 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:11.122" starttime="20160128 01:01:11.118"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:11.126" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:01:11.128" starttime="20160128 01:01:11.123"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:11.198" starttime="20160128 01:01:11.196"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:11.263" starttime="20160128 01:01:11.207"></status>
</kw>
<msg timestamp="20160128 01:01:11.266" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:01:11.265" starttime="20160128 01:01:11.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:11.280" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:11.731" level="INFO">Read output: Last login: Thu Jan 28 00:00:55 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:11.732" starttime="20160128 01:01:11.277"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:11.733" starttime="20160128 01:01:11.268"></status>
</kw>
<msg timestamp="20160128 01:01:11.736" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:01:11.735" starttime="20160128 01:01:11.184"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:11.744" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:11.744" starttime="20160128 01:01:11.737"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:11.748" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:01:12.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:12.150" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:12.149" starttime="20160128 01:01:11.746"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.160" starttime="20160128 01:01:12.156"></status>
</kw>
<msg timestamp="20160128 01:01:12.162" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:12.163" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:12.161" starttime="20160128 01:01:12.152"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.176" starttime="20160128 01:01:12.174"></status>
</kw>
<msg timestamp="20160128 01:01:12.179" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:12.178" starttime="20160128 01:01:12.165"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:01:12.185" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:12.183" starttime="20160128 01:01:12.180"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:12.191" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:12.190" starttime="20160128 01:01:12.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.195" starttime="20160128 01:01:12.192"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.204" starttime="20160128 01:01:12.203"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.210" starttime="20160128 01:01:12.208"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:12.211" starttime="20160128 01:01:12.197"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.217" starttime="20160128 01:01:12.215"></status>
</kw>
<msg timestamp="20160128 01:01:12.218" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:12.217" starttime="20160128 01:01:12.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.220" starttime="20160128 01:01:12.219"></status>
</kw>
<msg timestamp="20160128 01:01:12.222" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:01:12.222" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:12.221" starttime="20160128 01:01:11.151"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.254" starttime="20160128 01:01:12.253"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:12.299" starttime="20160128 01:01:12.259"></status>
</kw>
<msg timestamp="20160128 01:01:12.300" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:01:12.299" starttime="20160128 01:01:12.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:12.306" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:12.724" level="INFO">Read output: Last login: Thu Jan 28 00:00:56 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:12.725" starttime="20160128 01:01:12.304"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:12.726" starttime="20160128 01:01:12.300"></status>
</kw>
<msg timestamp="20160128 01:01:12.729" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:01:12.728" starttime="20160128 01:01:12.246"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:12.735" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:12.734" starttime="20160128 01:01:12.730"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:12.737" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:01:13.119" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:13.122" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:13.120" starttime="20160128 01:01:12.736"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.129" starttime="20160128 01:01:13.126"></status>
</kw>
<msg timestamp="20160128 01:01:13.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:13.131" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:13.130" starttime="20160128 01:01:13.123"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.141" starttime="20160128 01:01:13.139"></status>
</kw>
<msg timestamp="20160128 01:01:13.142" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:13.142" starttime="20160128 01:01:13.133"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:01:13.147" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:13.146" starttime="20160128 01:01:13.144"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:13.151" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:13.151" starttime="20160128 01:01:13.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.154" starttime="20160128 01:01:13.153"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.165" starttime="20160128 01:01:13.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.168" starttime="20160128 01:01:13.166"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:13.171" starttime="20160128 01:01:13.156"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.185" starttime="20160128 01:01:13.183"></status>
</kw>
<msg timestamp="20160128 01:01:13.187" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:13.186" starttime="20160128 01:01:13.173"></status>
</kw>
<msg timestamp="20160128 01:01:13.190" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:01:13.191" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:13.189" starttime="20160128 01:01:12.232"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.225" starttime="20160128 01:01:13.224"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.287" starttime="20160128 01:01:13.230"></status>
</kw>
<msg timestamp="20160128 01:01:13.290" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:01:13.289" starttime="20160128 01:01:13.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:13.304" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:13.715" level="INFO">Read output: Last login: Thu Jan 28 00:00:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:13.716" starttime="20160128 01:01:13.301"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:13.717" starttime="20160128 01:01:13.292"></status>
</kw>
<msg timestamp="20160128 01:01:13.718" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:01:13.718" starttime="20160128 01:01:13.219"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:13.723" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:13.723" starttime="20160128 01:01:13.719"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:13.725" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:01:13.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:13.907" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:01:13.906" starttime="20160128 01:01:13.724"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.916" starttime="20160128 01:01:13.912"></status>
</kw>
<msg timestamp="20160128 01:01:13.918" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:13.919" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:13.918" starttime="20160128 01:01:13.909"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.931" starttime="20160128 01:01:13.929"></status>
</kw>
<msg timestamp="20160128 01:01:13.934" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:13.933" starttime="20160128 01:01:13.921"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:01:13.939" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:01:13.938" starttime="20160128 01:01:13.935"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:13.945" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:13.944" starttime="20160128 01:01:13.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.948" starttime="20160128 01:01:13.946"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.962" starttime="20160128 01:01:13.959"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.969" starttime="20160128 01:01:13.964"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:13.971" starttime="20160128 01:01:13.951"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.983" starttime="20160128 01:01:13.980"></status>
</kw>
<msg timestamp="20160128 01:01:13.985" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:13.984" starttime="20160128 01:01:13.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:13.989" starttime="20160128 01:01:13.986"></status>
</kw>
<msg timestamp="20160128 01:01:13.992" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:01:13.993" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:13.991" starttime="20160128 01:01:13.204"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.064" starttime="20160128 01:01:14.061"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.126" starttime="20160128 01:01:14.074"></status>
</kw>
<msg timestamp="20160128 01:01:14.127" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:01:14.127" starttime="20160128 01:01:14.066"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.134" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:14.527" level="INFO">Read output: Last login: Thu Jan 28 00:00:58 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:14.528" starttime="20160128 01:01:14.133"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.528" starttime="20160128 01:01:14.128"></status>
</kw>
<msg timestamp="20160128 01:01:14.530" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:01:14.529" starttime="20160128 01:01:14.049"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:14.535" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:14.535" starttime="20160128 01:01:14.531"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:14.537" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:01:14.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:14.617" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:01:14.616" starttime="20160128 01:01:14.536"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.621" starttime="20160128 01:01:14.619"></status>
</kw>
<msg timestamp="20160128 01:01:14.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:14.622" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:14.622" starttime="20160128 01:01:14.618"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.628" starttime="20160128 01:01:14.627"></status>
</kw>
<msg timestamp="20160128 01:01:14.629" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:14.628" starttime="20160128 01:01:14.623"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:01:14.631" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:01:14.631" starttime="20160128 01:01:14.630"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:14.634" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:14.633" starttime="20160128 01:01:14.632"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.636" starttime="20160128 01:01:14.635"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.642" starttime="20160128 01:01:14.641"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.645" starttime="20160128 01:01:14.643"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.646" starttime="20160128 01:01:14.637"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.651" starttime="20160128 01:01:14.650"></status>
</kw>
<msg timestamp="20160128 01:01:14.652" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:14.652" starttime="20160128 01:01:14.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.654" starttime="20160128 01:01:14.653"></status>
</kw>
<msg timestamp="20160128 01:01:14.656" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:01:14.656" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:14.655" starttime="20160128 01:01:14.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:14.658" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:14.659" starttime="20160128 01:01:14.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:14.661" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:14.662" starttime="20160128 01:01:14.660"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:14.664" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:14.664" starttime="20160128 01:01:14.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:14.666" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:14.667" starttime="20160128 01:01:14.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:01:14.669" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:14.670" starttime="20160128 01:01:14.668"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:01:14.672" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:14.672" starttime="20160128 01:01:14.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:01:14.674" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:14.675" starttime="20160128 01:01:14.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:01:14.677" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:14.677" starttime="20160128 01:01:14.675"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.684" starttime="20160128 01:01:14.681"></status>
</kw>
<msg timestamp="20160128 01:01:14.685" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:01:14.685" starttime="20160128 01:01:14.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.688" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:01:14.688" starttime="20160128 01:01:14.686"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.689" starttime="20160128 01:01:11.099"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s1-s1-t1" name="Run MOC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.697" starttime="20160128 01:01:14.696"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:01:14.699" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:14.699" starttime="20160128 01:01:14.698"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.709" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:01:14.709" starttime="20160128 01:01:14.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.711" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:01:14.711" starttime="20160128 01:01:14.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.714" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:01:14.714" starttime="20160128 01:01:14.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.716" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160128 01:01:14.716" starttime="20160128 01:01:14.715"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.718" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:14.719" starttime="20160128 01:01:14.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.721" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:01:14.721" starttime="20160128 01:01:14.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.723" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:14.723" starttime="20160128 01:01:14.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.725" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:01:14.726" starttime="20160128 01:01:14.724"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.727" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:14.728" starttime="20160128 01:01:14.726"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.730" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:14.730" starttime="20160128 01:01:14.729"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.739" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:14.739" starttime="20160128 01:01:14.737"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.740" starttime="20160128 01:01:14.735"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.743" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:14.744" starttime="20160128 01:01:14.742"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.745" starttime="20160128 01:01:14.741"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.748" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:14.749" starttime="20160128 01:01:14.747"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.749" starttime="20160128 01:01:14.745"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:14.750" starttime="20160128 01:01:14.732"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:14.753" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:14.753" starttime="20160128 01:01:14.751"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.755" starttime="20160128 01:01:14.754"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.757" starttime="20160128 01:01:14.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.759" starttime="20160128 01:01:14.758"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.761" starttime="20160128 01:01:14.760"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.763" starttime="20160128 01:01:14.762"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.765" starttime="20160128 01:01:14.763"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.767" starttime="20160128 01:01:14.765"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.769" starttime="20160128 01:01:14.767"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.771" starttime="20160128 01:01:14.770"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.773" starttime="20160128 01:01:14.772"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.775" starttime="20160128 01:01:14.774"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:14.777" starttime="20160128 01:01:14.776"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:14.780" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:01:15.599" level="INFO">01:01:15,597 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:15.600" starttime="20160128 01:01:14.779"></status>
</kw>
<msg timestamp="20160128 01:01:15.602" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:15.602" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:15.601" starttime="20160128 01:01:14.778"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:15.611" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:15.610" starttime="20160128 01:01:15.607"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:15.613" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:15.612" starttime="20160128 01:01:15.611"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:15.615" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:15.614" starttime="20160128 01:01:15.613"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:15.618" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:15.619" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:15.619" starttime="20160128 01:01:15.617"></status>
</kw>
<msg timestamp="20160128 01:01:15.620" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:15.621" level="INFO">${return_log_entry} = 2016-01-28 01:01:15,597 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:15.620" starttime="20160128 01:01:15.616"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.626" starttime="20160128 01:01:15.625"></status>
</kw>
<msg timestamp="20160128 01:01:15.627" level="INFO">${return_log_entry} = 2016-01-28 01:01:15,597 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:15.627" starttime="20160128 01:01:15.622"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.633" starttime="20160128 01:01:15.631"></status>
</kw>
<msg timestamp="20160128 01:01:15.633" level="INFO">${return_log_entry} = 2016-01-28 01:01:15,597 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:15.633" starttime="20160128 01:01:15.628"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.639" starttime="20160128 01:01:15.637"></status>
</kw>
<msg timestamp="20160128 01:01:15.640" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:15.639" starttime="20160128 01:01:15.634"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.648" starttime="20160128 01:01:15.647"></status>
</kw>
<msg timestamp="20160128 01:01:15.649" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:15.648" starttime="20160128 01:01:15.641"></status>
</kw>
<msg timestamp="20160128 01:01:15.650" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:15.650" starttime="20160128 01:01:15.603"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.656" starttime="20160128 01:01:15.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.658" starttime="20160128 01:01:15.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.659" starttime="20160128 01:01:15.658"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:15.667" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:15.668" starttime="20160128 01:01:15.666"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:15.668" starttime="20160128 01:01:15.664"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:15.669" starttime="20160128 01:01:15.660"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:15.670" starttime="20160128 01:01:15.651"></status>
</kw>
<msg timestamp="20160128 01:01:15.671" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:01:15.670" starttime="20160128 01:01:14.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:01:15.673" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:15.673" starttime="20160128 01:01:15.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:15.675" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:01:15.675" starttime="20160128 01:01:15.674"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.677" starttime="20160128 01:01:15.676"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:15.679" level="INFO">Running the MOC abandon call...</msg>
<status status="PASS" endtime="20160128 01:01:15.679" starttime="20160128 01:01:15.678"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Abandon">
<doc>Runs an abandoned MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-abandon</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:15.696" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:01:15.696" starttime="20160128 01:01:15.694"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:15.698" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:01:15.698" starttime="20160128 01:01:15.697"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:01:15.701" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:01:15.701" starttime="20160128 01:01:15.699"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:01:15.703" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs</msg>
<status status="PASS" endtime="20160128 01:01:15.703" starttime="20160128 01:01:15.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.705" starttime="20160128 01:01:15.704"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:15.708" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:15.708" starttime="20160128 01:01:15.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.710" starttime="20160128 01:01:15.709"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:01:15.712" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:15.713" starttime="20160128 01:01:15.711"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:15.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:15.716" starttime="20160128 01:01:15.714"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.718" starttime="20160128 01:01:15.717"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:01:15.720" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:15.721" starttime="20160128 01:01:15.718"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:01:15.724" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:15.724" starttime="20160128 01:01:15.721"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:15.726" starttime="20160128 01:01:15.725"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:01:15.734" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:37.775" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:37.773" starttime="20160128 01:01:15.726"></status>
</kw>
<msg timestamp="20160128 01:01:37.778" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:37.777" starttime="20160128 01:01:15.688"></status>
</kw>
<msg timestamp="20160128 01:01:37.780" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:37.779" starttime="20160128 01:01:15.681"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:37.782" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:01:37.783" starttime="20160128 01:01:37.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:01:37.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:37.786" starttime="20160128 01:01:37.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.787" starttime="20160128 01:01:37.786"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:37.801" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:37.801" starttime="20160128 01:01:37.799"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:37.802" starttime="20160128 01:01:37.798"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:37.805" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:37.805" starttime="20160128 01:01:37.804"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:37.806" starttime="20160128 01:01:37.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:37.809" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:37.809" starttime="20160128 01:01:37.808"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:37.810" starttime="20160128 01:01:37.807"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:37.811" starttime="20160128 01:01:37.795"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:37.813" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:37.813" starttime="20160128 01:01:37.811"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.815" starttime="20160128 01:01:37.814"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.817" starttime="20160128 01:01:37.816"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.819" starttime="20160128 01:01:37.818"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.821" starttime="20160128 01:01:37.820"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.822" starttime="20160128 01:01:37.821"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:37.824" starttime="20160128 01:01:37.823"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:37.827" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:01:37.995" level="INFO">01:01:37,989 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421057
01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:01:37,992 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:01:37,993 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:01:37,993 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:01:37.995" starttime="20160128 01:01:37.826"></status>
</kw>
<msg timestamp="20160128 01:01:37.996" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:37.997" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:37.996" starttime="20160128 01:01:37.825"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.004" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:38.003" starttime="20160128 01:01:38.002"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.006" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.006" starttime="20160128 01:01:38.005"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.008" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.008" starttime="20160128 01:01:38.007"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.012" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.012" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.013" starttime="20160128 01:01:38.010"></status>
</kw>
<msg timestamp="20160128 01:01:38.014" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.014" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,989 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.013" starttime="20160128 01:01:38.009"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.019" starttime="20160128 01:01:38.018"></status>
</kw>
<msg timestamp="20160128 01:01:38.020" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,989 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.020" starttime="20160128 01:01:38.015"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.025" starttime="20160128 01:01:38.024"></status>
</kw>
<msg timestamp="20160128 01:01:38.026" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,989 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.026" starttime="20160128 01:01:38.021"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.032" starttime="20160128 01:01:38.031"></status>
</kw>
<msg timestamp="20160128 01:01:38.033" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.033" starttime="20160128 01:01:38.027"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.040" starttime="20160128 01:01:38.039"></status>
</kw>
<msg timestamp="20160128 01:01:38.041" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.041" starttime="20160128 01:01:38.034"></status>
</kw>
<msg timestamp="20160128 01:01:38.043" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.042" starttime="20160128 01:01:37.998"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.050" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:01:38.049" starttime="20160128 01:01:38.048"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.052" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.051" starttime="20160128 01:01:38.050"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.054" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.054" starttime="20160128 01:01:38.052"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.057" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.058" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.059" starttime="20160128 01:01:38.056"></status>
</kw>
<msg timestamp="20160128 01:01:38.060" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.060" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.059" starttime="20160128 01:01:38.055"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.067" starttime="20160128 01:01:38.065"></status>
</kw>
<msg timestamp="20160128 01:01:38.067" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.067" starttime="20160128 01:01:38.061"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.073" starttime="20160128 01:01:38.071"></status>
</kw>
<msg timestamp="20160128 01:01:38.073" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.073" starttime="20160128 01:01:38.068"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.079" starttime="20160128 01:01:38.078"></status>
</kw>
<msg timestamp="20160128 01:01:38.080" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.080" starttime="20160128 01:01:38.074"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.087" starttime="20160128 01:01:38.086"></status>
</kw>
<msg timestamp="20160128 01:01:38.088" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.088" starttime="20160128 01:01:38.081"></status>
</kw>
<msg timestamp="20160128 01:01:38.089" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.089" starttime="20160128 01:01:38.044"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.096" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:01:38.096" starttime="20160128 01:01:38.094"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.098" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.098" starttime="20160128 01:01:38.097"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.100" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.100" starttime="20160128 01:01:38.099"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.104" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.104" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.105" starttime="20160128 01:01:38.102"></status>
</kw>
<msg timestamp="20160128 01:01:38.106" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.106" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.105" starttime="20160128 01:01:38.101"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.111" starttime="20160128 01:01:38.110"></status>
</kw>
<msg timestamp="20160128 01:01:38.112" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.112" starttime="20160128 01:01:38.107"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.117" starttime="20160128 01:01:38.116"></status>
</kw>
<msg timestamp="20160128 01:01:38.118" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.118" starttime="20160128 01:01:38.113"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.123" starttime="20160128 01:01:38.122"></status>
</kw>
<msg timestamp="20160128 01:01:38.124" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.124" starttime="20160128 01:01:38.119"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.131" starttime="20160128 01:01:38.130"></status>
</kw>
<msg timestamp="20160128 01:01:38.132" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.132" starttime="20160128 01:01:38.125"></status>
</kw>
<msg timestamp="20160128 01:01:38.133" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:38.133" starttime="20160128 01:01:38.090"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.140" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:01:38.140" starttime="20160128 01:01:38.139"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.142" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.142" starttime="20160128 01:01:38.141"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.145" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.144" starttime="20160128 01:01:38.143"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.148" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.148" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.149" starttime="20160128 01:01:38.146"></status>
</kw>
<msg timestamp="20160128 01:01:38.150" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.150" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.149" starttime="20160128 01:01:38.145"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.155" starttime="20160128 01:01:38.154"></status>
</kw>
<msg timestamp="20160128 01:01:38.156" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.156" starttime="20160128 01:01:38.151"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.161" starttime="20160128 01:01:38.160"></status>
</kw>
<msg timestamp="20160128 01:01:38.162" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,990 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.162" starttime="20160128 01:01:38.157"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.167" starttime="20160128 01:01:38.166"></status>
</kw>
<msg timestamp="20160128 01:01:38.168" level="INFO">${resultCode} = 2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.168" starttime="20160128 01:01:38.163"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.175" starttime="20160128 01:01:38.174"></status>
</kw>
<msg timestamp="20160128 01:01:38.176" level="INFO">${resultCode} = 2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.176" starttime="20160128 01:01:38.169"></status>
</kw>
<msg timestamp="20160128 01:01:38.177" level="INFO">${id} = 2421057</msg>
<status status="PASS" endtime="20160128 01:01:38.177" starttime="20160128 01:01:38.135"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.184" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:01:38.183" starttime="20160128 01:01:38.182"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.186" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.186" starttime="20160128 01:01:38.184"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.188" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.188" starttime="20160128 01:01:38.187"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.191" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.192" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.192" starttime="20160128 01:01:38.190"></status>
</kw>
<msg timestamp="20160128 01:01:38.193" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.194" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.193" starttime="20160128 01:01:38.189"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.198" starttime="20160128 01:01:38.197"></status>
</kw>
<msg timestamp="20160128 01:01:38.199" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.199" starttime="20160128 01:01:38.194"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.205" starttime="20160128 01:01:38.204"></status>
</kw>
<msg timestamp="20160128 01:01:38.206" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,991 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.205" starttime="20160128 01:01:38.200"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.211" starttime="20160128 01:01:38.210"></status>
</kw>
<msg timestamp="20160128 01:01:38.212" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.212" starttime="20160128 01:01:38.207"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.219" starttime="20160128 01:01:38.218"></status>
</kw>
<msg timestamp="20160128 01:01:38.220" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.220" starttime="20160128 01:01:38.213"></status>
</kw>
<msg timestamp="20160128 01:01:38.221" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:38.221" starttime="20160128 01:01:38.178"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.228" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:01:38.228" starttime="20160128 01:01:38.226"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.230" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.230" starttime="20160128 01:01:38.229"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.232" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.232" starttime="20160128 01:01:38.231"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.235" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.236" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.237" starttime="20160128 01:01:38.234"></status>
</kw>
<msg timestamp="20160128 01:01:38.237" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.238" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,992 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:38.237" starttime="20160128 01:01:38.233"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.243" starttime="20160128 01:01:38.241"></status>
</kw>
<msg timestamp="20160128 01:01:38.243" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,992 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:38.243" starttime="20160128 01:01:38.239"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.249" starttime="20160128 01:01:38.248"></status>
</kw>
<msg timestamp="20160128 01:01:38.250" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,992 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:38.249" starttime="20160128 01:01:38.244"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.255" starttime="20160128 01:01:38.254"></status>
</kw>
<msg timestamp="20160128 01:01:38.256" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:38.256" starttime="20160128 01:01:38.251"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.263" starttime="20160128 01:01:38.262"></status>
</kw>
<msg timestamp="20160128 01:01:38.264" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:38.263" starttime="20160128 01:01:38.257"></status>
</kw>
<msg timestamp="20160128 01:01:38.265" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:38.264" starttime="20160128 01:01:38.222"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.272" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:01:38.271" starttime="20160128 01:01:38.270"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.274" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.273" starttime="20160128 01:01:38.272"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.276" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.275" starttime="20160128 01:01:38.274"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.279" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.279" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.280" starttime="20160128 01:01:38.278"></status>
</kw>
<msg timestamp="20160128 01:01:38.281" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.281" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,993 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.280" starttime="20160128 01:01:38.276"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.286" starttime="20160128 01:01:38.285"></status>
</kw>
<msg timestamp="20160128 01:01:38.287" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,993 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.286" starttime="20160128 01:01:38.282"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.292" starttime="20160128 01:01:38.290"></status>
</kw>
<msg timestamp="20160128 01:01:38.293" level="INFO">${return_log_entry} = 2016-01-28 01:01:37,993 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.292" starttime="20160128 01:01:38.287"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.298" starttime="20160128 01:01:38.296"></status>
</kw>
<msg timestamp="20160128 01:01:38.299" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.298" starttime="20160128 01:01:38.293"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.305" starttime="20160128 01:01:38.304"></status>
</kw>
<msg timestamp="20160128 01:01:38.306" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.306" starttime="20160128 01:01:38.299"></status>
</kw>
<msg timestamp="20160128 01:01:38.307" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.307" starttime="20160128 01:01:38.266"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.313" starttime="20160128 01:01:38.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.314" starttime="20160128 01:01:38.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.316" starttime="20160128 01:01:38.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:38.322" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:38.323" starttime="20160128 01:01:38.321"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.323" starttime="20160128 01:01:38.320"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.324" starttime="20160128 01:01:38.317"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.324" starttime="20160128 01:01:38.308"></status>
</kw>
<msg timestamp="20160128 01:01:38.327" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:01:38.327" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:01:38.328" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:01:38.328" level="INFO">${id} = 2421057</msg>
<msg timestamp="20160128 01:01:38.328" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:01:38.329" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:01:38.329" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:38.326" starttime="20160128 01:01:37.789"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.342" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:38.342" starttime="20160128 01:01:38.340"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.343" starttime="20160128 01:01:38.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.346" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:38.346" starttime="20160128 01:01:38.344"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.347" starttime="20160128 01:01:38.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.350" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:38.350" starttime="20160128 01:01:38.348"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.351" starttime="20160128 01:01:38.347"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.351" starttime="20160128 01:01:38.336"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.354" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:38.354" starttime="20160128 01:01:38.352"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.356" starttime="20160128 01:01:38.354"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.357" starttime="20160128 01:01:38.356"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.359" starttime="20160128 01:01:38.358"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.361" starttime="20160128 01:01:38.360"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.362" starttime="20160128 01:01:38.361"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.364" starttime="20160128 01:01:38.363"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:38.367" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421057']</msg>
<msg timestamp="20160128 01:01:38.514" level="INFO">01:01:38,509 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421058
01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:01:38,511 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:01:38,512 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.514" starttime="20160128 01:01:38.366"></status>
</kw>
<msg timestamp="20160128 01:01:38.515" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.516" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:38.515" starttime="20160128 01:01:38.365"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.523" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:38.522" starttime="20160128 01:01:38.520"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.525" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.525" starttime="20160128 01:01:38.523"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.527" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.527" starttime="20160128 01:01:38.526"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.530" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.531" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.531" starttime="20160128 01:01:38.529"></status>
</kw>
<msg timestamp="20160128 01:01:38.532" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.532" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,509 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.532" starttime="20160128 01:01:38.528"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.537" starttime="20160128 01:01:38.536"></status>
</kw>
<msg timestamp="20160128 01:01:38.538" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,509 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.538" starttime="20160128 01:01:38.533"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.543" starttime="20160128 01:01:38.542"></status>
</kw>
<msg timestamp="20160128 01:01:38.544" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,509 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:38.544" starttime="20160128 01:01:38.539"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.549" starttime="20160128 01:01:38.548"></status>
</kw>
<msg timestamp="20160128 01:01:38.550" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.550" starttime="20160128 01:01:38.545"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.557" starttime="20160128 01:01:38.556"></status>
</kw>
<msg timestamp="20160128 01:01:38.558" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.558" starttime="20160128 01:01:38.551"></status>
</kw>
<msg timestamp="20160128 01:01:38.559" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:38.559" starttime="20160128 01:01:38.517"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.566" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:01:38.566" starttime="20160128 01:01:38.564"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.568" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.568" starttime="20160128 01:01:38.567"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.570" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.570" starttime="20160128 01:01:38.569"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.573" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.574" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.574" starttime="20160128 01:01:38.572"></status>
</kw>
<msg timestamp="20160128 01:01:38.575" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.576" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.575" starttime="20160128 01:01:38.571"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.580" starttime="20160128 01:01:38.579"></status>
</kw>
<msg timestamp="20160128 01:01:38.581" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.581" starttime="20160128 01:01:38.576"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.586" starttime="20160128 01:01:38.585"></status>
</kw>
<msg timestamp="20160128 01:01:38.587" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.586" starttime="20160128 01:01:38.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.593" starttime="20160128 01:01:38.591"></status>
</kw>
<msg timestamp="20160128 01:01:38.594" level="INFO">${resultCode} = 2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.593" starttime="20160128 01:01:38.588"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.601" starttime="20160128 01:01:38.600"></status>
</kw>
<msg timestamp="20160128 01:01:38.602" level="INFO">${resultCode} = 2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.601" starttime="20160128 01:01:38.595"></status>
</kw>
<msg timestamp="20160128 01:01:38.603" level="INFO">${accountId} = 2421058</msg>
<status status="PASS" endtime="20160128 01:01:38.602" starttime="20160128 01:01:38.561"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.609" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:01:38.609" starttime="20160128 01:01:38.608"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.611" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.611" starttime="20160128 01:01:38.610"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.613" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.613" starttime="20160128 01:01:38.612"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.616" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.617" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.618" starttime="20160128 01:01:38.615"></status>
</kw>
<msg timestamp="20160128 01:01:38.618" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.619" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.618" starttime="20160128 01:01:38.614"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.623" starttime="20160128 01:01:38.622"></status>
</kw>
<msg timestamp="20160128 01:01:38.624" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.624" starttime="20160128 01:01:38.619"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.629" starttime="20160128 01:01:38.628"></status>
</kw>
<msg timestamp="20160128 01:01:38.630" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,510 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.630" starttime="20160128 01:01:38.625"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.635" starttime="20160128 01:01:38.634"></status>
</kw>
<msg timestamp="20160128 01:01:38.636" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.636" starttime="20160128 01:01:38.631"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.642" starttime="20160128 01:01:38.641"></status>
</kw>
<msg timestamp="20160128 01:01:38.643" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.643" starttime="20160128 01:01:38.637"></status>
</kw>
<msg timestamp="20160128 01:01:38.645" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.644" starttime="20160128 01:01:38.604"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.651" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:01:38.651" starttime="20160128 01:01:38.649"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.653" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.653" starttime="20160128 01:01:38.652"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.655" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.655" starttime="20160128 01:01:38.654"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.658" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.659" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.659" starttime="20160128 01:01:38.657"></status>
</kw>
<msg timestamp="20160128 01:01:38.660" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.660" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,511 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.660" starttime="20160128 01:01:38.656"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.665" starttime="20160128 01:01:38.664"></status>
</kw>
<msg timestamp="20160128 01:01:38.666" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,511 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.665" starttime="20160128 01:01:38.661"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.670" starttime="20160128 01:01:38.669"></status>
</kw>
<msg timestamp="20160128 01:01:38.671" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,511 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.671" starttime="20160128 01:01:38.666"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.676" starttime="20160128 01:01:38.675"></status>
</kw>
<msg timestamp="20160128 01:01:38.677" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.677" starttime="20160128 01:01:38.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.683" starttime="20160128 01:01:38.682"></status>
</kw>
<msg timestamp="20160128 01:01:38.684" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.684" starttime="20160128 01:01:38.678"></status>
</kw>
<msg timestamp="20160128 01:01:38.685" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:38.685" starttime="20160128 01:01:38.646"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:38.692" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:01:38.691" starttime="20160128 01:01:38.690"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.694" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:38.693" starttime="20160128 01:01:38.692"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.696" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:38.695" starttime="20160128 01:01:38.694"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:38.699" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:38.699" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:38.700" starttime="20160128 01:01:38.697"></status>
</kw>
<msg timestamp="20160128 01:01:38.701" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:38.701" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,512 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.701" starttime="20160128 01:01:38.696"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.706" starttime="20160128 01:01:38.705"></status>
</kw>
<msg timestamp="20160128 01:01:38.707" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,512 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.706" starttime="20160128 01:01:38.702"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.711" starttime="20160128 01:01:38.710"></status>
</kw>
<msg timestamp="20160128 01:01:38.712" level="INFO">${return_log_entry} = 2016-01-28 01:01:38,512 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:38.712" starttime="20160128 01:01:38.707"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.717" starttime="20160128 01:01:38.716"></status>
</kw>
<msg timestamp="20160128 01:01:38.718" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.718" starttime="20160128 01:01:38.713"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.725" starttime="20160128 01:01:38.723"></status>
</kw>
<msg timestamp="20160128 01:01:38.725" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.725" starttime="20160128 01:01:38.719"></status>
</kw>
<msg timestamp="20160128 01:01:38.727" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.726" starttime="20160128 01:01:38.687"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.732" starttime="20160128 01:01:38.731"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.733" starttime="20160128 01:01:38.732"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.735" starttime="20160128 01:01:38.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:38.741" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:38.741" starttime="20160128 01:01:38.739"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.742" starttime="20160128 01:01:38.738"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.742" starttime="20160128 01:01:38.735"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:38.743" starttime="20160128 01:01:38.727"></status>
</kw>
<msg timestamp="20160128 01:01:38.745" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:01:38.745" level="INFO">${accId} = 2421058</msg>
<msg timestamp="20160128 01:01:38.745" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160128 01:01:38.746" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:01:38.746" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:01:38.744" starttime="20160128 01:01:38.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.747" starttime="20160128 01:01:38.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.749" starttime="20160128 01:01:38.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:38.750" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160128 01:01:38.751" starttime="20160128 01:01:38.749"></status>
</kw>
<doc>Test will make an abandoned MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:01:38.752" starttime="20160128 01:01:14.690"></status>
</test>
<doc>Testing the prepaid MOC call. Calling party abandons the call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:38.756" starttime="20160128 01:01:10.932"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:38.765" starttime="20160128 01:01:10.895"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy" id="s1-s1-s1-s2-s1-s2" name="MOC PREPAID ONNET-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-Busy/MOC_PREPAID_ONNET-Busy-robot-suite.txt" id="s1-s1-s1-s2-s1-s2-s1" name="MOC PREPAID ONNET-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:01:38.942" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:38.946" level="INFO">${date} = Thu Jan 28 01:01:38 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:38.945" starttime="20160128 01:01:38.939"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:38.948" level="INFO">Date and time: Thu Jan 28 01:01:38 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:38.948" starttime="20160128 01:01:38.947"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:38.950" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:01:38.951" starttime="20160128 01:01:38.949"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:38.978" starttime="20160128 01:01:38.977"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.023" starttime="20160128 01:01:38.982"></status>
</kw>
<msg timestamp="20160128 01:01:39.025" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:01:39.024" starttime="20160128 01:01:38.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:39.030" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:39.492" level="INFO">Read output: Last login: Thu Jan 28 00:01:11 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:39.493" starttime="20160128 01:01:39.029"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:39.494" starttime="20160128 01:01:39.026"></status>
</kw>
<msg timestamp="20160128 01:01:39.496" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:01:39.495" starttime="20160128 01:01:38.973"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:39.502" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:39.502" starttime="20160128 01:01:39.497"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:39.504" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:01:39.764" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:39.765" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:39.764" starttime="20160128 01:01:39.503"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.770" starttime="20160128 01:01:39.768"></status>
</kw>
<msg timestamp="20160128 01:01:39.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:39.771" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:39.770" starttime="20160128 01:01:39.766"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.777" starttime="20160128 01:01:39.776"></status>
</kw>
<msg timestamp="20160128 01:01:39.778" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:39.777" starttime="20160128 01:01:39.772"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:01:39.780" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:39.780" starttime="20160128 01:01:39.778"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:39.783" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:39.782" starttime="20160128 01:01:39.781"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.784" starttime="20160128 01:01:39.783"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.790" starttime="20160128 01:01:39.789"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.795" starttime="20160128 01:01:39.792"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:39.795" starttime="20160128 01:01:39.785"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.800" starttime="20160128 01:01:39.799"></status>
</kw>
<msg timestamp="20160128 01:01:39.801" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:39.801" starttime="20160128 01:01:39.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.803" starttime="20160128 01:01:39.802"></status>
</kw>
<msg timestamp="20160128 01:01:39.805" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:01:39.805" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:39.804" starttime="20160128 01:01:38.960"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.833" starttime="20160128 01:01:39.832"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:39.890" starttime="20160128 01:01:39.837"></status>
</kw>
<msg timestamp="20160128 01:01:39.892" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:01:39.891" starttime="20160128 01:01:39.834"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:39.904" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:40.368" level="INFO">Read output: Last login: Thu Jan 28 00:01:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:40.369" starttime="20160128 01:01:39.901"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:40.370" starttime="20160128 01:01:39.894"></status>
</kw>
<msg timestamp="20160128 01:01:40.373" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:01:40.372" starttime="20160128 01:01:39.828"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:40.377" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:40.377" starttime="20160128 01:01:40.373"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:40.379" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:01:40.755" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:40.758" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:40.757" starttime="20160128 01:01:40.378"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.765" starttime="20160128 01:01:40.762"></status>
</kw>
<msg timestamp="20160128 01:01:40.767" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:40.768" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:40.766" starttime="20160128 01:01:40.759"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.778" starttime="20160128 01:01:40.776"></status>
</kw>
<msg timestamp="20160128 01:01:40.780" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:40.779" starttime="20160128 01:01:40.769"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:01:40.784" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:40.783" starttime="20160128 01:01:40.781"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:40.789" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:40.788" starttime="20160128 01:01:40.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.792" starttime="20160128 01:01:40.790"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.804" starttime="20160128 01:01:40.801"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.808" starttime="20160128 01:01:40.805"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:40.811" starttime="20160128 01:01:40.793"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.822" starttime="20160128 01:01:40.819"></status>
</kw>
<msg timestamp="20160128 01:01:40.823" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:40.823" starttime="20160128 01:01:40.812"></status>
</kw>
<msg timestamp="20160128 01:01:40.828" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:01:40.828" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:40.826" starttime="20160128 01:01:39.814"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.891" starttime="20160128 01:01:40.888"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:40.954" starttime="20160128 01:01:40.899"></status>
</kw>
<msg timestamp="20160128 01:01:40.957" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:01:40.956" starttime="20160128 01:01:40.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:40.968" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:41.432" level="INFO">Read output: Last login: Thu Jan 28 00:01:13 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:41.434" starttime="20160128 01:01:40.966"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:41.436" starttime="20160128 01:01:40.958"></status>
</kw>
<msg timestamp="20160128 01:01:41.440" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:01:41.439" starttime="20160128 01:01:40.879"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:41.449" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:41.448" starttime="20160128 01:01:41.442"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:41.451" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:01:41.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:41.632" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:01:41.631" starttime="20160128 01:01:41.450"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.639" starttime="20160128 01:01:41.636"></status>
</kw>
<msg timestamp="20160128 01:01:41.641" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:41.642" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:41.640" starttime="20160128 01:01:41.633"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.651" starttime="20160128 01:01:41.650"></status>
</kw>
<msg timestamp="20160128 01:01:41.653" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:41.653" starttime="20160128 01:01:41.643"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:01:41.658" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:01:41.657" starttime="20160128 01:01:41.655"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:41.662" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:41.661" starttime="20160128 01:01:41.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.665" starttime="20160128 01:01:41.663"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.679" starttime="20160128 01:01:41.676"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.685" starttime="20160128 01:01:41.680"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:41.686" starttime="20160128 01:01:41.667"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.696" starttime="20160128 01:01:41.694"></status>
</kw>
<msg timestamp="20160128 01:01:41.698" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:41.697" starttime="20160128 01:01:41.687"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.702" starttime="20160128 01:01:41.699"></status>
</kw>
<msg timestamp="20160128 01:01:41.706" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:01:41.706" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:41.704" starttime="20160128 01:01:40.849"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.768" starttime="20160128 01:01:41.766"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:41.822" starttime="20160128 01:01:41.777"></status>
</kw>
<msg timestamp="20160128 01:01:41.823" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:01:41.823" starttime="20160128 01:01:41.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:41.829" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:42.273" level="INFO">Read output: Last login: Thu Jan 28 00:01:14 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:42.274" starttime="20160128 01:01:41.828"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.275" starttime="20160128 01:01:41.824"></status>
</kw>
<msg timestamp="20160128 01:01:42.277" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:01:42.276" starttime="20160128 01:01:41.756"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:42.281" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:42.281" starttime="20160128 01:01:42.278"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:42.283" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:01:42.352" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:42.353" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:01:42.352" starttime="20160128 01:01:42.282"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.356" starttime="20160128 01:01:42.355"></status>
</kw>
<msg timestamp="20160128 01:01:42.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:42.357" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:42.357" starttime="20160128 01:01:42.353"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.362" starttime="20160128 01:01:42.361"></status>
</kw>
<msg timestamp="20160128 01:01:42.363" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:42.362" starttime="20160128 01:01:42.358"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:01:42.365" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:01:42.364" starttime="20160128 01:01:42.363"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:42.367" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:42.367" starttime="20160128 01:01:42.365"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.368" starttime="20160128 01:01:42.368"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.374" starttime="20160128 01:01:42.373"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.377" starttime="20160128 01:01:42.375"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.378" starttime="20160128 01:01:42.369"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.382" starttime="20160128 01:01:42.381"></status>
</kw>
<msg timestamp="20160128 01:01:42.383" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:42.382" starttime="20160128 01:01:42.378"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.384" starttime="20160128 01:01:42.383"></status>
</kw>
<msg timestamp="20160128 01:01:42.386" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:01:42.386" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:42.385" starttime="20160128 01:01:41.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:42.388" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:42.389" starttime="20160128 01:01:42.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:42.390" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:42.391" starttime="20160128 01:01:42.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:42.393" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:01:42.393" starttime="20160128 01:01:42.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:42.395" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:01:42.395" starttime="20160128 01:01:42.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:01:42.397" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:42.397" starttime="20160128 01:01:42.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:01:42.399" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:42.400" starttime="20160128 01:01:42.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:01:42.401" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:42.402" starttime="20160128 01:01:42.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:01:42.403" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:42.404" starttime="20160128 01:01:42.402"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.410" starttime="20160128 01:01:42.407"></status>
</kw>
<msg timestamp="20160128 01:01:42.411" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:01:42.410" starttime="20160128 01:01:42.404"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.413" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:01:42.413" starttime="20160128 01:01:42.411"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.414" starttime="20160128 01:01:38.935"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s2-s1-t1" name="Run MOC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.421" starttime="20160128 01:01:42.420"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:01:42.423" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:42.422" starttime="20160128 01:01:42.422"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.431" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:01:42.431" starttime="20160128 01:01:42.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.433" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:01:42.433" starttime="20160128 01:01:42.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.434" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:01:42.435" starttime="20160128 01:01:42.433"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.436" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160128 01:01:42.437" starttime="20160128 01:01:42.435"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.438" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:42.439" starttime="20160128 01:01:42.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.440" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:01:42.441" starttime="20160128 01:01:42.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.442" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:42.443" starttime="20160128 01:01:42.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.444" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:01:42.445" starttime="20160128 01:01:42.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.446" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:42.447" starttime="20160128 01:01:42.445"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.448" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:42.448" starttime="20160128 01:01:42.447"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.456" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:42.456" starttime="20160128 01:01:42.454"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.457" starttime="20160128 01:01:42.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.460" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:42.460" starttime="20160128 01:01:42.459"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.461" starttime="20160128 01:01:42.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.464" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:42.464" starttime="20160128 01:01:42.462"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.465" starttime="20160128 01:01:42.461"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:42.465" starttime="20160128 01:01:42.450"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:42.468" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:42.468" starttime="20160128 01:01:42.466"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.470" starttime="20160128 01:01:42.468"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.471" starttime="20160128 01:01:42.470"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.473" starttime="20160128 01:01:42.472"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.475" starttime="20160128 01:01:42.474"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.476" starttime="20160128 01:01:42.475"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.478" starttime="20160128 01:01:42.477"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.480" starttime="20160128 01:01:42.478"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.481" starttime="20160128 01:01:42.480"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.483" starttime="20160128 01:01:42.482"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.485" starttime="20160128 01:01:42.484"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.487" starttime="20160128 01:01:42.485"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:42.488" starttime="20160128 01:01:42.487"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:42.491" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:01:43.127" level="INFO">01:01:43,126 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:43.128" starttime="20160128 01:01:42.490"></status>
</kw>
<msg timestamp="20160128 01:01:43.130" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:43.130" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:43.129" starttime="20160128 01:01:42.489"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:43.136" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:43.136" starttime="20160128 01:01:43.135"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:43.138" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:43.138" starttime="20160128 01:01:43.137"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:43.140" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:43.140" starttime="20160128 01:01:43.139"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:43.143" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:43.144" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:43.144" starttime="20160128 01:01:43.142"></status>
</kw>
<msg timestamp="20160128 01:01:43.145" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:43.145" level="INFO">${return_log_entry} = 2016-01-28 01:01:43,126 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:43.145" starttime="20160128 01:01:43.141"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.150" starttime="20160128 01:01:43.149"></status>
</kw>
<msg timestamp="20160128 01:01:43.151" level="INFO">${return_log_entry} = 2016-01-28 01:01:43,126 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:43.151" starttime="20160128 01:01:43.146"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.156" starttime="20160128 01:01:43.155"></status>
</kw>
<msg timestamp="20160128 01:01:43.157" level="INFO">${return_log_entry} = 2016-01-28 01:01:43,126 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:43.156" starttime="20160128 01:01:43.152"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.162" starttime="20160128 01:01:43.160"></status>
</kw>
<msg timestamp="20160128 01:01:43.162" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:43.162" starttime="20160128 01:01:43.157"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.169" starttime="20160128 01:01:43.168"></status>
</kw>
<msg timestamp="20160128 01:01:43.170" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:43.169" starttime="20160128 01:01:43.163"></status>
</kw>
<msg timestamp="20160128 01:01:43.171" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:43.171" starttime="20160128 01:01:43.131"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.176" starttime="20160128 01:01:43.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.178" starttime="20160128 01:01:43.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.179" starttime="20160128 01:01:43.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:43.185" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:43.186" starttime="20160128 01:01:43.184"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:43.186" starttime="20160128 01:01:43.183"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:43.187" starttime="20160128 01:01:43.180"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:43.187" starttime="20160128 01:01:43.172"></status>
</kw>
<msg timestamp="20160128 01:01:43.189" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:01:43.188" starttime="20160128 01:01:42.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:01:43.190" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:43.191" starttime="20160128 01:01:43.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:43.192" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:01:43.193" starttime="20160128 01:01:43.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC Busy *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.194" starttime="20160128 01:01:43.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC busy call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:43.195" level="INFO">Running the MOC busy call...</msg>
<status status="PASS" endtime="20160128 01:01:43.196" starttime="20160128 01:01:43.195"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Busy">
<doc>Runs an busy MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-busy</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:43.212" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:01:43.211" starttime="20160128 01:01:43.210"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:01:43.214" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:01:43.213" starttime="20160128 01:01:43.212"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:01:43.216" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:01:43.215" starttime="20160128 01:01:43.214"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:01:43.218" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs</msg>
<status status="PASS" endtime="20160128 01:01:43.217" starttime="20160128 01:01:43.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.219" starttime="20160128 01:01:43.218"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:43.222" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:43.222" starttime="20160128 01:01:43.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.224" starttime="20160128 01:01:43.223"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:01:43.226" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:43.226" starttime="20160128 01:01:43.224"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:01:43.229" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:43.229" starttime="20160128 01:01:43.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.231" starttime="20160128 01:01:43.230"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:01:43.233" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:43.233" starttime="20160128 01:01:43.231"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:01:43.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:43.237" starttime="20160128 01:01:43.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:43.238" starttime="20160128 01:01:43.237"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:01:43.246" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:56.322" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:56.319" starttime="20160128 01:01:43.239"></status>
</kw>
<msg timestamp="20160128 01:01:56.326" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:56.324" starttime="20160128 01:01:43.204"></status>
</kw>
<msg timestamp="20160128 01:01:56.329" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:01:56.328" starttime="20160128 01:01:43.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:56.333" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:01:56.334" starttime="20160128 01:01:56.330"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:01:56.339" starttime="20160128 01:01:56.335"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.342" starttime="20160128 01:01:56.341"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.372" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.373" starttime="20160128 01:01:56.368"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.374" starttime="20160128 01:01:56.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.380" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.381" starttime="20160128 01:01:56.377"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.383" starttime="20160128 01:01:56.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.389" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.390" starttime="20160128 01:01:56.386"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.391" starttime="20160128 01:01:56.384"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.393" starttime="20160128 01:01:56.359"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.397" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:56.398" starttime="20160128 01:01:56.394"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.402" starttime="20160128 01:01:56.399"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.406" starttime="20160128 01:01:56.403"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.410" starttime="20160128 01:01:56.408"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.414" starttime="20160128 01:01:56.412"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.417" starttime="20160128 01:01:56.415"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.421" starttime="20160128 01:01:56.418"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:56.426" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:01:56.589" level="INFO">01:01:56,581 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:01:56,582 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:01:56,583 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421060
01:01:56,584 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:01:56,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:01:56,587 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:01:56.589" starttime="20160128 01:01:56.424"></status>
</kw>
<msg timestamp="20160128 01:01:56.590" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.591" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:56.590" starttime="20160128 01:01:56.422"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.598" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:56.597" starttime="20160128 01:01:56.596"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.599" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.599" starttime="20160128 01:01:56.598"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.601" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.601" starttime="20160128 01:01:56.600"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.604" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.605" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.606" starttime="20160128 01:01:56.603"></status>
</kw>
<msg timestamp="20160128 01:01:56.606" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.607" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,581 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:56.606" starttime="20160128 01:01:56.602"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.612" starttime="20160128 01:01:56.610"></status>
</kw>
<msg timestamp="20160128 01:01:56.612" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,581 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:56.612" starttime="20160128 01:01:56.607"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.617" starttime="20160128 01:01:56.616"></status>
</kw>
<msg timestamp="20160128 01:01:56.618" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,581 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:56.618" starttime="20160128 01:01:56.613"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.623" starttime="20160128 01:01:56.621"></status>
</kw>
<msg timestamp="20160128 01:01:56.624" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:56.623" starttime="20160128 01:01:56.618"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.630" starttime="20160128 01:01:56.629"></status>
</kw>
<msg timestamp="20160128 01:01:56.631" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:56.631" starttime="20160128 01:01:56.624"></status>
</kw>
<msg timestamp="20160128 01:01:56.632" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:56.632" starttime="20160128 01:01:56.592"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.638" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:01:56.638" starttime="20160128 01:01:56.637"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.640" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.640" starttime="20160128 01:01:56.639"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.642" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.642" starttime="20160128 01:01:56.641"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.645" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.646" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.646" starttime="20160128 01:01:56.644"></status>
</kw>
<msg timestamp="20160128 01:01:56.647" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.648" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,582 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:56.647" starttime="20160128 01:01:56.643"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.652" starttime="20160128 01:01:56.651"></status>
</kw>
<msg timestamp="20160128 01:01:56.653" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,582 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:56.653" starttime="20160128 01:01:56.648"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.658" starttime="20160128 01:01:56.657"></status>
</kw>
<msg timestamp="20160128 01:01:56.658" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,582 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:01:56.658" starttime="20160128 01:01:56.654"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.663" starttime="20160128 01:01:56.662"></status>
</kw>
<msg timestamp="20160128 01:01:56.664" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:56.664" starttime="20160128 01:01:56.659"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.672" starttime="20160128 01:01:56.671"></status>
</kw>
<msg timestamp="20160128 01:01:56.673" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:56.672" starttime="20160128 01:01:56.665"></status>
</kw>
<msg timestamp="20160128 01:01:56.674" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:56.673" starttime="20160128 01:01:56.633"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.680" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:01:56.680" starttime="20160128 01:01:56.678"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.682" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.682" starttime="20160128 01:01:56.681"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.684" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.684" starttime="20160128 01:01:56.683"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.687" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.688" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.688" starttime="20160128 01:01:56.686"></status>
</kw>
<msg timestamp="20160128 01:01:56.689" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.689" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,584 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.688" starttime="20160128 01:01:56.685"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.694" starttime="20160128 01:01:56.693"></status>
</kw>
<msg timestamp="20160128 01:01:56.695" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,584 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.694" starttime="20160128 01:01:56.690"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.699" starttime="20160128 01:01:56.698"></status>
</kw>
<msg timestamp="20160128 01:01:56.701" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,584 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.700" starttime="20160128 01:01:56.695"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.705" starttime="20160128 01:01:56.704"></status>
</kw>
<msg timestamp="20160128 01:01:56.706" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.706" starttime="20160128 01:01:56.701"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.713" starttime="20160128 01:01:56.712"></status>
</kw>
<msg timestamp="20160128 01:01:56.714" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.713" starttime="20160128 01:01:56.707"></status>
</kw>
<msg timestamp="20160128 01:01:56.715" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:01:56.714" starttime="20160128 01:01:56.675"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.721" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:01:56.721" starttime="20160128 01:01:56.719"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.723" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.723" starttime="20160128 01:01:56.722"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.725" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.725" starttime="20160128 01:01:56.724"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.728" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.728" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.729" starttime="20160128 01:01:56.727"></status>
</kw>
<msg timestamp="20160128 01:01:56.730" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.730" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,583 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.729" starttime="20160128 01:01:56.726"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.735" starttime="20160128 01:01:56.734"></status>
</kw>
<msg timestamp="20160128 01:01:56.736" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,583 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.735" starttime="20160128 01:01:56.731"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.741" starttime="20160128 01:01:56.740"></status>
</kw>
<msg timestamp="20160128 01:01:56.742" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,583 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.742" starttime="20160128 01:01:56.736"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.747" starttime="20160128 01:01:56.746"></status>
</kw>
<msg timestamp="20160128 01:01:56.748" level="INFO">${resultCode} = 2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.747" starttime="20160128 01:01:56.743"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.754" starttime="20160128 01:01:56.753"></status>
</kw>
<msg timestamp="20160128 01:01:56.755" level="INFO">${resultCode} = 2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.755" starttime="20160128 01:01:56.748"></status>
</kw>
<msg timestamp="20160128 01:01:56.756" level="INFO">${id} = 2421060</msg>
<status status="PASS" endtime="20160128 01:01:56.756" starttime="20160128 01:01:56.716"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.762" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:01:56.762" starttime="20160128 01:01:56.761"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.764" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.764" starttime="20160128 01:01:56.763"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.766" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.766" starttime="20160128 01:01:56.765"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.769" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.770" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.770" starttime="20160128 01:01:56.768"></status>
</kw>
<msg timestamp="20160128 01:01:56.771" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.771" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.771" starttime="20160128 01:01:56.767"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.776" starttime="20160128 01:01:56.775"></status>
</kw>
<msg timestamp="20160128 01:01:56.777" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.776" starttime="20160128 01:01:56.772"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.781" starttime="20160128 01:01:56.780"></status>
</kw>
<msg timestamp="20160128 01:01:56.782" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,585 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.782" starttime="20160128 01:01:56.777"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.787" starttime="20160128 01:01:56.786"></status>
</kw>
<msg timestamp="20160128 01:01:56.788" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.787" starttime="20160128 01:01:56.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.794" starttime="20160128 01:01:56.793"></status>
</kw>
<msg timestamp="20160128 01:01:56.795" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.795" starttime="20160128 01:01:56.788"></status>
</kw>
<msg timestamp="20160128 01:01:56.796" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:01:56.796" starttime="20160128 01:01:56.757"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.802" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:01:56.802" starttime="20160128 01:01:56.801"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.804" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.804" starttime="20160128 01:01:56.803"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.806" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.806" starttime="20160128 01:01:56.805"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.809" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.810" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.810" starttime="20160128 01:01:56.808"></status>
</kw>
<msg timestamp="20160128 01:01:56.811" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.812" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:56.811" starttime="20160128 01:01:56.807"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.816" starttime="20160128 01:01:56.815"></status>
</kw>
<msg timestamp="20160128 01:01:56.817" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:56.817" starttime="20160128 01:01:56.812"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.821" starttime="20160128 01:01:56.820"></status>
</kw>
<msg timestamp="20160128 01:01:56.822" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:01:56.822" starttime="20160128 01:01:56.817"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.827" starttime="20160128 01:01:56.826"></status>
</kw>
<msg timestamp="20160128 01:01:56.828" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:56.828" starttime="20160128 01:01:56.823"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.835" starttime="20160128 01:01:56.834"></status>
</kw>
<msg timestamp="20160128 01:01:56.836" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:56.835" starttime="20160128 01:01:56.829"></status>
</kw>
<msg timestamp="20160128 01:01:56.837" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:01:56.837" starttime="20160128 01:01:56.797"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:56.844" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:01:56.843" starttime="20160128 01:01:56.842"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.846" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:56.845" starttime="20160128 01:01:56.844"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.848" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:56.847" starttime="20160128 01:01:56.846"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.851" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:56.851" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:56.852" starttime="20160128 01:01:56.849"></status>
</kw>
<msg timestamp="20160128 01:01:56.853" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:56.853" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.852" starttime="20160128 01:01:56.848"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.857" starttime="20160128 01:01:56.856"></status>
</kw>
<msg timestamp="20160128 01:01:56.858" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.858" starttime="20160128 01:01:56.854"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.863" starttime="20160128 01:01:56.862"></status>
</kw>
<msg timestamp="20160128 01:01:56.864" level="INFO">${return_log_entry} = 2016-01-28 01:01:56,586 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.863" starttime="20160128 01:01:56.859"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.869" starttime="20160128 01:01:56.867"></status>
</kw>
<msg timestamp="20160128 01:01:56.869" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.869" starttime="20160128 01:01:56.864"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.876" starttime="20160128 01:01:56.875"></status>
</kw>
<msg timestamp="20160128 01:01:56.877" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.876" starttime="20160128 01:01:56.870"></status>
</kw>
<msg timestamp="20160128 01:01:56.878" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.878" starttime="20160128 01:01:56.839"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.883" starttime="20160128 01:01:56.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.885" starttime="20160128 01:01:56.884"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.886" starttime="20160128 01:01:56.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:56.892" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:56.893" starttime="20160128 01:01:56.891"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.893" starttime="20160128 01:01:56.890"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.894" starttime="20160128 01:01:56.887"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.894" starttime="20160128 01:01:56.879"></status>
</kw>
<msg timestamp="20160128 01:01:56.896" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:01:56.897" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:01:56.897" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:01:56.897" level="INFO">${id} = 2421060</msg>
<msg timestamp="20160128 01:01:56.897" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:01:56.898" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:01:56.898" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:01:56.896" starttime="20160128 01:01:56.346"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.910" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.910" starttime="20160128 01:01:56.908"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.911" starttime="20160128 01:01:56.907"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.914" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.914" starttime="20160128 01:01:56.912"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.915" starttime="20160128 01:01:56.912"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.917" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:01:56.918" starttime="20160128 01:01:56.916"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.918" starttime="20160128 01:01:56.915"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:56.919" starttime="20160128 01:01:56.904"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:01:56.921" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:01:56.921" starttime="20160128 01:01:56.920"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.923" starttime="20160128 01:01:56.922"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.925" starttime="20160128 01:01:56.924"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.926" starttime="20160128 01:01:56.925"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.928" starttime="20160128 01:01:56.927"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.929" starttime="20160128 01:01:56.928"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:56.931" starttime="20160128 01:01:56.930"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:01:56.933" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421060']</msg>
<msg timestamp="20160128 01:01:57.113" level="INFO">01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421061
01:01:57,109 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:01:57,110 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:01:57,111 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:57.115" starttime="20160128 01:01:56.932"></status>
</kw>
<msg timestamp="20160128 01:01:57.117" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.117" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:01:57.116" starttime="20160128 01:01:56.932"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:57.125" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:01:57.124" starttime="20160128 01:01:57.123"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.127" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:57.126" starttime="20160128 01:01:57.125"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.129" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:57.128" starttime="20160128 01:01:57.127"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.132" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:57.133" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:57.133" starttime="20160128 01:01:57.131"></status>
</kw>
<msg timestamp="20160128 01:01:57.134" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.134" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:57.134" starttime="20160128 01:01:57.130"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.140" starttime="20160128 01:01:57.139"></status>
</kw>
<msg timestamp="20160128 01:01:57.141" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:57.140" starttime="20160128 01:01:57.135"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.145" starttime="20160128 01:01:57.144"></status>
</kw>
<msg timestamp="20160128 01:01:57.146" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:01:57.146" starttime="20160128 01:01:57.141"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.151" starttime="20160128 01:01:57.149"></status>
</kw>
<msg timestamp="20160128 01:01:57.152" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:57.151" starttime="20160128 01:01:57.147"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.158" starttime="20160128 01:01:57.157"></status>
</kw>
<msg timestamp="20160128 01:01:57.159" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:57.158" starttime="20160128 01:01:57.152"></status>
</kw>
<msg timestamp="20160128 01:01:57.160" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:57.159" starttime="20160128 01:01:57.119"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:57.166" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:01:57.166" starttime="20160128 01:01:57.164"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.168" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:57.168" starttime="20160128 01:01:57.167"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.170" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:57.169" starttime="20160128 01:01:57.168"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.173" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:57.173" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:57.174" starttime="20160128 01:01:57.172"></status>
</kw>
<msg timestamp="20160128 01:01:57.175" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.175" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.174" starttime="20160128 01:01:57.170"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.179" starttime="20160128 01:01:57.178"></status>
</kw>
<msg timestamp="20160128 01:01:57.180" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.180" starttime="20160128 01:01:57.176"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.185" starttime="20160128 01:01:57.184"></status>
</kw>
<msg timestamp="20160128 01:01:57.186" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,108 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.185" starttime="20160128 01:01:57.181"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.190" starttime="20160128 01:01:57.189"></status>
</kw>
<msg timestamp="20160128 01:01:57.191" level="INFO">${resultCode} = 2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.191" starttime="20160128 01:01:57.186"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.198" starttime="20160128 01:01:57.196"></status>
</kw>
<msg timestamp="20160128 01:01:57.198" level="INFO">${resultCode} = 2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.198" starttime="20160128 01:01:57.192"></status>
</kw>
<msg timestamp="20160128 01:01:57.199" level="INFO">${accountId} = 2421061</msg>
<status status="PASS" endtime="20160128 01:01:57.199" starttime="20160128 01:01:57.161"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:57.206" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:01:57.206" starttime="20160128 01:01:57.204"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.208" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:57.208" starttime="20160128 01:01:57.207"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.210" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:57.210" starttime="20160128 01:01:57.209"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.213" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:57.213" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:57.214" starttime="20160128 01:01:57.212"></status>
</kw>
<msg timestamp="20160128 01:01:57.215" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.215" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,109 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.214" starttime="20160128 01:01:57.211"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.219" starttime="20160128 01:01:57.218"></status>
</kw>
<msg timestamp="20160128 01:01:57.220" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,109 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.220" starttime="20160128 01:01:57.216"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.225" starttime="20160128 01:01:57.224"></status>
</kw>
<msg timestamp="20160128 01:01:57.226" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,109 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.225" starttime="20160128 01:01:57.221"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.230" starttime="20160128 01:01:57.229"></status>
</kw>
<msg timestamp="20160128 01:01:57.231" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.231" starttime="20160128 01:01:57.226"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.237" starttime="20160128 01:01:57.236"></status>
</kw>
<msg timestamp="20160128 01:01:57.238" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.238" starttime="20160128 01:01:57.232"></status>
</kw>
<msg timestamp="20160128 01:01:57.239" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.239" starttime="20160128 01:01:57.201"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:57.246" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:01:57.245" starttime="20160128 01:01:57.244"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.248" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:57.247" starttime="20160128 01:01:57.246"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.250" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:57.249" starttime="20160128 01:01:57.248"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.252" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:57.253" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:57.253" starttime="20160128 01:01:57.251"></status>
</kw>
<msg timestamp="20160128 01:01:57.254" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.255" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,110 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.254" starttime="20160128 01:01:57.250"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.259" starttime="20160128 01:01:57.258"></status>
</kw>
<msg timestamp="20160128 01:01:57.260" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,110 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.259" starttime="20160128 01:01:57.255"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.264" starttime="20160128 01:01:57.263"></status>
</kw>
<msg timestamp="20160128 01:01:57.265" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,110 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.265" starttime="20160128 01:01:57.260"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.270" starttime="20160128 01:01:57.269"></status>
</kw>
<msg timestamp="20160128 01:01:57.271" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.270" starttime="20160128 01:01:57.266"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.277" starttime="20160128 01:01:57.276"></status>
</kw>
<msg timestamp="20160128 01:01:57.278" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.277" starttime="20160128 01:01:57.271"></status>
</kw>
<msg timestamp="20160128 01:01:57.279" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:01:57.279" starttime="20160128 01:01:57.240"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:01:57.285" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:01:57.285" starttime="20160128 01:01:57.283"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.287" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:01:57.287" starttime="20160128 01:01:57.286"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.289" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:01:57.289" starttime="20160128 01:01:57.288"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.292" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:01:57.292" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:01:57.293" starttime="20160128 01:01:57.291"></status>
</kw>
<msg timestamp="20160128 01:01:57.294" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:01:57.294" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,111 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:57.293" starttime="20160128 01:01:57.290"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.298" starttime="20160128 01:01:57.297"></status>
</kw>
<msg timestamp="20160128 01:01:57.299" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,111 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:57.299" starttime="20160128 01:01:57.295"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.304" starttime="20160128 01:01:57.303"></status>
</kw>
<msg timestamp="20160128 01:01:57.305" level="INFO">${return_log_entry} = 2016-01-28 01:01:57,111 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:01:57.304" starttime="20160128 01:01:57.300"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.309" starttime="20160128 01:01:57.308"></status>
</kw>
<msg timestamp="20160128 01:01:57.310" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:57.310" starttime="20160128 01:01:57.305"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.316" starttime="20160128 01:01:57.315"></status>
</kw>
<msg timestamp="20160128 01:01:57.317" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:01:57.317" starttime="20160128 01:01:57.311"></status>
</kw>
<msg timestamp="20160128 01:01:57.318" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:01:57.318" starttime="20160128 01:01:57.280"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.324" starttime="20160128 01:01:57.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.325" starttime="20160128 01:01:57.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.327" starttime="20160128 01:01:57.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:01:57.333" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:01:57.333" starttime="20160128 01:01:57.331"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:57.334" starttime="20160128 01:01:57.330"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:57.334" starttime="20160128 01:01:57.327"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:57.335" starttime="20160128 01:01:57.319"></status>
</kw>
<msg timestamp="20160128 01:01:57.337" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:01:57.337" level="INFO">${accId} = 2421061</msg>
<msg timestamp="20160128 01:01:57.337" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160128 01:01:57.338" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:01:57.338" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:01:57.336" starttime="20160128 01:01:56.900"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.339" starttime="20160128 01:01:57.339"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.341" starttime="20160128 01:01:57.340"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:57.342" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160128 01:01:57.343" starttime="20160128 01:01:57.341"></status>
</kw>
<doc>Test will make a MOC call to the busy B party.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:01:57.344" starttime="20160128 01:01:42.415"></status>
</test>
<doc>Testing the prepaid MOC call to the busy called party (called party in another call)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:57.348" starttime="20160128 01:01:38.788"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:01:57.356" starttime="20160128 01:01:38.770"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s" id="s1-s1-s1-s2-s1-s3" name="MOC PREPAID ONNET-LongDuration136s">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-LongDuration136s/MOC_PREPAID_ONNET-LongDuration136s-robot-suite.txt" id="s1-s1-s1-s2-s1-s3-s1" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:01:57.527" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:01:57.531" level="INFO">${date} = Thu Jan 28 01:01:57 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:57.530" starttime="20160128 01:01:57.523"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:57.533" level="INFO">Date and time: Thu Jan 28 01:01:57 CET 2016</msg>
<status status="PASS" endtime="20160128 01:01:57.533" starttime="20160128 01:01:57.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:01:57.535" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:01:57.535" starttime="20160128 01:01:57.534"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.563" starttime="20160128 01:01:57.562"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:57.608" starttime="20160128 01:01:57.568"></status>
</kw>
<msg timestamp="20160128 01:01:57.609" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:01:57.608" starttime="20160128 01:01:57.564"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:57.614" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:58.042" level="INFO">Read output: Last login: Thu Jan 28 00:01:39 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:58.043" starttime="20160128 01:01:57.613"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:58.044" starttime="20160128 01:01:57.609"></status>
</kw>
<msg timestamp="20160128 01:01:58.046" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:01:58.045" starttime="20160128 01:01:57.558"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:58.050" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:58.050" starttime="20160128 01:01:58.047"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:58.052" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:01:58.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:58.287" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:58.286" starttime="20160128 01:01:58.051"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.290" starttime="20160128 01:01:58.289"></status>
</kw>
<msg timestamp="20160128 01:01:58.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:58.291" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:58.291" starttime="20160128 01:01:58.288"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.296" starttime="20160128 01:01:58.295"></status>
</kw>
<msg timestamp="20160128 01:01:58.297" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:58.297" starttime="20160128 01:01:58.292"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:01:58.299" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:01:58.298" starttime="20160128 01:01:58.297"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:58.301" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:58.300" starttime="20160128 01:01:58.299"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.302" starttime="20160128 01:01:58.301"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.308" starttime="20160128 01:01:58.307"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.312" starttime="20160128 01:01:58.309"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:58.312" starttime="20160128 01:01:58.303"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.317" starttime="20160128 01:01:58.315"></status>
</kw>
<msg timestamp="20160128 01:01:58.322" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:58.317" starttime="20160128 01:01:58.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.323" starttime="20160128 01:01:58.322"></status>
</kw>
<msg timestamp="20160128 01:01:58.325" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:01:58.325" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:01:58.324" starttime="20160128 01:01:57.544"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.353" starttime="20160128 01:01:58.352"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:58.397" starttime="20160128 01:01:58.356"></status>
</kw>
<msg timestamp="20160128 01:01:58.398" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:01:58.397" starttime="20160128 01:01:58.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:58.402" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:58.864" level="INFO">Read output: Last login: Thu Jan 28 00:01:40 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:58.865" starttime="20160128 01:01:58.401"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:58.866" starttime="20160128 01:01:58.398"></status>
</kw>
<msg timestamp="20160128 01:01:58.867" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:01:58.866" starttime="20160128 01:01:58.347"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:58.871" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:58.871" starttime="20160128 01:01:58.868"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:58.873" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:01:59.249" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:01:59.250" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:59.250" starttime="20160128 01:01:58.872"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.254" starttime="20160128 01:01:59.252"></status>
</kw>
<msg timestamp="20160128 01:01:59.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:01:59.255" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:01:59.254" starttime="20160128 01:01:59.251"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.260" starttime="20160128 01:01:59.259"></status>
</kw>
<msg timestamp="20160128 01:01:59.261" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:01:59.260" starttime="20160128 01:01:59.256"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:01:59.263" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:01:59.262" starttime="20160128 01:01:59.261"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:01:59.265" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:59.264" starttime="20160128 01:01:59.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.266" starttime="20160128 01:01:59.265"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.271" starttime="20160128 01:01:59.270"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.273" starttime="20160128 01:01:59.272"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:59.275" starttime="20160128 01:01:59.267"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.279" starttime="20160128 01:01:59.278"></status>
</kw>
<msg timestamp="20160128 01:01:59.280" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:59.280" starttime="20160128 01:01:59.275"></status>
</kw>
<msg timestamp="20160128 01:01:59.282" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:01:59.282" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:01:59.281" starttime="20160128 01:01:58.334"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.308" starttime="20160128 01:01:59.307"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:01:59.351" starttime="20160128 01:01:59.312"></status>
</kw>
<msg timestamp="20160128 01:01:59.352" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:01:59.351" starttime="20160128 01:01:59.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:01:59.357" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:01:59.823" level="INFO">Read output: Last login: Thu Jan 28 00:01:41 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:01:59.824" starttime="20160128 01:01:59.356"></status>
</kw>
<status status="PASS" endtime="20160128 01:01:59.825" starttime="20160128 01:01:59.353"></status>
</kw>
<msg timestamp="20160128 01:01:59.826" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:01:59.826" starttime="20160128 01:01:59.303"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:01:59.830" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:01:59.830" starttime="20160128 01:01:59.827"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:01:59.832" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:02:00.020" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:02:00.021" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:02:00.020" starttime="20160128 01:01:59.831"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.025" starttime="20160128 01:02:00.023"></status>
</kw>
<msg timestamp="20160128 01:02:00.026" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:02:00.026" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:02:00.025" starttime="20160128 01:02:00.022"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.031" starttime="20160128 01:02:00.030"></status>
</kw>
<msg timestamp="20160128 01:02:00.031" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:02:00.031" starttime="20160128 01:02:00.026"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:02:00.033" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:02:00.033" starttime="20160128 01:02:00.032"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:02:00.035" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:02:00.035" starttime="20160128 01:02:00.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.037" starttime="20160128 01:02:00.036"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.042" starttime="20160128 01:02:00.041"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.044" starttime="20160128 01:02:00.043"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:00.046" starttime="20160128 01:02:00.038"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.050" starttime="20160128 01:02:00.049"></status>
</kw>
<msg timestamp="20160128 01:02:00.051" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:02:00.050" starttime="20160128 01:02:00.046"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.052" starttime="20160128 01:02:00.051"></status>
</kw>
<msg timestamp="20160128 01:02:00.054" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:02:00.054" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:02:00.053" starttime="20160128 01:01:59.290"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.081" starttime="20160128 01:02:00.080"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:00.124" starttime="20160128 01:02:00.085"></status>
</kw>
<msg timestamp="20160128 01:02:00.125" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:02:00.125" starttime="20160128 01:02:00.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:02:00.130" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:02:01.118" level="INFO">Read output: Last login: Thu Jan 28 00:01:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:02:01.120" starttime="20160128 01:02:00.129"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.121" starttime="20160128 01:02:00.126"></status>
</kw>
<msg timestamp="20160128 01:02:01.124" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:02:01.123" starttime="20160128 01:02:00.076"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:02:01.129" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:02:01.128" starttime="20160128 01:02:01.124"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:02:01.131" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:02:01.210" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:02:01.211" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:02:01.210" starttime="20160128 01:02:01.130"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.214" starttime="20160128 01:02:01.213"></status>
</kw>
<msg timestamp="20160128 01:02:01.215" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:02:01.216" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:02:01.215" starttime="20160128 01:02:01.212"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.221" starttime="20160128 01:02:01.220"></status>
</kw>
<msg timestamp="20160128 01:02:01.222" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:02:01.221" starttime="20160128 01:02:01.216"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:02:01.224" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:02:01.223" starttime="20160128 01:02:01.222"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:02:01.226" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:02:01.225" starttime="20160128 01:02:01.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.227" starttime="20160128 01:02:01.226"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.233" starttime="20160128 01:02:01.232"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.237" starttime="20160128 01:02:01.234"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.238" starttime="20160128 01:02:01.228"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.242" starttime="20160128 01:02:01.241"></status>
</kw>
<msg timestamp="20160128 01:02:01.243" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:02:01.243" starttime="20160128 01:02:01.239"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.245" starttime="20160128 01:02:01.244"></status>
</kw>
<msg timestamp="20160128 01:02:01.246" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:02:01.247" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:02:01.246" starttime="20160128 01:02:00.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:01.248" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:02:01.249" starttime="20160128 01:02:01.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:01.251" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:02:01.251" starttime="20160128 01:02:01.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:01.253" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:02:01.253" starttime="20160128 01:02:01.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:01.255" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:02:01.256" starttime="20160128 01:02:01.254"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:02:01.257" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:02:01.259" starttime="20160128 01:02:01.256"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:02:01.260" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:02:01.261" starttime="20160128 01:02:01.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:02:01.262" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:02:01.263" starttime="20160128 01:02:01.261"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:02:01.264" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:02:01.265" starttime="20160128 01:02:01.263"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.274" starttime="20160128 01:02:01.272"></status>
</kw>
<msg timestamp="20160128 01:02:01.275" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:02:01.275" starttime="20160128 01:02:01.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.277" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:02:01.277" starttime="20160128 01:02:01.276"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.278" starttime="20160128 01:01:57.520"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s3-s1-t1" name="Run MOC 136s Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.284" starttime="20160128 01:02:01.283"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>100000000</arg>
</arguments>
<msg timestamp="20160128 01:02:01.286" level="INFO">${INITIAL_BALANCE} = 100000000</msg>
<status status="PASS" endtime="20160128 01:02:01.286" starttime="20160128 01:02:01.285"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.293" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:02:01.294" starttime="20160128 01:02:01.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.295" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:02:01.295" starttime="20160128 01:02:01.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.297" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:02:01.297" starttime="20160128 01:02:01.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.299" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:02:01.299" starttime="20160128 01:02:01.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.301" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:02:01.301" starttime="20160128 01:02:01.300"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.303" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:02:01.303" starttime="20160128 01:02:01.302"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.305" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:02:01.305" starttime="20160128 01:02:01.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.306" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:02:01.307" starttime="20160128 01:02:01.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.308" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:02:01.309" starttime="20160128 01:02:01.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.310" level="INFO">msg=balance=100000000</msg>
<status status="PASS" endtime="20160128 01:02:01.311" starttime="20160128 01:02:01.309"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.318" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:01.318" starttime="20160128 01:02:01.316"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.319" starttime="20160128 01:02:01.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.322" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:01.322" starttime="20160128 01:02:01.320"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.322" starttime="20160128 01:02:01.319"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.325" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:01.326" starttime="20160128 01:02:01.324"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.326" starttime="20160128 01:02:01.323"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:01.327" starttime="20160128 01:02:01.312"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:02:01.329" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:02:01.330" starttime="20160128 01:02:01.328"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.331" starttime="20160128 01:02:01.330"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.333" starttime="20160128 01:02:01.332"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.335" starttime="20160128 01:02:01.334"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.336" starttime="20160128 01:02:01.335"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.337" starttime="20160128 01:02:01.337"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.339" starttime="20160128 01:02:01.338"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.341" starttime="20160128 01:02:01.340"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.343" starttime="20160128 01:02:01.341"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.344" starttime="20160128 01:02:01.343"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.346" starttime="20160128 01:02:01.345"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.348" starttime="20160128 01:02:01.347"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:01.349" starttime="20160128 01:02:01.348"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:02:01.352" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000']</msg>
<msg timestamp="20160128 01:02:02.207" level="INFO">01:02:02,205 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:02:02.208" starttime="20160128 01:02:01.351"></status>
</kw>
<msg timestamp="20160128 01:02:02.209" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:02:02.210" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:02:02.208" starttime="20160128 01:02:01.350"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:02:02.222" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:02:02.221" starttime="20160128 01:02:02.218"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.226" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:02:02.226" starttime="20160128 01:02:02.223"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.231" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:02:02.230" starttime="20160128 01:02:02.228"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.237" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:02:02.238" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:02:02.239" starttime="20160128 01:02:02.234"></status>
</kw>
<msg timestamp="20160128 01:02:02.241" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:02:02.241" level="INFO">${return_log_entry} = 2016-01-28 01:02:02,205 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:02:02.240" starttime="20160128 01:02:02.232"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.251" starttime="20160128 01:02:02.249"></status>
</kw>
<msg timestamp="20160128 01:02:02.253" level="INFO">${return_log_entry} = 2016-01-28 01:02:02,205 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:02:02.252" starttime="20160128 01:02:02.243"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.263" starttime="20160128 01:02:02.260"></status>
</kw>
<msg timestamp="20160128 01:02:02.265" level="INFO">${return_log_entry} = 2016-01-28 01:02:02,205 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:02:02.264" starttime="20160128 01:02:02.254"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.275" starttime="20160128 01:02:02.272"></status>
</kw>
<msg timestamp="20160128 01:02:02.277" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:02:02.276" starttime="20160128 01:02:02.266"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.291" starttime="20160128 01:02:02.288"></status>
</kw>
<msg timestamp="20160128 01:02:02.292" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:02:02.292" starttime="20160128 01:02:02.278"></status>
</kw>
<msg timestamp="20160128 01:02:02.295" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:02:02.294" starttime="20160128 01:02:02.211"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.306" starttime="20160128 01:02:02.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.309" starttime="20160128 01:02:02.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.312" starttime="20160128 01:02:02.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:02:02.325" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:02:02.326" starttime="20160128 01:02:02.321"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:02.327" starttime="20160128 01:02:02.319"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:02.327" starttime="20160128 01:02:02.313"></status>
</kw>
<status status="PASS" endtime="20160128 01:02:02.328" starttime="20160128 01:02:02.297"></status>
</kw>
<msg timestamp="20160128 01:02:02.331" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:02:02.330" starttime="20160128 01:02:01.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:02:02.334" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:02:02.334" starttime="20160128 01:02:02.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:02.337" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:02:02.337" starttime="20160128 01:02:02.335"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.340" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:02:02.342" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160128 01:02:02.341" starttime="20160128 01:02:02.339"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160128 01:02:02.347" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:02:02.347" starttime="20160128 01:02:02.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.350" starttime="20160128 01:02:02.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:02:02.352" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160128 01:02:02.353" starttime="20160128 01:02:02.351"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 136s">
<doc>Runs a standard MOC 136s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc136s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:02:02.379" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:02:02.378" starttime="20160128 01:02:02.376"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:02:02.382" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:02:02.382" starttime="20160128 01:02:02.380"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:02:02.386" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:02:02.385" starttime="20160128 01:02:02.383"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:02:02.389" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs</msg>
<status status="PASS" endtime="20160128 01:02:02.389" starttime="20160128 01:02:02.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.392" starttime="20160128 01:02:02.390"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:02:02.396" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:02.397" starttime="20160128 01:02:02.393"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.399" starttime="20160128 01:02:02.398"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:02:02.403" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:02.404" starttime="20160128 01:02:02.400"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:02:02.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:02.410" starttime="20160128 01:02:02.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.413" starttime="20160128 01:02:02.411"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.417" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:02.418" starttime="20160128 01:02:02.414"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:02:02.423" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:02:02.424" starttime="20160128 01:02:02.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:02:02.426" starttime="20160128 01:02:02.425"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:02:02.440" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc136s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc136s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:22.857" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:22.855" starttime="20160128 01:02:02.427"></status>
</kw>
<msg timestamp="20160128 01:04:22.861" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:22.860" starttime="20160128 01:02:02.367"></status>
</kw>
<msg timestamp="20160128 01:04:22.863" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:22.862" starttime="20160128 01:02:02.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:22.865" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:04:22.866" starttime="20160128 01:04:22.864"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:04:22.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:22.869" starttime="20160128 01:04:22.867"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.870" starttime="20160128 01:04:22.869"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:22.883" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:22.884" starttime="20160128 01:04:22.882"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:22.884" starttime="20160128 01:04:22.881"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:22.887" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:22.888" starttime="20160128 01:04:22.886"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:22.888" starttime="20160128 01:04:22.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:22.891" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:22.891" starttime="20160128 01:04:22.890"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:22.892" starttime="20160128 01:04:22.889"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:22.892" starttime="20160128 01:04:22.878"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:22.894" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:22.895" starttime="20160128 01:04:22.893"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.896" starttime="20160128 01:04:22.895"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.898" starttime="20160128 01:04:22.897"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.900" starttime="20160128 01:04:22.899"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.901" starttime="20160128 01:04:22.900"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.903" starttime="20160128 01:04:22.902"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:22.904" starttime="20160128 01:04:22.903"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:22.907" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:04:23.144" level="INFO">01:04:23,124 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:23,127 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:23,129 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421063
01:04:23,131 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:04:23,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:23,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:23,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:23,141 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.146" starttime="20160128 01:04:22.906"></status>
</kw>
<msg timestamp="20160128 01:04:23.150" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.150" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:23.148" starttime="20160128 01:04:22.905"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.166" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:23.165" starttime="20160128 01:04:23.162"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.171" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.170" starttime="20160128 01:04:23.168"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.176" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.175" starttime="20160128 01:04:23.172"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.183" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.185" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.185" starttime="20160128 01:04:23.180"></status>
</kw>
<msg timestamp="20160128 01:04:23.188" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.188" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,124 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.187" starttime="20160128 01:04:23.178"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.200" starttime="20160128 01:04:23.197"></status>
</kw>
<msg timestamp="20160128 01:04:23.202" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,124 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.201" starttime="20160128 01:04:23.190"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.212" starttime="20160128 01:04:23.210"></status>
</kw>
<msg timestamp="20160128 01:04:23.214" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,124 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.213" starttime="20160128 01:04:23.203"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.224" starttime="20160128 01:04:23.222"></status>
</kw>
<msg timestamp="20160128 01:04:23.226" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.226" starttime="20160128 01:04:23.215"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.240" starttime="20160128 01:04:23.238"></status>
</kw>
<msg timestamp="20160128 01:04:23.242" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.242" starttime="20160128 01:04:23.228"></status>
</kw>
<msg timestamp="20160128 01:04:23.245" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.244" starttime="20160128 01:04:23.153"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.260" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:04:23.259" starttime="20160128 01:04:23.256"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.264" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.263" starttime="20160128 01:04:23.261"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.269" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.268" starttime="20160128 01:04:23.266"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.277" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.278" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.279" starttime="20160128 01:04:23.274"></status>
</kw>
<msg timestamp="20160128 01:04:23.282" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.282" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,127 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.281" starttime="20160128 01:04:23.271"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.295" starttime="20160128 01:04:23.292"></status>
</kw>
<msg timestamp="20160128 01:04:23.296" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,127 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.296" starttime="20160128 01:04:23.284"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.306" starttime="20160128 01:04:23.304"></status>
</kw>
<msg timestamp="20160128 01:04:23.308" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,127 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.308" starttime="20160128 01:04:23.298"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.319" starttime="20160128 01:04:23.316"></status>
</kw>
<msg timestamp="20160128 01:04:23.321" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.320" starttime="20160128 01:04:23.310"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.330" starttime="20160128 01:04:23.329"></status>
</kw>
<msg timestamp="20160128 01:04:23.331" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.331" starttime="20160128 01:04:23.322"></status>
</kw>
<msg timestamp="20160128 01:04:23.332" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.332" starttime="20160128 01:04:23.248"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.338" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:04:23.338" starttime="20160128 01:04:23.337"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.340" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.340" starttime="20160128 01:04:23.339"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.343" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.342" starttime="20160128 01:04:23.341"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.346" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.346" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.347" starttime="20160128 01:04:23.344"></status>
</kw>
<msg timestamp="20160128 01:04:23.348" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.348" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,131 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.347" starttime="20160128 01:04:23.343"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.353" starttime="20160128 01:04:23.352"></status>
</kw>
<msg timestamp="20160128 01:04:23.354" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,131 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.354" starttime="20160128 01:04:23.349"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.359" starttime="20160128 01:04:23.358"></status>
</kw>
<msg timestamp="20160128 01:04:23.360" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,131 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.360" starttime="20160128 01:04:23.355"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.365" starttime="20160128 01:04:23.364"></status>
</kw>
<msg timestamp="20160128 01:04:23.366" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.366" starttime="20160128 01:04:23.361"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.373" starttime="20160128 01:04:23.372"></status>
</kw>
<msg timestamp="20160128 01:04:23.374" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.373" starttime="20160128 01:04:23.367"></status>
</kw>
<msg timestamp="20160128 01:04:23.375" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:23.375" starttime="20160128 01:04:23.333"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.382" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:04:23.381" starttime="20160128 01:04:23.380"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.384" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.383" starttime="20160128 01:04:23.382"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.385" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.385" starttime="20160128 01:04:23.384"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.389" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.389" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.390" starttime="20160128 01:04:23.387"></status>
</kw>
<msg timestamp="20160128 01:04:23.391" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.391" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,129 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.390" starttime="20160128 01:04:23.386"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.396" starttime="20160128 01:04:23.395"></status>
</kw>
<msg timestamp="20160128 01:04:23.397" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,129 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.397" starttime="20160128 01:04:23.392"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.402" starttime="20160128 01:04:23.401"></status>
</kw>
<msg timestamp="20160128 01:04:23.403" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,129 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.402" starttime="20160128 01:04:23.397"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.408" starttime="20160128 01:04:23.407"></status>
</kw>
<msg timestamp="20160128 01:04:23.409" level="INFO">${resultCode} = 2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.409" starttime="20160128 01:04:23.403"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.416" starttime="20160128 01:04:23.415"></status>
</kw>
<msg timestamp="20160128 01:04:23.417" level="INFO">${resultCode} = 2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.416" starttime="20160128 01:04:23.410"></status>
</kw>
<msg timestamp="20160128 01:04:23.418" level="INFO">${id} = 2421063</msg>
<status status="PASS" endtime="20160128 01:04:23.418" starttime="20160128 01:04:23.376"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.424" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:04:23.424" starttime="20160128 01:04:23.423"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.426" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.426" starttime="20160128 01:04:23.425"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.428" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.428" starttime="20160128 01:04:23.427"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.431" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.432" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.432" starttime="20160128 01:04:23.430"></status>
</kw>
<msg timestamp="20160128 01:04:23.433" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.434" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.433" starttime="20160128 01:04:23.429"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.439" starttime="20160128 01:04:23.437"></status>
</kw>
<msg timestamp="20160128 01:04:23.439" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.439" starttime="20160128 01:04:23.434"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.445" starttime="20160128 01:04:23.443"></status>
</kw>
<msg timestamp="20160128 01:04:23.446" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,134 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.445" starttime="20160128 01:04:23.440"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.451" starttime="20160128 01:04:23.449"></status>
</kw>
<msg timestamp="20160128 01:04:23.452" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.452" starttime="20160128 01:04:23.446"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.458" starttime="20160128 01:04:23.457"></status>
</kw>
<msg timestamp="20160128 01:04:23.459" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.459" starttime="20160128 01:04:23.453"></status>
</kw>
<msg timestamp="20160128 01:04:23.460" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:23.460" starttime="20160128 01:04:23.419"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.467" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:04:23.467" starttime="20160128 01:04:23.465"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.469" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.469" starttime="20160128 01:04:23.468"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.471" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.471" starttime="20160128 01:04:23.470"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.474" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.475" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.475" starttime="20160128 01:04:23.473"></status>
</kw>
<msg timestamp="20160128 01:04:23.476" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.476" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:23.476" starttime="20160128 01:04:23.472"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.481" starttime="20160128 01:04:23.480"></status>
</kw>
<msg timestamp="20160128 01:04:23.482" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:23.481" starttime="20160128 01:04:23.477"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.487" starttime="20160128 01:04:23.485"></status>
</kw>
<msg timestamp="20160128 01:04:23.488" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,136 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:23.487" starttime="20160128 01:04:23.482"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.492" starttime="20160128 01:04:23.491"></status>
</kw>
<msg timestamp="20160128 01:04:23.493" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:23.493" starttime="20160128 01:04:23.488"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.500" starttime="20160128 01:04:23.499"></status>
</kw>
<msg timestamp="20160128 01:04:23.501" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:23.501" starttime="20160128 01:04:23.494"></status>
</kw>
<msg timestamp="20160128 01:04:23.502" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:23.502" starttime="20160128 01:04:23.462"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.508" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:04:23.508" starttime="20160128 01:04:23.507"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.510" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.510" starttime="20160128 01:04:23.509"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.512" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.512" starttime="20160128 01:04:23.511"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.515" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.516" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.516" starttime="20160128 01:04:23.514"></status>
</kw>
<msg timestamp="20160128 01:04:23.517" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.518" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.517" starttime="20160128 01:04:23.513"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.522" starttime="20160128 01:04:23.521"></status>
</kw>
<msg timestamp="20160128 01:04:23.523" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.523" starttime="20160128 01:04:23.518"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.528" starttime="20160128 01:04:23.527"></status>
</kw>
<msg timestamp="20160128 01:04:23.529" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,138 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.529" starttime="20160128 01:04:23.524"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.534" starttime="20160128 01:04:23.533"></status>
</kw>
<msg timestamp="20160128 01:04:23.535" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.534" starttime="20160128 01:04:23.530"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.541" starttime="20160128 01:04:23.540"></status>
</kw>
<msg timestamp="20160128 01:04:23.542" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.542" starttime="20160128 01:04:23.535"></status>
</kw>
<msg timestamp="20160128 01:04:23.543" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.543" starttime="20160128 01:04:23.503"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.549" starttime="20160128 01:04:23.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.550" starttime="20160128 01:04:23.549"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.552" starttime="20160128 01:04:23.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:23.558" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:23.559" starttime="20160128 01:04:23.557"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.559" starttime="20160128 01:04:23.555"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.560" starttime="20160128 01:04:23.552"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.560" starttime="20160128 01:04:23.544"></status>
</kw>
<msg timestamp="20160128 01:04:23.563" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:04:23.563" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:04:23.563" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:04:23.564" level="INFO">${id} = 2421063</msg>
<msg timestamp="20160128 01:04:23.564" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:04:23.564" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:04:23.565" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:23.562" starttime="20160128 01:04:22.872"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.578" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:23.578" starttime="20160128 01:04:23.576"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.579" starttime="20160128 01:04:23.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.582" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:23.583" starttime="20160128 01:04:23.581"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.583" starttime="20160128 01:04:23.580"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.586" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:23.586" starttime="20160128 01:04:23.585"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.587" starttime="20160128 01:04:23.584"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.588" starttime="20160128 01:04:23.571"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.590" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:23.590" starttime="20160128 01:04:23.588"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.592" starttime="20160128 01:04:23.590"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.593" starttime="20160128 01:04:23.592"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.595" starttime="20160128 01:04:23.594"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.597" starttime="20160128 01:04:23.596"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.598" starttime="20160128 01:04:23.597"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.600" starttime="20160128 01:04:23.599"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:23.602" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=100000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421063']</msg>
<msg timestamp="20160128 01:04:23.728" level="INFO">01:04:23,722 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:04:23,723 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421064
01:04:23,724 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000
01:04:23,725 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:04:23,726 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.729" starttime="20160128 01:04:23.601"></status>
</kw>
<msg timestamp="20160128 01:04:23.730" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.730" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:23.730" starttime="20160128 01:04:23.600"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.739" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:23.739" starttime="20160128 01:04:23.737"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.741" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.741" starttime="20160128 01:04:23.740"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.743" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.743" starttime="20160128 01:04:23.742"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.746" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.747" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.747" starttime="20160128 01:04:23.745"></status>
</kw>
<msg timestamp="20160128 01:04:23.748" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.748" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,722 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.748" starttime="20160128 01:04:23.744"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.753" starttime="20160128 01:04:23.752"></status>
</kw>
<msg timestamp="20160128 01:04:23.754" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,722 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.754" starttime="20160128 01:04:23.749"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.759" starttime="20160128 01:04:23.758"></status>
</kw>
<msg timestamp="20160128 01:04:23.759" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,722 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:23.759" starttime="20160128 01:04:23.755"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.769" starttime="20160128 01:04:23.766"></status>
</kw>
<msg timestamp="20160128 01:04:23.771" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.770" starttime="20160128 01:04:23.760"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.780" starttime="20160128 01:04:23.779"></status>
</kw>
<msg timestamp="20160128 01:04:23.781" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.781" starttime="20160128 01:04:23.772"></status>
</kw>
<msg timestamp="20160128 01:04:23.782" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:23.782" starttime="20160128 01:04:23.732"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.789" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:04:23.788" starttime="20160128 01:04:23.787"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.791" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.791" starttime="20160128 01:04:23.789"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.793" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.792" starttime="20160128 01:04:23.791"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.796" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.797" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.797" starttime="20160128 01:04:23.794"></status>
</kw>
<msg timestamp="20160128 01:04:23.798" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.798" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,723 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.797" starttime="20160128 01:04:23.793"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.803" starttime="20160128 01:04:23.802"></status>
</kw>
<msg timestamp="20160128 01:04:23.804" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,723 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.804" starttime="20160128 01:04:23.799"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.809" starttime="20160128 01:04:23.808"></status>
</kw>
<msg timestamp="20160128 01:04:23.810" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,723 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.809" starttime="20160128 01:04:23.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.815" starttime="20160128 01:04:23.814"></status>
</kw>
<msg timestamp="20160128 01:04:23.816" level="INFO">${resultCode} = 2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.816" starttime="20160128 01:04:23.810"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.823" starttime="20160128 01:04:23.822"></status>
</kw>
<msg timestamp="20160128 01:04:23.825" level="INFO">${resultCode} = 2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.824" starttime="20160128 01:04:23.817"></status>
</kw>
<msg timestamp="20160128 01:04:23.826" level="INFO">${accountId} = 2421064</msg>
<status status="PASS" endtime="20160128 01:04:23.826" starttime="20160128 01:04:23.784"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.833" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:04:23.833" starttime="20160128 01:04:23.831"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.835" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.835" starttime="20160128 01:04:23.834"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.837" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.837" starttime="20160128 01:04:23.836"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.840" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.841" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.841" starttime="20160128 01:04:23.839"></status>
</kw>
<msg timestamp="20160128 01:04:23.842" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.843" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,724 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.842" starttime="20160128 01:04:23.838"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.848" starttime="20160128 01:04:23.847"></status>
</kw>
<msg timestamp="20160128 01:04:23.848" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,724 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.848" starttime="20160128 01:04:23.843"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.853" starttime="20160128 01:04:23.852"></status>
</kw>
<msg timestamp="20160128 01:04:23.854" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,724 INFO  [log] LowLevelOps.getMainAccount.output.balance=99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.854" starttime="20160128 01:04:23.849"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.860" starttime="20160128 01:04:23.859"></status>
</kw>
<msg timestamp="20160128 01:04:23.861" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.860" starttime="20160128 01:04:23.855"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.868" starttime="20160128 01:04:23.866"></status>
</kw>
<msg timestamp="20160128 01:04:23.868" level="INFO">${resultCode} = 99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.868" starttime="20160128 01:04:23.861"></status>
</kw>
<msg timestamp="20160128 01:04:23.870" level="INFO">${balance} = 99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.869" starttime="20160128 01:04:23.827"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.876" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:04:23.876" starttime="20160128 01:04:23.875"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.878" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.878" starttime="20160128 01:04:23.877"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.881" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.880" starttime="20160128 01:04:23.879"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.884" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.885" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.885" starttime="20160128 01:04:23.883"></status>
</kw>
<msg timestamp="20160128 01:04:23.886" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.887" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,725 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.886" starttime="20160128 01:04:23.881"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.892" starttime="20160128 01:04:23.891"></status>
</kw>
<msg timestamp="20160128 01:04:23.893" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,725 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.893" starttime="20160128 01:04:23.888"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.898" starttime="20160128 01:04:23.897"></status>
</kw>
<msg timestamp="20160128 01:04:23.899" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,725 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.899" starttime="20160128 01:04:23.894"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.904" starttime="20160128 01:04:23.903"></status>
</kw>
<msg timestamp="20160128 01:04:23.905" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.905" starttime="20160128 01:04:23.900"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.912" starttime="20160128 01:04:23.911"></status>
</kw>
<msg timestamp="20160128 01:04:23.913" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.913" starttime="20160128 01:04:23.906"></status>
</kw>
<msg timestamp="20160128 01:04:23.914" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:23.914" starttime="20160128 01:04:23.871"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:23.921" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:04:23.921" starttime="20160128 01:04:23.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.923" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:23.923" starttime="20160128 01:04:23.922"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.925" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:23.925" starttime="20160128 01:04:23.924"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.928" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:23.929" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:23.929" starttime="20160128 01:04:23.927"></status>
</kw>
<msg timestamp="20160128 01:04:23.930" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:23.931" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,726 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.930" starttime="20160128 01:04:23.926"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.936" starttime="20160128 01:04:23.934"></status>
</kw>
<msg timestamp="20160128 01:04:23.936" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,726 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.936" starttime="20160128 01:04:23.931"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.941" starttime="20160128 01:04:23.940"></status>
</kw>
<msg timestamp="20160128 01:04:23.942" level="INFO">${return_log_entry} = 2016-01-28 01:04:23,726 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:23.942" starttime="20160128 01:04:23.937"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.948" starttime="20160128 01:04:23.947"></status>
</kw>
<msg timestamp="20160128 01:04:23.949" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.949" starttime="20160128 01:04:23.943"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.956" starttime="20160128 01:04:23.955"></status>
</kw>
<msg timestamp="20160128 01:04:23.957" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.956" starttime="20160128 01:04:23.950"></status>
</kw>
<msg timestamp="20160128 01:04:23.958" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.958" starttime="20160128 01:04:23.916"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.963" starttime="20160128 01:04:23.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.965" starttime="20160128 01:04:23.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:23.966" starttime="20160128 01:04:23.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:23.973" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:23.973" starttime="20160128 01:04:23.971"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.974" starttime="20160128 01:04:23.970"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.974" starttime="20160128 01:04:23.967"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.975" starttime="20160128 01:04:23.959"></status>
</kw>
<msg timestamp="20160128 01:04:23.976" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:04:23.977" level="INFO">${accId} = 2421064</msg>
<msg timestamp="20160128 01:04:23.977" level="INFO">${bal} = 99940000</msg>
<msg timestamp="20160128 01:04:23.977" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:04:23.978" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:04:23.976" starttime="20160128 01:04:23.566"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-3*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.982" level="INFO">${target_bal} = 99940000</msg>
<status status="PASS" endtime="20160128 01:04:23.982" starttime="20160128 01:04:23.978"></status>
</kw>
<kw type="kw" name="${target_bal_mex} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-6*${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:23.985" level="INFO">${target_bal_mex} = 99880000</msg>
<status status="PASS" endtime="20160128 01:04:23.985" starttime="20160128 01:04:23.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='VIRGIN_COLUMBIA'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>99920080</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE IF</arg>
<arg>'${SUT PROJECT TAG PREFIX}'=='MVNA_MEX'</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${bal}</arg>
<arg>${target_bal_mex}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160128 01:04:23.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:23.993" starttime="20160128 01:04:23.991"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:23.993" starttime="20160128 01:04:23.986"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:23.995" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160128 01:04:23.995" starttime="20160128 01:04:23.994"></status>
</kw>
<doc>Test will make a MOC call, duration 136s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:04:23.996" starttime="20160128 01:02:01.279"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 136s - longer than one slice (more than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:24.000" starttime="20160128 01:01:57.378"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:24.009" starttime="20160128 01:01:57.361"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer" id="s1-s1-s1-s2-s1-s4" name="MOC PREPAID ONNET-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoAnswer/MOC_PREPAID_ONNET-NoAnswer-robot-suite.txt" id="s1-s1-s1-s2-s1-s4-s1" name="MOC PREPAID ONNET-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:04:24.186" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:24.190" level="INFO">${date} = Thu Jan 28 01:04:24 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:24.189" starttime="20160128 01:04:24.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:24.194" level="INFO">Date and time: Thu Jan 28 01:04:24 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:24.195" starttime="20160128 01:04:24.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:24.199" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:04:24.200" starttime="20160128 01:04:24.196"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:24.262" starttime="20160128 01:04:24.260"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:24.320" starttime="20160128 01:04:24.270"></status>
</kw>
<msg timestamp="20160128 01:04:24.321" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:04:24.320" starttime="20160128 01:04:24.263"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:24.327" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:24.805" level="INFO">Read output: Last login: Thu Jan 28 00:01:57 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:24.806" starttime="20160128 01:04:24.326"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:24.806" starttime="20160128 01:04:24.322"></status>
</kw>
<msg timestamp="20160128 01:04:24.808" level="INFO">${ssh_connection} = 17</msg>
<status status="PASS" endtime="20160128 01:04:24.807" starttime="20160128 01:04:24.248"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:24.812" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:24.811" starttime="20160128 01:04:24.808"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:24.813" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:04:25.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:25.061" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:25.061" starttime="20160128 01:04:24.812"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.065" starttime="20160128 01:04:25.063"></status>
</kw>
<msg timestamp="20160128 01:04:25.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:25.066" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:25.065" starttime="20160128 01:04:25.062"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.070" starttime="20160128 01:04:25.069"></status>
</kw>
<msg timestamp="20160128 01:04:25.071" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:25.071" starttime="20160128 01:04:25.066"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:04:25.073" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:25.073" starttime="20160128 01:04:25.072"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:25.075" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:25.075" starttime="20160128 01:04:25.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.077" starttime="20160128 01:04:25.076"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.083" starttime="20160128 01:04:25.082"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.087" starttime="20160128 01:04:25.084"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:25.088" starttime="20160128 01:04:25.077"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.092" starttime="20160128 01:04:25.091"></status>
</kw>
<msg timestamp="20160128 01:04:25.093" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:25.093" starttime="20160128 01:04:25.088"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.095" starttime="20160128 01:04:25.094"></status>
</kw>
<msg timestamp="20160128 01:04:25.097" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:04:25.097" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:25.096" starttime="20160128 01:04:24.220"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.124" starttime="20160128 01:04:25.123"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:25.167" starttime="20160128 01:04:25.127"></status>
</kw>
<msg timestamp="20160128 01:04:25.168" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:04:25.167" starttime="20160128 01:04:25.124"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:25.172" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:25.640" level="INFO">Read output: Last login: Thu Jan 28 00:01:58 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:25.641" starttime="20160128 01:04:25.171"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:25.641" starttime="20160128 01:04:25.168"></status>
</kw>
<msg timestamp="20160128 01:04:25.643" level="INFO">${ssh_connection} = 18</msg>
<status status="PASS" endtime="20160128 01:04:25.642" starttime="20160128 01:04:25.118"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:25.647" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:25.646" starttime="20160128 01:04:25.643"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:25.648" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:04:26.062" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:26.065" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:26.063" starttime="20160128 01:04:25.647"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.072" starttime="20160128 01:04:26.069"></status>
</kw>
<msg timestamp="20160128 01:04:26.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:26.075" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:26.073" starttime="20160128 01:04:26.067"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.086" starttime="20160128 01:04:26.084"></status>
</kw>
<msg timestamp="20160128 01:04:26.088" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:26.087" starttime="20160128 01:04:26.077"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:04:26.092" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:26.092" starttime="20160128 01:04:26.089"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:26.097" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:26.096" starttime="20160128 01:04:26.094"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.100" starttime="20160128 01:04:26.099"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.113" starttime="20160128 01:04:26.111"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.118" starttime="20160128 01:04:26.114"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:26.120" starttime="20160128 01:04:26.102"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.130" starttime="20160128 01:04:26.128"></status>
</kw>
<msg timestamp="20160128 01:04:26.132" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:26.131" starttime="20160128 01:04:26.121"></status>
</kw>
<msg timestamp="20160128 01:04:26.136" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:04:26.137" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:26.134" starttime="20160128 01:04:25.106"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.198" starttime="20160128 01:04:26.196"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.261" starttime="20160128 01:04:26.207"></status>
</kw>
<msg timestamp="20160128 01:04:26.264" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:04:26.263" starttime="20160128 01:04:26.200"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:26.275" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:26.741" level="INFO">Read output: Last login: Thu Jan 28 00:01:59 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:26.742" starttime="20160128 01:04:26.273"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:26.742" starttime="20160128 01:04:26.265"></status>
</kw>
<msg timestamp="20160128 01:04:26.744" level="INFO">${ssh_connection} = 19</msg>
<status status="PASS" endtime="20160128 01:04:26.743" starttime="20160128 01:04:26.186"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:26.748" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:26.748" starttime="20160128 01:04:26.744"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:26.749" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:04:26.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:26.933" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:26.932" starttime="20160128 01:04:26.748"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.940" starttime="20160128 01:04:26.937"></status>
</kw>
<msg timestamp="20160128 01:04:26.943" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:26.944" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:26.942" starttime="20160128 01:04:26.934"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.954" starttime="20160128 01:04:26.952"></status>
</kw>
<msg timestamp="20160128 01:04:26.955" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:26.955" starttime="20160128 01:04:26.945"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:26.960" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:26.959" starttime="20160128 01:04:26.957"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:26.964" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:26.963" starttime="20160128 01:04:26.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.967" starttime="20160128 01:04:26.965"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.979" starttime="20160128 01:04:26.977"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.986" starttime="20160128 01:04:26.982"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:26.987" starttime="20160128 01:04:26.968"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:26.997" starttime="20160128 01:04:26.995"></status>
</kw>
<msg timestamp="20160128 01:04:26.999" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:26.998" starttime="20160128 01:04:26.989"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.002" starttime="20160128 01:04:27.000"></status>
</kw>
<msg timestamp="20160128 01:04:27.006" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:04:27.006" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:27.004" starttime="20160128 01:04:26.156"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.065" starttime="20160128 01:04:27.063"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.115" starttime="20160128 01:04:27.074"></status>
</kw>
<msg timestamp="20160128 01:04:27.116" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160128 01:04:27.115" starttime="20160128 01:04:27.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.121" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:27.566" level="INFO">Read output: Last login: Thu Jan 28 00:02:00 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:27.568" starttime="20160128 01:04:27.120"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.569" starttime="20160128 01:04:27.116"></status>
</kw>
<msg timestamp="20160128 01:04:27.572" level="INFO">${ssh_connection} = 20</msg>
<status status="PASS" endtime="20160128 01:04:27.571" starttime="20160128 01:04:27.053"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:27.578" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:27.578" starttime="20160128 01:04:27.573"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:27.580" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:04:27.656" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:27.657" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:27.657" starttime="20160128 01:04:27.579"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.661" starttime="20160128 01:04:27.659"></status>
</kw>
<msg timestamp="20160128 01:04:27.662" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:27.662" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:27.661" starttime="20160128 01:04:27.658"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.666" starttime="20160128 01:04:27.666"></status>
</kw>
<msg timestamp="20160128 01:04:27.667" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:27.667" starttime="20160128 01:04:27.663"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:27.669" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:27.669" starttime="20160128 01:04:27.668"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:27.671" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:27.671" starttime="20160128 01:04:27.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.673" starttime="20160128 01:04:27.672"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.679" starttime="20160128 01:04:27.678"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.682" starttime="20160128 01:04:27.680"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.683" starttime="20160128 01:04:27.674"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.687" starttime="20160128 01:04:27.686"></status>
</kw>
<msg timestamp="20160128 01:04:27.688" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:27.688" starttime="20160128 01:04:27.683"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.690" starttime="20160128 01:04:27.689"></status>
</kw>
<msg timestamp="20160128 01:04:27.691" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:04:27.691" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:27.691" starttime="20160128 01:04:27.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:27.693" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:27.693" starttime="20160128 01:04:27.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:27.695" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:27.696" starttime="20160128 01:04:27.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:27.697" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:27.698" starttime="20160128 01:04:27.696"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:27.699" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:27.700" starttime="20160128 01:04:27.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:04:27.702" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:27.702" starttime="20160128 01:04:27.701"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:04:27.704" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:27.704" starttime="20160128 01:04:27.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:04:27.706" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:27.706" starttime="20160128 01:04:27.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:04:27.708" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:27.708" starttime="20160128 01:04:27.707"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.714" starttime="20160128 01:04:27.711"></status>
</kw>
<msg timestamp="20160128 01:04:27.715" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:27.715" starttime="20160128 01:04:27.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.717" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:27.717" starttime="20160128 01:04:27.715"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.718" starttime="20160128 01:04:24.177"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s4-s1-t1" name="Run MOC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.758" starttime="20160128 01:04:27.756"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:04:27.760" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:27.759" starttime="20160128 01:04:27.758"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.769" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:04:27.769" starttime="20160128 01:04:27.768"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.771" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:04:27.771" starttime="20160128 01:04:27.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.773" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:04:27.773" starttime="20160128 01:04:27.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.775" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160128 01:04:27.775" starttime="20160128 01:04:27.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.777" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:27.777" starttime="20160128 01:04:27.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.779" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:04:27.779" starttime="20160128 01:04:27.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.781" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:27.781" starttime="20160128 01:04:27.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.783" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:04:27.783" starttime="20160128 01:04:27.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.785" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:27.785" starttime="20160128 01:04:27.784"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.786" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:27.787" starttime="20160128 01:04:27.785"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.794" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:27.794" starttime="20160128 01:04:27.792"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.795" starttime="20160128 01:04:27.791"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.798" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:27.798" starttime="20160128 01:04:27.796"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.798" starttime="20160128 01:04:27.795"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.801" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:27.802" starttime="20160128 01:04:27.800"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.802" starttime="20160128 01:04:27.799"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:27.803" starttime="20160128 01:04:27.788"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:27.805" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:27.805" starttime="20160128 01:04:27.803"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.807" starttime="20160128 01:04:27.806"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.808" starttime="20160128 01:04:27.807"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.810" starttime="20160128 01:04:27.809"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.811" starttime="20160128 01:04:27.811"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.813" starttime="20160128 01:04:27.812"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.814" starttime="20160128 01:04:27.813"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.816" starttime="20160128 01:04:27.815"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.818" starttime="20160128 01:04:27.817"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.819" starttime="20160128 01:04:27.818"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.821" starttime="20160128 01:04:27.820"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.823" starttime="20160128 01:04:27.821"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:27.824" starttime="20160128 01:04:27.823"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:27.827" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:04:28.711" level="INFO">01:04:28,709 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:28.712" starttime="20160128 01:04:27.826"></status>
</kw>
<msg timestamp="20160128 01:04:28.714" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:28.714" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:28.713" starttime="20160128 01:04:27.825"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:28.720" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:28.720" starttime="20160128 01:04:28.719"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:28.722" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:28.722" starttime="20160128 01:04:28.721"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:28.724" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:28.724" starttime="20160128 01:04:28.723"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:28.727" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:28.727" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:28.728" starttime="20160128 01:04:28.726"></status>
</kw>
<msg timestamp="20160128 01:04:28.729" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:28.729" level="INFO">${return_log_entry} = 2016-01-28 01:04:28,709 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:28.728" starttime="20160128 01:04:28.725"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.734" starttime="20160128 01:04:28.733"></status>
</kw>
<msg timestamp="20160128 01:04:28.735" level="INFO">${return_log_entry} = 2016-01-28 01:04:28,709 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:28.735" starttime="20160128 01:04:28.730"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.739" starttime="20160128 01:04:28.738"></status>
</kw>
<msg timestamp="20160128 01:04:28.740" level="INFO">${return_log_entry} = 2016-01-28 01:04:28,709 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:28.740" starttime="20160128 01:04:28.735"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.744" starttime="20160128 01:04:28.743"></status>
</kw>
<msg timestamp="20160128 01:04:28.745" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:28.745" starttime="20160128 01:04:28.741"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.751" starttime="20160128 01:04:28.750"></status>
</kw>
<msg timestamp="20160128 01:04:28.752" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:28.752" starttime="20160128 01:04:28.746"></status>
</kw>
<msg timestamp="20160128 01:04:28.754" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:28.753" starttime="20160128 01:04:28.715"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.759" starttime="20160128 01:04:28.758"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.760" starttime="20160128 01:04:28.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.761" starttime="20160128 01:04:28.761"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:28.767" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:28.768" starttime="20160128 01:04:28.766"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:28.768" starttime="20160128 01:04:28.765"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:28.769" starttime="20160128 01:04:28.762"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:28.769" starttime="20160128 01:04:28.755"></status>
</kw>
<msg timestamp="20160128 01:04:28.770" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:04:28.770" starttime="20160128 01:04:27.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:04:28.772" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:28.772" starttime="20160128 01:04:28.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:28.774" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:04:28.774" starttime="20160128 01:04:28.773"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC NoAnswer *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.775" starttime="20160128 01:04:28.775"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC NoAnswer call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:28.777" level="INFO">Running the MOC NoAnswer call...</msg>
<status status="PASS" endtime="20160128 01:04:28.777" starttime="20160128 01:04:28.776"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC NoAnswer">
<doc>Runs an NoAnswer MOC session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc-noanswer</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:28.792" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:04:28.791" starttime="20160128 01:04:28.790"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:28.794" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:04:28.793" starttime="20160128 01:04:28.792"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:04:28.795" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:04:28.795" starttime="20160128 01:04:28.794"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:04:28.797" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs</msg>
<status status="PASS" endtime="20160128 01:04:28.797" starttime="20160128 01:04:28.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.799" starttime="20160128 01:04:28.798"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:28.801" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:28.802" starttime="20160128 01:04:28.799"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.803" starttime="20160128 01:04:28.802"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:04:28.805" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:28.805" starttime="20160128 01:04:28.804"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:28.808" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:28.808" starttime="20160128 01:04:28.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.810" starttime="20160128 01:04:28.809"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:28.812" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:28.812" starttime="20160128 01:04:28.810"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:04:28.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:28.815" starttime="20160128 01:04:28.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:28.816" starttime="20160128 01:04:28.816"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:04:28.823" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:32.105" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:32.104" starttime="20160128 01:04:28.817"></status>
</kw>
<msg timestamp="20160128 01:04:32.107" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:32.106" starttime="20160128 01:04:28.785"></status>
</kw>
<msg timestamp="20160128 01:04:32.108" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:32.107" starttime="20160128 01:04:28.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:32.110" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:04:32.110" starttime="20160128 01:04:32.109"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.112" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:32.112" starttime="20160128 01:04:32.111"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.114" starttime="20160128 01:04:32.113"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.126" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.126" starttime="20160128 01:04:32.124"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.126" starttime="20160128 01:04:32.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.129" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.130" starttime="20160128 01:04:32.128"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.130" starttime="20160128 01:04:32.127"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.133" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.133" starttime="20160128 01:04:32.131"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.134" starttime="20160128 01:04:32.131"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.134" starttime="20160128 01:04:32.120"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.136" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:32.136" starttime="20160128 01:04:32.135"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.138" starttime="20160128 01:04:32.137"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.139" starttime="20160128 01:04:32.138"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.141" starttime="20160128 01:04:32.140"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.142" starttime="20160128 01:04:32.142"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.144" starttime="20160128 01:04:32.143"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.145" starttime="20160128 01:04:32.144"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:32.147" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:04:32.338" level="INFO">01:04:32,327 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:32,328 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:32,329 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421070
01:04:32,331 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:04:32,332 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:32,333 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:32,335 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:32,336 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.338" starttime="20160128 01:04:32.147"></status>
</kw>
<msg timestamp="20160128 01:04:32.339" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.340" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:32.339" starttime="20160128 01:04:32.146"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.346" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:32.346" starttime="20160128 01:04:32.344"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.348" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.347" starttime="20160128 01:04:32.347"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.350" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.349" starttime="20160128 01:04:32.348"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.352" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.353" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.353" starttime="20160128 01:04:32.351"></status>
</kw>
<msg timestamp="20160128 01:04:32.354" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.354" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,327 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.354" starttime="20160128 01:04:32.350"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.359" starttime="20160128 01:04:32.358"></status>
</kw>
<msg timestamp="20160128 01:04:32.360" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,327 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.360" starttime="20160128 01:04:32.355"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.364" starttime="20160128 01:04:32.363"></status>
</kw>
<msg timestamp="20160128 01:04:32.365" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,327 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.365" starttime="20160128 01:04:32.361"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.370" starttime="20160128 01:04:32.369"></status>
</kw>
<msg timestamp="20160128 01:04:32.371" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.370" starttime="20160128 01:04:32.366"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.377" starttime="20160128 01:04:32.376"></status>
</kw>
<msg timestamp="20160128 01:04:32.377" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.377" starttime="20160128 01:04:32.371"></status>
</kw>
<msg timestamp="20160128 01:04:32.379" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.378" starttime="20160128 01:04:32.341"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.384" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:04:32.384" starttime="20160128 01:04:32.383"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.386" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.386" starttime="20160128 01:04:32.385"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.388" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.388" starttime="20160128 01:04:32.387"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.391" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.392" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.392" starttime="20160128 01:04:32.390"></status>
</kw>
<msg timestamp="20160128 01:04:32.393" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.393" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,328 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.392" starttime="20160128 01:04:32.389"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.397" starttime="20160128 01:04:32.396"></status>
</kw>
<msg timestamp="20160128 01:04:32.398" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,328 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.398" starttime="20160128 01:04:32.394"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.402" starttime="20160128 01:04:32.401"></status>
</kw>
<msg timestamp="20160128 01:04:32.403" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,328 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.403" starttime="20160128 01:04:32.399"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.408" starttime="20160128 01:04:32.407"></status>
</kw>
<msg timestamp="20160128 01:04:32.409" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.408" starttime="20160128 01:04:32.404"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.415" starttime="20160128 01:04:32.414"></status>
</kw>
<msg timestamp="20160128 01:04:32.415" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.415" starttime="20160128 01:04:32.409"></status>
</kw>
<msg timestamp="20160128 01:04:32.416" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.416" starttime="20160128 01:04:32.380"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.423" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:04:32.422" starttime="20160128 01:04:32.421"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.425" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.424" starttime="20160128 01:04:32.423"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.426" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.426" starttime="20160128 01:04:32.425"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.429" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.430" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.430" starttime="20160128 01:04:32.428"></status>
</kw>
<msg timestamp="20160128 01:04:32.431" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.431" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,331 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.431" starttime="20160128 01:04:32.427"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.435" starttime="20160128 01:04:32.434"></status>
</kw>
<msg timestamp="20160128 01:04:32.436" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,331 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.436" starttime="20160128 01:04:32.432"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.441" starttime="20160128 01:04:32.440"></status>
</kw>
<msg timestamp="20160128 01:04:32.441" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,331 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.441" starttime="20160128 01:04:32.437"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.446" starttime="20160128 01:04:32.445"></status>
</kw>
<msg timestamp="20160128 01:04:32.447" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.446" starttime="20160128 01:04:32.442"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.453" starttime="20160128 01:04:32.452"></status>
</kw>
<msg timestamp="20160128 01:04:32.454" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.454" starttime="20160128 01:04:32.447"></status>
</kw>
<msg timestamp="20160128 01:04:32.455" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:32.455" starttime="20160128 01:04:32.417"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.461" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:04:32.461" starttime="20160128 01:04:32.459"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.463" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.462" starttime="20160128 01:04:32.461"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.465" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.464" starttime="20160128 01:04:32.463"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.467" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.468" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.468" starttime="20160128 01:04:32.466"></status>
</kw>
<msg timestamp="20160128 01:04:32.469" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.470" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,329 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.469" starttime="20160128 01:04:32.465"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.474" starttime="20160128 01:04:32.473"></status>
</kw>
<msg timestamp="20160128 01:04:32.475" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,329 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.474" starttime="20160128 01:04:32.470"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.479" starttime="20160128 01:04:32.478"></status>
</kw>
<msg timestamp="20160128 01:04:32.480" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,329 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.479" starttime="20160128 01:04:32.475"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.484" starttime="20160128 01:04:32.483"></status>
</kw>
<msg timestamp="20160128 01:04:32.485" level="INFO">${resultCode} = 2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.485" starttime="20160128 01:04:32.480"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.491" starttime="20160128 01:04:32.490"></status>
</kw>
<msg timestamp="20160128 01:04:32.492" level="INFO">${resultCode} = 2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.492" starttime="20160128 01:04:32.486"></status>
</kw>
<msg timestamp="20160128 01:04:32.493" level="INFO">${id} = 2421070</msg>
<status status="PASS" endtime="20160128 01:04:32.493" starttime="20160128 01:04:32.456"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.499" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:04:32.499" starttime="20160128 01:04:32.497"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.501" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.500" starttime="20160128 01:04:32.500"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.502" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.502" starttime="20160128 01:04:32.501"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.505" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.506" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.506" starttime="20160128 01:04:32.504"></status>
</kw>
<msg timestamp="20160128 01:04:32.507" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.507" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,332 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.507" starttime="20160128 01:04:32.503"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.512" starttime="20160128 01:04:32.511"></status>
</kw>
<msg timestamp="20160128 01:04:32.512" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,332 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.512" starttime="20160128 01:04:32.508"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.517" starttime="20160128 01:04:32.516"></status>
</kw>
<msg timestamp="20160128 01:04:32.517" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,332 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.517" starttime="20160128 01:04:32.513"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.522" starttime="20160128 01:04:32.521"></status>
</kw>
<msg timestamp="20160128 01:04:32.523" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.522" starttime="20160128 01:04:32.518"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.529" starttime="20160128 01:04:32.528"></status>
</kw>
<msg timestamp="20160128 01:04:32.529" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.529" starttime="20160128 01:04:32.523"></status>
</kw>
<msg timestamp="20160128 01:04:32.530" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:32.530" starttime="20160128 01:04:32.494"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.536" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:04:32.536" starttime="20160128 01:04:32.535"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.538" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.538" starttime="20160128 01:04:32.537"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.540" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.540" starttime="20160128 01:04:32.539"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.543" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.543" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.544" starttime="20160128 01:04:32.542"></status>
</kw>
<msg timestamp="20160128 01:04:32.545" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.545" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,333 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:32.544" starttime="20160128 01:04:32.541"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.549" starttime="20160128 01:04:32.548"></status>
</kw>
<msg timestamp="20160128 01:04:32.550" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,333 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:32.550" starttime="20160128 01:04:32.545"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.554" starttime="20160128 01:04:32.553"></status>
</kw>
<msg timestamp="20160128 01:04:32.555" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,333 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:32.555" starttime="20160128 01:04:32.550"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.559" starttime="20160128 01:04:32.558"></status>
</kw>
<msg timestamp="20160128 01:04:32.560" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:32.560" starttime="20160128 01:04:32.556"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.566" starttime="20160128 01:04:32.565"></status>
</kw>
<msg timestamp="20160128 01:04:32.567" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:32.567" starttime="20160128 01:04:32.561"></status>
</kw>
<msg timestamp="20160128 01:04:32.568" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:32.568" starttime="20160128 01:04:32.532"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.574" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:04:32.574" starttime="20160128 01:04:32.573"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.576" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.576" starttime="20160128 01:04:32.575"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.578" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.578" starttime="20160128 01:04:32.577"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.581" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.582" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.582" starttime="20160128 01:04:32.580"></status>
</kw>
<msg timestamp="20160128 01:04:32.583" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.583" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,335 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.583" starttime="20160128 01:04:32.579"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.588" starttime="20160128 01:04:32.587"></status>
</kw>
<msg timestamp="20160128 01:04:32.588" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,335 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.588" starttime="20160128 01:04:32.584"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.593" starttime="20160128 01:04:32.592"></status>
</kw>
<msg timestamp="20160128 01:04:32.593" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,335 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.593" starttime="20160128 01:04:32.589"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.598" starttime="20160128 01:04:32.597"></status>
</kw>
<msg timestamp="20160128 01:04:32.599" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.598" starttime="20160128 01:04:32.594"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.605" starttime="20160128 01:04:32.604"></status>
</kw>
<msg timestamp="20160128 01:04:32.606" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.605" starttime="20160128 01:04:32.599"></status>
</kw>
<msg timestamp="20160128 01:04:32.607" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.606" starttime="20160128 01:04:32.569"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.612" starttime="20160128 01:04:32.611"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.613" starttime="20160128 01:04:32.613"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.615" starttime="20160128 01:04:32.614"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:32.621" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:32.621" starttime="20160128 01:04:32.619"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.621" starttime="20160128 01:04:32.618"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.622" starttime="20160128 01:04:32.615"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.622" starttime="20160128 01:04:32.608"></status>
</kw>
<msg timestamp="20160128 01:04:32.624" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:04:32.625" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:04:32.625" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:04:32.625" level="INFO">${id} = 2421070</msg>
<msg timestamp="20160128 01:04:32.625" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:04:32.626" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:04:32.626" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:32.624" starttime="20160128 01:04:32.115"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.637" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.638" starttime="20160128 01:04:32.636"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.638" starttime="20160128 01:04:32.635"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.641" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.641" starttime="20160128 01:04:32.640"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.642" starttime="20160128 01:04:32.639"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.644" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:32.645" starttime="20160128 01:04:32.643"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.645" starttime="20160128 01:04:32.642"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.646" starttime="20160128 01:04:32.632"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.648" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:32.648" starttime="20160128 01:04:32.646"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.649" starttime="20160128 01:04:32.648"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.651" starttime="20160128 01:04:32.650"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.653" starttime="20160128 01:04:32.652"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.654" starttime="20160128 01:04:32.653"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.655" starttime="20160128 01:04:32.654"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.657" starttime="20160128 01:04:32.656"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:32.659" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421070']</msg>
<msg timestamp="20160128 01:04:32.775" level="INFO">01:04:32,767 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:04:32,769 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421071
01:04:32,770 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000
01:04:32,771 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:04:32,773 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.775" starttime="20160128 01:04:32.658"></status>
</kw>
<msg timestamp="20160128 01:04:32.776" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.776" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:32.776" starttime="20160128 01:04:32.657"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.783" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:32.782" starttime="20160128 01:04:32.781"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.784" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.784" starttime="20160128 01:04:32.783"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.786" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.786" starttime="20160128 01:04:32.785"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.789" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.790" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.790" starttime="20160128 01:04:32.788"></status>
</kw>
<msg timestamp="20160128 01:04:32.791" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.791" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,767 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.790" starttime="20160128 01:04:32.787"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.796" starttime="20160128 01:04:32.795"></status>
</kw>
<msg timestamp="20160128 01:04:32.797" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,767 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.796" starttime="20160128 01:04:32.792"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.801" starttime="20160128 01:04:32.800"></status>
</kw>
<msg timestamp="20160128 01:04:32.802" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,767 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:32.801" starttime="20160128 01:04:32.797"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.806" starttime="20160128 01:04:32.805"></status>
</kw>
<msg timestamp="20160128 01:04:32.807" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.806" starttime="20160128 01:04:32.802"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.813" starttime="20160128 01:04:32.812"></status>
</kw>
<msg timestamp="20160128 01:04:32.813" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.813" starttime="20160128 01:04:32.807"></status>
</kw>
<msg timestamp="20160128 01:04:32.815" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:32.814" starttime="20160128 01:04:32.777"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.820" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:04:32.820" starttime="20160128 01:04:32.819"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.822" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.822" starttime="20160128 01:04:32.821"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.824" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.824" starttime="20160128 01:04:32.823"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.827" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.828" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.828" starttime="20160128 01:04:32.826"></status>
</kw>
<msg timestamp="20160128 01:04:32.829" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.829" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,769 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.829" starttime="20160128 01:04:32.825"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.834" starttime="20160128 01:04:32.833"></status>
</kw>
<msg timestamp="20160128 01:04:32.835" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,769 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.834" starttime="20160128 01:04:32.830"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.839" starttime="20160128 01:04:32.838"></status>
</kw>
<msg timestamp="20160128 01:04:32.840" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,769 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.840" starttime="20160128 01:04:32.835"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.845" starttime="20160128 01:04:32.844"></status>
</kw>
<msg timestamp="20160128 01:04:32.846" level="INFO">${resultCode} = 2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.846" starttime="20160128 01:04:32.841"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.852" starttime="20160128 01:04:32.851"></status>
</kw>
<msg timestamp="20160128 01:04:32.853" level="INFO">${resultCode} = 2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.853" starttime="20160128 01:04:32.846"></status>
</kw>
<msg timestamp="20160128 01:04:32.854" level="INFO">${accountId} = 2421071</msg>
<status status="PASS" endtime="20160128 01:04:32.854" starttime="20160128 01:04:32.816"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.861" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:04:32.861" starttime="20160128 01:04:32.859"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.863" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.863" starttime="20160128 01:04:32.862"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.865" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.865" starttime="20160128 01:04:32.864"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.869" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.870" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.870" starttime="20160128 01:04:32.867"></status>
</kw>
<msg timestamp="20160128 01:04:32.871" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.871" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,770 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.871" starttime="20160128 01:04:32.866"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.876" starttime="20160128 01:04:32.875"></status>
</kw>
<msg timestamp="20160128 01:04:32.877" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,770 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.877" starttime="20160128 01:04:32.872"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.882" starttime="20160128 01:04:32.881"></status>
</kw>
<msg timestamp="20160128 01:04:32.883" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,770 INFO  [log] LowLevelOps.getMainAccount.output.balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.883" starttime="20160128 01:04:32.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.888" starttime="20160128 01:04:32.887"></status>
</kw>
<msg timestamp="20160128 01:04:32.889" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.889" starttime="20160128 01:04:32.884"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.896" starttime="20160128 01:04:32.894"></status>
</kw>
<msg timestamp="20160128 01:04:32.896" level="INFO">${resultCode} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.896" starttime="20160128 01:04:32.890"></status>
</kw>
<msg timestamp="20160128 01:04:32.897" level="INFO">${balance} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.897" starttime="20160128 01:04:32.855"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.904" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:04:32.904" starttime="20160128 01:04:32.902"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.906" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.905" starttime="20160128 01:04:32.905"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.908" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.907" starttime="20160128 01:04:32.906"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.911" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.911" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.912" starttime="20160128 01:04:32.909"></status>
</kw>
<msg timestamp="20160128 01:04:32.913" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.913" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,771 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.912" starttime="20160128 01:04:32.908"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.917" starttime="20160128 01:04:32.916"></status>
</kw>
<msg timestamp="20160128 01:04:32.918" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,771 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.918" starttime="20160128 01:04:32.913"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.923" starttime="20160128 01:04:32.922"></status>
</kw>
<msg timestamp="20160128 01:04:32.924" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,771 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.923" starttime="20160128 01:04:32.919"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.928" starttime="20160128 01:04:32.927"></status>
</kw>
<msg timestamp="20160128 01:04:32.929" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.929" starttime="20160128 01:04:32.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.936" starttime="20160128 01:04:32.935"></status>
</kw>
<msg timestamp="20160128 01:04:32.937" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.936" starttime="20160128 01:04:32.930"></status>
</kw>
<msg timestamp="20160128 01:04:32.938" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:32.937" starttime="20160128 01:04:32.899"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:32.944" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:04:32.944" starttime="20160128 01:04:32.942"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.946" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:32.946" starttime="20160128 01:04:32.945"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.948" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:32.948" starttime="20160128 01:04:32.947"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:32.951" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:32.952" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:32.952" starttime="20160128 01:04:32.950"></status>
</kw>
<msg timestamp="20160128 01:04:32.953" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:32.953" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,773 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.953" starttime="20160128 01:04:32.949"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.957" starttime="20160128 01:04:32.956"></status>
</kw>
<msg timestamp="20160128 01:04:32.958" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,773 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.958" starttime="20160128 01:04:32.954"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.962" starttime="20160128 01:04:32.961"></status>
</kw>
<msg timestamp="20160128 01:04:32.963" level="INFO">${return_log_entry} = 2016-01-28 01:04:32,773 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:32.963" starttime="20160128 01:04:32.959"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.967" starttime="20160128 01:04:32.966"></status>
</kw>
<msg timestamp="20160128 01:04:32.968" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.968" starttime="20160128 01:04:32.964"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.974" starttime="20160128 01:04:32.973"></status>
</kw>
<msg timestamp="20160128 01:04:32.975" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.975" starttime="20160128 01:04:32.969"></status>
</kw>
<msg timestamp="20160128 01:04:32.976" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.976" starttime="20160128 01:04:32.939"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.981" starttime="20160128 01:04:32.980"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.982" starttime="20160128 01:04:32.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.984" starttime="20160128 01:04:32.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:32.989" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:32.990" starttime="20160128 01:04:32.988"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.990" starttime="20160128 01:04:32.987"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.991" starttime="20160128 01:04:32.984"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:32.991" starttime="20160128 01:04:32.977"></status>
</kw>
<msg timestamp="20160128 01:04:32.993" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:04:32.993" level="INFO">${accId} = 2421071</msg>
<msg timestamp="20160128 01:04:32.993" level="INFO">${bal} = 10000000</msg>
<msg timestamp="20160128 01:04:32.994" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:04:32.994" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:04:32.992" starttime="20160128 01:04:32.627"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${target_bal}=</arg>
<arg>Evaluate</arg>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.995" starttime="20160128 01:04:32.994"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Should Be Equal As Numbers</arg>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:32.996" starttime="20160128 01:04:32.996"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:32.998" level="INFO">Account balance check: 10000000</msg>
<status status="PASS" endtime="20160128 01:04:32.998" starttime="20160128 01:04:32.997"></status>
</kw>
<doc>Test will make a MOC call in NoAnswer case

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:04:32.999" starttime="20160128 01:04:27.719"></status>
</test>
<doc>Testing the prepaid MOC call - NoAnswer

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:33.003" starttime="20160128 01:04:24.031"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:33.010" starttime="20160128 01:04:24.015"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit" id="s1-s1-s1-s2-s1-s5" name="MOC PREPAID ONNET-NoCredit">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-NoCredit/MOC_PREPAID_ONNET-NoCredit-robot-suite.txt" id="s1-s1-s1-s2-s1-s5-s1" name="MOC PREPAID ONNET-NoCredit-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:04:33.175" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:33.180" level="INFO">${date} = Thu Jan 28 01:04:33 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:33.179" starttime="20160128 01:04:33.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:33.184" level="INFO">Date and time: Thu Jan 28 01:04:33 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:33.185" starttime="20160128 01:04:33.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:33.188" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:04:33.189" starttime="20160128 01:04:33.186"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:33.246" starttime="20160128 01:04:33.244"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:33.308" starttime="20160128 01:04:33.254"></status>
</kw>
<msg timestamp="20160128 01:04:33.311" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160128 01:04:33.310" starttime="20160128 01:04:33.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:33.322" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:33.729" level="INFO">Read output: Last login: Thu Jan 28 00:04:24 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:33.731" starttime="20160128 01:04:33.319"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:33.732" starttime="20160128 01:04:33.312"></status>
</kw>
<msg timestamp="20160128 01:04:33.734" level="INFO">${ssh_connection} = 21</msg>
<status status="PASS" endtime="20160128 01:04:33.733" starttime="20160128 01:04:33.234"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:33.741" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:33.741" starttime="20160128 01:04:33.735"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:33.744" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:04:34.156" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:34.160" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:34.158" starttime="20160128 01:04:33.742"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.167" starttime="20160128 01:04:34.164"></status>
</kw>
<msg timestamp="20160128 01:04:34.168" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:34.169" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:34.168" starttime="20160128 01:04:34.161"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.179" starttime="20160128 01:04:34.177"></status>
</kw>
<msg timestamp="20160128 01:04:34.181" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:34.180" starttime="20160128 01:04:34.170"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:04:34.185" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:34.184" starttime="20160128 01:04:34.182"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:34.189" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:34.188" starttime="20160128 01:04:34.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.191" starttime="20160128 01:04:34.190"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.203" starttime="20160128 01:04:34.201"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.209" starttime="20160128 01:04:34.204"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:34.210" starttime="20160128 01:04:34.193"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.219" starttime="20160128 01:04:34.217"></status>
</kw>
<msg timestamp="20160128 01:04:34.220" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:34.220" starttime="20160128 01:04:34.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.223" starttime="20160128 01:04:34.221"></status>
</kw>
<msg timestamp="20160128 01:04:34.227" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:04:34.227" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:34.225" starttime="20160128 01:04:33.207"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.282" starttime="20160128 01:04:34.280"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:34.344" starttime="20160128 01:04:34.291"></status>
</kw>
<msg timestamp="20160128 01:04:34.346" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160128 01:04:34.345" starttime="20160128 01:04:34.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:34.356" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:34.774" level="INFO">Read output: Last login: Thu Jan 28 00:04:25 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:34.774" starttime="20160128 01:04:34.354"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:34.775" starttime="20160128 01:04:34.348"></status>
</kw>
<msg timestamp="20160128 01:04:34.776" level="INFO">${ssh_connection} = 22</msg>
<status status="PASS" endtime="20160128 01:04:34.776" starttime="20160128 01:04:34.270"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:34.780" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:34.780" starttime="20160128 01:04:34.777"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:34.782" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:04:35.154" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:35.156" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:35.155" starttime="20160128 01:04:34.781"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.159" starttime="20160128 01:04:35.157"></status>
</kw>
<msg timestamp="20160128 01:04:35.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:35.160" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:35.159" starttime="20160128 01:04:35.156"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.164" starttime="20160128 01:04:35.163"></status>
</kw>
<msg timestamp="20160128 01:04:35.165" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:35.165" starttime="20160128 01:04:35.160"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:04:35.167" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:35.166" starttime="20160128 01:04:35.166"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:35.169" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:35.168" starttime="20160128 01:04:35.167"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.170" starttime="20160128 01:04:35.169"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.175" starttime="20160128 01:04:35.174"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.177" starttime="20160128 01:04:35.176"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:35.178" starttime="20160128 01:04:35.171"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.182" starttime="20160128 01:04:35.181"></status>
</kw>
<msg timestamp="20160128 01:04:35.183" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:35.183" starttime="20160128 01:04:35.179"></status>
</kw>
<msg timestamp="20160128 01:04:35.185" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:04:35.185" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:35.184" starttime="20160128 01:04:34.244"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.219" starttime="20160128 01:04:35.218"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.276" starttime="20160128 01:04:35.223"></status>
</kw>
<msg timestamp="20160128 01:04:35.278" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160128 01:04:35.277" starttime="20160128 01:04:35.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:35.289" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:35.710" level="INFO">Read output: Last login: Thu Jan 28 00:04:26 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:35.711" starttime="20160128 01:04:35.286"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:35.711" starttime="20160128 01:04:35.279"></status>
</kw>
<msg timestamp="20160128 01:04:35.712" level="INFO">${ssh_connection} = 23</msg>
<status status="PASS" endtime="20160128 01:04:35.712" starttime="20160128 01:04:35.214"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:35.717" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:35.716" starttime="20160128 01:04:35.713"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:35.718" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:04:35.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:35.896" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:35.895" starttime="20160128 01:04:35.717"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.902" starttime="20160128 01:04:35.899"></status>
</kw>
<msg timestamp="20160128 01:04:35.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:35.905" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:35.904" starttime="20160128 01:04:35.897"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.914" starttime="20160128 01:04:35.913"></status>
</kw>
<msg timestamp="20160128 01:04:35.916" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:35.915" starttime="20160128 01:04:35.906"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:35.920" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:35.919" starttime="20160128 01:04:35.917"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:35.924" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:35.923" starttime="20160128 01:04:35.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.927" starttime="20160128 01:04:35.925"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.938" starttime="20160128 01:04:35.936"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.944" starttime="20160128 01:04:35.940"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:35.945" starttime="20160128 01:04:35.929"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.954" starttime="20160128 01:04:35.952"></status>
</kw>
<msg timestamp="20160128 01:04:35.956" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:35.955" starttime="20160128 01:04:35.946"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:35.959" starttime="20160128 01:04:35.957"></status>
</kw>
<msg timestamp="20160128 01:04:35.961" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:04:35.962" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:35.960" starttime="20160128 01:04:35.202"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.016" starttime="20160128 01:04:36.014"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.143" starttime="20160128 01:04:36.024"></status>
</kw>
<msg timestamp="20160128 01:04:36.146" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160128 01:04:36.145" starttime="20160128 01:04:36.017"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.158" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:36.523" level="INFO">Read output: Last login: Thu Jan 28 00:04:27 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:36.525" starttime="20160128 01:04:36.156"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.526" starttime="20160128 01:04:36.148"></status>
</kw>
<msg timestamp="20160128 01:04:36.529" level="INFO">${ssh_connection} = 24</msg>
<status status="PASS" endtime="20160128 01:04:36.528" starttime="20160128 01:04:36.004"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:36.537" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:36.536" starttime="20160128 01:04:36.530"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:36.541" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:04:36.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:36.620" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:36.620" starttime="20160128 01:04:36.539"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.627" starttime="20160128 01:04:36.624"></status>
</kw>
<msg timestamp="20160128 01:04:36.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:36.630" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:36.628" starttime="20160128 01:04:36.622"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.639" starttime="20160128 01:04:36.637"></status>
</kw>
<msg timestamp="20160128 01:04:36.641" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:36.640" starttime="20160128 01:04:36.631"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:36.645" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:36.644" starttime="20160128 01:04:36.642"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:36.649" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:36.648" starttime="20160128 01:04:36.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.652" starttime="20160128 01:04:36.650"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.664" starttime="20160128 01:04:36.662"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.668" starttime="20160128 01:04:36.666"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.671" starttime="20160128 01:04:36.654"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.680" starttime="20160128 01:04:36.678"></status>
</kw>
<msg timestamp="20160128 01:04:36.682" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:36.681" starttime="20160128 01:04:36.673"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.685" starttime="20160128 01:04:36.683"></status>
</kw>
<msg timestamp="20160128 01:04:36.689" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:04:36.689" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:36.687" starttime="20160128 01:04:35.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:36.693" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:36.694" starttime="20160128 01:04:36.690"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:36.697" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:36.698" starttime="20160128 01:04:36.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:36.702" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:36.703" starttime="20160128 01:04:36.699"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:36.707" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:36.708" starttime="20160128 01:04:36.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:04:36.711" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:36.712" starttime="20160128 01:04:36.709"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:04:36.715" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:36.716" starttime="20160128 01:04:36.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:04:36.719" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:36.720" starttime="20160128 01:04:36.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:04:36.723" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:36.724" starttime="20160128 01:04:36.721"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.736" starttime="20160128 01:04:36.731"></status>
</kw>
<msg timestamp="20160128 01:04:36.738" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:36.737" starttime="20160128 01:04:36.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.742" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:36.743" starttime="20160128 01:04:36.739"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.744" starttime="20160128 01:04:33.168"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s5-s1-t1" name="Run MOC NoCredit Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.757" starttime="20160128 01:04:36.755"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<msg timestamp="20160128 01:04:36.760" level="INFO">${INITIAL_BALANCE} = 0</msg>
<status status="PASS" endtime="20160128 01:04:36.760" starttime="20160128 01:04:36.758"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>1</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.776" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:04:36.777" starttime="20160128 01:04:36.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.780" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:04:36.781" starttime="20160128 01:04:36.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.784" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:04:36.785" starttime="20160128 01:04:36.782"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.788" level="INFO">msg=amount=1</msg>
<status status="PASS" endtime="20160128 01:04:36.788" starttime="20160128 01:04:36.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.792" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:36.793" starttime="20160128 01:04:36.790"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.796" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:04:36.796" starttime="20160128 01:04:36.794"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.799" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:36.800" starttime="20160128 01:04:36.797"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.803" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:04:36.804" starttime="20160128 01:04:36.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.807" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:36.808" starttime="20160128 01:04:36.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.811" level="INFO">msg=balance=0</msg>
<status status="PASS" endtime="20160128 01:04:36.811" starttime="20160128 01:04:36.809"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.826" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:36.826" starttime="20160128 01:04:36.823"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.827" starttime="20160128 01:04:36.821"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.829" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:36.830" starttime="20160128 01:04:36.828"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.830" starttime="20160128 01:04:36.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.833" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:36.833" starttime="20160128 01:04:36.831"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.833" starttime="20160128 01:04:36.831"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:36.834" starttime="20160128 01:04:36.814"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:36.837" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:36.837" starttime="20160128 01:04:36.834"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.839" starttime="20160128 01:04:36.838"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.840" starttime="20160128 01:04:36.839"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.842" starttime="20160128 01:04:36.841"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.843" starttime="20160128 01:04:36.842"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.845" starttime="20160128 01:04:36.844"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.846" starttime="20160128 01:04:36.845"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.848" starttime="20160128 01:04:36.847"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.849" starttime="20160128 01:04:36.848"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.851" starttime="20160128 01:04:36.850"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.853" starttime="20160128 01:04:36.851"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.854" starttime="20160128 01:04:36.853"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:36.856" starttime="20160128 01:04:36.855"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:36.858" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=1', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=0']</msg>
<msg timestamp="20160128 01:04:37.641" level="INFO">01:04:37,638 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:37.642" starttime="20160128 01:04:36.857"></status>
</kw>
<msg timestamp="20160128 01:04:37.643" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:37.644" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:37.643" starttime="20160128 01:04:36.856"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:37.650" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:37.649" starttime="20160128 01:04:37.648"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:37.652" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:37.651" starttime="20160128 01:04:37.650"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:37.653" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:37.653" starttime="20160128 01:04:37.652"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:37.656" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:37.657" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:37.657" starttime="20160128 01:04:37.655"></status>
</kw>
<msg timestamp="20160128 01:04:37.658" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:37.659" level="INFO">${return_log_entry} = 2016-01-28 01:04:37,638 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:37.657" starttime="20160128 01:04:37.654"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.668" starttime="20160128 01:04:37.666"></status>
</kw>
<msg timestamp="20160128 01:04:37.670" level="INFO">${return_log_entry} = 2016-01-28 01:04:37,638 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:37.669" starttime="20160128 01:04:37.660"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.680" starttime="20160128 01:04:37.678"></status>
</kw>
<msg timestamp="20160128 01:04:37.682" level="INFO">${return_log_entry} = 2016-01-28 01:04:37,638 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:37.681" starttime="20160128 01:04:37.673"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.692" starttime="20160128 01:04:37.689"></status>
</kw>
<msg timestamp="20160128 01:04:37.694" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:37.693" starttime="20160128 01:04:37.683"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.704" starttime="20160128 01:04:37.703"></status>
</kw>
<msg timestamp="20160128 01:04:37.705" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:37.704" starttime="20160128 01:04:37.695"></status>
</kw>
<msg timestamp="20160128 01:04:37.706" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:37.705" starttime="20160128 01:04:37.645"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.711" starttime="20160128 01:04:37.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.713" starttime="20160128 01:04:37.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.714" starttime="20160128 01:04:37.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:37.721" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:37.721" starttime="20160128 01:04:37.719"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:37.722" starttime="20160128 01:04:37.718"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:37.722" starttime="20160128 01:04:37.715"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:37.723" starttime="20160128 01:04:37.707"></status>
</kw>
<msg timestamp="20160128 01:04:37.724" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:04:37.723" starttime="20160128 01:04:36.764"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:04:37.726" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:37.726" starttime="20160128 01:04:37.725"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:37.728" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:04:37.728" starttime="20160128 01:04:37.727"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.730" starttime="20160128 01:04:37.729"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:37.731" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160128 01:04:37.731" starttime="20160128 01:04:37.730"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC Final Rerouting">
<doc>Initiates a MOC session that is expected to do a final reroute to another number</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:37.740" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:04:37.740" starttime="20160128 01:04:37.739"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:37.742" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:04:37.742" starttime="20160128 01:04:37.741"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:04:37.744" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:04:37.744" starttime="20160128 01:04:37.743"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</arg>
</arguments>
<msg timestamp="20160128 01:04:37.746" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs</msg>
<status status="PASS" endtime="20160128 01:04:37.745" starttime="20160128 01:04:37.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.747" starttime="20160128 01:04:37.746"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:37.750" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:37.751" starttime="20160128 01:04:37.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.752" starttime="20160128 01:04:37.751"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:04:37.754" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:37.755" starttime="20160128 01:04:37.753"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>Mocfinal-rerouting parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:37.757" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:37.758" starttime="20160128 01:04:37.755"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.759" starttime="20160128 01:04:37.758"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:37.761" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:37.762" starttime="20160128 01:04:37.760"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:04:37.765" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:37.765" starttime="20160128 01:04:37.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:37.767" starttime="20160128 01:04:37.766"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:04:37.774" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc-final-rerouting.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc-final-rerouting-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:39.734" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:39.732" starttime="20160128 01:04:37.767"></status>
</kw>
<msg timestamp="20160128 01:04:39.738" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:39.736" starttime="20160128 01:04:37.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:39.741" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:04:39.742" starttime="20160128 01:04:39.739"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:04:39.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:39.746" starttime="20160128 01:04:39.743"></status>
</kw>
<doc>Insufficient funds MOC call

Arguments:
none
Returns:
none
Fails: in case CG session fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:04:39.748" starttime="20160128 01:04:36.747"></status>
</test>
<doc>Testing the prepaid MOC call from the calling party that has empty account balance. It is expected that calling party will hear
announcement (call is redirected) that it has insufficient funds (call is successful from platform point of view)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:39.756" starttime="20160128 01:04:33.031"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:39.771" starttime="20160128 01:04:33.015"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration" id="s1-s1-s1-s2-s1-s6" name="MOC PREPAID ONNET-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ShortDuration/MOC_PREPAID_ONNET-ShortDuration-robot-suite.txt" id="s1-s1-s1-s2-s1-s6-s1" name="MOC PREPAID ONNET-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:04:40.034" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:40.040" level="INFO">${date} = Thu Jan 28 01:04:40 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:40.039" starttime="20160128 01:04:40.030"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:40.043" level="INFO">Date and time: Thu Jan 28 01:04:40 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:40.044" starttime="20160128 01:04:40.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:40.048" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:04:40.049" starttime="20160128 01:04:40.046"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.101" starttime="20160128 01:04:40.099"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.141" starttime="20160128 01:04:40.109"></status>
</kw>
<msg timestamp="20160128 01:04:40.142" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160128 01:04:40.142" starttime="20160128 01:04:40.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:40.148" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:40.483" level="INFO">Read output: Last login: Thu Jan 28 00:04:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:40.483" starttime="20160128 01:04:40.146"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:40.484" starttime="20160128 01:04:40.143"></status>
</kw>
<msg timestamp="20160128 01:04:40.485" level="INFO">${ssh_connection} = 25</msg>
<status status="PASS" endtime="20160128 01:04:40.485" starttime="20160128 01:04:40.090"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:40.489" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:40.489" starttime="20160128 01:04:40.486"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:40.491" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:04:40.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:40.782" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:40.782" starttime="20160128 01:04:40.490"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.785" starttime="20160128 01:04:40.784"></status>
</kw>
<msg timestamp="20160128 01:04:40.786" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:40.786" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:40.786" starttime="20160128 01:04:40.783"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.790" starttime="20160128 01:04:40.790"></status>
</kw>
<msg timestamp="20160128 01:04:40.791" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:40.791" starttime="20160128 01:04:40.787"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:04:40.793" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:40.793" starttime="20160128 01:04:40.792"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:40.795" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:40.794" starttime="20160128 01:04:40.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.796" starttime="20160128 01:04:40.795"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.801" starttime="20160128 01:04:40.800"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.805" starttime="20160128 01:04:40.802"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:40.806" starttime="20160128 01:04:40.797"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.810" starttime="20160128 01:04:40.809"></status>
</kw>
<msg timestamp="20160128 01:04:40.810" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:40.810" starttime="20160128 01:04:40.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.812" starttime="20160128 01:04:40.811"></status>
</kw>
<msg timestamp="20160128 01:04:40.813" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:04:40.813" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:40.813" starttime="20160128 01:04:40.065"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.838" starttime="20160128 01:04:40.837"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:40.883" starttime="20160128 01:04:40.841"></status>
</kw>
<msg timestamp="20160128 01:04:40.884" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160128 01:04:40.884" starttime="20160128 01:04:40.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:40.888" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:41.323" level="INFO">Read output: Last login: Thu Jan 28 00:04:34 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:41.324" starttime="20160128 01:04:40.887"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:41.326" starttime="20160128 01:04:40.885"></status>
</kw>
<msg timestamp="20160128 01:04:41.328" level="INFO">${ssh_connection} = 26</msg>
<status status="PASS" endtime="20160128 01:04:41.327" starttime="20160128 01:04:40.832"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:41.332" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:41.332" starttime="20160128 01:04:41.328"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:41.334" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:04:41.710" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:41.712" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:41.711" starttime="20160128 01:04:41.332"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.719" starttime="20160128 01:04:41.716"></status>
</kw>
<msg timestamp="20160128 01:04:41.721" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:41.721" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:41.720" starttime="20160128 01:04:41.714"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.730" starttime="20160128 01:04:41.729"></status>
</kw>
<msg timestamp="20160128 01:04:41.732" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:41.731" starttime="20160128 01:04:41.723"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:04:41.736" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:41.735" starttime="20160128 01:04:41.733"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:41.740" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:41.739" starttime="20160128 01:04:41.737"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.743" starttime="20160128 01:04:41.741"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.754" starttime="20160128 01:04:41.751"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.757" starttime="20160128 01:04:41.755"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:41.761" starttime="20160128 01:04:41.744"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.770" starttime="20160128 01:04:41.768"></status>
</kw>
<msg timestamp="20160128 01:04:41.771" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:41.771" starttime="20160128 01:04:41.762"></status>
</kw>
<msg timestamp="20160128 01:04:41.775" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:04:41.775" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:41.773" starttime="20160128 01:04:40.821"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.828" starttime="20160128 01:04:41.826"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:41.876" starttime="20160128 01:04:41.835"></status>
</kw>
<msg timestamp="20160128 01:04:41.878" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160128 01:04:41.877" starttime="20160128 01:04:41.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:41.883" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:42.340" level="INFO">Read output: Last login: Thu Jan 28 00:04:35 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:42.341" starttime="20160128 01:04:41.882"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:42.343" starttime="20160128 01:04:41.878"></status>
</kw>
<msg timestamp="20160128 01:04:42.347" level="INFO">${ssh_connection} = 27</msg>
<status status="PASS" endtime="20160128 01:04:42.346" starttime="20160128 01:04:41.816"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:42.355" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:42.354" starttime="20160128 01:04:42.348"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:42.358" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:04:42.541" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:42.542" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:42.542" starttime="20160128 01:04:42.356"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.549" starttime="20160128 01:04:42.546"></status>
</kw>
<msg timestamp="20160128 01:04:42.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:42.551" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:42.549" starttime="20160128 01:04:42.544"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.559" starttime="20160128 01:04:42.557"></status>
</kw>
<msg timestamp="20160128 01:04:42.560" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:42.560" starttime="20160128 01:04:42.552"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:42.564" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:42.564" starttime="20160128 01:04:42.562"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:42.568" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:42.567" starttime="20160128 01:04:42.565"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.570" starttime="20160128 01:04:42.569"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.578" starttime="20160128 01:04:42.577"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.581" starttime="20160128 01:04:42.579"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:42.582" starttime="20160128 01:04:42.572"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.586" starttime="20160128 01:04:42.585"></status>
</kw>
<msg timestamp="20160128 01:04:42.587" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:42.587" starttime="20160128 01:04:42.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.588" starttime="20160128 01:04:42.588"></status>
</kw>
<msg timestamp="20160128 01:04:42.590" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:04:42.590" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:42.589" starttime="20160128 01:04:41.791"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.614" starttime="20160128 01:04:42.613"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:42.656" starttime="20160128 01:04:42.618"></status>
</kw>
<msg timestamp="20160128 01:04:42.657" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160128 01:04:42.657" starttime="20160128 01:04:42.615"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:42.662" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:43.057" level="INFO">Read output: Last login: Thu Jan 28 00:04:36 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:43.058" starttime="20160128 01:04:42.661"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.059" starttime="20160128 01:04:42.658"></status>
</kw>
<msg timestamp="20160128 01:04:43.061" level="INFO">${ssh_connection} = 28</msg>
<status status="PASS" endtime="20160128 01:04:43.061" starttime="20160128 01:04:42.609"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:43.066" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:43.066" starttime="20160128 01:04:43.062"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:43.068" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:04:43.145" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:43.146" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:43.145" starttime="20160128 01:04:43.067"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.149" starttime="20160128 01:04:43.147"></status>
</kw>
<msg timestamp="20160128 01:04:43.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:43.150" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:43.150" starttime="20160128 01:04:43.146"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.155" starttime="20160128 01:04:43.154"></status>
</kw>
<msg timestamp="20160128 01:04:43.155" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:43.155" starttime="20160128 01:04:43.151"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:43.157" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:43.157" starttime="20160128 01:04:43.156"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:43.159" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:43.159" starttime="20160128 01:04:43.158"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.161" starttime="20160128 01:04:43.160"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.167" starttime="20160128 01:04:43.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.170" starttime="20160128 01:04:43.167"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.171" starttime="20160128 01:04:43.162"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.175" starttime="20160128 01:04:43.174"></status>
</kw>
<msg timestamp="20160128 01:04:43.176" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:43.175" starttime="20160128 01:04:43.171"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.177" starttime="20160128 01:04:43.176"></status>
</kw>
<msg timestamp="20160128 01:04:43.179" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:04:43.179" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:43.178" starttime="20160128 01:04:42.598"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:43.181" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:43.181" starttime="20160128 01:04:43.180"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:43.183" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:43.184" starttime="20160128 01:04:43.182"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:43.185" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:43.186" starttime="20160128 01:04:43.184"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:43.188" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:43.188" starttime="20160128 01:04:43.186"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:04:43.190" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:43.190" starttime="20160128 01:04:43.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:04:43.192" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:43.192" starttime="20160128 01:04:43.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:04:43.194" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:43.194" starttime="20160128 01:04:43.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:04:43.196" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:43.196" starttime="20160128 01:04:43.195"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.202" starttime="20160128 01:04:43.199"></status>
</kw>
<msg timestamp="20160128 01:04:43.203" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:43.203" starttime="20160128 01:04:43.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.205" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:43.206" starttime="20160128 01:04:43.204"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.206" starttime="20160128 01:04:40.027"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s6-s1-t1" name="Run MOC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.213" starttime="20160128 01:04:43.212"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:04:43.214" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:43.214" starttime="20160128 01:04:43.213"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.222" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:04:43.223" starttime="20160128 01:04:43.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.224" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:04:43.225" starttime="20160128 01:04:43.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.226" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:04:43.226" starttime="20160128 01:04:43.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.228" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:04:43.228" starttime="20160128 01:04:43.227"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.230" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:43.230" starttime="20160128 01:04:43.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.232" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:04:43.232" starttime="20160128 01:04:43.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.234" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:43.234" starttime="20160128 01:04:43.233"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.235" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:04:43.236" starttime="20160128 01:04:43.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.237" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:43.238" starttime="20160128 01:04:43.236"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.239" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:43.240" starttime="20160128 01:04:43.238"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.247" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:43.247" starttime="20160128 01:04:43.245"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.248" starttime="20160128 01:04:43.244"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.250" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:43.251" starttime="20160128 01:04:43.249"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.251" starttime="20160128 01:04:43.248"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.254" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:43.254" starttime="20160128 01:04:43.253"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.255" starttime="20160128 01:04:43.252"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:43.255" starttime="20160128 01:04:43.241"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:43.257" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:43.258" starttime="20160128 01:04:43.256"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.259" starttime="20160128 01:04:43.258"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.261" starttime="20160128 01:04:43.260"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.262" starttime="20160128 01:04:43.261"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.264" starttime="20160128 01:04:43.263"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.265" starttime="20160128 01:04:43.264"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.266" starttime="20160128 01:04:43.265"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.268" starttime="20160128 01:04:43.267"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.269" starttime="20160128 01:04:43.268"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.271" starttime="20160128 01:04:43.270"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.273" starttime="20160128 01:04:43.272"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.274" starttime="20160128 01:04:43.273"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:43.276" starttime="20160128 01:04:43.275"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:43.279" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:04:44.375" level="INFO">01:04:44,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:44.376" starttime="20160128 01:04:43.278"></status>
</kw>
<msg timestamp="20160128 01:04:44.380" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:44.380" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:44.378" starttime="20160128 01:04:43.277"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:44.393" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:44.393" starttime="20160128 01:04:44.390"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.397" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:44.397" starttime="20160128 01:04:44.395"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.401" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:44.400" starttime="20160128 01:04:44.398"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.407" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:44.408" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:44.409" starttime="20160128 01:04:44.404"></status>
</kw>
<msg timestamp="20160128 01:04:44.410" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:44.411" level="INFO">${return_log_entry} = 2016-01-28 01:04:44,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:44.410" starttime="20160128 01:04:44.402"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.421" starttime="20160128 01:04:44.419"></status>
</kw>
<msg timestamp="20160128 01:04:44.423" level="INFO">${return_log_entry} = 2016-01-28 01:04:44,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:44.422" starttime="20160128 01:04:44.412"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.432" starttime="20160128 01:04:44.430"></status>
</kw>
<msg timestamp="20160128 01:04:44.433" level="INFO">${return_log_entry} = 2016-01-28 01:04:44,370 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:44.433" starttime="20160128 01:04:44.424"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.443" starttime="20160128 01:04:44.440"></status>
</kw>
<msg timestamp="20160128 01:04:44.445" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:44.444" starttime="20160128 01:04:44.434"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.454" starttime="20160128 01:04:44.453"></status>
</kw>
<msg timestamp="20160128 01:04:44.455" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:44.454" starttime="20160128 01:04:44.446"></status>
</kw>
<msg timestamp="20160128 01:04:44.456" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:44.456" starttime="20160128 01:04:44.383"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.461" starttime="20160128 01:04:44.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.462" starttime="20160128 01:04:44.461"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.463" starttime="20160128 01:04:44.462"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:44.469" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:44.469" starttime="20160128 01:04:44.467"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:44.470" starttime="20160128 01:04:44.467"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:44.470" starttime="20160128 01:04:44.464"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:44.471" starttime="20160128 01:04:44.457"></status>
</kw>
<msg timestamp="20160128 01:04:44.472" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:04:44.471" starttime="20160128 01:04:43.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:04:44.474" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:44.474" starttime="20160128 01:04:44.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:44.475" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:04:44.476" starttime="20160128 01:04:44.474"></status>
</kw>
<kw type="kw" name="${calling_int} = BuiltIn.Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.477" level="INFO">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20160128 01:04:44.478" level="INFO">${calling_int} = 642041010000</msg>
<status status="PASS" endtime="20160128 01:04:44.477" starttime="20160128 01:04:44.476"></status>
</kw>
<kw type="kw" name="${called_party} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${calling_int}+1</arg>
</arguments>
<msg timestamp="20160128 01:04:44.481" level="INFO">${called_party} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:04:44.481" starttime="20160128 01:04:44.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.482" starttime="20160128 01:04:44.481"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${called_party}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:44.497" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:04:44.497" starttime="20160128 01:04:44.496"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:44.499" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:04:44.499" starttime="20160128 01:04:44.498"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:04:44.501" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:04:44.500" starttime="20160128 01:04:44.499"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:04:44.502" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160128 01:04:44.502" starttime="20160128 01:04:44.501"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.504" starttime="20160128 01:04:44.503"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:44.506" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:44.507" starttime="20160128 01:04:44.504"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.508" starttime="20160128 01:04:44.507"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:04:44.510" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:44.510" starttime="20160128 01:04:44.508"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:44.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:44.513" starttime="20160128 01:04:44.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.514" starttime="20160128 01:04:44.514"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.516" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:44.517" starttime="20160128 01:04:44.515"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:04:44.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:44.520" starttime="20160128 01:04:44.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:44.521" starttime="20160128 01:04:44.520"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:04:44.528" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:48.504" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:48.501" starttime="20160128 01:04:44.522"></status>
</kw>
<msg timestamp="20160128 01:04:48.507" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:48.506" starttime="20160128 01:04:44.490"></status>
</kw>
<msg timestamp="20160128 01:04:48.510" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:48.509" starttime="20160128 01:04:44.484"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:48.513" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:04:48.514" starttime="20160128 01:04:48.511"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:48.519" starttime="20160128 01:04:48.515"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Checking Subscriber's Account Balance *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.521" starttime="20160128 01:04:48.520"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.548" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:48.549" starttime="20160128 01:04:48.544"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:48.550" starttime="20160128 01:04:48.542"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.555" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:48.556" starttime="20160128 01:04:48.553"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:48.557" starttime="20160128 01:04:48.551"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.563" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:48.564" starttime="20160128 01:04:48.560"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:48.565" starttime="20160128 01:04:48.558"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:48.566" starttime="20160128 01:04:48.536"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.570" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:48.570" starttime="20160128 01:04:48.567"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.574" starttime="20160128 01:04:48.571"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.577" starttime="20160128 01:04:48.575"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.581" starttime="20160128 01:04:48.579"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.583" starttime="20160128 01:04:48.582"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.586" starttime="20160128 01:04:48.585"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.590" starttime="20160128 01:04:48.587"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:48.594" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:04:48.832" level="INFO">01:04:48,810 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:48,813 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:48,817 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421075
01:04:48,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:04:48,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:48,826 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:48,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:48,829 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:04:48.832" starttime="20160128 01:04:48.593"></status>
</kw>
<msg timestamp="20160128 01:04:48.833" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.833" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:48.833" starttime="20160128 01:04:48.591"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:48.839" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:48.839" starttime="20160128 01:04:48.838"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.841" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:48.841" starttime="20160128 01:04:48.840"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.843" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:48.843" starttime="20160128 01:04:48.842"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.845" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:48.846" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:48.847" starttime="20160128 01:04:48.844"></status>
</kw>
<msg timestamp="20160128 01:04:48.847" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.848" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,810 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:48.847" starttime="20160128 01:04:48.843"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.853" starttime="20160128 01:04:48.852"></status>
</kw>
<msg timestamp="20160128 01:04:48.853" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,810 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:48.853" starttime="20160128 01:04:48.848"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.860" starttime="20160128 01:04:48.857"></status>
</kw>
<msg timestamp="20160128 01:04:48.861" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,810 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:48.861" starttime="20160128 01:04:48.854"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.865" starttime="20160128 01:04:48.864"></status>
</kw>
<msg timestamp="20160128 01:04:48.866" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:48.866" starttime="20160128 01:04:48.861"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.872" starttime="20160128 01:04:48.871"></status>
</kw>
<msg timestamp="20160128 01:04:48.873" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:48.872" starttime="20160128 01:04:48.866"></status>
</kw>
<msg timestamp="20160128 01:04:48.874" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:48.873" starttime="20160128 01:04:48.834"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:48.879" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:04:48.879" starttime="20160128 01:04:48.878"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.881" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:48.881" starttime="20160128 01:04:48.880"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.883" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:48.883" starttime="20160128 01:04:48.882"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.885" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:48.886" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:48.886" starttime="20160128 01:04:48.884"></status>
</kw>
<msg timestamp="20160128 01:04:48.887" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.887" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,813 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:48.887" starttime="20160128 01:04:48.883"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.892" starttime="20160128 01:04:48.891"></status>
</kw>
<msg timestamp="20160128 01:04:48.892" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,813 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:48.892" starttime="20160128 01:04:48.888"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.897" starttime="20160128 01:04:48.896"></status>
</kw>
<msg timestamp="20160128 01:04:48.897" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,813 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:48.897" starttime="20160128 01:04:48.893"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.902" starttime="20160128 01:04:48.901"></status>
</kw>
<msg timestamp="20160128 01:04:48.902" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:48.902" starttime="20160128 01:04:48.898"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.908" starttime="20160128 01:04:48.907"></status>
</kw>
<msg timestamp="20160128 01:04:48.909" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:48.909" starttime="20160128 01:04:48.903"></status>
</kw>
<msg timestamp="20160128 01:04:48.910" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:48.910" starttime="20160128 01:04:48.875"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:48.916" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:04:48.916" starttime="20160128 01:04:48.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.918" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:48.917" starttime="20160128 01:04:48.917"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.919" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:48.919" starttime="20160128 01:04:48.918"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.922" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:48.923" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:48.923" starttime="20160128 01:04:48.921"></status>
</kw>
<msg timestamp="20160128 01:04:48.924" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.924" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.924" starttime="20160128 01:04:48.920"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.928" starttime="20160128 01:04:48.927"></status>
</kw>
<msg timestamp="20160128 01:04:48.929" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.929" starttime="20160128 01:04:48.925"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.933" starttime="20160128 01:04:48.932"></status>
</kw>
<msg timestamp="20160128 01:04:48.934" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,820 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.933" starttime="20160128 01:04:48.929"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.938" starttime="20160128 01:04:48.937"></status>
</kw>
<msg timestamp="20160128 01:04:48.939" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.939" starttime="20160128 01:04:48.934"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.945" starttime="20160128 01:04:48.944"></status>
</kw>
<msg timestamp="20160128 01:04:48.945" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.945" starttime="20160128 01:04:48.939"></status>
</kw>
<msg timestamp="20160128 01:04:48.946" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:48.946" starttime="20160128 01:04:48.911"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:48.953" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:04:48.952" starttime="20160128 01:04:48.951"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.954" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:48.954" starttime="20160128 01:04:48.953"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.956" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:48.956" starttime="20160128 01:04:48.955"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.958" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:48.959" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:48.960" starttime="20160128 01:04:48.957"></status>
</kw>
<msg timestamp="20160128 01:04:48.960" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.961" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,817 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.960" starttime="20160128 01:04:48.956"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.965" starttime="20160128 01:04:48.964"></status>
</kw>
<msg timestamp="20160128 01:04:48.965" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,817 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.965" starttime="20160128 01:04:48.961"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.969" starttime="20160128 01:04:48.969"></status>
</kw>
<msg timestamp="20160128 01:04:48.970" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,817 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.970" starttime="20160128 01:04:48.966"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.975" starttime="20160128 01:04:48.973"></status>
</kw>
<msg timestamp="20160128 01:04:48.975" level="INFO">${resultCode} = 2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.975" starttime="20160128 01:04:48.971"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:48.981" starttime="20160128 01:04:48.980"></status>
</kw>
<msg timestamp="20160128 01:04:48.982" level="INFO">${resultCode} = 2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.982" starttime="20160128 01:04:48.976"></status>
</kw>
<msg timestamp="20160128 01:04:48.983" level="INFO">${id} = 2421075</msg>
<status status="PASS" endtime="20160128 01:04:48.983" starttime="20160128 01:04:48.947"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:48.989" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:04:48.988" starttime="20160128 01:04:48.987"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.990" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:48.990" starttime="20160128 01:04:48.989"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.992" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:48.992" starttime="20160128 01:04:48.991"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:48.995" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:48.995" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:48.996" starttime="20160128 01:04:48.993"></status>
</kw>
<msg timestamp="20160128 01:04:48.996" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:48.997" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:48.996" starttime="20160128 01:04:48.993"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.001" starttime="20160128 01:04:49.000"></status>
</kw>
<msg timestamp="20160128 01:04:49.002" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:49.001" starttime="20160128 01:04:48.997"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.006" starttime="20160128 01:04:49.005"></status>
</kw>
<msg timestamp="20160128 01:04:49.007" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,824 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:49.007" starttime="20160128 01:04:49.003"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.012" starttime="20160128 01:04:49.010"></status>
</kw>
<msg timestamp="20160128 01:04:49.012" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:49.012" starttime="20160128 01:04:49.008"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.018" starttime="20160128 01:04:49.017"></status>
</kw>
<msg timestamp="20160128 01:04:49.019" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:49.019" starttime="20160128 01:04:49.013"></status>
</kw>
<msg timestamp="20160128 01:04:49.020" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:49.020" starttime="20160128 01:04:48.984"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.026" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:04:49.026" starttime="20160128 01:04:49.025"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.028" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.028" starttime="20160128 01:04:49.027"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.030" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.029" starttime="20160128 01:04:49.028"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.032" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.033" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.033" starttime="20160128 01:04:49.031"></status>
</kw>
<msg timestamp="20160128 01:04:49.034" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.034" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,826 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:49.034" starttime="20160128 01:04:49.030"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.038" starttime="20160128 01:04:49.038"></status>
</kw>
<msg timestamp="20160128 01:04:49.039" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,826 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:49.039" starttime="20160128 01:04:49.035"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.043" starttime="20160128 01:04:49.042"></status>
</kw>
<msg timestamp="20160128 01:04:49.044" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,826 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:49.044" starttime="20160128 01:04:49.040"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.049" starttime="20160128 01:04:49.048"></status>
</kw>
<msg timestamp="20160128 01:04:49.050" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:49.049" starttime="20160128 01:04:49.045"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.058" starttime="20160128 01:04:49.055"></status>
</kw>
<msg timestamp="20160128 01:04:49.059" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:49.059" starttime="20160128 01:04:49.050"></status>
</kw>
<msg timestamp="20160128 01:04:49.062" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:49.061" starttime="20160128 01:04:49.021"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.074" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:04:49.073" starttime="20160128 01:04:49.071"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.078" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.077" starttime="20160128 01:04:49.075"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.082" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.081" starttime="20160128 01:04:49.079"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.087" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.089" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.089" starttime="20160128 01:04:49.085"></status>
</kw>
<msg timestamp="20160128 01:04:49.091" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.092" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.090" starttime="20160128 01:04:49.083"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.100" starttime="20160128 01:04:49.098"></status>
</kw>
<msg timestamp="20160128 01:04:49.102" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.101" starttime="20160128 01:04:49.093"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.111" starttime="20160128 01:04:49.109"></status>
</kw>
<msg timestamp="20160128 01:04:49.112" level="INFO">${return_log_entry} = 2016-01-28 01:04:48,828 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.112" starttime="20160128 01:04:49.103"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.122" starttime="20160128 01:04:49.119"></status>
</kw>
<msg timestamp="20160128 01:04:49.123" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.123" starttime="20160128 01:04:49.114"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.136" starttime="20160128 01:04:49.134"></status>
</kw>
<msg timestamp="20160128 01:04:49.137" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.137" starttime="20160128 01:04:49.125"></status>
</kw>
<msg timestamp="20160128 01:04:49.140" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.139" starttime="20160128 01:04:49.064"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.150" starttime="20160128 01:04:49.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.152" starttime="20160128 01:04:49.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.155" starttime="20160128 01:04:49.153"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:49.167" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:49.168" starttime="20160128 01:04:49.164"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.168" starttime="20160128 01:04:49.162"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.169" starttime="20160128 01:04:49.156"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.170" starttime="20160128 01:04:49.141"></status>
</kw>
<msg timestamp="20160128 01:04:49.175" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:04:49.176" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:04:49.176" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:04:49.177" level="INFO">${id} = 2421075</msg>
<msg timestamp="20160128 01:04:49.178" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:04:49.178" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:04:49.179" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:49.174" starttime="20160128 01:04:48.525"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.203" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:49.204" starttime="20160128 01:04:49.200"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.205" starttime="20160128 01:04:49.198"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.210" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:49.210" starttime="20160128 01:04:49.207"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.211" starttime="20160128 01:04:49.206"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.216" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:49.217" starttime="20160128 01:04:49.214"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.217" starttime="20160128 01:04:49.212"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.218" starttime="20160128 01:04:49.192"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.222" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:49.222" starttime="20160128 01:04:49.219"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.225" starttime="20160128 01:04:49.223"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.228" starttime="20160128 01:04:49.226"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.231" starttime="20160128 01:04:49.229"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.233" starttime="20160128 01:04:49.232"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.235" starttime="20160128 01:04:49.234"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.238" starttime="20160128 01:04:49.236"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:49.242" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421075']</msg>
<msg timestamp="20160128 01:04:49.391" level="INFO">01:04:49,382 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:04:49,383 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421076
01:04:49,385 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
01:04:49,387 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:04:49,388 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:49.391" starttime="20160128 01:04:49.241"></status>
</kw>
<msg timestamp="20160128 01:04:49.392" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.392" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:49.392" starttime="20160128 01:04:49.239"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.398" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:49.398" starttime="20160128 01:04:49.397"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.400" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.400" starttime="20160128 01:04:49.399"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.402" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.402" starttime="20160128 01:04:49.401"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.405" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.405" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.406" starttime="20160128 01:04:49.403"></status>
</kw>
<msg timestamp="20160128 01:04:49.406" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.407" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,382 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:49.406" starttime="20160128 01:04:49.402"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.412" starttime="20160128 01:04:49.411"></status>
</kw>
<msg timestamp="20160128 01:04:49.412" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,382 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:49.412" starttime="20160128 01:04:49.407"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.416" starttime="20160128 01:04:49.416"></status>
</kw>
<msg timestamp="20160128 01:04:49.417" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,382 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:49.417" starttime="20160128 01:04:49.413"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.422" starttime="20160128 01:04:49.420"></status>
</kw>
<msg timestamp="20160128 01:04:49.422" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:49.422" starttime="20160128 01:04:49.418"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.428" starttime="20160128 01:04:49.427"></status>
</kw>
<msg timestamp="20160128 01:04:49.429" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:49.429" starttime="20160128 01:04:49.423"></status>
</kw>
<msg timestamp="20160128 01:04:49.430" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:49.430" starttime="20160128 01:04:49.393"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.436" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:04:49.436" starttime="20160128 01:04:49.434"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.438" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.437" starttime="20160128 01:04:49.437"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.439" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.439" starttime="20160128 01:04:49.438"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.442" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.443" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.443" starttime="20160128 01:04:49.441"></status>
</kw>
<msg timestamp="20160128 01:04:49.444" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.444" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,383 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.443" starttime="20160128 01:04:49.440"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.448" starttime="20160128 01:04:49.447"></status>
</kw>
<msg timestamp="20160128 01:04:49.449" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,383 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.449" starttime="20160128 01:04:49.445"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.454" starttime="20160128 01:04:49.453"></status>
</kw>
<msg timestamp="20160128 01:04:49.455" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,383 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.454" starttime="20160128 01:04:49.450"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.459" starttime="20160128 01:04:49.458"></status>
</kw>
<msg timestamp="20160128 01:04:49.460" level="INFO">${resultCode} = 2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.460" starttime="20160128 01:04:49.455"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.466" starttime="20160128 01:04:49.465"></status>
</kw>
<msg timestamp="20160128 01:04:49.467" level="INFO">${resultCode} = 2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.467" starttime="20160128 01:04:49.461"></status>
</kw>
<msg timestamp="20160128 01:04:49.468" level="INFO">${accountId} = 2421076</msg>
<status status="PASS" endtime="20160128 01:04:49.468" starttime="20160128 01:04:49.431"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.474" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:04:49.474" starttime="20160128 01:04:49.473"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.476" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.476" starttime="20160128 01:04:49.475"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.478" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.477" starttime="20160128 01:04:49.476"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.480" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.481" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.482" starttime="20160128 01:04:49.479"></status>
</kw>
<msg timestamp="20160128 01:04:49.482" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.483" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,385 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.482" starttime="20160128 01:04:49.478"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.487" starttime="20160128 01:04:49.486"></status>
</kw>
<msg timestamp="20160128 01:04:49.488" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,385 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.487" starttime="20160128 01:04:49.483"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.492" starttime="20160128 01:04:49.491"></status>
</kw>
<msg timestamp="20160128 01:04:49.493" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,385 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.492" starttime="20160128 01:04:49.488"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.497" starttime="20160128 01:04:49.496"></status>
</kw>
<msg timestamp="20160128 01:04:49.498" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.498" starttime="20160128 01:04:49.493"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.505" starttime="20160128 01:04:49.504"></status>
</kw>
<msg timestamp="20160128 01:04:49.506" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.506" starttime="20160128 01:04:49.499"></status>
</kw>
<msg timestamp="20160128 01:04:49.507" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.507" starttime="20160128 01:04:49.469"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.513" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:04:49.513" starttime="20160128 01:04:49.512"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.515" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.515" starttime="20160128 01:04:49.514"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.517" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.517" starttime="20160128 01:04:49.516"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.520" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.520" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.521" starttime="20160128 01:04:49.518"></status>
</kw>
<msg timestamp="20160128 01:04:49.521" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.522" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,387 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.521" starttime="20160128 01:04:49.517"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.526" starttime="20160128 01:04:49.525"></status>
</kw>
<msg timestamp="20160128 01:04:49.527" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,387 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.526" starttime="20160128 01:04:49.522"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.531" starttime="20160128 01:04:49.530"></status>
</kw>
<msg timestamp="20160128 01:04:49.532" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,387 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.532" starttime="20160128 01:04:49.527"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.537" starttime="20160128 01:04:49.535"></status>
</kw>
<msg timestamp="20160128 01:04:49.537" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.537" starttime="20160128 01:04:49.533"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.543" starttime="20160128 01:04:49.542"></status>
</kw>
<msg timestamp="20160128 01:04:49.544" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.544" starttime="20160128 01:04:49.538"></status>
</kw>
<msg timestamp="20160128 01:04:49.545" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:04:49.545" starttime="20160128 01:04:49.508"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:49.551" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:04:49.551" starttime="20160128 01:04:49.550"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.553" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:49.553" starttime="20160128 01:04:49.552"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.555" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:49.555" starttime="20160128 01:04:49.554"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.558" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:49.559" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:49.559" starttime="20160128 01:04:49.557"></status>
</kw>
<msg timestamp="20160128 01:04:49.560" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:49.560" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,388 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:49.559" starttime="20160128 01:04:49.556"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.564" starttime="20160128 01:04:49.563"></status>
</kw>
<msg timestamp="20160128 01:04:49.565" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,388 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:49.565" starttime="20160128 01:04:49.561"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.569" starttime="20160128 01:04:49.568"></status>
</kw>
<msg timestamp="20160128 01:04:49.570" level="INFO">${return_log_entry} = 2016-01-28 01:04:49,388 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:04:49.570" starttime="20160128 01:04:49.566"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.575" starttime="20160128 01:04:49.573"></status>
</kw>
<msg timestamp="20160128 01:04:49.576" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:49.576" starttime="20160128 01:04:49.571"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.582" starttime="20160128 01:04:49.581"></status>
</kw>
<msg timestamp="20160128 01:04:49.582" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:49.582" starttime="20160128 01:04:49.576"></status>
</kw>
<msg timestamp="20160128 01:04:49.583" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:49.583" starttime="20160128 01:04:49.546"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.588" starttime="20160128 01:04:49.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.590" starttime="20160128 01:04:49.589"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.591" starttime="20160128 01:04:49.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:49.596" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:49.597" starttime="20160128 01:04:49.595"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.597" starttime="20160128 01:04:49.594"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.598" starttime="20160128 01:04:49.591"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:49.598" starttime="20160128 01:04:49.584"></status>
</kw>
<msg timestamp="20160128 01:04:49.600" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:04:49.600" level="INFO">${accId} = 2421076</msg>
<msg timestamp="20160128 01:04:49.600" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160128 01:04:49.600" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:04:49.601" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:04:49.599" starttime="20160128 01:04:49.182"></status>
</kw>
<kw type="kw" name="${target_bal} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${INITIAL_BALANCE}-${TESTSUBCRIBERS DEFAULT SLICE COSTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.604" level="INFO">${target_bal} = 9980000</msg>
<status status="PASS" endtime="20160128 01:04:49.603" starttime="20160128 01:04:49.601"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${target_bal}</arg>
<arg>${bal}</arg>
<arg>msg=Expected balance and retrieved balance mismatch!</arg>
</arguments>
<msg timestamp="20160128 01:04:49.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:49.606" starttime="20160128 01:04:49.604"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Account balance check OK!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:49.607" level="INFO">Account balance check OK!</msg>
<status status="PASS" endtime="20160128 01:04:49.608" starttime="20160128 01:04:49.606"></status>
</kw>
<doc>Test will make a MOC call, duration 1s.

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:04:49.608" starttime="20160128 01:04:43.207"></status>
</test>
<doc>Testing the prepaid MOC call, duration is 1s - shorter than one slice (less than 60s)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:49.612" starttime="20160128 01:04:39.816"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:04:49.623" starttime="20160128 01:04:39.782"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown" id="s1-s1-s1-s2-s1-s7" name="MOC PREPAID ONNET-ToUnknown">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MOC/OnNet/MOC_PREPAID_ONNET-ToUnknown/MOC_PREPAID_ONNET-ToUnknown-robot-suite.txt" id="s1-s1-s1-s2-s1-s7-s1" name="MOC PREPAID ONNET-ToUnknown-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:04:49.793" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:49.800" level="INFO">${date} = Thu Jan 28 01:04:49 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:49.799" starttime="20160128 01:04:49.789"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:49.802" level="INFO">Date and time: Thu Jan 28 01:04:49 CET 2016</msg>
<status status="PASS" endtime="20160128 01:04:49.803" starttime="20160128 01:04:49.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:49.807" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:04:49.808" starttime="20160128 01:04:49.804"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.860" starttime="20160128 01:04:49.858"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:49.920" starttime="20160128 01:04:49.868"></status>
</kw>
<msg timestamp="20160128 01:04:49.921" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160128 01:04:49.920" starttime="20160128 01:04:49.862"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:49.928" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:50.385" level="INFO">Read output: Last login: Thu Jan 28 00:04:40 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:50.386" starttime="20160128 01:04:49.926"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:50.388" starttime="20160128 01:04:49.922"></status>
</kw>
<msg timestamp="20160128 01:04:50.390" level="INFO">${ssh_connection} = 29</msg>
<status status="PASS" endtime="20160128 01:04:50.389" starttime="20160128 01:04:49.849"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:50.394" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:50.393" starttime="20160128 01:04:50.390"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:50.395" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:04:50.729" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:50.731" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:50.730" starttime="20160128 01:04:50.394"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.738" starttime="20160128 01:04:50.735"></status>
</kw>
<msg timestamp="20160128 01:04:50.740" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:50.740" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:50.739" starttime="20160128 01:04:50.733"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.749" starttime="20160128 01:04:50.748"></status>
</kw>
<msg timestamp="20160128 01:04:50.751" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:50.750" starttime="20160128 01:04:50.741"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:04:50.755" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:04:50.754" starttime="20160128 01:04:50.752"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:50.759" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:50.758" starttime="20160128 01:04:50.756"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.762" starttime="20160128 01:04:50.760"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.773" starttime="20160128 01:04:50.770"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.778" starttime="20160128 01:04:50.774"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:50.779" starttime="20160128 01:04:50.763"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.789" starttime="20160128 01:04:50.787"></status>
</kw>
<msg timestamp="20160128 01:04:50.790" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:50.790" starttime="20160128 01:04:50.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.793" starttime="20160128 01:04:50.792"></status>
</kw>
<msg timestamp="20160128 01:04:50.797" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:04:50.797" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:50.795" starttime="20160128 01:04:49.824"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.849" starttime="20160128 01:04:50.847"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:50.909" starttime="20160128 01:04:50.857"></status>
</kw>
<msg timestamp="20160128 01:04:50.911" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160128 01:04:50.910" starttime="20160128 01:04:50.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:50.920" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:51.327" level="INFO">Read output: Last login: Thu Jan 28 00:04:41 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:51.328" starttime="20160128 01:04:50.918"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:51.329" starttime="20160128 01:04:50.912"></status>
</kw>
<msg timestamp="20160128 01:04:51.331" level="INFO">${ssh_connection} = 30</msg>
<status status="PASS" endtime="20160128 01:04:51.330" starttime="20160128 01:04:50.838"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:51.335" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:51.335" starttime="20160128 01:04:51.332"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:51.337" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:04:51.760" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:51.761" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:51.761" starttime="20160128 01:04:51.336"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.764" starttime="20160128 01:04:51.763"></status>
</kw>
<msg timestamp="20160128 01:04:51.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:51.765" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:51.765" starttime="20160128 01:04:51.762"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.769" starttime="20160128 01:04:51.769"></status>
</kw>
<msg timestamp="20160128 01:04:51.770" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:51.770" starttime="20160128 01:04:51.766"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:04:51.772" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:04:51.772" starttime="20160128 01:04:51.771"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:51.774" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:51.773" starttime="20160128 01:04:51.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.775" starttime="20160128 01:04:51.774"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.780" starttime="20160128 01:04:51.779"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.782" starttime="20160128 01:04:51.781"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:51.783" starttime="20160128 01:04:51.776"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.787" starttime="20160128 01:04:51.786"></status>
</kw>
<msg timestamp="20160128 01:04:51.788" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:51.788" starttime="20160128 01:04:51.784"></status>
</kw>
<msg timestamp="20160128 01:04:51.790" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:04:51.790" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:51.789" starttime="20160128 01:04:50.813"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.814" starttime="20160128 01:04:51.813"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:51.857" starttime="20160128 01:04:51.818"></status>
</kw>
<msg timestamp="20160128 01:04:51.858" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160128 01:04:51.857" starttime="20160128 01:04:51.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:51.862" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:52.297" level="INFO">Read output: Last login: Thu Jan 28 00:04:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:52.298" starttime="20160128 01:04:51.861"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:52.299" starttime="20160128 01:04:51.858"></status>
</kw>
<msg timestamp="20160128 01:04:52.301" level="INFO">${ssh_connection} = 31</msg>
<status status="PASS" endtime="20160128 01:04:52.300" starttime="20160128 01:04:51.809"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:52.305" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:52.305" starttime="20160128 01:04:52.302"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:52.307" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:04:52.491" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:52.494" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:52.493" starttime="20160128 01:04:52.306"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.500" starttime="20160128 01:04:52.497"></status>
</kw>
<msg timestamp="20160128 01:04:52.502" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:52.503" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:52.501" starttime="20160128 01:04:52.495"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.512" starttime="20160128 01:04:52.510"></status>
</kw>
<msg timestamp="20160128 01:04:52.513" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:52.513" starttime="20160128 01:04:52.504"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:52.517" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:04:52.517" starttime="20160128 01:04:52.515"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:52.521" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:52.520" starttime="20160128 01:04:52.518"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.524" starttime="20160128 01:04:52.522"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.535" starttime="20160128 01:04:52.533"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.538" starttime="20160128 01:04:52.536"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:52.541" starttime="20160128 01:04:52.525"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.621" starttime="20160128 01:04:52.618"></status>
</kw>
<msg timestamp="20160128 01:04:52.622" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:52.622" starttime="20160128 01:04:52.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.625" starttime="20160128 01:04:52.623"></status>
</kw>
<msg timestamp="20160128 01:04:52.629" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:04:52.629" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:52.627" starttime="20160128 01:04:51.797"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.684" starttime="20160128 01:04:52.682"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:52.732" starttime="20160128 01:04:52.692"></status>
</kw>
<msg timestamp="20160128 01:04:52.733" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160128 01:04:52.733" starttime="20160128 01:04:52.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:04:52.739" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:04:53.162" level="INFO">Read output: Last login: Thu Jan 28 00:04:42 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:04:53.163" starttime="20160128 01:04:52.738"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.164" starttime="20160128 01:04:52.734"></status>
</kw>
<msg timestamp="20160128 01:04:53.165" level="INFO">${ssh_connection} = 32</msg>
<status status="PASS" endtime="20160128 01:04:53.165" starttime="20160128 01:04:52.672"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:04:53.169" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:04:53.169" starttime="20160128 01:04:53.166"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:04:53.171" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:04:53.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:04:53.251" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:53.251" starttime="20160128 01:04:53.170"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.254" starttime="20160128 01:04:53.253"></status>
</kw>
<msg timestamp="20160128 01:04:53.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:04:53.255" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:04:53.255" starttime="20160128 01:04:53.252"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.259" starttime="20160128 01:04:53.258"></status>
</kw>
<msg timestamp="20160128 01:04:53.260" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:53.260" starttime="20160128 01:04:53.256"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:04:53.262" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:04:53.261" starttime="20160128 01:04:53.260"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:04:53.263" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:53.263" starttime="20160128 01:04:53.262"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.265" starttime="20160128 01:04:53.264"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.270" starttime="20160128 01:04:53.269"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.273" starttime="20160128 01:04:53.270"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.274" starttime="20160128 01:04:53.265"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.278" starttime="20160128 01:04:53.277"></status>
</kw>
<msg timestamp="20160128 01:04:53.278" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:53.278" starttime="20160128 01:04:53.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.280" starttime="20160128 01:04:53.279"></status>
</kw>
<msg timestamp="20160128 01:04:53.281" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:04:53.281" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:53.281" starttime="20160128 01:04:52.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:53.283" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:04:53.283" starttime="20160128 01:04:53.282"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:53.285" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:04:53.285" starttime="20160128 01:04:53.284"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:53.287" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:04:53.287" starttime="20160128 01:04:53.286"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:53.289" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:04:53.289" starttime="20160128 01:04:53.288"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:04:53.291" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:53.291" starttime="20160128 01:04:53.290"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:04:53.293" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:53.293" starttime="20160128 01:04:53.292"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:04:53.294" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:53.295" starttime="20160128 01:04:53.294"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:04:53.296" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:53.297" starttime="20160128 01:04:53.295"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.303" starttime="20160128 01:04:53.300"></status>
</kw>
<msg timestamp="20160128 01:04:53.304" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:53.303" starttime="20160128 01:04:53.297"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.306" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:04:53.306" starttime="20160128 01:04:53.304"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.306" starttime="20160128 01:04:49.787"></status>
</kw>
<test id="s1-s1-s1-s2-s1-s7-s1-t1" name="Run MOC ToUnknown Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.312" starttime="20160128 01:04:53.312"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:04:53.314" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:04:53.314" starttime="20160128 01:04:53.313"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.321" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:04:53.321" starttime="20160128 01:04:53.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.323" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:04:53.323" starttime="20160128 01:04:53.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.325" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:04:53.325" starttime="20160128 01:04:53.324"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.327" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:04:53.327" starttime="20160128 01:04:53.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.328" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:04:53.329" starttime="20160128 01:04:53.327"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.330" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:04:53.330" starttime="20160128 01:04:53.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.332" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:53.332" starttime="20160128 01:04:53.331"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.333" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:04:53.334" starttime="20160128 01:04:53.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.335" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:53.335" starttime="20160128 01:04:53.334"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.337" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:04:53.337" starttime="20160128 01:04:53.336"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.344" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:53.344" starttime="20160128 01:04:53.342"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.344" starttime="20160128 01:04:53.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.347" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:53.347" starttime="20160128 01:04:53.346"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.348" starttime="20160128 01:04:53.345"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.350" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:53.351" starttime="20160128 01:04:53.349"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.351" starttime="20160128 01:04:53.348"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:53.352" starttime="20160128 01:04:53.338"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:53.354" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:53.354" starttime="20160128 01:04:53.352"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.355" starttime="20160128 01:04:53.354"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.357" starttime="20160128 01:04:53.356"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.359" starttime="20160128 01:04:53.358"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.360" starttime="20160128 01:04:53.359"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.361" starttime="20160128 01:04:53.360"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.363" starttime="20160128 01:04:53.362"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.364" starttime="20160128 01:04:53.363"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.366" starttime="20160128 01:04:53.365"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.367" starttime="20160128 01:04:53.366"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.369" starttime="20160128 01:04:53.368"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.370" starttime="20160128 01:04:53.369"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:53.372" starttime="20160128 01:04:53.371"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:53.374" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:04:54.612" level="INFO">01:04:54,606 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.613" starttime="20160128 01:04:53.373"></status>
</kw>
<msg timestamp="20160128 01:04:54.617" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.617" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:54.615" starttime="20160128 01:04:53.372"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:54.630" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:54.629" starttime="20160128 01:04:54.627"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.634" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:54.633" starttime="20160128 01:04:54.631"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.637" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:54.637" starttime="20160128 01:04:54.635"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.643" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:54.644" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:54.645" starttime="20160128 01:04:54.641"></status>
</kw>
<msg timestamp="20160128 01:04:54.647" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.647" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,606 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.646" starttime="20160128 01:04:54.639"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.657" starttime="20160128 01:04:54.655"></status>
</kw>
<msg timestamp="20160128 01:04:54.659" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,606 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.658" starttime="20160128 01:04:54.649"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.668" starttime="20160128 01:04:54.666"></status>
</kw>
<msg timestamp="20160128 01:04:54.669" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,606 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.669" starttime="20160128 01:04:54.660"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.679" starttime="20160128 01:04:54.676"></status>
</kw>
<msg timestamp="20160128 01:04:54.680" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.680" starttime="20160128 01:04:54.670"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.693" starttime="20160128 01:04:54.691"></status>
</kw>
<msg timestamp="20160128 01:04:54.695" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.694" starttime="20160128 01:04:54.682"></status>
</kw>
<msg timestamp="20160128 01:04:54.697" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.696" starttime="20160128 01:04:54.619"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.704" starttime="20160128 01:04:54.703"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.705" starttime="20160128 01:04:54.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.706" starttime="20160128 01:04:54.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:54.712" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:54.712" starttime="20160128 01:04:54.710"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.712" starttime="20160128 01:04:54.709"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.713" starttime="20160128 01:04:54.707"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.713" starttime="20160128 01:04:54.699"></status>
</kw>
<msg timestamp="20160128 01:04:54.715" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.714" starttime="20160128 01:04:53.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:04:54.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:04:54.716" starttime="20160128 01:04:54.715"></status>
</kw>
<kw type="kw" name="${unknown_subscriber} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:04:54.719" level="INFO">${unknown_subscriber} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.719" starttime="20160128 01:04:54.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Unknown subscriber's MSISDN: ${unknown_subscriber}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:54.721" level="INFO">Unknown subscriber's MSISDN: 642041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.721" starttime="20160128 01:04:54.720"></status>
</kw>
<kw type="kw" name="${rc}, ${provcId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${unknown_subscriber}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.733" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:54.733" starttime="20160128 01:04:54.731"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.734" starttime="20160128 01:04:54.730"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.736" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:54.736" starttime="20160128 01:04:54.735"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.737" starttime="20160128 01:04:54.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.739" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:54.740" starttime="20160128 01:04:54.738"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.740" starttime="20160128 01:04:54.737"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:54.741" starttime="20160128 01:04:54.727"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.742" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:54.743" starttime="20160128 01:04:54.741"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.744" starttime="20160128 01:04:54.743"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.746" starttime="20160128 01:04:54.745"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.747" starttime="20160128 01:04:54.746"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.748" starttime="20160128 01:04:54.748"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.750" starttime="20160128 01:04:54.749"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.751" starttime="20160128 01:04:54.750"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:54.753" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001']</msg>
<msg timestamp="20160128 01:04:54.870" level="INFO">01:04:54,855 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:04:54,857 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:04:54,859 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421082
01:04:54,860 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001
01:04:54,862 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:04:54,864 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:04:54,866 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:04:54,868 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:04:54.871" starttime="20160128 01:04:54.753"></status>
</kw>
<msg timestamp="20160128 01:04:54.872" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.872" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:54.871" starttime="20160128 01:04:54.752"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:54.878" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:54.878" starttime="20160128 01:04:54.877"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.880" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:54.880" starttime="20160128 01:04:54.879"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.882" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:54.882" starttime="20160128 01:04:54.881"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.885" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:54.885" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:54.886" starttime="20160128 01:04:54.883"></status>
</kw>
<msg timestamp="20160128 01:04:54.886" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.887" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,855 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.886" starttime="20160128 01:04:54.882"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.891" starttime="20160128 01:04:54.890"></status>
</kw>
<msg timestamp="20160128 01:04:54.892" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,855 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.892" starttime="20160128 01:04:54.887"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.896" starttime="20160128 01:04:54.895"></status>
</kw>
<msg timestamp="20160128 01:04:54.897" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,855 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:54.897" starttime="20160128 01:04:54.893"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.902" starttime="20160128 01:04:54.900"></status>
</kw>
<msg timestamp="20160128 01:04:54.902" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.902" starttime="20160128 01:04:54.898"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.908" starttime="20160128 01:04:54.907"></status>
</kw>
<msg timestamp="20160128 01:04:54.909" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.909" starttime="20160128 01:04:54.903"></status>
</kw>
<msg timestamp="20160128 01:04:54.910" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:54.910" starttime="20160128 01:04:54.873"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:54.916" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:04:54.916" starttime="20160128 01:04:54.915"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.918" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:54.918" starttime="20160128 01:04:54.917"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.920" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:54.919" starttime="20160128 01:04:54.919"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.922" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:54.923" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:54.923" starttime="20160128 01:04:54.921"></status>
</kw>
<msg timestamp="20160128 01:04:54.924" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.924" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,857 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:54.924" starttime="20160128 01:04:54.920"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.929" starttime="20160128 01:04:54.928"></status>
</kw>
<msg timestamp="20160128 01:04:54.930" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,857 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:54.929" starttime="20160128 01:04:54.925"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.934" starttime="20160128 01:04:54.933"></status>
</kw>
<msg timestamp="20160128 01:04:54.935" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,857 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:04:54.934" starttime="20160128 01:04:54.930"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.939" starttime="20160128 01:04:54.938"></status>
</kw>
<msg timestamp="20160128 01:04:54.940" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:54.940" starttime="20160128 01:04:54.935"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.946" starttime="20160128 01:04:54.945"></status>
</kw>
<msg timestamp="20160128 01:04:54.947" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:04:54.947" starttime="20160128 01:04:54.941"></status>
</kw>
<msg timestamp="20160128 01:04:54.948" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:04:54.948" starttime="20160128 01:04:54.911"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:54.954" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:04:54.954" starttime="20160128 01:04:54.953"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.956" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:54.955" starttime="20160128 01:04:54.955"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.957" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:54.957" starttime="20160128 01:04:54.956"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.960" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:54.961" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:54.961" starttime="20160128 01:04:54.959"></status>
</kw>
<msg timestamp="20160128 01:04:54.962" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.962" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,860 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.962" starttime="20160128 01:04:54.958"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.966" starttime="20160128 01:04:54.965"></status>
</kw>
<msg timestamp="20160128 01:04:54.967" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,860 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.967" starttime="20160128 01:04:54.963"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.971" starttime="20160128 01:04:54.970"></status>
</kw>
<msg timestamp="20160128 01:04:54.972" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,860 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.971" starttime="20160128 01:04:54.967"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.976" starttime="20160128 01:04:54.975"></status>
</kw>
<msg timestamp="20160128 01:04:54.977" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.977" starttime="20160128 01:04:54.972"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:54.983" starttime="20160128 01:04:54.982"></status>
</kw>
<msg timestamp="20160128 01:04:54.984" level="INFO">${resultCode} = 530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.983" starttime="20160128 01:04:54.977"></status>
</kw>
<msg timestamp="20160128 01:04:54.985" level="INFO">${imsi} = 530052041010001</msg>
<status status="PASS" endtime="20160128 01:04:54.984" starttime="20160128 01:04:54.949"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:54.990" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:04:54.990" starttime="20160128 01:04:54.989"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.992" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:54.992" starttime="20160128 01:04:54.991"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.994" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:54.993" starttime="20160128 01:04:54.993"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:54.996" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:54.997" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:54.997" starttime="20160128 01:04:54.995"></status>
</kw>
<msg timestamp="20160128 01:04:54.998" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:54.998" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,859 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421082</msg>
<status status="PASS" endtime="20160128 01:04:54.998" starttime="20160128 01:04:54.994"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.003" starttime="20160128 01:04:55.002"></status>
</kw>
<msg timestamp="20160128 01:04:55.004" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,859 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421082</msg>
<status status="PASS" endtime="20160128 01:04:55.003" starttime="20160128 01:04:54.999"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.008" starttime="20160128 01:04:55.007"></status>
</kw>
<msg timestamp="20160128 01:04:55.009" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,859 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421082</msg>
<status status="PASS" endtime="20160128 01:04:55.008" starttime="20160128 01:04:55.004"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.013" starttime="20160128 01:04:55.012"></status>
</kw>
<msg timestamp="20160128 01:04:55.014" level="INFO">${resultCode} = 2421082</msg>
<status status="PASS" endtime="20160128 01:04:55.014" starttime="20160128 01:04:55.009"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.020" starttime="20160128 01:04:55.019"></status>
</kw>
<msg timestamp="20160128 01:04:55.020" level="INFO">${resultCode} = 2421082</msg>
<status status="PASS" endtime="20160128 01:04:55.020" starttime="20160128 01:04:55.014"></status>
</kw>
<msg timestamp="20160128 01:04:55.022" level="INFO">${id} = 2421082</msg>
<status status="PASS" endtime="20160128 01:04:55.021" starttime="20160128 01:04:54.986"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:55.028" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:04:55.027" starttime="20160128 01:04:55.026"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.029" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:55.029" starttime="20160128 01:04:55.028"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.031" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:55.031" starttime="20160128 01:04:55.030"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.034" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:55.034" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:55.035" starttime="20160128 01:04:55.033"></status>
</kw>
<msg timestamp="20160128 01:04:55.036" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:55.036" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,862 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.035" starttime="20160128 01:04:55.032"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.040" starttime="20160128 01:04:55.039"></status>
</kw>
<msg timestamp="20160128 01:04:55.041" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,862 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.040" starttime="20160128 01:04:55.036"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.045" starttime="20160128 01:04:55.044"></status>
</kw>
<msg timestamp="20160128 01:04:55.045" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,862 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.045" starttime="20160128 01:04:55.041"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.050" starttime="20160128 01:04:55.049"></status>
</kw>
<msg timestamp="20160128 01:04:55.051" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.050" starttime="20160128 01:04:55.046"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.056" starttime="20160128 01:04:55.056"></status>
</kw>
<msg timestamp="20160128 01:04:55.057" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.057" starttime="20160128 01:04:55.051"></status>
</kw>
<msg timestamp="20160128 01:04:55.058" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:04:55.058" starttime="20160128 01:04:55.023"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:55.064" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:04:55.064" starttime="20160128 01:04:55.063"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.066" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:55.066" starttime="20160128 01:04:55.065"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.068" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:55.067" starttime="20160128 01:04:55.066"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.070" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:55.081" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:55.081" starttime="20160128 01:04:55.069"></status>
</kw>
<msg timestamp="20160128 01:04:55.082" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:55.082" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,864 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:55.082" starttime="20160128 01:04:55.068"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.086" starttime="20160128 01:04:55.085"></status>
</kw>
<msg timestamp="20160128 01:04:55.087" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,864 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:55.087" starttime="20160128 01:04:55.083"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.091" starttime="20160128 01:04:55.090"></status>
</kw>
<msg timestamp="20160128 01:04:55.092" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,864 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:04:55.092" starttime="20160128 01:04:55.088"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.096" starttime="20160128 01:04:55.095"></status>
</kw>
<msg timestamp="20160128 01:04:55.097" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:55.097" starttime="20160128 01:04:55.093"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.103" starttime="20160128 01:04:55.102"></status>
</kw>
<msg timestamp="20160128 01:04:55.104" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:55.103" starttime="20160128 01:04:55.098"></status>
</kw>
<msg timestamp="20160128 01:04:55.105" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:04:55.104" starttime="20160128 01:04:55.059"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:55.110" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:04:55.110" starttime="20160128 01:04:55.109"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.112" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:55.112" starttime="20160128 01:04:55.111"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.114" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:55.114" starttime="20160128 01:04:55.113"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.116" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:55.117" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:55.117" starttime="20160128 01:04:55.115"></status>
</kw>
<msg timestamp="20160128 01:04:55.118" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:55.118" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,866 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.118" starttime="20160128 01:04:55.114"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.123" starttime="20160128 01:04:55.122"></status>
</kw>
<msg timestamp="20160128 01:04:55.123" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,866 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.123" starttime="20160128 01:04:55.119"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.127" starttime="20160128 01:04:55.126"></status>
</kw>
<msg timestamp="20160128 01:04:55.128" level="INFO">${return_log_entry} = 2016-01-28 01:04:54,866 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.128" starttime="20160128 01:04:55.124"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.132" starttime="20160128 01:04:55.131"></status>
</kw>
<msg timestamp="20160128 01:04:55.133" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.133" starttime="20160128 01:04:55.129"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.139" starttime="20160128 01:04:55.138"></status>
</kw>
<msg timestamp="20160128 01:04:55.140" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.139" starttime="20160128 01:04:55.134"></status>
</kw>
<msg timestamp="20160128 01:04:55.140" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.140" starttime="20160128 01:04:55.106"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.145" starttime="20160128 01:04:55.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.147" starttime="20160128 01:04:55.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.148" starttime="20160128 01:04:55.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:55.153" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:55.153" starttime="20160128 01:04:55.152"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.154" starttime="20160128 01:04:55.151"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.154" starttime="20160128 01:04:55.148"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.155" starttime="20160128 01:04:55.141"></status>
</kw>
<msg timestamp="20160128 01:04:55.157" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:04:55.157" level="INFO">${provcId} = 1</msg>
<msg timestamp="20160128 01:04:55.158" level="INFO">${imsi} = 530052041010001</msg>
<msg timestamp="20160128 01:04:55.158" level="INFO">${id} = 2421082</msg>
<msg timestamp="20160128 01:04:55.158" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:04:55.158" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:04:55.159" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:04:55.156" starttime="20160128 01:04:54.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting "unknown" subscriber...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:55.160" level="INFO">Deleting "unknown" subscriber...</msg>
<status status="PASS" endtime="20160128 01:04:55.160" starttime="20160128 01:04:55.159"></status>
</kw>
<kw type="kw" name="${rc} = subscriber-admin-support-resource.CRCE Delete Subscriber">
<doc>This is a delegator to the CRCE webservice operation deleteSubcriber</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.171" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.172" starttime="20160128 01:04:55.170"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.172" starttime="20160128 01:04:55.169"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.175" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.175" starttime="20160128 01:04:55.174"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.175" starttime="20160128 01:04:55.173"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.178" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.178" starttime="20160128 01:04:55.177"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.179" starttime="20160128 01:04:55.176"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.179" starttime="20160128 01:04:55.166"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.181" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:55.181" starttime="20160128 01:04:55.180"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.183" starttime="20160128 01:04:55.182"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.184" starttime="20160128 01:04:55.183"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.186" starttime="20160128 01:04:55.185"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.187" starttime="20160128 01:04:55.186"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>deleteSubscriber</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.188" starttime="20160128 01:04:55.188"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.input.id=${id}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.190" starttime="20160128 01:04:55.189"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:55.192" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2421082']</msg>
<msg timestamp="20160128 01:04:55.405" level="INFO">01:04:55,400 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:55.406" starttime="20160128 01:04:55.191"></status>
</kw>
<msg timestamp="20160128 01:04:55.408" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:55.408" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:04:55.407" starttime="20160128 01:04:55.190"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.deleteSubscriber.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:04:55.421" level="INFO">${return_marker} = LowLevelOps.deleteSubscriber.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:04:55.421" starttime="20160128 01:04:55.418"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.425" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:04:55.424" starttime="20160128 01:04:55.422"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.429" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:04:55.428" starttime="20160128 01:04:55.426"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.434" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:04:55.440" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:04:55.441" starttime="20160128 01:04:55.432"></status>
</kw>
<msg timestamp="20160128 01:04:55.443" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:04:55.443" level="INFO">${return_log_entry} = 2016-01-28 01:04:55,400 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:55.442" starttime="20160128 01:04:55.430"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.452" starttime="20160128 01:04:55.451"></status>
</kw>
<msg timestamp="20160128 01:04:55.452" level="INFO">${return_log_entry} = 2016-01-28 01:04:55,400 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:55.452" starttime="20160128 01:04:55.445"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.457" starttime="20160128 01:04:55.456"></status>
</kw>
<msg timestamp="20160128 01:04:55.457" level="INFO">${return_log_entry} = 2016-01-28 01:04:55,400 INFO  [log] LowLevelOps.deleteSubscriber.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:04:55.457" starttime="20160128 01:04:55.453"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.462" starttime="20160128 01:04:55.461"></status>
</kw>
<msg timestamp="20160128 01:04:55.462" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:55.462" starttime="20160128 01:04:55.458"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.468" starttime="20160128 01:04:55.467"></status>
</kw>
<msg timestamp="20160128 01:04:55.469" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:55.469" starttime="20160128 01:04:55.463"></status>
</kw>
<msg timestamp="20160128 01:04:55.470" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:04:55.470" starttime="20160128 01:04:55.410"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-DeleteSubscriber</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.475" starttime="20160128 01:04:55.474"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.477" starttime="20160128 01:04:55.476"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.478" starttime="20160128 01:04:55.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:04:55.485" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-DeleteSubscriber*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:04:55.486" starttime="20160128 01:04:55.482"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.486" starttime="20160128 01:04:55.481"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.487" starttime="20160128 01:04:55.478"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.487" starttime="20160128 01:04:55.471"></status>
</kw>
<msg timestamp="20160128 01:04:55.488" level="INFO">${rc} = OK</msg>
<status status="PASS" endtime="20160128 01:04:55.488" starttime="20160128 01:04:55.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Deleting subscriber returned rc= ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:55.489" level="INFO">Deleting subscriber returned rc= OK</msg>
<status status="PASS" endtime="20160128 01:04:55.490" starttime="20160128 01:04:55.488"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}'=='OK'</arg>
<arg>Log</arg>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
<arg>ELSE</arg>
<arg>Fail</arg>
<arg>msg=Subscriber preparation failed!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers prepared!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:55.494" level="INFO">Test Subscribers prepared!</msg>
<status status="PASS" endtime="20160128 01:04:55.494" starttime="20160128 01:04:55.493"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:55.494" starttime="20160128 01:04:55.490"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MOC 1s to unknown subscriber*******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.496" starttime="20160128 01:04:55.495"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MOC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:55.497" level="INFO">Running the MOC call...</msg>
<status status="PASS" endtime="20160128 01:04:55.497" starttime="20160128 01:04:55.496"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MOC 1s">
<doc>Runs a standard MOC 1s session</doc>
<arguments>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${unknown_subscriber}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MOC CGS">
<doc>Runs a standard MOC session (meaning a session that needs only mscAddress and mocBPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>moc1s</arg>
<arg>${cg_imsi}</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_moc_req}</arg>
<arg>${queue_moc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:55.511" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:04:55.511" starttime="20160128 01:04:55.510"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:04:55.513" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:04:55.513" starttime="20160128 01:04:55.512"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:04:55.515" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:04:55.515" starttime="20160128 01:04:55.514"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:04:55.517" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs</msg>
<status status="PASS" endtime="20160128 01:04:55.517" starttime="20160128 01:04:55.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.518" starttime="20160128 01:04:55.517"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cg_imsi};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:55.521" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.521" starttime="20160128 01:04:55.519"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.522" starttime="20160128 01:04:55.522"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mocBPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:04:55.524" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.525" starttime="20160128 01:04:55.523"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:04:55.527" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.527" starttime="20160128 01:04:55.525"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.529" starttime="20160128 01:04:55.528"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.530" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.531" starttime="20160128 01:04:55.529"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MOC;${queue_moc_req};${queue_moc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:04:55.533" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:55.534" starttime="20160128 01:04:55.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:55.535" starttime="20160128 01:04:55.534"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:04:55.546" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/moc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/moc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:04:59.776" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:59.774" starttime="20160128 01:04:55.536"></status>
</kw>
<msg timestamp="20160128 01:04:59.779" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:59.778" starttime="20160128 01:04:55.505"></status>
</kw>
<msg timestamp="20160128 01:04:59.782" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:04:59.781" starttime="20160128 01:04:55.499"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CG return code is: ${rc}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:04:59.785" level="INFO">CG return code is: 0</msg>
<status status="PASS" endtime="20160128 01:04:59.786" starttime="20160128 01:04:59.783"></status>
</kw>
<kw type="kw" name="${rc}, ${provId}, ${imsi}, ${id}, ${state}, ${tariffId}, ${type} = subscriber-admin-support-resource.CRCE Get Subscriber Profile">
<doc>This is a delegator to the CRCE webservice operation getSubcriberProfile and returnes (not all but) the most interesting profile attributes</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:59.812" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:59.813" starttime="20160128 01:04:59.809"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:59.814" starttime="20160128 01:04:59.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:59.820" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:59.821" starttime="20160128 01:04:59.817"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:59.822" starttime="20160128 01:04:59.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:04:59.828" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:04:59.829" starttime="20160128 01:04:59.825"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:59.830" starttime="20160128 01:04:59.823"></status>
</kw>
<status status="PASS" endtime="20160128 01:04:59.831" starttime="20160128 01:04:59.800"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:04:59.835" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:04:59.835" starttime="20160128 01:04:59.832"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.839" starttime="20160128 01:04:59.836"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.842" starttime="20160128 01:04:59.840"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.845" starttime="20160128 01:04:59.843"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.848" starttime="20160128 01:04:59.846"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getSubscriberProfile</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.850" starttime="20160128 01:04:59.849"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.input.msisdn=${msisdn}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:04:59.854" starttime="20160128 01:04:59.852"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:04:59.858" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2421082', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000']</msg>
<msg timestamp="20160128 01:05:00.108" level="INFO">01:05:00,073 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK
01:05:00,077 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1
01:05:00,081 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421080
01:05:00,086 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000
01:05:00,090 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE
01:05:00,094 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001
01:05:00,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID
01:05:00,103 INFO  [log] LowLevelOps.getSubscriberProfile.output.languageId=1</msg>
<status status="PASS" endtime="20160128 01:05:00.110" starttime="20160128 01:04:59.857"></status>
</kw>
<msg timestamp="20160128 01:05:00.113" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.114" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:00.112" starttime="20160128 01:04:59.855"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.127" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:00.126" starttime="20160128 01:05:00.124"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.131" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.130" starttime="20160128 01:05:00.128"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.134" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.134" starttime="20160128 01:05:00.132"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.140" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.142" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.142" starttime="20160128 01:05:00.138"></status>
</kw>
<msg timestamp="20160128 01:05:00.144" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.145" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,073 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.143" starttime="20160128 01:05:00.136"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.154" starttime="20160128 01:05:00.152"></status>
</kw>
<msg timestamp="20160128 01:05:00.156" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,073 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.155" starttime="20160128 01:05:00.146"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.165" starttime="20160128 01:05:00.162"></status>
</kw>
<msg timestamp="20160128 01:05:00.166" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,073 INFO  [log] LowLevelOps.getSubscriberProfile.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.165" starttime="20160128 01:05:00.157"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.176" starttime="20160128 01:05:00.173"></status>
</kw>
<msg timestamp="20160128 01:05:00.177" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:00.177" starttime="20160128 01:05:00.167"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.190" starttime="20160128 01:05:00.188"></status>
</kw>
<msg timestamp="20160128 01:05:00.192" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:00.191" starttime="20160128 01:05:00.178"></status>
</kw>
<msg timestamp="20160128 01:05:00.194" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:00.193" starttime="20160128 01:05:00.116"></status>
</kw>
<kw type="kw" name="${providerId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.providerId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.203" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.providerId=</msg>
<status status="PASS" endtime="20160128 01:05:00.203" starttime="20160128 01:05:00.202"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.205" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.205" starttime="20160128 01:05:00.204"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.207" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.206" starttime="20160128 01:05:00.206"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.209" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.210" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.210" starttime="20160128 01:05:00.208"></status>
</kw>
<msg timestamp="20160128 01:05:00.211" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.211" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,077 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:05:00.211" starttime="20160128 01:05:00.207"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.216" starttime="20160128 01:05:00.215"></status>
</kw>
<msg timestamp="20160128 01:05:00.216" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,077 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:05:00.216" starttime="20160128 01:05:00.212"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.220" starttime="20160128 01:05:00.219"></status>
</kw>
<msg timestamp="20160128 01:05:00.221" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,077 INFO  [log] LowLevelOps.getSubscriberProfile.output.providerId=1</msg>
<status status="PASS" endtime="20160128 01:05:00.221" starttime="20160128 01:05:00.217"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.225" starttime="20160128 01:05:00.224"></status>
</kw>
<msg timestamp="20160128 01:05:00.226" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:05:00.226" starttime="20160128 01:05:00.222"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.232" starttime="20160128 01:05:00.231"></status>
</kw>
<msg timestamp="20160128 01:05:00.233" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:05:00.232" starttime="20160128 01:05:00.227"></status>
</kw>
<msg timestamp="20160128 01:05:00.234" level="INFO">${providerId} = 1</msg>
<status status="PASS" endtime="20160128 01:05:00.233" starttime="20160128 01:05:00.196"></status>
</kw>
<kw type="kw" name="${imsi} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.imsi</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.240" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.imsi=</msg>
<status status="PASS" endtime="20160128 01:05:00.239" starttime="20160128 01:05:00.238"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.241" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.241" starttime="20160128 01:05:00.240"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.243" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.243" starttime="20160128 01:05:00.242"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.246" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.246" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.247" starttime="20160128 01:05:00.245"></status>
</kw>
<msg timestamp="20160128 01:05:00.247" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.248" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,086 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.247" starttime="20160128 01:05:00.244"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.252" starttime="20160128 01:05:00.251"></status>
</kw>
<msg timestamp="20160128 01:05:00.252" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,086 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.252" starttime="20160128 01:05:00.248"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.256" starttime="20160128 01:05:00.256"></status>
</kw>
<msg timestamp="20160128 01:05:00.257" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,086 INFO  [log] LowLevelOps.getSubscriberProfile.output.imsi=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.257" starttime="20160128 01:05:00.253"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.261" starttime="20160128 01:05:00.260"></status>
</kw>
<msg timestamp="20160128 01:05:00.262" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.262" starttime="20160128 01:05:00.258"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.268" starttime="20160128 01:05:00.267"></status>
</kw>
<msg timestamp="20160128 01:05:00.269" level="INFO">${resultCode} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.268" starttime="20160128 01:05:00.263"></status>
</kw>
<msg timestamp="20160128 01:05:00.270" level="INFO">${imsi} = 530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:00.269" starttime="20160128 01:05:00.235"></status>
</kw>
<kw type="kw" name="${id} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.id</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.276" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.id=</msg>
<status status="PASS" endtime="20160128 01:05:00.275" starttime="20160128 01:05:00.274"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.277" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.277" starttime="20160128 01:05:00.276"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.279" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.279" starttime="20160128 01:05:00.278"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.282" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.282" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.283" starttime="20160128 01:05:00.280"></status>
</kw>
<msg timestamp="20160128 01:05:00.283" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.284" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,081 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.283" starttime="20160128 01:05:00.280"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.288" starttime="20160128 01:05:00.287"></status>
</kw>
<msg timestamp="20160128 01:05:00.288" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,081 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.288" starttime="20160128 01:05:00.284"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.292" starttime="20160128 01:05:00.292"></status>
</kw>
<msg timestamp="20160128 01:05:00.293" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,081 INFO  [log] LowLevelOps.getSubscriberProfile.output.id=2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.293" starttime="20160128 01:05:00.289"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.298" starttime="20160128 01:05:00.297"></status>
</kw>
<msg timestamp="20160128 01:05:00.298" level="INFO">${resultCode} = 2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.298" starttime="20160128 01:05:00.294"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.305" starttime="20160128 01:05:00.304"></status>
</kw>
<msg timestamp="20160128 01:05:00.305" level="INFO">${resultCode} = 2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.305" starttime="20160128 01:05:00.299"></status>
</kw>
<msg timestamp="20160128 01:05:00.306" level="INFO">${id} = 2421080</msg>
<status status="PASS" endtime="20160128 01:05:00.306" starttime="20160128 01:05:00.271"></status>
</kw>
<kw type="kw" name="${state} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.state</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.313" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.state=</msg>
<status status="PASS" endtime="20160128 01:05:00.312" starttime="20160128 01:05:00.311"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.315" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.315" starttime="20160128 01:05:00.313"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.317" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.316" starttime="20160128 01:05:00.315"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.319" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.320" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.320" starttime="20160128 01:05:00.318"></status>
</kw>
<msg timestamp="20160128 01:05:00.321" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.321" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,090 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.321" starttime="20160128 01:05:00.317"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.326" starttime="20160128 01:05:00.325"></status>
</kw>
<msg timestamp="20160128 01:05:00.327" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,090 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.327" starttime="20160128 01:05:00.322"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.331" starttime="20160128 01:05:00.330"></status>
</kw>
<msg timestamp="20160128 01:05:00.332" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,090 INFO  [log] LowLevelOps.getSubscriberProfile.output.state=ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.332" starttime="20160128 01:05:00.328"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.336" starttime="20160128 01:05:00.335"></status>
</kw>
<msg timestamp="20160128 01:05:00.337" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.337" starttime="20160128 01:05:00.333"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.343" starttime="20160128 01:05:00.342"></status>
</kw>
<msg timestamp="20160128 01:05:00.344" level="INFO">${resultCode} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.343" starttime="20160128 01:05:00.338"></status>
</kw>
<msg timestamp="20160128 01:05:00.345" level="INFO">${state} = ACTIVE</msg>
<status status="PASS" endtime="20160128 01:05:00.344" starttime="20160128 01:05:00.308"></status>
</kw>
<kw type="kw" name="${tariffId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.tariffId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.351" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.tariffId=</msg>
<status status="PASS" endtime="20160128 01:05:00.350" starttime="20160128 01:05:00.349"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.352" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.352" starttime="20160128 01:05:00.351"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.354" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.354" starttime="20160128 01:05:00.353"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.357" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.357" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.358" starttime="20160128 01:05:00.355"></status>
</kw>
<msg timestamp="20160128 01:05:00.358" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.359" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,094 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:00.358" starttime="20160128 01:05:00.355"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.363" starttime="20160128 01:05:00.362"></status>
</kw>
<msg timestamp="20160128 01:05:00.363" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,094 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:00.363" starttime="20160128 01:05:00.359"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.367" starttime="20160128 01:05:00.367"></status>
</kw>
<msg timestamp="20160128 01:05:00.368" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,094 INFO  [log] LowLevelOps.getSubscriberProfile.output.tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:00.368" starttime="20160128 01:05:00.364"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.373" starttime="20160128 01:05:00.371"></status>
</kw>
<msg timestamp="20160128 01:05:00.373" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:05:00.373" starttime="20160128 01:05:00.369"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.379" starttime="20160128 01:05:00.378"></status>
</kw>
<msg timestamp="20160128 01:05:00.380" level="INFO">${resultCode} = 101001</msg>
<status status="PASS" endtime="20160128 01:05:00.380" starttime="20160128 01:05:00.374"></status>
</kw>
<msg timestamp="20160128 01:05:00.381" level="INFO">${tariffId} = 101001</msg>
<status status="PASS" endtime="20160128 01:05:00.381" starttime="20160128 01:05:00.346"></status>
</kw>
<kw type="kw" name="${type} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getSubscriberProfile.output.type</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.387" level="INFO">${return_marker} = LowLevelOps.getSubscriberProfile.output.type=</msg>
<status status="PASS" endtime="20160128 01:05:00.386" starttime="20160128 01:05:00.385"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.388" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.388" starttime="20160128 01:05:00.387"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.390" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.390" starttime="20160128 01:05:00.389"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.393" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.393" level="INFO">1 out of 8 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.394" starttime="20160128 01:05:00.392"></status>
</kw>
<msg timestamp="20160128 01:05:00.394" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.395" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.394" starttime="20160128 01:05:00.391"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.399" starttime="20160128 01:05:00.398"></status>
</kw>
<msg timestamp="20160128 01:05:00.399" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.399" starttime="20160128 01:05:00.395"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.403" starttime="20160128 01:05:00.403"></status>
</kw>
<msg timestamp="20160128 01:05:00.404" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,099 INFO  [log] LowLevelOps.getSubscriberProfile.output.type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.404" starttime="20160128 01:05:00.400"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.408" starttime="20160128 01:05:00.407"></status>
</kw>
<msg timestamp="20160128 01:05:00.409" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.409" starttime="20160128 01:05:00.405"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.415" starttime="20160128 01:05:00.414"></status>
</kw>
<msg timestamp="20160128 01:05:00.416" level="INFO">${resultCode} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.415" starttime="20160128 01:05:00.410"></status>
</kw>
<msg timestamp="20160128 01:05:00.417" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.416" starttime="20160128 01:05:00.382"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetSubscriberProfile</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.422" starttime="20160128 01:05:00.421"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.423" starttime="20160128 01:05:00.422"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.424" starttime="20160128 01:05:00.423"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:00.429" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetSubscriberProfile*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:00.430" starttime="20160128 01:05:00.428"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.430" starttime="20160128 01:05:00.427"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.431" starttime="20160128 01:05:00.425"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.431" starttime="20160128 01:05:00.417"></status>
</kw>
<msg timestamp="20160128 01:05:00.434" level="INFO">${rc} = OK</msg>
<msg timestamp="20160128 01:05:00.434" level="INFO">${provId} = 1</msg>
<msg timestamp="20160128 01:05:00.434" level="INFO">${imsi} = 530052041010000</msg>
<msg timestamp="20160128 01:05:00.434" level="INFO">${id} = 2421080</msg>
<msg timestamp="20160128 01:05:00.435" level="INFO">${state} = ACTIVE</msg>
<msg timestamp="20160128 01:05:00.435" level="INFO">${tariffId} = 101001</msg>
<msg timestamp="20160128 01:05:00.435" level="INFO">${type} = PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:00.433" starttime="20160128 01:04:59.790"></status>
</kw>
<kw type="kw" name="${resultCode}, ${accId}, ${bal}, ${cat}, ${curr} = subscriber-admin-support-resource.CRCE Get Main Account">
<doc>This is a delegator to the CRCE webservice operation getMainAccount and returnes (not all but) the most interesting account attributes</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>${id}</arg>
</arguments>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.446" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:00.447" starttime="20160128 01:05:00.445"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.447" starttime="20160128 01:05:00.444"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.450" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:00.450" starttime="20160128 01:05:00.449"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.451" starttime="20160128 01:05:00.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.453" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:00.454" starttime="20160128 01:05:00.452"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.454" starttime="20160128 01:05:00.451"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:00.455" starttime="20160128 01:05:00.441"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.456" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:00.457" starttime="20160128 01:05:00.455"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.458" starttime="20160128 01:05:00.457"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.460" starttime="20160128 01:05:00.459"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.461" starttime="20160128 01:05:00.460"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>LowLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.462" starttime="20160128 01:05:00.462"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>getMainAccount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.464" starttime="20160128 01:05:00.463"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.input.subscriberId=${subscriberId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.465" starttime="20160128 01:05:00.464"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:00.467" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010001', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.deleteSubscriber.input.id=2421082', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getSubscriberProfile.input.msisdn=642041010000', u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'LowLevelOps.getMainAccount.input.subscriberId=2421080']</msg>
<msg timestamp="20160128 01:05:00.581" level="INFO">01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK
01:05:00,572 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421081
01:05:00,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000
01:05:00,576 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN
01:05:00,578 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:05:00.582" starttime="20160128 01:05:00.466"></status>
</kw>
<msg timestamp="20160128 01:05:00.583" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.583" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:00.582" starttime="20160128 01:05:00.466"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:00.590" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:00.589" starttime="20160128 01:05:00.588"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.591" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:00.591" starttime="20160128 01:05:00.590"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.593" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:00.593" starttime="20160128 01:05:00.592"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:00.596" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:00.597" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:00.597" starttime="20160128 01:05:00.595"></status>
</kw>
<msg timestamp="20160128 01:05:00.598" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:00.598" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.598" starttime="20160128 01:05:00.594"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.603" starttime="20160128 01:05:00.602"></status>
</kw>
<msg timestamp="20160128 01:05:00.604" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.604" starttime="20160128 01:05:00.599"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.609" starttime="20160128 01:05:00.608"></status>
</kw>
<msg timestamp="20160128 01:05:00.610" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,570 INFO  [log] LowLevelOps.getMainAccount.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:00.609" starttime="20160128 01:05:00.605"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:00.614" starttime="20160128 01:05:00.613"></status>
</kw>
<msg timestamp="20160128 01:05:00.615" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:00.615" starttime="20160128 01:05:00.610"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.180" starttime="20160128 01:05:01.178"></status>
</kw>
<msg timestamp="20160128 01:05:01.182" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:01.181" starttime="20160128 01:05:00.616"></status>
</kw>
<msg timestamp="20160128 01:05:01.183" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:01.183" starttime="20160128 01:05:00.584"></status>
</kw>
<kw type="kw" name="${accountId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.accountId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:01.190" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.accountId=</msg>
<status status="PASS" endtime="20160128 01:05:01.189" starttime="20160128 01:05:01.188"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.192" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:01.191" starttime="20160128 01:05:01.190"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.193" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:01.193" starttime="20160128 01:05:01.192"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.196" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:01.197" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:01.197" starttime="20160128 01:05:01.195"></status>
</kw>
<msg timestamp="20160128 01:05:01.198" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:01.198" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,572 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.198" starttime="20160128 01:05:01.194"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.203" starttime="20160128 01:05:01.202"></status>
</kw>
<msg timestamp="20160128 01:05:01.204" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,572 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.204" starttime="20160128 01:05:01.199"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.209" starttime="20160128 01:05:01.208"></status>
</kw>
<msg timestamp="20160128 01:05:01.209" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,572 INFO  [log] LowLevelOps.getMainAccount.output.accountId=2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.209" starttime="20160128 01:05:01.205"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.214" starttime="20160128 01:05:01.213"></status>
</kw>
<msg timestamp="20160128 01:05:01.215" level="INFO">${resultCode} = 2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.214" starttime="20160128 01:05:01.210"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.221" starttime="20160128 01:05:01.220"></status>
</kw>
<msg timestamp="20160128 01:05:01.221" level="INFO">${resultCode} = 2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.221" starttime="20160128 01:05:01.215"></status>
</kw>
<msg timestamp="20160128 01:05:01.222" level="INFO">${accountId} = 2421081</msg>
<status status="PASS" endtime="20160128 01:05:01.222" starttime="20160128 01:05:01.185"></status>
</kw>
<kw type="kw" name="${balance} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.balance</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:01.229" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.balance=</msg>
<status status="PASS" endtime="20160128 01:05:01.228" starttime="20160128 01:05:01.227"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.230" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:01.230" starttime="20160128 01:05:01.229"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.232" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:01.232" starttime="20160128 01:05:01.231"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.235" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:01.235" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:01.236" starttime="20160128 01:05:01.234"></status>
</kw>
<msg timestamp="20160128 01:05:01.237" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:01.237" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.236" starttime="20160128 01:05:01.233"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.241" starttime="20160128 01:05:01.240"></status>
</kw>
<msg timestamp="20160128 01:05:01.242" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.242" starttime="20160128 01:05:01.237"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.246" starttime="20160128 01:05:01.245"></status>
</kw>
<msg timestamp="20160128 01:05:01.247" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,574 INFO  [log] LowLevelOps.getMainAccount.output.balance=9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.247" starttime="20160128 01:05:01.243"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.251" starttime="20160128 01:05:01.250"></status>
</kw>
<msg timestamp="20160128 01:05:01.252" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.252" starttime="20160128 01:05:01.247"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.258" starttime="20160128 01:05:01.257"></status>
</kw>
<msg timestamp="20160128 01:05:01.258" level="INFO">${resultCode} = 9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.258" starttime="20160128 01:05:01.252"></status>
</kw>
<msg timestamp="20160128 01:05:01.259" level="INFO">${balance} = 9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.259" starttime="20160128 01:05:01.223"></status>
</kw>
<kw type="kw" name="${category} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.category</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:01.265" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.category=</msg>
<status status="PASS" endtime="20160128 01:05:01.265" starttime="20160128 01:05:01.264"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.267" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:01.267" starttime="20160128 01:05:01.266"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.269" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:01.268" starttime="20160128 01:05:01.267"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.271" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:01.272" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:01.272" starttime="20160128 01:05:01.270"></status>
</kw>
<msg timestamp="20160128 01:05:01.287" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:01.287" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,576 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.287" starttime="20160128 01:05:01.269"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.292" starttime="20160128 01:05:01.291"></status>
</kw>
<msg timestamp="20160128 01:05:01.293" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,576 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.293" starttime="20160128 01:05:01.288"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.297" starttime="20160128 01:05:01.296"></status>
</kw>
<msg timestamp="20160128 01:05:01.298" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,576 INFO  [log] LowLevelOps.getMainAccount.output.category=MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.298" starttime="20160128 01:05:01.294"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.302" starttime="20160128 01:05:01.301"></status>
</kw>
<msg timestamp="20160128 01:05:01.303" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.303" starttime="20160128 01:05:01.299"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.309" starttime="20160128 01:05:01.309"></status>
</kw>
<msg timestamp="20160128 01:05:01.310" level="INFO">${resultCode} = MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.310" starttime="20160128 01:05:01.304"></status>
</kw>
<msg timestamp="20160128 01:05:01.311" level="INFO">${category} = MAIN</msg>
<status status="PASS" endtime="20160128 01:05:01.311" starttime="20160128 01:05:01.260"></status>
</kw>
<kw type="kw" name="${currencyId} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>LowLevelOps.getMainAccount.output.currencyId</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:01.320" level="INFO">${return_marker} = LowLevelOps.getMainAccount.output.currencyId=</msg>
<status status="PASS" endtime="20160128 01:05:01.319" starttime="20160128 01:05:01.318"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.322" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:01.321" starttime="20160128 01:05:01.320"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.324" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:01.323" starttime="20160128 01:05:01.322"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:01.327" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:01.328" level="INFO">1 out of 5 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:01.328" starttime="20160128 01:05:01.325"></status>
</kw>
<msg timestamp="20160128 01:05:01.329" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:01.329" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,578 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:05:01.328" starttime="20160128 01:05:01.324"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.334" starttime="20160128 01:05:01.333"></status>
</kw>
<msg timestamp="20160128 01:05:01.335" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,578 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:05:01.334" starttime="20160128 01:05:01.330"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.339" starttime="20160128 01:05:01.338"></status>
</kw>
<msg timestamp="20160128 01:05:01.340" level="INFO">${return_log_entry} = 2016-01-28 01:05:00,578 INFO  [log] LowLevelOps.getMainAccount.output.currencyId=1</msg>
<status status="PASS" endtime="20160128 01:05:01.340" starttime="20160128 01:05:01.335"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.345" starttime="20160128 01:05:01.343"></status>
</kw>
<msg timestamp="20160128 01:05:01.345" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:05:01.345" starttime="20160128 01:05:01.341"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.354" starttime="20160128 01:05:01.352"></status>
</kw>
<msg timestamp="20160128 01:05:01.356" level="INFO">${resultCode} = 1</msg>
<status status="PASS" endtime="20160128 01:05:01.355" starttime="20160128 01:05:01.346"></status>
</kw>
<msg timestamp="20160128 01:05:01.358" level="INFO">${currencyId} = 1</msg>
<status status="PASS" endtime="20160128 01:05:01.358" starttime="20160128 01:05:01.312"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>LowLevelOps-GetMainAccount</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.369" starttime="20160128 01:05:01.367"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.372" starttime="20160128 01:05:01.370"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.374" starttime="20160128 01:05:01.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:01.387" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/LowLevelOps-GetMainAccount*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:01.388" starttime="20160128 01:05:01.384"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:01.390" starttime="20160128 01:05:01.383"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:01.391" starttime="20160128 01:05:01.376"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:01.392" starttime="20160128 01:05:01.360"></status>
</kw>
<msg timestamp="20160128 01:05:01.396" level="INFO">${resultCode} = OK</msg>
<msg timestamp="20160128 01:05:01.397" level="INFO">${accId} = 2421081</msg>
<msg timestamp="20160128 01:05:01.398" level="INFO">${bal} = 9980000</msg>
<msg timestamp="20160128 01:05:01.398" level="INFO">${cat} = MAIN</msg>
<msg timestamp="20160128 01:05:01.399" level="INFO">${curr} = 1</msg>
<status status="PASS" endtime="20160128 01:05:01.395" starttime="20160128 01:05:00.437"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Balance of the calling party is: ${bal}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:01.403" level="INFO">Balance of the calling party is: 9980000</msg>
<status status="PASS" endtime="20160128 01:05:01.404" starttime="20160128 01:05:01.401"></status>
</kw>
<doc>Test will make a MOC call to unknown subscriber

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MOC_only</tag>
<tag>MTEL_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:01.405" starttime="20160128 01:04:53.308"></status>
</test>
<doc>Testing the prepaid MOC call to the unknown subscriber

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:01.413" starttime="20160128 01:04:49.644"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:01.428" starttime="20160128 01:04:49.628"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:01.468" starttime="20160128 01:01:10.859"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:01.544" starttime="20160128 01:01:10.822"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC" id="s1-s1-s1-s3" name="MTC">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon" id="s1-s1-s1-s3-s1" name="MTC PREPAID-Abandon">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Abandon/MTC_PREPAID-Abandon-robot-suite.txt" id="s1-s1-s1-s3-s1-s1" name="MTC PREPAID-Abandon-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:05:01.874" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:01.878" level="INFO">${date} = Thu Jan 28 01:05:01 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:01.877" starttime="20160128 01:05:01.868"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:01.882" level="INFO">Date and time: Thu Jan 28 01:05:01 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:01.882" starttime="20160128 01:05:01.879"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:01.886" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:05:01.888" starttime="20160128 01:05:01.884"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:01.924" starttime="20160128 01:05:01.922"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:02.036" starttime="20160128 01:05:01.933"></status>
</kw>
<msg timestamp="20160128 01:05:02.038" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160128 01:05:02.037" starttime="20160128 01:05:01.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:02.043" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:02.968" level="INFO">Read output: Last login: Thu Jan 28 00:04:50 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:02.969" starttime="20160128 01:05:02.042"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:02.969" starttime="20160128 01:05:02.039"></status>
</kw>
<msg timestamp="20160128 01:05:02.971" level="INFO">${ssh_connection} = 33</msg>
<status status="PASS" endtime="20160128 01:05:02.970" starttime="20160128 01:05:01.911"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:02.974" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:02.974" starttime="20160128 01:05:02.971"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:02.976" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:05:03.416" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:03.419" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:03.418" starttime="20160128 01:05:02.975"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.426" starttime="20160128 01:05:03.423"></status>
</kw>
<msg timestamp="20160128 01:05:03.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:03.428" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:03.427" starttime="20160128 01:05:03.421"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.437" starttime="20160128 01:05:03.435"></status>
</kw>
<msg timestamp="20160128 01:05:03.438" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:03.438" starttime="20160128 01:05:03.429"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:05:03.442" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:03.441" starttime="20160128 01:05:03.439"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:03.446" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:03.445" starttime="20160128 01:05:03.443"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.448" starttime="20160128 01:05:03.447"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.460" starttime="20160128 01:05:03.458"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.466" starttime="20160128 01:05:03.461"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:03.467" starttime="20160128 01:05:03.450"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.475" starttime="20160128 01:05:03.474"></status>
</kw>
<msg timestamp="20160128 01:05:03.477" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:03.476" starttime="20160128 01:05:03.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.480" starttime="20160128 01:05:03.478"></status>
</kw>
<msg timestamp="20160128 01:05:03.483" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:05:03.484" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:03.482" starttime="20160128 01:05:01.895"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.536" starttime="20160128 01:05:03.534"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:03.590" starttime="20160128 01:05:03.544"></status>
</kw>
<msg timestamp="20160128 01:05:03.591" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160128 01:05:03.591" starttime="20160128 01:05:03.538"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:03.597" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:04.012" level="INFO">Read output: Last login: Thu Jan 28 00:04:51 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:04.013" starttime="20160128 01:05:03.595"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:04.014" starttime="20160128 01:05:03.591"></status>
</kw>
<msg timestamp="20160128 01:05:04.015" level="INFO">${ssh_connection} = 34</msg>
<status status="PASS" endtime="20160128 01:05:04.015" starttime="20160128 01:05:03.525"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:04.019" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:04.019" starttime="20160128 01:05:04.016"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:04.021" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:05:04.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:04.396" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:04.395" starttime="20160128 01:05:04.020"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.399" starttime="20160128 01:05:04.397"></status>
</kw>
<msg timestamp="20160128 01:05:04.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:04.400" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:04.399" starttime="20160128 01:05:04.396"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.404" starttime="20160128 01:05:04.403"></status>
</kw>
<msg timestamp="20160128 01:05:04.405" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:04.405" starttime="20160128 01:05:04.400"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:05:04.407" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:04.406" starttime="20160128 01:05:04.405"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:04.408" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:04.408" starttime="20160128 01:05:04.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.409" starttime="20160128 01:05:04.409"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.415" starttime="20160128 01:05:04.414"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.418" starttime="20160128 01:05:04.415"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:04.419" starttime="20160128 01:05:04.410"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.423" starttime="20160128 01:05:04.422"></status>
</kw>
<msg timestamp="20160128 01:05:04.424" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:04.423" starttime="20160128 01:05:04.420"></status>
</kw>
<msg timestamp="20160128 01:05:04.425" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:05:04.425" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:04.424" starttime="20160128 01:05:03.500"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.449" starttime="20160128 01:05:04.448"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:04.506" starttime="20160128 01:05:04.452"></status>
</kw>
<msg timestamp="20160128 01:05:04.508" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160128 01:05:04.507" starttime="20160128 01:05:04.449"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:04.518" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:04.938" level="INFO">Read output: Last login: Thu Jan 28 00:04:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:04.939" starttime="20160128 01:05:04.516"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:04.940" starttime="20160128 01:05:04.509"></status>
</kw>
<msg timestamp="20160128 01:05:04.942" level="INFO">${ssh_connection} = 35</msg>
<status status="PASS" endtime="20160128 01:05:04.942" starttime="20160128 01:05:04.444"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:04.950" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:04.950" starttime="20160128 01:05:04.944"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:04.952" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:05:05.134" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:05.137" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:05.136" starttime="20160128 01:05:04.951"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.144" starttime="20160128 01:05:05.141"></status>
</kw>
<msg timestamp="20160128 01:05:05.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:05.146" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:05.145" starttime="20160128 01:05:05.139"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.155" starttime="20160128 01:05:05.153"></status>
</kw>
<msg timestamp="20160128 01:05:05.156" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:05.156" starttime="20160128 01:05:05.147"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:05.160" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:05.160" starttime="20160128 01:05:05.158"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:05.164" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:05.163" starttime="20160128 01:05:05.161"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.167" starttime="20160128 01:05:05.165"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.178" starttime="20160128 01:05:05.176"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.184" starttime="20160128 01:05:05.179"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.185" starttime="20160128 01:05:05.168"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.194" starttime="20160128 01:05:05.192"></status>
</kw>
<msg timestamp="20160128 01:05:05.195" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:05.195" starttime="20160128 01:05:05.187"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.198" starttime="20160128 01:05:05.196"></status>
</kw>
<msg timestamp="20160128 01:05:05.202" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:05:05.202" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:05.200" starttime="20160128 01:05:04.432"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.250" starttime="20160128 01:05:05.248"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.300" starttime="20160128 01:05:05.258"></status>
</kw>
<msg timestamp="20160128 01:05:05.301" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160128 01:05:05.301" starttime="20160128 01:05:05.252"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.306" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:05.719" level="INFO">Read output: Last login: Thu Jan 28 00:04:52 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:05.719" starttime="20160128 01:05:05.305"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.720" starttime="20160128 01:05:05.302"></status>
</kw>
<msg timestamp="20160128 01:05:05.721" level="INFO">${ssh_connection} = 36</msg>
<status status="PASS" endtime="20160128 01:05:05.721" starttime="20160128 01:05:05.239"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:05.725" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:05.725" starttime="20160128 01:05:05.722"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:05.726" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:05:05.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:05.805" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:05.804" starttime="20160128 01:05:05.725"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.808" starttime="20160128 01:05:05.806"></status>
</kw>
<msg timestamp="20160128 01:05:05.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:05.809" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:05.808" starttime="20160128 01:05:05.805"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.812" starttime="20160128 01:05:05.812"></status>
</kw>
<msg timestamp="20160128 01:05:05.813" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:05.813" starttime="20160128 01:05:05.809"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:05.815" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:05.815" starttime="20160128 01:05:05.814"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:05.817" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:05.816" starttime="20160128 01:05:05.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.818" starttime="20160128 01:05:05.817"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.823" starttime="20160128 01:05:05.822"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.827" starttime="20160128 01:05:05.824"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.828" starttime="20160128 01:05:05.818"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.832" starttime="20160128 01:05:05.831"></status>
</kw>
<msg timestamp="20160128 01:05:05.833" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:05.833" starttime="20160128 01:05:05.829"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.834" starttime="20160128 01:05:05.833"></status>
</kw>
<msg timestamp="20160128 01:05:05.835" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:05:05.835" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:05.835" starttime="20160128 01:05:05.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:05.837" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:05.838" starttime="20160128 01:05:05.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:05.839" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:05.840" starttime="20160128 01:05:05.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:05.841" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:05.842" starttime="20160128 01:05:05.840"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:05.843" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:05.844" starttime="20160128 01:05:05.842"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:05:05.845" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:05.845" starttime="20160128 01:05:05.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:05:05.847" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:05.847" starttime="20160128 01:05:05.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:05:05.848" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:05.849" starttime="20160128 01:05:05.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:05:05.850" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:05.851" starttime="20160128 01:05:05.849"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.856" starttime="20160128 01:05:05.854"></status>
</kw>
<msg timestamp="20160128 01:05:05.857" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:05.856" starttime="20160128 01:05:05.851"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.859" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:05.859" starttime="20160128 01:05:05.857"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.859" starttime="20160128 01:05:01.865"></status>
</kw>
<test id="s1-s1-s1-s3-s1-s1-t1" name="Run MTC Abandon Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.865" starttime="20160128 01:05:05.865"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:05:05.867" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:05:05.866" starttime="20160128 01:05:05.866"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.874" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:05:05.874" starttime="20160128 01:05:05.873"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.876" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:05:05.876" starttime="20160128 01:05:05.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.877" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:05:05.878" starttime="20160128 01:05:05.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.879" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:05:05.879" starttime="20160128 01:05:05.878"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.881" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:05.881" starttime="20160128 01:05:05.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.882" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:05:05.883" starttime="20160128 01:05:05.882"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.884" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:05.884" starttime="20160128 01:05:05.883"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.886" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:05:05.886" starttime="20160128 01:05:05.885"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.887" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:05.888" starttime="20160128 01:05:05.887"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.889" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:05:05.889" starttime="20160128 01:05:05.888"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.896" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:05.896" starttime="20160128 01:05:05.894"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.897" starttime="20160128 01:05:05.894"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.899" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:05.900" starttime="20160128 01:05:05.898"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.900" starttime="20160128 01:05:05.897"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.903" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:05.903" starttime="20160128 01:05:05.901"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.903" starttime="20160128 01:05:05.901"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:05.904" starttime="20160128 01:05:05.891"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:05.906" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:05.906" starttime="20160128 01:05:05.904"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.908" starttime="20160128 01:05:05.907"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.909" starttime="20160128 01:05:05.908"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.911" starttime="20160128 01:05:05.910"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.912" starttime="20160128 01:05:05.911"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.913" starttime="20160128 01:05:05.913"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.915" starttime="20160128 01:05:05.914"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.916" starttime="20160128 01:05:05.915"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.918" starttime="20160128 01:05:05.917"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.919" starttime="20160128 01:05:05.918"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.921" starttime="20160128 01:05:05.920"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.922" starttime="20160128 01:05:05.921"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:05.924" starttime="20160128 01:05:05.923"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:05.926" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:05:06.969" level="INFO">01:05:06,963 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:06.971" starttime="20160128 01:05:05.925"></status>
</kw>
<msg timestamp="20160128 01:05:06.974" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:06.974" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:06.972" starttime="20160128 01:05:05.924"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:06.987" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:06.987" starttime="20160128 01:05:06.984"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:06.991" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:06.990" starttime="20160128 01:05:06.988"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:07.037" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:06.994" starttime="20160128 01:05:06.992"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:07.046" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:07.048" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:07.049" starttime="20160128 01:05:07.043"></status>
</kw>
<msg timestamp="20160128 01:05:07.051" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:07.052" level="INFO">${return_log_entry} = 2016-01-28 01:05:06,963 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:07.050" starttime="20160128 01:05:07.040"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.062" starttime="20160128 01:05:07.060"></status>
</kw>
<msg timestamp="20160128 01:05:07.064" level="INFO">${return_log_entry} = 2016-01-28 01:05:06,963 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:07.063" starttime="20160128 01:05:07.053"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.074" starttime="20160128 01:05:07.072"></status>
</kw>
<msg timestamp="20160128 01:05:07.076" level="INFO">${return_log_entry} = 2016-01-28 01:05:06,963 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:07.075" starttime="20160128 01:05:07.066"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.086" starttime="20160128 01:05:07.083"></status>
</kw>
<msg timestamp="20160128 01:05:07.088" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:07.087" starttime="20160128 01:05:07.077"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.101" starttime="20160128 01:05:07.099"></status>
</kw>
<msg timestamp="20160128 01:05:07.102" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:07.102" starttime="20160128 01:05:07.089"></status>
</kw>
<msg timestamp="20160128 01:05:07.105" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:07.104" starttime="20160128 01:05:06.977"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.116" starttime="20160128 01:05:07.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.119" starttime="20160128 01:05:07.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.122" starttime="20160128 01:05:07.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:07.134" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:07.135" starttime="20160128 01:05:07.131"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:07.136" starttime="20160128 01:05:07.129"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:07.137" starttime="20160128 01:05:07.123"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:07.138" starttime="20160128 01:05:07.107"></status>
</kw>
<msg timestamp="20160128 01:05:07.142" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:05:07.140" starttime="20160128 01:05:05.868"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:05:07.148" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:05:07.148" starttime="20160128 01:05:07.143"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:05:07.152" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:07.152" starttime="20160128 01:05:07.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:07.155" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:05:07.156" starttime="20160128 01:05:07.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC abandon *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.159" starttime="20160128 01:05:07.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the MTC abandon call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:07.161" level="INFO">Running the MTC abandon call...</msg>
<status status="PASS" endtime="20160128 01:05:07.162" starttime="20160128 01:05:07.160"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Abandon">
<doc>Runs an abandoned non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-abandon</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:07.194" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:05:07.193" starttime="20160128 01:05:07.191"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:07.198" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:05:07.197" starttime="20160128 01:05:07.195"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:05:07.201" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:05:07.201" starttime="20160128 01:05:07.199"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:05:07.203" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs</msg>
<status status="PASS" endtime="20160128 01:05:07.203" starttime="20160128 01:05:07.202"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.204" starttime="20160128 01:05:07.203"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:07.207" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:07.208" starttime="20160128 01:05:07.205"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.209" starttime="20160128 01:05:07.208"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:05:07.211" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:07.211" starttime="20160128 01:05:07.209"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:07.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:07.214" starttime="20160128 01:05:07.212"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.215" starttime="20160128 01:05:07.215"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:05:07.217" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:07.217" starttime="20160128 01:05:07.216"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:05:07.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:07.221" starttime="20160128 01:05:07.218"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:07.222" starttime="20160128 01:05:07.221"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:05:07.229" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-abandon.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-abandon-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:19.238" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:19.237" starttime="20160128 01:05:07.222"></status>
</kw>
<msg timestamp="20160128 01:05:19.240" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:19.239" starttime="20160128 01:05:07.179"></status>
</kw>
<msg timestamp="20160128 01:05:19.241" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:19.240" starttime="20160128 01:05:07.165"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:19.242" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:05:19.243" starttime="20160128 01:05:19.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:05:19.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:19.245" starttime="20160128 01:05:19.243"></status>
</kw>
<doc>Test will make an abandoned MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:19.245" starttime="20160128 01:05:05.861"></status>
</test>
<doc>Testing the abandoned MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:19.249" starttime="20160128 01:05:01.613"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:19.256" starttime="20160128 01:05:01.599"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy" id="s1-s1-s1-s3-s2" name="MTC PREPAID-Busy">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-Busy/MTC_PREPAID-Busy-robot-suite.txt" id="s1-s1-s1-s3-s2-s1" name="MTC PREPAID-Busy-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:05:19.416" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:19.424" level="INFO">${date} = Thu Jan 28 01:05:19 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:19.423" starttime="20160128 01:05:19.413"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:19.428" level="INFO">Date and time: Thu Jan 28 01:05:19 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:19.429" starttime="20160128 01:05:19.425"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:19.432" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:05:19.433" starttime="20160128 01:05:19.430"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:19.482" starttime="20160128 01:05:19.480"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:19.577" starttime="20160128 01:05:19.490"></status>
</kw>
<msg timestamp="20160128 01:05:19.579" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160128 01:05:19.578" starttime="20160128 01:05:19.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:19.587" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:20.014" level="INFO">Read output: Last login: Thu Jan 28 00:05:02 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:20.015" starttime="20160128 01:05:19.585"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:20.016" starttime="20160128 01:05:19.580"></status>
</kw>
<msg timestamp="20160128 01:05:20.017" level="INFO">${ssh_connection} = 37</msg>
<status status="PASS" endtime="20160128 01:05:20.017" starttime="20160128 01:05:19.471"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:20.021" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:20.021" starttime="20160128 01:05:20.018"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:20.023" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:05:20.286" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:20.287" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:20.287" starttime="20160128 01:05:20.022"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.290" starttime="20160128 01:05:20.289"></status>
</kw>
<msg timestamp="20160128 01:05:20.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:20.291" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:20.291" starttime="20160128 01:05:20.288"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.295" starttime="20160128 01:05:20.295"></status>
</kw>
<msg timestamp="20160128 01:05:20.296" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:20.296" starttime="20160128 01:05:20.292"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:05:20.298" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:20.297" starttime="20160128 01:05:20.297"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:20.299" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:20.299" starttime="20160128 01:05:20.298"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.301" starttime="20160128 01:05:20.300"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.306" starttime="20160128 01:05:20.305"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.310" starttime="20160128 01:05:20.306"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:20.311" starttime="20160128 01:05:20.301"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.314" starttime="20160128 01:05:20.313"></status>
</kw>
<msg timestamp="20160128 01:05:20.315" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:20.315" starttime="20160128 01:05:20.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.316" starttime="20160128 01:05:20.316"></status>
</kw>
<msg timestamp="20160128 01:05:20.318" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:05:20.318" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:20.317" starttime="20160128 01:05:19.447"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.340" starttime="20160128 01:05:20.339"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:20.395" starttime="20160128 01:05:20.343"></status>
</kw>
<msg timestamp="20160128 01:05:20.397" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160128 01:05:20.396" starttime="20160128 01:05:20.341"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:20.408" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:20.814" level="INFO">Read output: Last login: Thu Jan 28 00:05:03 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:20.816" starttime="20160128 01:05:20.405"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:20.817" starttime="20160128 01:05:20.398"></status>
</kw>
<msg timestamp="20160128 01:05:20.819" level="INFO">${ssh_connection} = 38</msg>
<status status="PASS" endtime="20160128 01:05:20.818" starttime="20160128 01:05:20.335"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:20.826" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:20.826" starttime="20160128 01:05:20.820"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:20.828" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:05:21.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:21.204" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:21.203" starttime="20160128 01:05:20.827"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.211" starttime="20160128 01:05:21.208"></status>
</kw>
<msg timestamp="20160128 01:05:21.212" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:21.213" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:21.212" starttime="20160128 01:05:21.206"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.222" starttime="20160128 01:05:21.221"></status>
</kw>
<msg timestamp="20160128 01:05:21.224" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:21.223" starttime="20160128 01:05:21.214"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:05:21.227" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:21.227" starttime="20160128 01:05:21.225"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:21.231" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:21.230" starttime="20160128 01:05:21.229"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.234" starttime="20160128 01:05:21.232"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.245" starttime="20160128 01:05:21.242"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.252" starttime="20160128 01:05:21.246"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:21.253" starttime="20160128 01:05:21.235"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.262" starttime="20160128 01:05:21.260"></status>
</kw>
<msg timestamp="20160128 01:05:21.264" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:21.263" starttime="20160128 01:05:21.254"></status>
</kw>
<msg timestamp="20160128 01:05:21.267" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:05:21.268" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:21.266" starttime="20160128 01:05:20.324"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.316" starttime="20160128 01:05:21.314"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:21.373" starttime="20160128 01:05:21.323"></status>
</kw>
<msg timestamp="20160128 01:05:21.375" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160128 01:05:21.374" starttime="20160128 01:05:21.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:21.385" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:21.847" level="INFO">Read output: Last login: Thu Jan 28 00:05:04 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:21.848" starttime="20160128 01:05:21.383"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:21.848" starttime="20160128 01:05:21.376"></status>
</kw>
<msg timestamp="20160128 01:05:21.849" level="INFO">${ssh_connection} = 39</msg>
<status status="PASS" endtime="20160128 01:05:21.849" starttime="20160128 01:05:21.304"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:21.853" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:21.853" starttime="20160128 01:05:21.850"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:21.855" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:05:22.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:22.038" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:22.037" starttime="20160128 01:05:21.854"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.041" starttime="20160128 01:05:22.040"></status>
</kw>
<msg timestamp="20160128 01:05:22.042" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:22.042" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:22.042" starttime="20160128 01:05:22.039"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.046" starttime="20160128 01:05:22.045"></status>
</kw>
<msg timestamp="20160128 01:05:22.047" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:22.047" starttime="20160128 01:05:22.043"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:22.049" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:22.048" starttime="20160128 01:05:22.047"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:22.050" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:22.050" starttime="20160128 01:05:22.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.052" starttime="20160128 01:05:22.051"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.057" starttime="20160128 01:05:22.056"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.059" starttime="20160128 01:05:22.057"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.059" starttime="20160128 01:05:22.052"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.065" starttime="20160128 01:05:22.065"></status>
</kw>
<msg timestamp="20160128 01:05:22.066" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:22.066" starttime="20160128 01:05:22.060"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.067" starttime="20160128 01:05:22.067"></status>
</kw>
<msg timestamp="20160128 01:05:22.069" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:05:22.069" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:22.068" starttime="20160128 01:05:21.282"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.092" starttime="20160128 01:05:22.091"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.132" starttime="20160128 01:05:22.095"></status>
</kw>
<msg timestamp="20160128 01:05:22.133" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160128 01:05:22.133" starttime="20160128 01:05:22.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.138" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:22.555" level="INFO">Read output: Last login: Thu Jan 28 00:05:05 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:22.556" starttime="20160128 01:05:22.137"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.557" starttime="20160128 01:05:22.134"></status>
</kw>
<msg timestamp="20160128 01:05:22.559" level="INFO">${ssh_connection} = 40</msg>
<status status="PASS" endtime="20160128 01:05:22.558" starttime="20160128 01:05:22.087"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:22.565" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:22.565" starttime="20160128 01:05:22.560"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:22.568" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:05:22.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:22.646" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:22.645" starttime="20160128 01:05:22.566"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.652" starttime="20160128 01:05:22.649"></status>
</kw>
<msg timestamp="20160128 01:05:22.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:22.654" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:22.653" starttime="20160128 01:05:22.647"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.661" starttime="20160128 01:05:22.660"></status>
</kw>
<msg timestamp="20160128 01:05:22.662" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:22.662" starttime="20160128 01:05:22.655"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:22.666" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:22.665" starttime="20160128 01:05:22.663"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:22.669" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:22.669" starttime="20160128 01:05:22.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.671" starttime="20160128 01:05:22.670"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.681" starttime="20160128 01:05:22.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.687" starttime="20160128 01:05:22.683"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.688" starttime="20160128 01:05:22.673"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.695" starttime="20160128 01:05:22.694"></status>
</kw>
<msg timestamp="20160128 01:05:22.697" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:22.696" starttime="20160128 01:05:22.689"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.699" starttime="20160128 01:05:22.698"></status>
</kw>
<msg timestamp="20160128 01:05:22.701" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:05:22.701" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:22.700" starttime="20160128 01:05:22.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:22.703" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:22.703" starttime="20160128 01:05:22.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:22.705" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:22.705" starttime="20160128 01:05:22.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:22.707" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:22.707" starttime="20160128 01:05:22.706"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:22.709" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:22.709" starttime="20160128 01:05:22.707"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:05:22.710" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:22.711" starttime="20160128 01:05:22.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:05:22.712" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:22.713" starttime="20160128 01:05:22.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:05:22.714" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:22.714" starttime="20160128 01:05:22.713"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:05:22.716" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:22.716" starttime="20160128 01:05:22.715"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.721" starttime="20160128 01:05:22.719"></status>
</kw>
<msg timestamp="20160128 01:05:22.722" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:22.722" starttime="20160128 01:05:22.717"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.724" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:22.724" starttime="20160128 01:05:22.723"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.725" starttime="20160128 01:05:19.410"></status>
</kw>
<test id="s1-s1-s1-s3-s2-s1-t1" name="Run MTC Busy Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.731" starttime="20160128 01:05:22.730"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:05:22.732" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:05:22.732" starttime="20160128 01:05:22.731"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.739" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:05:22.739" starttime="20160128 01:05:22.738"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.741" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:05:22.741" starttime="20160128 01:05:22.740"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.742" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:05:22.743" starttime="20160128 01:05:22.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.744" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:05:22.744" starttime="20160128 01:05:22.743"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.746" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:22.746" starttime="20160128 01:05:22.745"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.747" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:05:22.748" starttime="20160128 01:05:22.747"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.749" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:22.749" starttime="20160128 01:05:22.748"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.751" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:05:22.751" starttime="20160128 01:05:22.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.752" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:22.753" starttime="20160128 01:05:22.752"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.754" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:05:22.754" starttime="20160128 01:05:22.753"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.761" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:22.761" starttime="20160128 01:05:22.760"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.762" starttime="20160128 01:05:22.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.764" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:22.765" starttime="20160128 01:05:22.763"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.765" starttime="20160128 01:05:22.762"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.768" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:22.768" starttime="20160128 01:05:22.766"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.768" starttime="20160128 01:05:22.766"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:22.769" starttime="20160128 01:05:22.756"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:22.771" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:22.771" starttime="20160128 01:05:22.769"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.773" starttime="20160128 01:05:22.772"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.774" starttime="20160128 01:05:22.773"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.776" starttime="20160128 01:05:22.775"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.777" starttime="20160128 01:05:22.776"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.778" starttime="20160128 01:05:22.777"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.779" starttime="20160128 01:05:22.778"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.781" starttime="20160128 01:05:22.780"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.782" starttime="20160128 01:05:22.781"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.784" starttime="20160128 01:05:22.783"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.785" starttime="20160128 01:05:22.784"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.787" starttime="20160128 01:05:22.786"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:22.788" starttime="20160128 01:05:22.787"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:22.790" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:05:23.877" level="INFO">01:05:23,871 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:23.878" starttime="20160128 01:05:22.790"></status>
</kw>
<msg timestamp="20160128 01:05:23.882" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:23.882" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:23.880" starttime="20160128 01:05:22.789"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:23.895" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:23.894" starttime="20160128 01:05:23.892"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:23.899" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:23.898" starttime="20160128 01:05:23.896"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:23.902" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:23.902" starttime="20160128 01:05:23.900"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:23.908" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:23.909" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:23.910" starttime="20160128 01:05:23.905"></status>
</kw>
<msg timestamp="20160128 01:05:23.911" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:23.912" level="INFO">${return_log_entry} = 2016-01-28 01:05:23,871 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:23.911" starttime="20160128 01:05:23.903"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.921" starttime="20160128 01:05:23.919"></status>
</kw>
<msg timestamp="20160128 01:05:23.923" level="INFO">${return_log_entry} = 2016-01-28 01:05:23,871 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:23.922" starttime="20160128 01:05:23.913"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.932" starttime="20160128 01:05:23.930"></status>
</kw>
<msg timestamp="20160128 01:05:23.933" level="INFO">${return_log_entry} = 2016-01-28 01:05:23,871 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:23.933" starttime="20160128 01:05:23.924"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.943" starttime="20160128 01:05:23.940"></status>
</kw>
<msg timestamp="20160128 01:05:23.944" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:23.944" starttime="20160128 01:05:23.934"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.957" starttime="20160128 01:05:23.955"></status>
</kw>
<msg timestamp="20160128 01:05:23.959" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:23.958" starttime="20160128 01:05:23.946"></status>
</kw>
<msg timestamp="20160128 01:05:23.961" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:23.960" starttime="20160128 01:05:23.884"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.972" starttime="20160128 01:05:23.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.974" starttime="20160128 01:05:23.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:23.977" starttime="20160128 01:05:23.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:23.989" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:23.990" starttime="20160128 01:05:23.986"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:23.991" starttime="20160128 01:05:23.984"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:23.992" starttime="20160128 01:05:23.978"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:23.993" starttime="20160128 01:05:23.963"></status>
</kw>
<msg timestamp="20160128 01:05:23.996" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:05:23.994" starttime="20160128 01:05:22.733"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:05:24.003" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:05:24.001" starttime="20160128 01:05:23.997"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:05:24.006" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:24.007" starttime="20160128 01:05:24.004"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:24.010" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:05:24.011" starttime="20160128 01:05:24.008"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run busy MTC *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:24.013" starttime="20160128 01:05:24.012"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:24.016" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160128 01:05:24.016" starttime="20160128 01:05:24.014"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC Busy">
<doc>Runs a busy non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-busy</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:24.048" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:05:24.047" starttime="20160128 01:05:24.045"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:24.052" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:05:24.051" starttime="20160128 01:05:24.049"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:05:24.056" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:05:24.055" starttime="20160128 01:05:24.053"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:05:24.060" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs</msg>
<status status="PASS" endtime="20160128 01:05:24.059" starttime="20160128 01:05:24.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:24.062" starttime="20160128 01:05:24.061"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:24.068" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:24.069" starttime="20160128 01:05:24.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:24.072" starttime="20160128 01:05:24.070"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:05:24.076" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:24.076" starttime="20160128 01:05:24.073"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:24.079" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:24.079" starttime="20160128 01:05:24.077"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:24.080" starttime="20160128 01:05:24.080"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:05:24.082" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:24.083" starttime="20160128 01:05:24.081"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:05:24.086" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:24.086" starttime="20160128 01:05:24.083"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:24.087" starttime="20160128 01:05:24.086"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:05:24.092" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-busy.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-busy-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:31.123" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:31.121" starttime="20160128 01:05:24.088"></status>
</kw>
<msg timestamp="20160128 01:05:31.127" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:31.125" starttime="20160128 01:05:24.033"></status>
</kw>
<msg timestamp="20160128 01:05:31.130" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:31.128" starttime="20160128 01:05:24.019"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:31.133" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:05:31.133" starttime="20160128 01:05:31.131"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:05:31.138" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:31.139" starttime="20160128 01:05:31.135"></status>
</kw>
<doc>Test will make a busy MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:31.140" starttime="20160128 01:05:22.726"></status>
</test>
<doc>Testing the prepaid busy MTC call (called party is busy)

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:31.148" starttime="20160128 01:05:19.275"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:31.163" starttime="20160128 01:05:19.260"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer" id="s1-s1-s1-s3-s3" name="MTC PREPAID-NoAnswer">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-NoAnswer/MTC_PREPAID-NoAnswer-robot-suite.txt" id="s1-s1-s1-s3-s3-s1" name="MTC PREPAID-NoAnswer-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:05:31.410" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:31.413" level="INFO">${date} = Thu Jan 28 01:05:31 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:31.412" starttime="20160128 01:05:31.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:31.415" level="INFO">Date and time: Thu Jan 28 01:05:31 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:31.415" starttime="20160128 01:05:31.414"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:31.417" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:05:31.417" starttime="20160128 01:05:31.416"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:31.440" starttime="20160128 01:05:31.439"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:31.493" starttime="20160128 01:05:31.443"></status>
</kw>
<msg timestamp="20160128 01:05:31.495" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160128 01:05:31.494" starttime="20160128 01:05:31.440"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:31.505" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:31.919" level="INFO">Read output: Last login: Thu Jan 28 00:05:19 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:31.920" starttime="20160128 01:05:31.503"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:31.920" starttime="20160128 01:05:31.496"></status>
</kw>
<msg timestamp="20160128 01:05:31.922" level="INFO">${ssh_connection} = 41</msg>
<status status="PASS" endtime="20160128 01:05:31.921" starttime="20160128 01:05:31.434"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:31.926" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:31.926" starttime="20160128 01:05:31.923"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:31.928" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:05:32.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:32.246" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:32.246" starttime="20160128 01:05:31.927"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.250" starttime="20160128 01:05:32.248"></status>
</kw>
<msg timestamp="20160128 01:05:32.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:32.251" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:32.250" starttime="20160128 01:05:32.247"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.255" starttime="20160128 01:05:32.255"></status>
</kw>
<msg timestamp="20160128 01:05:32.256" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:32.256" starttime="20160128 01:05:32.251"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:05:32.258" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:32.258" starttime="20160128 01:05:32.257"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:32.260" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:32.259" starttime="20160128 01:05:32.258"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.261" starttime="20160128 01:05:32.260"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.266" starttime="20160128 01:05:32.265"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.268" starttime="20160128 01:05:32.267"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:32.275" starttime="20160128 01:05:32.262"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.285" starttime="20160128 01:05:32.282"></status>
</kw>
<msg timestamp="20160128 01:05:32.286" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:32.286" starttime="20160128 01:05:32.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.289" starttime="20160128 01:05:32.287"></status>
</kw>
<msg timestamp="20160128 01:05:32.292" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:05:32.293" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:32.291" starttime="20160128 01:05:31.424"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.341" starttime="20160128 01:05:32.339"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:32.402" starttime="20160128 01:05:32.348"></status>
</kw>
<msg timestamp="20160128 01:05:32.404" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160128 01:05:32.403" starttime="20160128 01:05:32.342"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:32.415" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:32.844" level="INFO">Read output: Last login: Thu Jan 28 00:05:20 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:32.844" starttime="20160128 01:05:32.412"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:32.845" starttime="20160128 01:05:32.405"></status>
</kw>
<msg timestamp="20160128 01:05:32.846" level="INFO">${ssh_connection} = 42</msg>
<status status="PASS" endtime="20160128 01:05:32.846" starttime="20160128 01:05:32.330"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:32.850" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:32.850" starttime="20160128 01:05:32.847"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:32.852" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:05:33.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:33.235" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:33.233" starttime="20160128 01:05:32.851"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.242" starttime="20160128 01:05:33.239"></status>
</kw>
<msg timestamp="20160128 01:05:33.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:33.244" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:33.243" starttime="20160128 01:05:33.236"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.253" starttime="20160128 01:05:33.251"></status>
</kw>
<msg timestamp="20160128 01:05:33.254" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:33.253" starttime="20160128 01:05:33.245"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:05:33.258" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:33.257" starttime="20160128 01:05:33.255"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:33.262" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:33.261" starttime="20160128 01:05:33.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.264" starttime="20160128 01:05:33.263"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.275" starttime="20160128 01:05:33.273"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.281" starttime="20160128 01:05:33.276"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:33.282" starttime="20160128 01:05:33.265"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.292" starttime="20160128 01:05:33.290"></status>
</kw>
<msg timestamp="20160128 01:05:33.293" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:33.293" starttime="20160128 01:05:33.283"></status>
</kw>
<msg timestamp="20160128 01:05:33.296" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:05:33.297" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:33.295" starttime="20160128 01:05:32.307"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.345" starttime="20160128 01:05:33.343"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:33.392" starttime="20160128 01:05:33.352"></status>
</kw>
<msg timestamp="20160128 01:05:33.393" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160128 01:05:33.393" starttime="20160128 01:05:33.346"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:33.399" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:33.814" level="INFO">Read output: Last login: Thu Jan 28 00:05:21 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:33.815" starttime="20160128 01:05:33.397"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:33.815" starttime="20160128 01:05:33.394"></status>
</kw>
<msg timestamp="20160128 01:05:33.816" level="INFO">${ssh_connection} = 43</msg>
<status status="PASS" endtime="20160128 01:05:33.816" starttime="20160128 01:05:33.334"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:33.820" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:33.820" starttime="20160128 01:05:33.817"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:33.822" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:05:33.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:33.997" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:33.997" starttime="20160128 01:05:33.821"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.000" starttime="20160128 01:05:33.999"></status>
</kw>
<msg timestamp="20160128 01:05:34.001" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:34.002" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:34.001" starttime="20160128 01:05:33.998"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.006" starttime="20160128 01:05:34.005"></status>
</kw>
<msg timestamp="20160128 01:05:34.006" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:34.006" starttime="20160128 01:05:34.002"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:34.008" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:34.008" starttime="20160128 01:05:34.007"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:34.010" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:34.010" starttime="20160128 01:05:34.009"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.011" starttime="20160128 01:05:34.010"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.016" starttime="20160128 01:05:34.015"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.019" starttime="20160128 01:05:34.017"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.020" starttime="20160128 01:05:34.012"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.024" starttime="20160128 01:05:34.023"></status>
</kw>
<msg timestamp="20160128 01:05:34.024" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:34.024" starttime="20160128 01:05:34.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.026" starttime="20160128 01:05:34.025"></status>
</kw>
<msg timestamp="20160128 01:05:34.027" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:05:34.027" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:34.027" starttime="20160128 01:05:33.311"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.049" starttime="20160128 01:05:34.049"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.101" starttime="20160128 01:05:34.053"></status>
</kw>
<msg timestamp="20160128 01:05:34.104" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160128 01:05:34.103" starttime="20160128 01:05:34.050"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.114" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:34.515" level="INFO">Read output: Last login: Thu Jan 28 00:05:22 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:34.515" starttime="20160128 01:05:34.111"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.516" starttime="20160128 01:05:34.105"></status>
</kw>
<msg timestamp="20160128 01:05:34.517" level="INFO">${ssh_connection} = 44</msg>
<status status="PASS" endtime="20160128 01:05:34.517" starttime="20160128 01:05:34.044"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:34.521" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:34.521" starttime="20160128 01:05:34.518"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:34.522" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:05:34.599" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:34.601" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:34.600" starttime="20160128 01:05:34.522"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.607" starttime="20160128 01:05:34.604"></status>
</kw>
<msg timestamp="20160128 01:05:34.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:34.609" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:34.608" starttime="20160128 01:05:34.602"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.618" starttime="20160128 01:05:34.616"></status>
</kw>
<msg timestamp="20160128 01:05:34.619" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:34.619" starttime="20160128 01:05:34.610"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:34.623" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:34.622" starttime="20160128 01:05:34.620"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:34.627" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:34.626" starttime="20160128 01:05:34.624"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.629" starttime="20160128 01:05:34.628"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.640" starttime="20160128 01:05:34.638"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.645" starttime="20160128 01:05:34.642"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.646" starttime="20160128 01:05:34.631"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.652" starttime="20160128 01:05:34.651"></status>
</kw>
<msg timestamp="20160128 01:05:34.652" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:34.652" starttime="20160128 01:05:34.647"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.654" starttime="20160128 01:05:34.653"></status>
</kw>
<msg timestamp="20160128 01:05:34.655" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:05:34.655" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:34.654" starttime="20160128 01:05:34.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:34.657" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:34.657" starttime="20160128 01:05:34.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:34.659" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:34.659" starttime="20160128 01:05:34.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:34.660" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:34.661" starttime="20160128 01:05:34.659"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:34.662" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:34.663" starttime="20160128 01:05:34.661"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:05:34.664" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:34.665" starttime="20160128 01:05:34.663"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:05:34.666" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:34.666" starttime="20160128 01:05:34.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:05:34.668" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:34.668" starttime="20160128 01:05:34.667"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:05:34.669" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:34.670" starttime="20160128 01:05:34.668"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.675" starttime="20160128 01:05:34.673"></status>
</kw>
<msg timestamp="20160128 01:05:34.676" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:34.675" starttime="20160128 01:05:34.670"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.678" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:34.678" starttime="20160128 01:05:34.676"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.678" starttime="20160128 01:05:31.404"></status>
</kw>
<test id="s1-s1-s1-s3-s3-s1-t1" name="Run MTC NoAnswer Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.684" starttime="20160128 01:05:34.683"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:05:34.686" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:05:34.685" starttime="20160128 01:05:34.685"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.693" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:05:34.693" starttime="20160128 01:05:34.692"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.694" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:05:34.695" starttime="20160128 01:05:34.693"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.696" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:05:34.696" starttime="20160128 01:05:34.695"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.698" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:05:34.698" starttime="20160128 01:05:34.697"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.699" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:34.700" starttime="20160128 01:05:34.698"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.701" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:05:34.701" starttime="20160128 01:05:34.700"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.703" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:34.703" starttime="20160128 01:05:34.702"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.704" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:05:34.705" starttime="20160128 01:05:34.704"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.706" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:34.706" starttime="20160128 01:05:34.705"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.708" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:05:34.708" starttime="20160128 01:05:34.707"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.714" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:34.715" starttime="20160128 01:05:34.713"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.715" starttime="20160128 01:05:34.712"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.718" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:34.718" starttime="20160128 01:05:34.716"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.718" starttime="20160128 01:05:34.716"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.721" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:34.721" starttime="20160128 01:05:34.720"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.722" starttime="20160128 01:05:34.719"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:34.722" starttime="20160128 01:05:34.709"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:34.724" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:34.724" starttime="20160128 01:05:34.723"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.726" starttime="20160128 01:05:34.725"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.727" starttime="20160128 01:05:34.726"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.729" starttime="20160128 01:05:34.728"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.730" starttime="20160128 01:05:34.729"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.731" starttime="20160128 01:05:34.730"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.733" starttime="20160128 01:05:34.732"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.734" starttime="20160128 01:05:34.733"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.736" starttime="20160128 01:05:34.735"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.737" starttime="20160128 01:05:34.736"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.739" starttime="20160128 01:05:34.738"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.740" starttime="20160128 01:05:34.739"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:34.742" starttime="20160128 01:05:34.740"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:34.743" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:05:35.847" level="INFO">01:05:35,840 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:35.848" starttime="20160128 01:05:34.743"></status>
</kw>
<msg timestamp="20160128 01:05:35.851" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:35.852" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:35.850" starttime="20160128 01:05:34.742"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:35.864" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:35.863" starttime="20160128 01:05:35.861"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:35.868" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:35.867" starttime="20160128 01:05:35.865"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:35.871" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:35.871" starttime="20160128 01:05:35.869"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:35.877" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:35.878" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:35.879" starttime="20160128 01:05:35.874"></status>
</kw>
<msg timestamp="20160128 01:05:35.880" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:35.881" level="INFO">${return_log_entry} = 2016-01-28 01:05:35,840 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:35.880" starttime="20160128 01:05:35.872"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.890" starttime="20160128 01:05:35.888"></status>
</kw>
<msg timestamp="20160128 01:05:35.891" level="INFO">${return_log_entry} = 2016-01-28 01:05:35,840 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:35.891" starttime="20160128 01:05:35.882"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.900" starttime="20160128 01:05:35.898"></status>
</kw>
<msg timestamp="20160128 01:05:35.902" level="INFO">${return_log_entry} = 2016-01-28 01:05:35,840 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:35.901" starttime="20160128 01:05:35.893"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.911" starttime="20160128 01:05:35.909"></status>
</kw>
<msg timestamp="20160128 01:05:35.913" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:35.912" starttime="20160128 01:05:35.903"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.925" starttime="20160128 01:05:35.923"></status>
</kw>
<msg timestamp="20160128 01:05:35.926" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:35.926" starttime="20160128 01:05:35.914"></status>
</kw>
<msg timestamp="20160128 01:05:35.929" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:35.928" starttime="20160128 01:05:35.854"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.939" starttime="20160128 01:05:35.937"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.942" starttime="20160128 01:05:35.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.944" starttime="20160128 01:05:35.943"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:35.953" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:35.953" starttime="20160128 01:05:35.952"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:35.954" starttime="20160128 01:05:35.951"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:35.954" starttime="20160128 01:05:35.945"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:35.955" starttime="20160128 01:05:35.930"></status>
</kw>
<msg timestamp="20160128 01:05:35.956" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:05:35.955" starttime="20160128 01:05:34.687"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:05:35.959" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:05:35.959" starttime="20160128 01:05:35.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:05:35.960" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:35.961" starttime="20160128 01:05:35.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:35.962" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:05:35.962" starttime="20160128 01:05:35.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.963" starttime="20160128 01:05:35.963"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:35.964" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160128 01:05:35.965" starttime="20160128 01:05:35.964"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC NoAnswer">
<doc>Runs a noAnswer non-roaming MTC session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc-noanswer</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:35.979" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:05:35.978" starttime="20160128 01:05:35.977"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:35.980" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:05:35.980" starttime="20160128 01:05:35.979"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:05:35.982" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:05:35.982" starttime="20160128 01:05:35.981"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:05:35.984" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs</msg>
<status status="PASS" endtime="20160128 01:05:35.984" starttime="20160128 01:05:35.983"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.985" starttime="20160128 01:05:35.984"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:35.987" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:35.988" starttime="20160128 01:05:35.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.989" starttime="20160128 01:05:35.988"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:05:35.991" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:35.991" starttime="20160128 01:05:35.989"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:35.994" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:35.994" starttime="20160128 01:05:35.992"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:35.995" starttime="20160128 01:05:35.994"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:05:35.997" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:35.997" starttime="20160128 01:05:35.996"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:05:36.000" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:36.000" starttime="20160128 01:05:35.998"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:36.002" starttime="20160128 01:05:36.001"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:05:36.009" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc-noanswer.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc-noanswer-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:39.525" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:39.522" starttime="20160128 01:05:36.003"></status>
</kw>
<msg timestamp="20160128 01:05:39.528" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:39.527" starttime="20160128 01:05:35.972"></status>
</kw>
<msg timestamp="20160128 01:05:39.531" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:39.530" starttime="20160128 01:05:35.966"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:39.534" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:05:39.535" starttime="20160128 01:05:39.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:05:39.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:39.540" starttime="20160128 01:05:39.537"></status>
</kw>
<doc>Test will make the no answer MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:39.541" starttime="20160128 01:05:34.679"></status>
</test>
<doc>Testing the prepaid the no answer MTC call

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:39.548" starttime="20160128 01:05:31.206"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:39.554" starttime="20160128 01:05:31.173"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration" id="s1-s1-s1-s3-s4" name="MTC PREPAID-ShortDuration">
<suite source="/opt/robot/robotworkspace/robot_testsuites/basic/PrePaid/MTC/MTC_PREPAID-ShortDuration/MTC_PREPAID-ShortDuration-robot-suite.txt" id="s1-s1-s1-s3-s4-s1" name="MTC PREPAID-ShortDuration-robot-suite">
<kw type="setup" name="suite-global-keyword-resource.Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${date} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:05:39.715" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:39.721" level="INFO">${date} = Thu Jan 28 01:05:39 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:39.720" starttime="20160128 01:05:39.711"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${date}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:39.725" level="INFO">Date and time: Thu Jan 28 01:05:39 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:39.726" starttime="20160128 01:05:39.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Target IN machine: ${IN-APP HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:39.729" level="INFO">Target IN machine: 10.105.113.135</msg>
<status status="PASS" endtime="20160128 01:05:39.730" starttime="20160128 01:05:39.727"></status>
</kw>
<kw type="kw" name="${in_rc}, ${in_version} = suite-global-keyword-resource.Get IN Vitality State">
<doc>Checks the state of the IN service</doc>
<arguments>
<arg>${IN-APP HOST}</arg>
<arg>1111</arg>
<arg>${IN-APP USER}</arg>
<arg>${IN-APP PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${IN-APP MOC SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:39.777" starttime="20160128 01:05:39.775"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:39.825" starttime="20160128 01:05:39.785"></status>
</kw>
<msg timestamp="20160128 01:05:39.826" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160128 01:05:39.826" starttime="20160128 01:05:39.778"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:39.831" level="INFO">Logging into '10.105.113.135:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:40.246" level="INFO">Read output: Last login: Thu Jan 28 00:05:31 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@in-app01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:40.246" starttime="20160128 01:05:39.830"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:40.247" starttime="20160128 01:05:39.827"></status>
</kw>
<msg timestamp="20160128 01:05:40.249" level="INFO">${ssh_connection} = 45</msg>
<status status="PASS" endtime="20160128 01:05:40.248" starttime="20160128 01:05:39.766"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:40.253" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:40.253" starttime="20160128 01:05:40.250"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:40.254" level="INFO">Executing command 'sudo service inew-mvna-corein-service-moc-partition-00-3.0.1 status'.</msg>
<msg timestamp="20160128 01:05:40.533" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:40.534" level="INFO">${output} = I-New MVNA TNZ - Core - Service 3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:40.533" starttime="20160128 01:05:40.253"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.537" starttime="20160128 01:05:40.535"></status>
</kw>
<msg timestamp="20160128 01:05:40.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:40.538" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:40.537" starttime="20160128 01:05:40.534"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.542" starttime="20160128 01:05:40.541"></status>
</kw>
<msg timestamp="20160128 01:05:40.543" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:40.542" starttime="20160128 01:05:40.538"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Service</arg>
</arguments>
<msg timestamp="20160128 01:05:40.544" level="INFO">${version_r} =  3.0.1 2015.03.26-15:26:48 is running PID: 24871 </msg>
<status status="PASS" endtime="20160128 01:05:40.544" starttime="20160128 01:05:40.543"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:40.546" level="INFO">${version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:40.546" starttime="20160128 01:05:40.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.547" starttime="20160128 01:05:40.547"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.552" starttime="20160128 01:05:40.551"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.557" starttime="20160128 01:05:40.553"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:40.557" starttime="20160128 01:05:40.548"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.561" starttime="20160128 01:05:40.560"></status>
</kw>
<msg timestamp="20160128 01:05:40.562" level="INFO">${ver} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:40.561" starttime="20160128 01:05:40.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.563" starttime="20160128 01:05:40.562"></status>
</kw>
<msg timestamp="20160128 01:05:40.564" level="INFO">${in_rc} = OK</msg>
<msg timestamp="20160128 01:05:40.565" level="INFO">${in_version} =  3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:40.564" starttime="20160128 01:05:39.744"></status>
</kw>
<kw type="kw" name="${xdr_rc}, ${xdr_version} = suite-global-keyword-resource.Get XDR Vitality State">
<doc>Checks multiple vitality aspects of an XDR instance</doc>
<arguments>
<arg>${XDR HOST}</arg>
<arg>1111</arg>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.587" starttime="20160128 01:05:40.586"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:40.633" starttime="20160128 01:05:40.590"></status>
</kw>
<msg timestamp="20160128 01:05:40.633" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160128 01:05:40.633" starttime="20160128 01:05:40.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:40.638" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:41.053" level="INFO">Read output: Last login: Thu Jan 28 00:05:32 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:41.055" starttime="20160128 01:05:40.637"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:41.056" starttime="20160128 01:05:40.634"></status>
</kw>
<msg timestamp="20160128 01:05:41.058" level="INFO">${ssh_connection} = 46</msg>
<status status="PASS" endtime="20160128 01:05:41.057" starttime="20160128 01:05:40.582"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:41.062" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:41.062" starttime="20160128 01:05:41.059"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:41.064" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:05:41.434" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:41.436" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:41.435" starttime="20160128 01:05:41.063"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.439" starttime="20160128 01:05:41.438"></status>
</kw>
<msg timestamp="20160128 01:05:41.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:41.440" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:41.440" starttime="20160128 01:05:41.436"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.445" starttime="20160128 01:05:41.444"></status>
</kw>
<msg timestamp="20160128 01:05:41.445" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:41.445" starttime="20160128 01:05:41.441"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server</arg>
</arguments>
<msg timestamp="20160128 01:05:41.447" level="INFO">${version_r} =  5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:05:41.447" starttime="20160128 01:05:41.446"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:41.449" level="INFO">${version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:41.449" starttime="20160128 01:05:41.448"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.450" starttime="20160128 01:05:41.449"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.456" starttime="20160128 01:05:41.455"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.458" starttime="20160128 01:05:41.456"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:41.459" starttime="20160128 01:05:41.451"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.464" starttime="20160128 01:05:41.463"></status>
</kw>
<msg timestamp="20160128 01:05:41.465" level="INFO">${ver} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:41.464" starttime="20160128 01:05:41.460"></status>
</kw>
<msg timestamp="20160128 01:05:41.466" level="INFO">${xdr_rc} = OK</msg>
<msg timestamp="20160128 01:05:41.466" level="INFO">${xdr_version} =  5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:41.465" starttime="20160128 01:05:40.571"></status>
</kw>
<kw type="kw" name="${crce_rc}, ${crce_version} = suite-global-keyword-resource.Get CRCE Vitality State">
<doc>Checks the state of the CRCE service</doc>
<arguments>
<arg>${CRCE HOST}</arg>
<arg>1111</arg>
<arg>${CRCE USER}</arg>
<arg>${CRCE PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${CRCE SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.488" starttime="20160128 01:05:41.487"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:41.531" starttime="20160128 01:05:41.491"></status>
</kw>
<msg timestamp="20160128 01:05:41.532" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160128 01:05:41.531" starttime="20160128 01:05:41.489"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:41.536" level="INFO">Logging into '10.105.113.125:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:41.952" level="INFO">Read output: Last login: Thu Jan 28 00:05:33 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@crce01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:41.953" starttime="20160128 01:05:41.535"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:41.953" starttime="20160128 01:05:41.532"></status>
</kw>
<msg timestamp="20160128 01:05:41.954" level="INFO">${ssh_connection} = 47</msg>
<status status="PASS" endtime="20160128 01:05:41.954" starttime="20160128 01:05:41.483"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:41.958" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:41.958" starttime="20160128 01:05:41.955"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:41.960" level="INFO">Executing command 'sudo service inew-mvno-crce status'.</msg>
<msg timestamp="20160128 01:05:42.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:42.140" level="INFO">${output} = I-New MVNO CRCE - Negret Rating &amp; Charging Engine 5.3.16.29968
Negret Rating &amp; Charging Engine 5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:42.139" starttime="20160128 01:05:41.959"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.142" starttime="20160128 01:05:42.141"></status>
</kw>
<msg timestamp="20160128 01:05:42.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:42.143" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:42.143" starttime="20160128 01:05:42.140"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.147" starttime="20160128 01:05:42.147"></status>
</kw>
<msg timestamp="20160128 01:05:42.148" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:42.148" starttime="20160128 01:05:42.144"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:42.150" level="INFO">${version_r} =  5.3.16.29968 is running (PID:21403, Wrapper:STARTED, Java:STARTED)
CRCE is running.</msg>
<status status="PASS" endtime="20160128 01:05:42.149" starttime="20160128 01:05:42.149"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:42.151" level="INFO">${version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:42.151" starttime="20160128 01:05:42.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.153" starttime="20160128 01:05:42.152"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.158" starttime="20160128 01:05:42.157"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.161" starttime="20160128 01:05:42.158"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.161" starttime="20160128 01:05:42.153"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.165" starttime="20160128 01:05:42.164"></status>
</kw>
<msg timestamp="20160128 01:05:42.166" level="INFO">${ver} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:42.166" starttime="20160128 01:05:42.162"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.167" starttime="20160128 01:05:42.166"></status>
</kw>
<msg timestamp="20160128 01:05:42.169" level="INFO">${crce_rc} = OK</msg>
<msg timestamp="20160128 01:05:42.169" level="INFO">${crce_version} =  5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:42.168" starttime="20160128 01:05:41.473"></status>
</kw>
<kw type="kw" name="${ocs_rc}, ${ocs_version} = suite-global-keyword-resource.Get OCS Vitality State">
<doc>Checks the state of the OCS service</doc>
<arguments>
<arg>${OCS HOST}</arg>
<arg>1111</arg>
<arg>${OCS USER}</arg>
<arg>${OCS PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${OCS SERVICE NAME}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${ssh_user}</arg>
<arg>${ssh_pswd}</arg>
<arg>${ssh_rsa_key_file}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.191" starttime="20160128 01:05:42.190"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.232" starttime="20160128 01:05:42.194"></status>
</kw>
<msg timestamp="20160128 01:05:42.233" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160128 01:05:42.233" starttime="20160128 01:05:42.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.238" level="INFO">Logging into '10.105.113.159:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:42.652" level="INFO">Read output: Last login: Thu Jan 28 00:05:34 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@ocs01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:05:42.652" starttime="20160128 01:05:42.237"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.653" starttime="20160128 01:05:42.234"></status>
</kw>
<msg timestamp="20160128 01:05:42.654" level="INFO">${ssh_connection} = 48</msg>
<status status="PASS" endtime="20160128 01:05:42.654" starttime="20160128 01:05:42.186"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'==''</arg>
<arg>Set Variable</arg>
<arg>LOGIN_FAILED</arg>
</arguments>
<msg timestamp="20160128 01:05:42.658" level="INFO">${resultCode} = None</msg>
<status status="PASS" endtime="20160128 01:05:42.657" starttime="20160128 01:05:42.655"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service ${service_name} status</arg>
</arguments>
<msg timestamp="20160128 01:05:42.659" level="INFO">Executing command 'sudo service inew-mvno-ocs status'.</msg>
<msg timestamp="20160128 01:05:42.734" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:42.735" level="INFO">${output} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:42.735" starttime="20160128 01:05:42.658"></status>
</kw>
<kw type="kw" name="${status}, ${rc} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running</arg>
<arg>msg=Service ${service_name} is not running!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.738" starttime="20160128 01:05:42.737"></status>
</kw>
<msg timestamp="20160128 01:05:42.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20160128 01:05:42.739" level="INFO">${rc} = None</msg>
<status status="PASS" endtime="20160128 01:05:42.738" starttime="20160128 01:05:42.736"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${status}'=='PASS'</arg>
<arg>Set Variable</arg>
<arg>OK</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>SERVICE_NOT_RUNNING</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>OK</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.743" starttime="20160128 01:05:42.742"></status>
</kw>
<msg timestamp="20160128 01:05:42.743" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:42.743" starttime="20160128 01:05:42.739"></status>
</kw>
<kw type="kw" name="${version_r} = String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${output}</arg>
<arg>Engine</arg>
</arguments>
<msg timestamp="20160128 01:05:42.745" level="INFO">${version_r} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp is running (PID: 14305)</msg>
<status status="PASS" endtime="20160128 01:05:42.745" starttime="20160128 01:05:42.744"></status>
</kw>
<kw type="kw" name="${version} = String.Fetch From Left">
<doc>Returns contents of the `string` before the first occurrence of `marker`.</doc>
<arguments>
<arg>${version_r}</arg>
<arg>is running</arg>
</arguments>
<msg timestamp="20160128 01:05:42.747" level="INFO">${version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:42.746" starttime="20160128 01:05:42.746"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Log out ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.748" starttime="20160128 01:05:42.747"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.753" starttime="20160128 01:05:42.752"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.756" starttime="20160128 01:05:42.754"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.757" starttime="20160128 01:05:42.749"></status>
</kw>
<kw type="kw" name="${ver} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='OK'</arg>
<arg>Set Variable</arg>
<arg>${version}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${version}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.761" starttime="20160128 01:05:42.760"></status>
</kw>
<msg timestamp="20160128 01:05:42.761" level="INFO">${ver} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:42.761" starttime="20160128 01:05:42.757"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>...</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.763" starttime="20160128 01:05:42.762"></status>
</kw>
<msg timestamp="20160128 01:05:42.764" level="INFO">${ocs_rc} = OK</msg>
<msg timestamp="20160128 01:05:42.764" level="INFO">${ocs_version} = I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:42.764" starttime="20160128 01:05:42.175"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>IN state= ${in_rc} version=${in_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:42.766" level="INFO">IN state= OK version= 3.0.1 2015.03.26-15:26:48 </msg>
<status status="PASS" endtime="20160128 01:05:42.766" starttime="20160128 01:05:42.765"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR state= ${xdr_rc} version=${xdr_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:42.768" level="INFO">XDR state= OK version= 5.3.1.25016 </msg>
<status status="PASS" endtime="20160128 01:05:42.768" starttime="20160128 01:05:42.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>CRCE state= ${crce_rc} version=${crce_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:42.770" level="INFO">CRCE state= OK version= 5.3.16.29968 </msg>
<status status="PASS" endtime="20160128 01:05:42.770" starttime="20160128 01:05:42.769"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>OCS state= ${ocs_rc} version=${ocs_version}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:42.772" level="INFO">OCS state= OK version=I-New MVNO GyApp - Diameter Gy Application 5.3.2.1853
GyApp </msg>
<status status="PASS" endtime="20160128 01:05:42.772" starttime="20160128 01:05:42.770"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${in_rc}</arg>
<arg>OK</arg>
<arg>msg=IN</arg>
</arguments>
<msg timestamp="20160128 01:05:42.773" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:42.774" starttime="20160128 01:05:42.772"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${xdr_rc}</arg>
<arg>OK</arg>
<arg>msg=XDR</arg>
</arguments>
<msg timestamp="20160128 01:05:42.775" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:42.775" starttime="20160128 01:05:42.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${crce_rc}</arg>
<arg>OK</arg>
<arg>msg=CRCE</arg>
</arguments>
<msg timestamp="20160128 01:05:42.777" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:42.777" starttime="20160128 01:05:42.776"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${ocs_rc}</arg>
<arg>OK</arg>
<arg>msg=OCS</arg>
</arguments>
<msg timestamp="20160128 01:05:42.779" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:42.779" starttime="20160128 01:05:42.778"></status>
</kw>
<kw type="kw" name="${temp} = BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'=='MTEL'</arg>
<arg>${ROBOT WORKSPACE PATH}/external_tests/experimental/matko.sanseovic/reroute_changes</arg>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${SUT PROJECT TAG PREFIX}'!=''</arg>
<arg>${CG UNIFIED WS PATH}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.784" starttime="20160128 01:05:42.782"></status>
</kw>
<msg timestamp="20160128 01:05:42.785" level="INFO">${temp} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:42.785" starttime="20160128 01:05:42.779"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${temp}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.787" level="INFO">${CG UNIFIED WS PATH} = /opt/robot/robotworkspace/external_tests/CG_unified_workspace</msg>
<status status="PASS" endtime="20160128 01:05:42.787" starttime="20160128 01:05:42.785"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.788" starttime="20160128 01:05:39.708"></status>
</kw>
<test id="s1-s1-s1-s3-s4-s1-t1" name="Run MTC Short Call">
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Create test subscribers *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.793" starttime="20160128 01:05:42.792"></status>
</kw>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:05:42.795" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:05:42.794" starttime="20160128 01:05:42.794"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.802" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:05:42.802" starttime="20160128 01:05:42.801"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.803" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:05:42.804" starttime="20160128 01:05:42.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.805" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:05:42.805" starttime="20160128 01:05:42.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.806" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:05:42.807" starttime="20160128 01:05:42.806"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.808" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:42.808" starttime="20160128 01:05:42.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.810" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:05:42.810" starttime="20160128 01:05:42.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.811" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:42.812" starttime="20160128 01:05:42.811"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.813" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:05:42.813" starttime="20160128 01:05:42.812"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.815" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:42.815" starttime="20160128 01:05:42.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.816" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:05:42.817" starttime="20160128 01:05:42.815"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.823" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:42.823" starttime="20160128 01:05:42.822"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.824" starttime="20160128 01:05:42.821"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.827" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:42.827" starttime="20160128 01:05:42.826"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.827" starttime="20160128 01:05:42.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.830" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:42.830" starttime="20160128 01:05:42.829"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.831" starttime="20160128 01:05:42.828"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:42.831" starttime="20160128 01:05:42.818"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:42.833" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:42.833" starttime="20160128 01:05:42.832"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.835" starttime="20160128 01:05:42.834"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.836" starttime="20160128 01:05:42.835"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.838" starttime="20160128 01:05:42.837"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.839" starttime="20160128 01:05:42.838"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.840" starttime="20160128 01:05:42.839"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.842" starttime="20160128 01:05:42.841"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.843" starttime="20160128 01:05:42.842"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.844" starttime="20160128 01:05:42.844"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.846" starttime="20160128 01:05:42.845"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.847" starttime="20160128 01:05:42.846"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.849" starttime="20160128 01:05:42.848"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:42.850" starttime="20160128 01:05:42.849"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:42.852" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:05:43.775" level="INFO">01:05:43,769 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:43.777" starttime="20160128 01:05:42.852"></status>
</kw>
<msg timestamp="20160128 01:05:43.780" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:43.780" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:43.778" starttime="20160128 01:05:42.851"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:43.793" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:43.792" starttime="20160128 01:05:43.790"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:43.797" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:43.796" starttime="20160128 01:05:43.794"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:43.800" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:43.799" starttime="20160128 01:05:43.798"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:43.806" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:43.807" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:43.808" starttime="20160128 01:05:43.803"></status>
</kw>
<msg timestamp="20160128 01:05:43.809" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:43.810" level="INFO">${return_log_entry} = 2016-01-28 01:05:43,769 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:43.809" starttime="20160128 01:05:43.801"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.819" starttime="20160128 01:05:43.817"></status>
</kw>
<msg timestamp="20160128 01:05:43.820" level="INFO">${return_log_entry} = 2016-01-28 01:05:43,769 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:43.820" starttime="20160128 01:05:43.811"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.829" starttime="20160128 01:05:43.827"></status>
</kw>
<msg timestamp="20160128 01:05:43.831" level="INFO">${return_log_entry} = 2016-01-28 01:05:43,769 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:43.830" starttime="20160128 01:05:43.822"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.840" starttime="20160128 01:05:43.838"></status>
</kw>
<msg timestamp="20160128 01:05:43.842" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:43.841" starttime="20160128 01:05:43.832"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.854" starttime="20160128 01:05:43.852"></status>
</kw>
<msg timestamp="20160128 01:05:43.855" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:43.855" starttime="20160128 01:05:43.843"></status>
</kw>
<msg timestamp="20160128 01:05:43.858" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:43.857" starttime="20160128 01:05:43.783"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.868" starttime="20160128 01:05:43.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.871" starttime="20160128 01:05:43.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.873" starttime="20160128 01:05:43.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:43.885" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:43.886" starttime="20160128 01:05:43.882"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:43.887" starttime="20160128 01:05:43.880"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:43.887" starttime="20160128 01:05:43.874"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:43.888" starttime="20160128 01:05:43.859"></status>
</kw>
<msg timestamp="20160128 01:05:43.891" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:05:43.890" starttime="20160128 01:05:42.796"></status>
</kw>
<kw type="kw" name="${calling_party_msisdn} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:05:43.897" level="INFO">${calling_party_msisdn} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:05:43.897" starttime="20160128 01:05:43.892"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:05:43.900" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:43.901" starttime="20160128 01:05:43.899"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:43.904" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:05:43.905" starttime="20160128 01:05:43.902"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>******* Run MTC 1s *******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.907" starttime="20160128 01:05:43.906"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Running the short MTC call...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:43.910" level="INFO">Running the short MTC call...</msg>
<status status="PASS" endtime="20160128 01:05:43.910" starttime="20160128 01:05:43.908"></status>
</kw>
<kw type="kw" name="${rc} = cg_support-resource.CG Run MTC 1s">
<doc>Runs a standard (i.e. non-roaming) MTC 1s session</doc>
<arguments>
<arg>${calling_party_msisdn}</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>${MSC ADDRESS}</arg>
<arg>${CALLSGEN HOME}</arg>
<arg>${CALLSGEN JAR NAME}</arg>
<arg>${CG UNIFIED WS PATH}</arg>
<arg>${AMQ-SIG HOST}</arg>
<arg>${AMQ-SIG PORT}</arg>
<arg>${AMQ-SIG MOC REQ QUEUE}</arg>
<arg>${AMQ-SIG MOC RES QUEUE}</arg>
</arguments>
<kw type="kw" name="${rc} = cg_support-resource.CG Run Standard MTC CGS">
<doc>Runs a standard (non-roaming) MTC session (meaning a session that needs only mscAddress and mtcAPartyMsisdn parameters) for the passed cgs file</doc>
<arguments>
<arg>mtc1s</arg>
<arg>${cg_msisdn}</arg>
<arg>${cd_imsi}</arg>
<arg>${cd_msisdn}</arg>
<arg>${msc_address}</arg>
<arg>${callsgen_home}</arg>
<arg>${callsgen_jar_name}</arg>
<arg>${callsgen_unified_workspace_absolute_path}</arg>
<arg>${amq_host}</arg>
<arg>${amq_port}</arg>
<arg>${queue_mtc_req}</arg>
<arg>${queue_mtc_res}</arg>
</arguments>
<kw type="kw" name="${subscribers_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-subscribers.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:43.941" level="INFO">${subscribers_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv</msg>
<status status="PASS" endtime="20160128 01:05:43.940" starttime="20160128 01:05:43.938"></status>
</kw>
<kw type="kw" name="${flexml_csv_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-fleXml.csv</arg>
</arguments>
<msg timestamp="20160128 01:05:43.945" level="INFO">${flexml_csv_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv</msg>
<status status="PASS" endtime="20160128 01:05:43.944" starttime="20160128 01:05:43.942"></status>
</kw>
<kw type="kw" name="${workspace_ini_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/${cgs_filename}-workspace.ini</arg>
</arguments>
<msg timestamp="20160128 01:05:43.948" level="INFO">${workspace_ini_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini</msg>
<status status="PASS" endtime="20160128 01:05:43.948" starttime="20160128 01:05:43.946"></status>
</kw>
<kw type="kw" name="${cgs_absolute_path} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/${cgs_filename}.cgs</arg>
</arguments>
<msg timestamp="20160128 01:05:43.951" level="INFO">${cgs_absolute_path} = /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs</msg>
<status status="PASS" endtime="20160128 01:05:43.951" starttime="20160128 01:05:43.950"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create subscribers.csv ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.952" starttime="20160128 01:05:43.952"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${subscribers_csv_absolute_path}</arg>
<arg>${cd_imsi};${cd_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:43.955" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:43.955" starttime="20160128 01:05:43.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create fleXml ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.956" starttime="20160128 01:05:43.956"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>\#Header: comment;mscAddress;mtcAPartyMsisdn\n</arg>
</arguments>
<msg timestamp="20160128 01:05:43.958" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:43.959" starttime="20160128 01:05:43.957"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${flexml_csv_absolute_path}</arg>
<arg>${cgs_filename} parameters;${msc_address};${cg_msisdn}\n</arg>
</arguments>
<msg timestamp="20160128 01:05:43.961" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:43.962" starttime="20160128 01:05:43.959"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** create workspace.ini ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.963" starttime="20160128 01:05:43.962"></status>
</kw>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>${WORKSPACE_INI_DEFAULTS}</arg>
</arguments>
<msg timestamp="20160128 01:05:43.965" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:43.965" starttime="20160128 01:05:43.963"></status>
</kw>
<kw type="kw" name="OperatingSystem.Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${workspace_ini_absolute_path}</arg>
<arg>\ninAMQHost=${amq_host} \ninAMQPort=${amq_port} \ninQueuePair1=true;CAP2_MTC;${queue_mtc_req};${queue_mtc_res};6;1;1</arg>
</arguments>
<msg timestamp="20160128 01:05:43.968" html="yes" level="INFO">Appended to file '&lt;a href="file:///opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini"&gt;/opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:43.968" starttime="20160128 01:05:43.965"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>****** Exec CG ******</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:43.969" starttime="20160128 01:05:43.968"></status>
</kw>
<kw type="kw" name="${rc} = OperatingSystem.Run And Return Rc">
<doc>Runs the given command in the system and returns the return code.</doc>
<arguments>
<arg>cd ${callsgen_home};java -jar ${callsgen_jar_name} ${cgs_absolute_path} ${callsgen_unified_workspace_absolute_path} -i ${workspace_ini_absolute_path} -s ${subscribers_csv_absolute_path} -f ${flexml_csv_absolute_path}</arg>
</arguments>
<msg timestamp="20160128 01:05:43.976" level="INFO">Running command 'cd /opt/callsGenerator;java -jar callsgen-6.1.0.jar /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/mtc1s.cgs /opt/robot/robotworkspace/external_tests/CG_unified_workspace -i /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-workspace.ini -s /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-subscribers.csv -f /opt/robot/robotworkspace/libs/global-keyword-resources/cg-support/tmp/mtc1s-fleXml.csv 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:48.126" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:48.125" starttime="20160128 01:05:43.970"></status>
</kw>
<msg timestamp="20160128 01:05:48.128" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:48.127" starttime="20160128 01:05:43.926"></status>
</kw>
<msg timestamp="20160128 01:05:48.129" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:48.128" starttime="20160128 01:05:43.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>...do the checks...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:48.130" level="INFO">...do the checks...</msg>
<status status="PASS" endtime="20160128 01:05:48.131" starttime="20160128 01:05:48.129"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Numbers">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
<arg>msg=CG Session ended with rc ${rc}</arg>
</arguments>
<msg timestamp="20160128 01:05:48.132" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:48.133" starttime="20160128 01:05:48.131"></status>
</kw>
<doc>Test will make a short MTC call

Arguments:
none
Returns:
none
Fails: in case CG session fails or account balance evaluation fails

=================================================================================</doc>
<tags>
<tag>calls</tag>
<tag>matko.sanseovic</tag>
<tag>MTC_only</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:48.133" starttime="20160128 01:05:42.789"></status>
</test>
<doc>Testing the prepaid MTC call, duration is 1s

============================================================</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:48.137" starttime="20160128 01:05:39.574"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:48.144" starttime="20160128 01:05:39.559"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:48.156" starttime="20160128 01:05:01.583"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:48.191" starttime="20160128 01:00:53.838"></status>
</suite>
<doc>This robot framework initialization file is used to globaly assign tags to
all test suites located in or below the current folder
For a complete list of tags allowed for folder assignement
see &lt;workspace root&gt;/tagging-rules.txt</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:05:48.248" starttime="20160128 01:00:53.812"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd" id="s1-s2" name="Ussd">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ" id="s1-s2-s1" name="TNZ">
<suite source="/opt/robot/robotworkspace/robot_testsuites/ussd/TNZ/ussd-robot-suite.txt" id="s1-s2-s1-s1" name="Ussd-Robot-Suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:05:48.469" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:05:48.475" level="INFO">${time} = Thu Jan 28 01:05:48 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:48.474" starttime="20160128 01:05:48.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:48.476" level="INFO">Date and time: Thu Jan 28 01:05:48 CET 2016</msg>
<status status="PASS" endtime="20160128 01:05:48.477" starttime="20160128 01:05:48.475"></status>
</kw>
<kw type="kw" name="${conn_id} = SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${USSD HOST}</arg>
</arguments>
<msg timestamp="20160128 01:05:48.532" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160128 01:05:48.531" starttime="20160128 01:05:48.477"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${conn_id}</arg>
</arguments>
<msg timestamp="20160128 01:05:48.538" level="INFO">${conn_id} = 49</msg>
<status status="PASS" endtime="20160128 01:05:48.539" starttime="20160128 01:05:48.535"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${USSD USER}</arg>
<arg>${USSD PWD}</arg>
</arguments>
<msg timestamp="20160128 01:05:48.543" level="INFO">Logging into '10.105.113.167:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:05:49.751" level="INFO">Read output: Last login: Wed Jan 27 02:42:10 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m</msg>
<msg timestamp="20160128 01:05:49.754" level="INFO">${output_login} = Last login: Wed Jan 27 02:42:10 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:05:49.753" starttime="20160128 01:05:48.541"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.759" level="INFO">Last login: Wed Jan 27 02:42:10 2016 from 10.105.101.196
[1m[qa_automation@ussd-app01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:05:49.760" starttime="20160128 01:05:49.757"></status>
</kw>
<kw type="kw" name="SSHLibrary.Put File">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/robot_testsuites/ussd/tool/USSDtest.py</arg>
<arg>${USSD HOME}/ussd/</arg>
</arguments>
<msg timestamp="20160128 01:05:49.813" level="INFO">'/opt/robot/robotworkspace/robot_testsuites/ussd/tool/USSDtest.py' -&gt; '/home/qa_automation//ussd//USSDtest.py'</msg>
<status status="PASS" endtime="20160128 01:05:49.814" starttime="20160128 01:05:49.763"></status>
</kw>
<kw type="kw" name="SSHLibrary.File Should Exist">
<doc>Fails if the given `path` does NOT point to an existing file.</doc>
<arguments>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.817" starttime="20160128 01:05:49.815"></status>
</kw>
<kw type="kw" name="BuiltIn.Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ussd_tool}</arg>
<arg>${USSD HOME}ussd/USSDtest.py</arg>
</arguments>
<msg timestamp="20160128 01:05:49.827" level="INFO">${ussd_tool} = /home/qa_automation/ussd/USSDtest.py</msg>
<status status="PASS" endtime="20160128 01:05:49.828" starttime="20160128 01:05:49.818"></status>
</kw>
<kw type="kw" name="Create Subscriber">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${INITIAL_BALANCE} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10000000</arg>
</arguments>
<msg timestamp="20160128 01:05:49.834" level="INFO">${INITIAL_BALANCE} = 10000000</msg>
<status status="PASS" endtime="20160128 01:05:49.833" starttime="20160128 01:05:49.832"></status>
</kw>
<kw type="kw" name="${return_code} = subscriber-admin-support-resource.CRCE Create Test Subscribers">
<doc>Provisions one or multiple test subscribers on CRCE only.</doc>
<arguments>
<arg>${CRCE01 HOST}</arg>
<arg>${CRCE01 WEBSERVICES PORT}</arg>
<arg>${CRCE01 WEBSERVICES BASE PATH}</arg>
<arg>2</arg>
<arg>${TESTSUBCRIBERS IMSI RANGE START}</arg>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}</arg>
<arg>PREPAID</arg>
<arg>${TESTSUBCRIBERS DEFAULT LANGUAGEID}</arg>
<arg>${TESTSUBCRIBERS DEFAULT TARIFFID}</arg>
<arg>${INITIAL_BALANCE}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_host=${crce_host}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.844" level="INFO">msg=crce_host=10.105.113.125</msg>
<status status="PASS" endtime="20160128 01:05:49.844" starttime="20160128 01:05:49.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_port=${crce_port}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.846" level="INFO">msg=crce_port=8080</msg>
<status status="PASS" endtime="20160128 01:05:49.847" starttime="20160128 01:05:49.845"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=crce_webservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.849" level="INFO">msg=crce_webservicesBasePath=/inew-mvno-crce-webservices/</msg>
<status status="PASS" endtime="20160128 01:05:49.849" starttime="20160128 01:05:49.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=amount=${amount}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.851" level="INFO">msg=amount=2</msg>
<status status="PASS" endtime="20160128 01:05:49.851" starttime="20160128 01:05:49.850"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.853" level="INFO">msg=imsiRangeStart=530052041010000</msg>
<status status="PASS" endtime="20160128 01:05:49.854" starttime="20160128 01:05:49.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.855" level="INFO">msg=msisdnRangeStart=642041010000</msg>
<status status="PASS" endtime="20160128 01:05:49.856" starttime="20160128 01:05:49.854"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=type=${type}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.858" level="INFO">msg=type=PREPAID</msg>
<status status="PASS" endtime="20160128 01:05:49.858" starttime="20160128 01:05:49.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=languageid=${languageid}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.860" level="INFO">msg=languageid=1</msg>
<status status="PASS" endtime="20160128 01:05:49.860" starttime="20160128 01:05:49.859"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=tariffId=${tariffId}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.862" level="INFO">msg=tariffId=101001</msg>
<status status="PASS" endtime="20160128 01:05:49.863" starttime="20160128 01:05:49.861"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>msg=balance=${balance}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.864" level="INFO">msg=balance=10000000</msg>
<status status="PASS" endtime="20160128 01:05:49.865" starttime="20160128 01:05:49.863"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Setup SoapUI Logs">
<doc>This is a PRIVATE helper function to setup the SoapUI's basic log files since for unknown reasons SoapUI sometimes doesn't newly create them</doc>
<arguments>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.874" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:49.875" starttime="20160128 01:05:49.873"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:49.875" starttime="20160128 01:05:49.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.878" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:49.878" starttime="20160128 01:05:49.877"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:49.879" starttime="20160128 01:05:49.876"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Create File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.882" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/soapui-errors.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:05:49.882" starttime="20160128 01:05:49.880"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:49.882" starttime="20160128 01:05:49.879"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:49.883" starttime="20160128 01:05:49.866"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Project">
<doc>Initialize the runner and set the project string </doc>
<arguments>
<arg>${ROBOT WORKSPACE PATH}/${SOAPUI PROJECTS WORKSPACE RELATIVE PATH}</arg>
</arguments>
<msg timestamp="20160128 01:05:49.885" level="INFO">SoapUI 5.1.3 TestCase Runner</msg>
<status status="PASS" endtime="20160128 01:05:49.885" starttime="20160128 01:05:49.884"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceHost=${crce_host}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.887" starttime="20160128 01:05:49.886"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crcePort=${crce_port}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.889" starttime="20160128 01:05:49.888"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>crceWebservicesBasePath=${crce_webservicesBasePath}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.890" starttime="20160128 01:05:49.889"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Suite">
<doc>Set the suite string </doc>
<arguments>
<arg>HighLevelOps</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.892" starttime="20160128 01:05:49.891"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Case">
<doc>Set the test case string </doc>
<arguments>
<arg>createTestSubscribers</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.893" starttime="20160128 01:05:49.892"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.amount=${amount}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.895" starttime="20160128 01:05:49.894"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.imsiRangeStart=${imsiRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.896" starttime="20160128 01:05:49.895"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.msisdnRangeStart=${msisdnRangeStart}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.898" starttime="20160128 01:05:49.897"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.type=${type}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.900" starttime="20160128 01:05:49.899"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.languageid=${languageid}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.902" starttime="20160128 01:05:49.900"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.tariffId=${tariffId}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.903" starttime="20160128 01:05:49.902"></status>
</kw>
<kw type="kw" name="InewSoapUILibrary.Soapui Set Project Property">
<doc>Sets project properties for the current test run.</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.input.balance=${balance}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:49.905" starttime="20160128 01:05:49.904"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_value_dummy} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>SoapUI Run</arg>
</arguments>
<kw type="kw" name="InewSoapUILibrary.Soapui Run">
<doc>Run the runner and report to Robot </doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:05:49.907" level="INFO">Running with the following project properties set: [u'crceHost=10.105.113.125', u'crcePort=8080', u'crceWebservicesBasePath=/inew-mvno-crce-webservices/', u'HighLevelOps.createTestSubscribers.input.amount=2', u'HighLevelOps.createTestSubscribers.input.imsiRangeStart=530052041010000', u'HighLevelOps.createTestSubscribers.input.msisdnRangeStart=642041010000', u'HighLevelOps.createTestSubscribers.input.type=PREPAID', u'HighLevelOps.createTestSubscribers.input.languageid=1', u'HighLevelOps.createTestSubscribers.input.tariffId=101001', u'HighLevelOps.createTestSubscribers.input.balance=10000000']</msg>
<msg timestamp="20160128 01:05:51.017" level="INFO">01:05:51,010 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:51.018" starttime="20160128 01:05:49.906"></status>
</kw>
<msg timestamp="20160128 01:05:51.022" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:51.022" level="INFO">${return_value_dummy} = None</msg>
<status status="PASS" endtime="20160128 01:05:51.020" starttime="20160128 01:05:49.905"></status>
</kw>
<kw type="kw" name="${resultCode} = subscriber-admin-support-resource.CRCE Get Groovy Log Return Property">
<doc>This is a PRIVATE helper function to retrieve return values placed into the Groovy log by the SoaupUI TCs .</doc>
<arguments>
<arg>HighLevelOps.createTestSubscribers.output.resultCode</arg>
<arg>UNKNOWN_ERROR</arg>
</arguments>
<kw type="kw" name="${return_marker} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${property_name}=</arg>
</arguments>
<msg timestamp="20160128 01:05:51.035" level="INFO">${return_marker} = HighLevelOps.createTestSubscribers.output.resultCode=</msg>
<status status="PASS" endtime="20160128 01:05:51.035" starttime="20160128 01:05:51.032"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:51.040" level="INFO">${resultCode} = </msg>
<status status="PASS" endtime="20160128 01:05:51.039" starttime="20160128 01:05:51.037"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<msg timestamp="20160128 01:05:51.044" level="INFO">${return_log_entry} = </msg>
<status status="PASS" endtime="20160128 01:05:51.043" starttime="20160128 01:05:51.041"></status>
</kw>
<kw type="kw" name="${execution_status}, ${return_log_entry} = BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Grep File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Grep File">
<doc>Returns the lines of the specified file that match the `pattern`.</doc>
<arguments>
<arg>${SOAPUI GROOVY LOG}</arg>
<arg>${return_marker}</arg>
</arguments>
<msg timestamp="20160128 01:05:51.050" html="yes" level="INFO">Reading file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/global-groovy.log&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:05:51.051" level="INFO">1 out of 1 lines matched</msg>
<status status="PASS" endtime="20160128 01:05:51.052" starttime="20160128 01:05:51.047"></status>
</kw>
<msg timestamp="20160128 01:05:51.054" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20160128 01:05:51.054" level="INFO">${return_log_entry} = 2016-01-28 01:05:51,010 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:51.053" starttime="20160128 01:05:51.045"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${execution_status}'=='FAIL'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.064" starttime="20160128 01:05:51.062"></status>
</kw>
<msg timestamp="20160128 01:05:51.066" level="INFO">${return_log_entry} = 2016-01-28 01:05:51,010 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:51.065" starttime="20160128 01:05:51.056"></status>
</kw>
<kw type="kw" name="${return_log_entry} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${EMPTY}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${return_log_entry}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${return_log_entry}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.076" starttime="20160128 01:05:51.073"></status>
</kw>
<msg timestamp="20160128 01:05:51.078" level="INFO">${return_log_entry} = 2016-01-28 01:05:51,010 INFO  [log] HighLevelOps.createTestSubscribers.output.resultCode=OK</msg>
<status status="PASS" endtime="20160128 01:05:51.077" starttime="20160128 01:05:51.067"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${return_log_entry}'!='${EMPTY}'</arg>
<arg>Fetch From Right</arg>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="String.Fetch From Right">
<doc>Returns contents of the `string` after the last occurrence of `marker`.</doc>
<arguments>
<arg>${return_log_entry}</arg>
<arg>${return_marker}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.087" starttime="20160128 01:05:51.085"></status>
</kw>
<msg timestamp="20160128 01:05:51.089" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:51.089" starttime="20160128 01:05:51.079"></status>
</kw>
<kw type="kw" name="${resultCode} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${resultCode}'=='${NONE}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE IF</arg>
<arg>'${resultCode}'=='${EMPTY}'</arg>
<arg>Set Variable</arg>
<arg>${default_value}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${resultCode}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resultCode}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.102" starttime="20160128 01:05:51.100"></status>
</kw>
<msg timestamp="20160128 01:05:51.104" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:51.103" starttime="20160128 01:05:51.091"></status>
</kw>
<msg timestamp="20160128 01:05:51.107" level="INFO">${resultCode} = OK</msg>
<status status="PASS" endtime="20160128 01:05:51.106" starttime="20160128 01:05:51.025"></status>
</kw>
<kw type="kw" name="subscriber-admin-support-resource.CRCE Cleanup SoapUI Logs">
<doc>This is a PRIVATE helper function to cleanup the testsuite directory from logs created by a SoapUI testcase.</doc>
<arguments>
<arg>HighLevelOps-CreateTestSubscribers</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI GROOVY LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.118" starttime="20160128 01:05:51.117"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.121" starttime="20160128 01:05:51.120"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${SOAPUI ERROR LOG}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:51.124" starttime="20160128 01:05:51.123"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${tc_specific_files_prefix}'!='${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Remove File</arg>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Remove File">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${tc_specific_files_prefix}*.*</arg>
</arguments>
<msg timestamp="20160128 01:05:51.137" html="yes" level="INFO">File '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/HighLevelOps-CreateTestSubscribers*.*&lt;/a&gt;' does not exist</msg>
<status status="PASS" endtime="20160128 01:05:51.138" starttime="20160128 01:05:51.134"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:51.139" starttime="20160128 01:05:51.132"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:51.140" starttime="20160128 01:05:51.126"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:51.141" starttime="20160128 01:05:51.109"></status>
</kw>
<msg timestamp="20160128 01:05:51.144" level="INFO">${return_code} = OK</msg>
<status status="PASS" endtime="20160128 01:05:51.143" starttime="20160128 01:05:49.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${return_code}</arg>
<arg>OK</arg>
</arguments>
<msg timestamp="20160128 01:05:51.147" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:05:51.148" starttime="20160128 01:05:51.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Test Subscribers Created!</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:51.151" level="INFO">Test Subscribers Created!</msg>
<status status="PASS" endtime="20160128 01:05:51.152" starttime="20160128 01:05:51.149"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:51.153" starttime="20160128 01:05:49.828"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:51.155" starttime="20160128 01:05:48.463"></status>
</kw>
<test id="s1-s2-s1-s1-t1" name="Test USSD Start">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:05:51.193" level="INFO">/home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000</msg>
<status status="PASS" endtime="20160128 01:05:51.194" starttime="20160128 01:05:51.183"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:51.796" level="INFO">=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:05:51.808" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160128 01:05:51.797" starttime="20160128 01:05:51.195"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:05:51.810" level="INFO">USSD Start: =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:51.810" starttime="20160128 01:05:51.809"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:05:53.813" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:05:53.815" starttime="20160128 01:05:51.811"></status>
</kw>
<msg timestamp="20160128 01:05:53.819" level="INFO">${output} = =====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
Us...</msg>
<status status="PASS" endtime="20160128 01:05:53.818" starttime="20160128 01:05:51.177"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the number of what you would like to do</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.823" starttime="20160128 01:05:53.821"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.837" starttime="20160128 01:05:53.834"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:05:53.839" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:05:53.874" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:53.876" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:05:53.875" starttime="20160128 01:05:53.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.879" starttime="20160128 01:05:53.877"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.882" starttime="20160128 01:05:53.880"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.885" starttime="20160128 01:05:53.883"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:05:53.889" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:05:53.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:53.951" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:05:53.951" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:53.950" starttime="20160128 01:05:53.886"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.960" starttime="20160128 01:05:53.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.963" starttime="20160128 01:05:53.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.966" starttime="20160128 01:05:53.964"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.969" starttime="20160128 01:05:53.967"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.972" starttime="20160128 01:05:53.970"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.975" starttime="20160128 01:05:53.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.978" starttime="20160128 01:05:53.976"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.981" starttime="20160128 01:05:53.979"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.983" starttime="20160128 01:05:53.982"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.986" starttime="20160128 01:05:53.984"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:53.989" starttime="20160128 01:05:53.987"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:53.990" starttime="20160128 01:05:53.827"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:53.991" starttime="20160128 01:05:51.169"></status>
</test>
<test id="s1-s2-s1-s1-t2" name="Test USSD TopUp via CreditCard">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:05:54.012" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:05:54.012" starttime="20160128 01:05:54.008"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:54.791" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:05:54.792" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:05:54.791" starttime="20160128 01:05:54.014"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:05:54.793" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:54.794" starttime="20160128 01:05:54.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:05:56.796" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:05:56.798" starttime="20160128 01:05:54.794"></status>
</kw>
<msg timestamp="20160128 01:05:56.802" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:05:56.800" starttime="20160128 01:05:54.001"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for Top-Up</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:56.805" level="INFO">Pressing 1 for Top-Up</msg>
<status status="PASS" endtime="20160128 01:05:56.806" starttime="20160128 01:05:56.803"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:05:56.813" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:05:56.813" starttime="20160128 01:05:56.807"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:56.832" level="INFO">=====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:05:56.833" level="INFO">${output} = =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:56.833" starttime="20160128 01:05:56.814"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 1: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:05:56.836" level="INFO">TopUp 1: =====================
How would you like to top up?
1. Voucher
2. Credit / debit card
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:56.837" starttime="20160128 01:05:56.835"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for Top-Up with Credit Card</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:56.840" level="INFO">Pressing 2 for Top-Up with Credit Card</msg>
<status status="PASS" endtime="20160128 01:05:56.841" starttime="20160128 01:05:56.838"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:05:56.847" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:05:56.847" starttime="20160128 01:05:56.842"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:56.895" level="INFO">=====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:05:56.897" level="INFO">${output} = =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # ...</msg>
<status status="PASS" endtime="20160128 01:05:56.896" starttime="20160128 01:05:56.849"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>TopUp 2: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:05:56.900" level="INFO">TopUp 2: =====================
Sorry, you must have a registered credit or debit card to use this service.
Jump online at skinny.co.nz to get set up, or call us on 204 &amp; select top up.
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:56.901" starttime="20160128 01:05:56.898"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Sorry, you must have a registered credit or debit card</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:56.904" starttime="20160128 01:05:56.902"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:56.915" starttime="20160128 01:05:56.913"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:05:56.918" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:05:56.950" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:56.952" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:05:56.951" starttime="20160128 01:05:56.916"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:56.955" starttime="20160128 01:05:56.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:56.958" starttime="20160128 01:05:56.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:56.960" starttime="20160128 01:05:56.959"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:05:56.964" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:05:57.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:57.029" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:05:57.030" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:57.027" starttime="20160128 01:05:56.962"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.037" starttime="20160128 01:05:57.031"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.040" starttime="20160128 01:05:57.038"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.043" starttime="20160128 01:05:57.041"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.046" starttime="20160128 01:05:57.044"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.048" starttime="20160128 01:05:57.047"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.051" starttime="20160128 01:05:57.049"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.054" starttime="20160128 01:05:57.052"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.057" starttime="20160128 01:05:57.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.060" starttime="20160128 01:05:57.058"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.063" starttime="20160128 01:05:57.061"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:57.066" starttime="20160128 01:05:57.064"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:57.067" starttime="20160128 01:05:56.906"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:57.069" starttime="20160128 01:05:53.993"></status>
</test>
<test id="s1-s2-s1-s1-t3" name="Test USSD Check Balance">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:05:57.090" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:05:57.091" starttime="20160128 01:05:57.086"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:57.641" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:05:57.642" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:05:57.641" starttime="20160128 01:05:57.093"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:05:57.644" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:05:57.644" starttime="20160128 01:05:57.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:05:59.646" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:05:59.647" starttime="20160128 01:05:57.645"></status>
</kw>
<msg timestamp="20160128 01:05:59.652" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:05:59.650" starttime="20160128 01:05:57.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for checking balance</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:05:59.655" level="INFO">Pressing 2 for checking balance</msg>
<status status="PASS" endtime="20160128 01:05:59.656" starttime="20160128 01:05:59.653"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:05:59.663" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:05:59.663" starttime="20160128 01:05:59.657"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:05:59.786" level="INFO">=====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User input:</msg>
<msg timestamp="20160128 01:05:59.789" level="INFO">${output} = =====================
Your balance is $100.00 and you've collected 0.00 bonus points.
You're on our standard rates - to save even more jump on line at skinny.co.nz. 
=====================
User inp...</msg>
<status status="PASS" endtime="20160128 01:05:59.788" starttime="20160128 01:05:59.665"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Your balance is $100.00</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.792" starttime="20160128 01:05:59.790"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.803" starttime="20160128 01:05:59.801"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:05:59.806" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:05:59.838" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:59.841" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:05:59.840" starttime="20160128 01:05:59.804"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.843" starttime="20160128 01:05:59.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.844" starttime="20160128 01:05:59.843"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.845" starttime="20160128 01:05:59.844"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:05:59.847" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:05:59.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:05:59.912" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:05:59.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:05:59.912" starttime="20160128 01:05:59.846"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.916" starttime="20160128 01:05:59.913"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.918" starttime="20160128 01:05:59.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.919" starttime="20160128 01:05:59.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.920" starttime="20160128 01:05:59.919"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.921" starttime="20160128 01:05:59.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.923" starttime="20160128 01:05:59.922"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.924" starttime="20160128 01:05:59.923"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.925" starttime="20160128 01:05:59.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.926" starttime="20160128 01:05:59.926"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.928" starttime="20160128 01:05:59.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:05:59.929" starttime="20160128 01:05:59.928"></status>
</kw>
<status status="PASS" endtime="20160128 01:05:59.929" starttime="20160128 01:05:59.794"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:05:59.930" starttime="20160128 01:05:57.071"></status>
</test>
<test id="s1-s2-s1-s1-t4" name="Test USSD Subscription Check">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:05:59.939" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:05:59.939" starttime="20160128 01:05:59.937"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:00.533" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:06:00.535" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:00.534" starttime="20160128 01:05:59.940"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:06:00.537" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:00.537" starttime="20160128 01:06:00.536"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:06:02.540" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:06:02.544" starttime="20160128 01:06:00.538"></status>
</kw>
<msg timestamp="20160128 01:06:02.551" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:02.549" starttime="20160128 01:05:59.934"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for setup check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:02.555" level="INFO">Pressing 3 for setup check</msg>
<status status="PASS" endtime="20160128 01:06:02.556" starttime="20160128 01:06:02.552"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160128 01:06:02.563" level="INFO">3</msg>
<status status="PASS" endtime="20160128 01:06:02.565" starttime="20160128 01:06:02.557"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:02.582" level="INFO">=====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:02.583" level="INFO">${output} = =====================
What would you like to view?
1. Subscription Check
2. Your auto top up
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:02.583" starttime="20160128 01:06:02.566"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:02.586" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160128 01:06:02.587" starttime="20160128 01:06:02.585"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:06:02.593" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:06:02.594" starttime="20160128 01:06:02.588"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:02.658" level="INFO">=====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:02.660" level="INFO">${output} = =====================
You are on standard rates.
1. Buy Plan
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:02.659" starttime="20160128 01:06:02.595"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You are on standard rates.</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.664" starttime="20160128 01:06:02.661"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.677" starttime="20160128 01:06:02.674"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:02.679" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:02.716" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:02.717" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:02.717" starttime="20160128 01:06:02.678"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.720" starttime="20160128 01:06:02.719"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.724" starttime="20160128 01:06:02.722"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.726" starttime="20160128 01:06:02.725"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:02.730" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:06:02.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:02.794" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:02.795" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:02.794" starttime="20160128 01:06:02.728"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.804" starttime="20160128 01:06:02.796"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.806" starttime="20160128 01:06:02.805"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.809" starttime="20160128 01:06:02.807"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.812" starttime="20160128 01:06:02.810"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.815" starttime="20160128 01:06:02.813"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.817" starttime="20160128 01:06:02.816"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.820" starttime="20160128 01:06:02.818"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.823" starttime="20160128 01:06:02.821"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.826" starttime="20160128 01:06:02.824"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.829" starttime="20160128 01:06:02.827"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:02.832" starttime="20160128 01:06:02.830"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:02.833" starttime="20160128 01:06:02.666"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:02.834" starttime="20160128 01:05:59.931"></status>
</test>
<test id="s1-s2-s1-s1-t5" name="Test Buying">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:06:02.855" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:06:02.856" starttime="20160128 01:06:02.852"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:03.403" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:06:03.405" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:03.404" starttime="20160128 01:06:02.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:06:03.407" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:03.407" starttime="20160128 01:06:03.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:06:05.409" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:06:05.411" starttime="20160128 01:06:03.408"></status>
</kw>
<msg timestamp="20160128 01:06:05.415" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:05.414" starttime="20160128 01:06:02.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 4 for buying menu</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:05.418" level="INFO">Pressing 4 for buying menu</msg>
<status status="PASS" endtime="20160128 01:06:05.419" starttime="20160128 01:06:05.417"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20160128 01:06:05.427" level="INFO">4</msg>
<status status="PASS" endtime="20160128 01:06:05.427" starttime="20160128 01:06:05.420"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:05.620" level="INFO">=====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:05.621" level="INFO">${output} = =====================
You are on Standard rates. What would you like to do?
1. Add Combo
2. Buy an Add-On
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:05.620" starttime="20160128 01:06:05.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for subscription check</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:05.622" level="INFO">Pressing 1 for subscription check</msg>
<status status="PASS" endtime="20160128 01:06:05.623" starttime="20160128 01:06:05.622"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:06:05.628" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:06:05.628" starttime="20160128 01:06:05.624"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:05.757" level="INFO">=====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:05.759" level="INFO">${output} = =====================
Enter the Combo number you want to buy, then press reply
1. $4 Busy Fingers
2. $5 Data Weekly
0. Next Page
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:05.758" starttime="20160128 01:06:05.629"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Enter the Combo number</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.760" starttime="20160128 01:06:05.759"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 2 for buying Weekly Combo offer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:05.762" level="INFO">Pressing 2 for buying Weekly Combo offer</msg>
<status status="PASS" endtime="20160128 01:06:05.762" starttime="20160128 01:06:05.761"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>2</arg>
</arguments>
<msg timestamp="20160128 01:06:05.767" level="INFO">2</msg>
<status status="PASS" endtime="20160128 01:06:05.767" starttime="20160128 01:06:05.762"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:05.791" level="INFO">=====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:05.792" level="INFO">${output} = =====================
You have selected the Data Weekly Combo which costs $5.
Please select:
1. To confirm your purchase
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:05.792" starttime="20160128 01:06:05.767"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>You have selected the Data Weekly Combo which costs $5.</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.793" starttime="20160128 01:06:05.793"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:05.795" level="INFO">Pressing 1 for confirmation</msg>
<status status="PASS" endtime="20160128 01:06:05.795" starttime="20160128 01:06:05.794"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:06:05.800" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:06:05.801" starttime="20160128 01:06:05.796"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:05.909" level="INFO">=====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:05.910" level="INFO">${output} = =====================
Great, you've bought this Combo successfully. Please select:
0. Main Menu
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:05.910" starttime="20160128 01:06:05.802"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Great, you've bought this Combo successfully</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.912" starttime="20160128 01:06:05.911"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.917" starttime="20160128 01:06:05.916"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:05.918" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:05.949" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:05.951" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:05.951" starttime="20160128 01:06:05.917"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.954" starttime="20160128 01:06:05.953"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.957" starttime="20160128 01:06:05.955"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:05.960" starttime="20160128 01:06:05.958"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:05.964" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:06:06.023" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:06.026" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:06.026" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:06.024" starttime="20160128 01:06:05.961"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.033" starttime="20160128 01:06:06.027"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.036" starttime="20160128 01:06:06.034"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.039" starttime="20160128 01:06:06.037"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.041" starttime="20160128 01:06:06.040"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.044" starttime="20160128 01:06:06.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.047" starttime="20160128 01:06:06.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.050" starttime="20160128 01:06:06.048"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.053" starttime="20160128 01:06:06.051"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.056" starttime="20160128 01:06:06.054"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.059" starttime="20160128 01:06:06.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:06.061" starttime="20160128 01:06:06.060"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:06.062" starttime="20160128 01:06:05.913"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:06.064" starttime="20160128 01:06:02.836"></status>
</test>
<test id="s1-s2-s1-s1-t6" name="Test What Is My Number">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:06:06.084" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:06:06.085" starttime="20160128 01:06:06.080"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:06.638" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:06:06.640" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:06.639" starttime="20160128 01:06:06.086"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:06:06.641" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:06.642" starttime="20160128 01:06:06.640"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:06:08.643" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:06:08.645" starttime="20160128 01:06:06.642"></status>
</kw>
<msg timestamp="20160128 01:06:08.649" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:08.648" starttime="20160128 01:06:06.074"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:08.652" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160128 01:06:08.653" starttime="20160128 01:06:08.650"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160128 01:06:08.660" level="INFO">8</msg>
<status status="PASS" endtime="20160128 01:06:08.661" starttime="20160128 01:06:08.654"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:08.681" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:08.683" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:08.682" starttime="20160128 01:06:08.662"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 3 for what is my number service</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:08.685" level="INFO">Pressing 3 for what is my number service</msg>
<status status="PASS" endtime="20160128 01:06:08.686" starttime="20160128 01:06:08.684"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>3</arg>
</arguments>
<msg timestamp="20160128 01:06:08.692" level="INFO">3</msg>
<status status="PASS" endtime="20160128 01:06:08.692" starttime="20160128 01:06:08.687"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:08.716" level="INFO">=====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:08.717" level="INFO">${output} = =====================
Your number is:
02041010000
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:08.717" starttime="20160128 01:06:08.694"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>02041010000</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.721" starttime="20160128 01:06:08.719"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.732" starttime="20160128 01:06:08.729"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:08.734" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:08.767" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:08.769" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:08.768" starttime="20160128 01:06:08.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.773" starttime="20160128 01:06:08.771"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.776" starttime="20160128 01:06:08.774"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.779" starttime="20160128 01:06:08.777"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:08.783" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:06:08.841" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:08.842" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:08.843" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:08.842" starttime="20160128 01:06:08.780"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.851" starttime="20160128 01:06:08.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.854" starttime="20160128 01:06:08.852"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.856" starttime="20160128 01:06:08.855"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.859" starttime="20160128 01:06:08.857"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.862" starttime="20160128 01:06:08.860"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.865" starttime="20160128 01:06:08.863"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.868" starttime="20160128 01:06:08.866"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.871" starttime="20160128 01:06:08.869"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.873" starttime="20160128 01:06:08.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.876" starttime="20160128 01:06:08.874"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:08.879" starttime="20160128 01:06:08.877"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:08.880" starttime="20160128 01:06:08.722"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:08.881" starttime="20160128 01:06:06.067"></status>
</test>
<test id="s1-s2-s1-s1-t7" name="Test USSD Credit Transfer">
<kw type="kw" name="${output} = USSD Start">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${ussd_tool} ${TESTSUBCRIBERS MSISDN RANGE START} ${USSD CODE} ${USSD LOCATION}</arg>
</arguments>
<msg timestamp="20160128 01:06:08.901" level="INFO">Killed</msg>
<status status="PASS" endtime="20160128 01:06:08.902" starttime="20160128 01:06:08.897"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:09.427" level="INFO">[1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<msg timestamp="20160128 01:06:09.429" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:09.428" starttime="20160128 01:06:08.903"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>USSD Start: ${output}</arg>
</arguments>
<msg timestamp="20160128 01:06:09.431" level="INFO">USSD Start: [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. Top-up
2. View balance
3. View setup
4. Get a Combo or Add-On
8. Other stuff

=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:09.431" starttime="20160128 01:06:09.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20160128 01:06:11.434" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20160128 01:06:11.435" starttime="20160128 01:06:09.432"></status>
</kw>
<msg timestamp="20160128 01:06:11.439" level="INFO">${output} = [1m[qa_automation@ussd-app01.tb13 ~]$[m /home/qa_automation/ussd/USSDtest.py 64204101 0000 888 64204000
=====================
Enter the number of what you would like to do, then press reply
1. ...</msg>
<status status="PASS" endtime="20160128 01:06:11.438" starttime="20160128 01:06:08.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 8 for last menu item</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:11.442" level="INFO">Pressing 8 for last menu item</msg>
<status status="PASS" endtime="20160128 01:06:11.443" starttime="20160128 01:06:11.441"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>8</arg>
</arguments>
<msg timestamp="20160128 01:06:11.451" level="INFO">8</msg>
<status status="PASS" endtime="20160128 01:06:11.452" starttime="20160128 01:06:11.445"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:11.471" level="INFO">=====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:11.473" level="INFO">${output} = =====================
What would you like to do?
1. Credit transfer
2. Use Call Me Back
3. What's my number?
4. What's included
Enter * to return, # to exit 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:11.473" starttime="20160128 01:06:11.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Pressing 1 for credit transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:11.477" level="INFO">Pressing 1 for credit transfer</msg>
<status status="PASS" endtime="20160128 01:06:11.477" starttime="20160128 01:06:11.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:06:11.483" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:06:11.484" starttime="20160128 01:06:11.479"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:11.526" level="INFO">=====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:11.527" level="INFO">${output} = =====================
Please enter the Skinny mobile number of the person getting your credit: 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:11.527" starttime="20160128 01:06:11.485"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering recipient mobile number</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:11.530" level="INFO">Entering recipient mobile number</msg>
<status status="PASS" endtime="20160128 01:06:11.531" starttime="20160128 01:06:11.529"></status>
</kw>
<kw type="kw" name="${recipient} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${TESTSUBCRIBERS MSISDN RANGE START}+1</arg>
</arguments>
<msg timestamp="20160128 01:06:11.539" level="INFO">${recipient} = 642041010001</msg>
<status status="PASS" endtime="20160128 01:06:11.538" starttime="20160128 01:06:11.532"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${recipient}</arg>
</arguments>
<msg timestamp="20160128 01:06:11.544" level="INFO">642041010001</msg>
<status status="PASS" endtime="20160128 01:06:11.545" starttime="20160128 01:06:11.540"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:11.615" level="INFO">=====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:11.616" level="INFO">${output} = =====================
Your balance is $95.00.
Please enter a transfer amount in whole dollars: 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:11.615" starttime="20160128 01:06:11.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Entering amount to transfer</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:11.617" level="INFO">Entering amount to transfer</msg>
<status status="PASS" endtime="20160128 01:06:11.618" starttime="20160128 01:06:11.616"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>10</arg>
</arguments>
<msg timestamp="20160128 01:06:11.622" level="INFO">10</msg>
<status status="PASS" endtime="20160128 01:06:11.622" starttime="20160128 01:06:11.618"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:11.677" level="INFO">=====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:11.678" level="INFO">${output} = =====================
Do you really want to do this, press 1. If not, press # 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:11.678" starttime="20160128 01:06:11.622"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Final confirmation</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:11.679" level="INFO">Final confirmation</msg>
<status status="PASS" endtime="20160128 01:06:11.680" starttime="20160128 01:06:11.679"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20160128 01:06:11.684" level="INFO">1</msg>
<status status="PASS" endtime="20160128 01:06:11.685" starttime="20160128 01:06:11.680"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Read Until">
<doc>Consumes and returns the server output until `expected` is encountered.</doc>
<arguments>
<arg>User input:</arg>
</arguments>
<msg timestamp="20160128 01:06:11.781" level="INFO">=====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<msg timestamp="20160128 01:06:11.783" level="INFO">${output} = =====================
Nice one. Your mate 2041010001 has been sent $10.00 credit from your balance. 
=====================
User input:</msg>
<status status="PASS" endtime="20160128 01:06:11.782" starttime="20160128 01:06:11.685"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>Nice one.</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.787" starttime="20160128 01:06:11.784"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${conn_id}</arg>
<arg>python</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.798" starttime="20160128 01:06:11.796"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:11.801" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:11.833" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:11.835" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:11.834" starttime="20160128 01:06:11.800"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.837" starttime="20160128 01:06:11.836"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.840" starttime="20160128 01:06:11.838"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.843" starttime="20160128 01:06:11.841"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:11.847" level="INFO">Executing command 'pkill -9 -u qa_automation python'.</msg>
<msg timestamp="20160128 01:06:11.907" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:11.909" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:11.910" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:11.909" starttime="20160128 01:06:11.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.917" starttime="20160128 01:06:11.911"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.920" starttime="20160128 01:06:11.918"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.923" starttime="20160128 01:06:11.921"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.926" starttime="20160128 01:06:11.924"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.928" starttime="20160128 01:06:11.927"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.931" starttime="20160128 01:06:11.929"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.934" starttime="20160128 01:06:11.932"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.937" starttime="20160128 01:06:11.935"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.940" starttime="20160128 01:06:11.938"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.942" starttime="20160128 01:06:11.941"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.945" starttime="20160128 01:06:11.943"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:11.946" starttime="20160128 01:06:11.789"></status>
</kw>
<doc></doc>
<tags>
<tag>matko.sanseovic</tag>
<tag>TNZ_specific</tag>
<tag>USSD_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:11.947" starttime="20160128 01:06:08.883"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:11.987" starttime="20160128 01:06:11.983"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:11.991" starttime="20160128 01:06:11.976"></status>
</kw>
<doc>This suite uses USSDtest.py class to test the USSD interface. Various test cases (scenarios) will be checked</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:06:11.992" starttime="20160128 01:05:48.310"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:06:12.060" starttime="20160128 01:05:48.296"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:06:12.131" starttime="20160128 01:05:48.281"></status>
</suite>
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr" id="s1-s3" name="Xdr">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification" id="s1-s3-s1" name="XDR-ticket-verification">
<suite source="/opt/robot/robotworkspace/robot_testsuites/xdr/XDR-ticket-verification/XDR_Test-robot-suite.txt" id="s1-s3-s1-s1" name="XDR Test-robot-suite">
<kw type="setup" name="Setup Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="${time} = OperatingSystem.Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>date</arg>
</arguments>
<msg timestamp="20160128 01:06:12.459" level="INFO">Running command 'date 2&gt;&amp;1'</msg>
<msg timestamp="20160128 01:06:12.462" level="INFO">${time} = Thu Jan 28 01:06:12 CET 2016</msg>
<status status="PASS" endtime="20160128 01:06:12.462" starttime="20160128 01:06:12.454"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Date and time: ${time}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:12.464" level="INFO">Date and time: Thu Jan 28 01:06:12 CET 2016</msg>
<status status="PASS" endtime="20160128 01:06:12.465" starttime="20160128 01:06:12.463"></status>
</kw>
<kw type="kw" name="NTP Check on XDR">
<doc>Called at suite setup to check if ntp is up and running</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:12.508" starttime="20160128 01:06:12.469"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:06:12.510" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:13.785" level="INFO">Read output: Last login: Thu Jan 28 00:05:40 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160128 01:06:13.787" level="INFO">${output_login} = Last login: Thu Jan 28 00:05:40 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:06:13.786" starttime="20160128 01:06:12.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:06:13.789" level="INFO">Last login: Thu Jan 28 00:05:40 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:06:13.789" starttime="20160128 01:06:13.788"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ntpstat</arg>
</arguments>
<msg timestamp="20160128 01:06:13.790" level="INFO">Executing command 'ntpstat'.</msg>
<msg timestamp="20160128 01:06:13.840" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:13.840" level="INFO">${output} = synchronised to NTP server (10.189.251.100) at stratum 3 
   time correct to within 79 ms
   polling server every 1024 s</msg>
<status status="PASS" endtime="20160128 01:06:13.840" starttime="20160128 01:06:13.790"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:13.842" starttime="20160128 01:06:13.841"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>synchronised to NTP server</arg>
<arg>msg=NTP sync problem!</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:13.845" starttime="20160128 01:06:13.844"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>NTP is synced</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:13.846" level="INFO">NTP is synced</msg>
<status status="PASS" endtime="20160128 01:06:13.847" starttime="20160128 01:06:13.845"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:13.847" starttime="20160128 01:06:12.465"></status>
</kw>
<kw type="kw" name="Log The XDR Version">
<doc>Called at suite setup procedure to check if XDR is running and to see which version is there.</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:13.888" starttime="20160128 01:06:13.851"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:06:13.890" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:15.097" level="INFO">Read output: Last login: Thu Jan 28 00:06:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m</msg>
<msg timestamp="20160128 01:06:15.099" level="INFO">${output_login} = Last login: Thu Jan 28 00:06:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:06:15.098" starttime="20160128 01:06:13.888"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output_login}</arg>
</arguments>
<msg timestamp="20160128 01:06:15.101" level="INFO">Last login: Thu Jan 28 00:06:12 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:06:15.101" starttime="20160128 01:06:15.100"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo service inew-mvno-xdr status</arg>
</arguments>
<msg timestamp="20160128 01:06:15.102" level="INFO">Executing command 'sudo service inew-mvno-xdr status'.</msg>
<msg timestamp="20160128 01:06:15.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:15.473" level="INFO">${output} = I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:06:15.472" starttime="20160128 01:06:15.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR Version and pid: ${output}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:15.474" level="INFO">XDR Version and pid: I-New UMS MVNO - XDR - Server 5.3.1.25016 is running PID: 3345 </msg>
<status status="PASS" endtime="20160128 01:06:15.475" starttime="20160128 01:06:15.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>is running PID:</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:15.476" starttime="20160128 01:06:15.475"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:15.479" starttime="20160128 01:06:15.477"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:15.479" starttime="20160128 01:06:13.848"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>SUT:${SUT_RESOURCE}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:15.482" level="INFO">SUT:/opt/robot/robotworkspace/suts/TNZ-resource.txt</msg>
<status status="PASS" endtime="20160128 01:06:15.482" starttime="20160128 01:06:15.481"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>XDR IP address:${XDR HOST}</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:15.484" level="INFO">XDR IP address:10.105.113.171</msg>
<status status="PASS" endtime="20160128 01:06:15.484" starttime="20160128 01:06:15.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Using ${SUT RELEASE TAG PREFIX} tickets</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:15.486" level="INFO">Using R5.3 tickets</msg>
<status status="PASS" endtime="20160128 01:06:15.486" starttime="20160128 01:06:15.485"></status>
</kw>
<kw type="kw" name="Check AMQ Availability">
<doc>Called at suite setup procedure to check if AMQ is UP</doc>
<arguments>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${AMQ-XDR HOST}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:15.528" starttime="20160128 01:06:15.490"></status>
</kw>
<kw type="kw" name="${output_login} = SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
</arguments>
<msg timestamp="20160128 01:06:15.530" level="INFO">Logging into '10.105.113.124:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:16.790" level="INFO">Read output: Last login: Wed Jan 27 02:42:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m</msg>
<msg timestamp="20160128 01:06:16.792" level="INFO">${output_login} = Last login: Wed Jan 27 02:42:37 2016 from 10.105.101.196
id: cannot find name for group ID 20007
[1m[qa_automation@amq02.tb13 ~]$[m </msg>
<status status="PASS" endtime="20160128 01:06:16.791" starttime="20160128 01:06:15.528"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>netstat -an | grep ${AMQ-XDR PORT}</arg>
</arguments>
<msg timestamp="20160128 01:06:16.794" level="INFO">Executing command 'netstat -an | grep 61616'.</msg>
<msg timestamp="20160128 01:06:16.871" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:16.871" level="INFO">${output} = tcp        0      0 :::61616                    :::*                        LISTEN      
tcp        0      0 ::ffff:10.105.113.124:61616 ::ffff:10.189.230.161:59028 ESTABLISHED 
tcp        0      0 ::...</msg>
<status status="PASS" endtime="20160128 01:06:16.871" starttime="20160128 01:06:16.792"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>LISTEN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:16.873" starttime="20160128 01:06:16.872"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${output}=</arg>
<arg>Execute Command</arg>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} query -QQueue=${AMQ-XDR CRCE CDR QUEUE} | grep ConsumerCount</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:16.874" starttime="20160128 01:06:16.873"></status>
</kw>
<kw type="kw" name="${output} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>sudo /etc/init.d/${AMQ-XDR SERVICE SCRIPT NAME} status</arg>
</arguments>
<msg timestamp="20160128 01:06:16.876" level="INFO">Executing command 'sudo /etc/init.d/amq-xdr-tb13 status'.</msg>
<msg timestamp="20160128 01:06:17.018" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:17.019" level="INFO">${output} = INFO: Using default configuration
(you can configure options in one of these file: /etc/default/activemq /root/.activemqrc)

INFO: Invoke the following command to create a configuration file
/etc/init...</msg>
<status status="PASS" endtime="20160128 01:06:17.019" starttime="20160128 01:06:16.875"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>ActiveMQ is running</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.021" starttime="20160128 01:06:17.020"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${count}=</arg>
<arg>Get Substring</arg>
<arg>${output}</arg>
<arg>16</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.022" starttime="20160128 01:06:17.021"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Evaluate</arg>
<arg>0 &lt; ${count}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.023" starttime="20160128 01:06:17.023"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.026" starttime="20160128 01:06:17.024"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:17.027" starttime="20160128 01:06:15.487"></status>
</kw>
<kw type="kw" name="BuiltIn.Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>AMQ and consumers are UP</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20160128 01:06:17.029" level="INFO">AMQ and consumers are UP</msg>
<status status="PASS" endtime="20160128 01:06:17.029" starttime="20160128 01:06:17.028"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Connect To Database">
<doc></doc>
<arguments>
<arg>org.postgresql.Driver</arg>
<arg>jdbc:postgresql://${XDR DB HOST}:${XDR DB PORT}/${XDR DB NAME}</arg>
<arg>${XDR DB USER}</arg>
<arg>${XDR DB PWD}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.075" starttime="20160128 01:06:17.029"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.163" starttime="20160128 01:06:17.085"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:17.163" starttime="20160128 01:06:17.082"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.341" starttime="20160128 01:06:17.173"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:17.342" starttime="20160128 01:06:17.169"></status>
</kw>
<kw type="kw" name="${JNDI_PROVIDER_URL} = BuiltIn.Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>tcp://${AMQ-XDR HOST}:${AMQ-XDR PORT}?jms.useAsyncSend=false</arg>
</arguments>
<msg timestamp="20160128 01:06:17.344" level="INFO">${JNDI_PROVIDER_URL} = tcp://10.105.113.124:61616?jms.useAsyncSend=false</msg>
<status status="PASS" endtime="20160128 01:06:17.344" starttime="20160128 01:06:17.342"></status>
</kw>
<kw type="kw" name="JMSLibrary.Init Provider">
<doc></doc>
<arguments>
<arg>${INITIAL_CONTEXT_FACTORY}</arg>
<arg>${JNDI_PROVIDER_URL}</arg>
<arg>connect=true</arg>
<arg>start=true</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.658" starttime="20160128 01:06:17.345"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:17.660" starttime="20160128 01:06:12.451"></status>
</kw>
<test id="s1-s3-s1-s1-t1" name="Test MOC ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC}</arg>
<arg>MOC</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.710" starttime="20160128 01:06:17.709"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:17.764" starttime="20160128 01:06:17.713"></status>
</kw>
<msg timestamp="20160128 01:06:17.766" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:06:17.766" starttime="20160128 01:06:17.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:06:17.776" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:18.162" level="INFO">Read output: Last login: Thu Jan 28 00:06:14 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:06:18.163" starttime="20160128 01:06:17.774"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:18.165" starttime="20160128 01:06:17.768"></status>
</kw>
<msg timestamp="20160128 01:06:18.169" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:06:18.167" starttime="20160128 01:06:17.704"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:18.181" starttime="20160128 01:06:18.179"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:18.185" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160128 01:06:18.190" starttime="20160128 01:06:18.182"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:18.191" starttime="20160128 01:06:18.171"></status>
</kw>
<msg timestamp="20160128 01:06:18.194" level="INFO">${ssh_connection} = 4</msg>
<status status="PASS" endtime="20160128 01:06:18.193" starttime="20160128 01:06:17.695"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:18.221" starttime="20160128 01:06:18.216"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:18.222" starttime="20160128 01:06:18.208"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:18.236" starttime="20160128 01:06:18.227"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:18.246" starttime="20160128 01:06:18.237"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:18.247" starttime="20160128 01:06:18.223"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.248" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:06:28.249" starttime="20160128 01:06:18.247"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.259" starttime="20160128 01:06:28.258"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:06:28.263" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:06:28.262" starttime="20160128 01:06:28.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.268" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:06:28.268" starttime="20160128 01:06:28.263"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.273" starttime="20160128 01:06:28.272"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:28.275" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:28.312" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:28.313" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:28.313" starttime="20160128 01:06:28.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.315" starttime="20160128 01:06:28.314"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.316" starttime="20160128 01:06:28.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.317" starttime="20160128 01:06:28.316"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:28.319" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:06:28.392" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:28.393" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:28.393" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:28.393" starttime="20160128 01:06:28.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.397" starttime="20160128 01:06:28.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.398" starttime="20160128 01:06:28.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.399" starttime="20160128 01:06:28.398"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.400" starttime="20160128 01:06:28.400"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.402" starttime="20160128 01:06:28.401"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.403" starttime="20160128 01:06:28.402"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.404" starttime="20160128 01:06:28.403"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.406" starttime="20160128 01:06:28.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.407" starttime="20160128 01:06:28.406"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.408" starttime="20160128 01:06:28.407"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.409" starttime="20160128 01:06:28.409"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.410" starttime="20160128 01:06:28.269"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:28.411" level="INFO">Starting command 'cat tmpfilemonitor4.log'.</msg>
<status status="PASS" endtime="20160128 01:06:28.414" starttime="20160128 01:06:28.410"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:06:28.415" level="INFO">Reading output of command 'cat tmpfilemonitor4.log'.</msg>
<msg timestamp="20160128 01:06:28.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:28.447" level="INFO">${stdout_string} = [2016-01-28 00:06:18,234][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:28.447" starttime="20160128 01:06:28.415"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:28.449" level="INFO">Executing command 'rm tmpfilemonitor4.log'.</msg>
<msg timestamp="20160128 01:06:28.523" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:06:28.523" starttime="20160128 01:06:28.448"></status>
</kw>
<msg timestamp="20160128 01:06:28.524" level="INFO">${tailed_text} = [2016-01-28 00:06:18,234][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:28.524" starttime="20160128 01:06:28.255"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.530" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:06:28.530" starttime="20160128 01:06:28.528"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.530" starttime="20160128 01:06:28.525"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.536" starttime="20160128 01:06:28.535"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.537" starttime="20160128 01:06:28.536"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.538" starttime="20160128 01:06:28.531"></status>
</kw>
<msg timestamp="20160128 01:06:28.540" level="INFO">${tailed_text} = [2016-01-28 00:06:18,234][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:28.540" starttime="20160128 01:06:28.251"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.556" starttime="20160128 01:06:28.555"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.573" starttime="20160128 01:06:28.556"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.574" starttime="20160128 01:06:28.574"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.576" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:06:28.577" level="INFO">${queryResultSetLines} = 1008645|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSessi...</msg>
<status status="PASS" endtime="20160128 01:06:28.577" starttime="20160128 01:06:28.575"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.578" starttime="20160128 01:06:28.578"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.580" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:06:28.581" level="INFO">@{queryResultSet} = [ 1008645|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160128 01:06:28.580" starttime="20160128 01:06:28.579"></status>
</kw>
<msg timestamp="20160128 01:06:28.582" level="INFO">@{queryRows} = [ 1008645|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 11:06:11.236+00|2015-02-22 09:15:50.025+00|MOC123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|Charge|BasicSes...</msg>
<status status="PASS" endtime="20160128 01:06:28.582" starttime="20160128 01:06:28.551"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.584" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:06:28.585" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:06:28.585" starttime="20160128 01:06:28.583"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.586" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:06:28.587" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:06:28.587" starttime="20160128 01:06:28.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:06:28.591" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:06:28.592" starttime="20160128 01:06:28.590"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.592" starttime="20160128 01:06:28.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.595" starttime="20160128 01:06:28.593"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.596" starttime="20160128 01:06:28.546"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.607" starttime="20160128 01:06:28.606"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.608" starttime="20160128 01:06:28.603"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.611" starttime="20160128 01:06:28.608"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.611" starttime="20160128 01:06:28.599"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.611" starttime="20160128 01:06:28.596"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:28.612" starttime="20160128 01:06:17.673"></status>
</kw>
<doc>Send the MOC XDR ticket and analyse results. It is expected that ticket is processed without errors and database row is added in corresponding table. Test is PASSing when this conditions are fulfilled. 

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:28.613" starttime="20160128 01:06:17.662"></status>
</test>
<test id="s1-s3-s1-s1-t2" name="Test SMS ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SMS}</arg>
<arg>SMS</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.642" starttime="20160128 01:06:28.641"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:28.695" starttime="20160128 01:06:28.646"></status>
</kw>
<msg timestamp="20160128 01:06:28.697" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:06:28.697" starttime="20160128 01:06:28.643"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:06:28.709" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:29.090" level="INFO">Read output: Last login: Thu Jan 28 00:06:17 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:06:29.093" starttime="20160128 01:06:28.706"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:29.095" starttime="20160128 01:06:28.699"></status>
</kw>
<msg timestamp="20160128 01:06:29.100" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:06:29.099" starttime="20160128 01:06:28.636"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:29.114" starttime="20160128 01:06:29.112"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:29.118" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160128 01:06:29.122" starttime="20160128 01:06:29.116"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:29.124" starttime="20160128 01:06:29.103"></status>
</kw>
<msg timestamp="20160128 01:06:29.127" level="INFO">${ssh_connection} = 5</msg>
<status status="PASS" endtime="20160128 01:06:29.125" starttime="20160128 01:06:28.630"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:29.155" starttime="20160128 01:06:29.149"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:29.156" starttime="20160128 01:06:29.141"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:29.162" starttime="20160128 01:06:29.160"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:29.169" starttime="20160128 01:06:29.162"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:29.170" starttime="20160128 01:06:29.157"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.171" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:06:39.172" starttime="20160128 01:06:29.170"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.183" starttime="20160128 01:06:39.182"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:06:39.187" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:06:39.187" starttime="20160128 01:06:39.183"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.191" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:06:39.192" starttime="20160128 01:06:39.187"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.197" starttime="20160128 01:06:39.196"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:39.198" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:39.235" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:39.236" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:39.236" starttime="20160128 01:06:39.197"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.238" starttime="20160128 01:06:39.237"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.239" starttime="20160128 01:06:39.238"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.240" starttime="20160128 01:06:39.239"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:39.242" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:06:39.314" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:39.314" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:39.315" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:39.314" starttime="20160128 01:06:39.241"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.318" starttime="20160128 01:06:39.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.319" starttime="20160128 01:06:39.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.320" starttime="20160128 01:06:39.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.322" starttime="20160128 01:06:39.321"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.323" starttime="20160128 01:06:39.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.324" starttime="20160128 01:06:39.323"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.326" starttime="20160128 01:06:39.325"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.327" starttime="20160128 01:06:39.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.328" starttime="20160128 01:06:39.328"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.330" starttime="20160128 01:06:39.329"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.331" starttime="20160128 01:06:39.330"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.331" starttime="20160128 01:06:39.192"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:39.333" level="INFO">Starting command 'cat tmpfilemonitor5.log'.</msg>
<status status="PASS" endtime="20160128 01:06:39.336" starttime="20160128 01:06:39.332"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:06:39.337" level="INFO">Reading output of command 'cat tmpfilemonitor5.log'.</msg>
<msg timestamp="20160128 01:06:39.369" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:39.370" level="INFO">${stdout_string} = [2016-01-28 00:06:29,157][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:39.369" starttime="20160128 01:06:39.336"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:39.371" level="INFO">Executing command 'rm tmpfilemonitor5.log'.</msg>
<msg timestamp="20160128 01:06:39.444" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:06:39.444" starttime="20160128 01:06:39.370"></status>
</kw>
<msg timestamp="20160128 01:06:39.445" level="INFO">${tailed_text} = [2016-01-28 00:06:29,157][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:39.445" starttime="20160128 01:06:39.178"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.451" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SMS_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:06:39.452" starttime="20160128 01:06:39.449"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.452" starttime="20160128 01:06:39.446"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.457" starttime="20160128 01:06:39.456"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.459" starttime="20160128 01:06:39.458"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.460" starttime="20160128 01:06:39.453"></status>
</kw>
<msg timestamp="20160128 01:06:39.462" level="INFO">${tailed_text} = [2016-01-28 00:06:29,157][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:39.461" starttime="20160128 01:06:39.174"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.477" starttime="20160128 01:06:39.476"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.481" starttime="20160128 01:06:39.478"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.483" starttime="20160128 01:06:39.482"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.484" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:06:39.485" level="INFO">${queryResultSetLines} = 1008646|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|53099204...</msg>
<status status="PASS" endtime="20160128 01:06:39.485" starttime="20160128 01:06:39.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.486" starttime="20160128 01:06:39.486"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.488" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:06:39.488" level="INFO">@{queryResultSet} = [ 1008646|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160128 01:06:39.488" starttime="20160128 01:06:39.487"></status>
</kw>
<msg timestamp="20160128 01:06:39.489" level="INFO">@{queryRows} = [ 1008646|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:36:19.022+00|2015-02-22 15:00:50.025+00|SMS123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.0|Charge|0|530992...</msg>
<status status="PASS" endtime="20160128 01:06:39.489" starttime="20160128 01:06:39.472"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.491" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:06:39.492" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:06:39.491" starttime="20160128 01:06:39.490"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.493" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:06:39.494" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:06:39.493" starttime="20160128 01:06:39.492"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:06:39.498" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:06:39.498" starttime="20160128 01:06:39.497"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.499" starttime="20160128 01:06:39.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.502" starttime="20160128 01:06:39.499"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.502" starttime="20160128 01:06:39.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.513" starttime="20160128 01:06:39.512"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.514" starttime="20160128 01:06:39.509"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.517" starttime="20160128 01:06:39.514"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.517" starttime="20160128 01:06:39.505"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.517" starttime="20160128 01:06:39.503"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:39.518" starttime="20160128 01:06:28.619"></status>
</kw>
<doc>Send the SMS XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:39.519" starttime="20160128 01:06:28.614"></status>
</test>
<test id="s1-s3-s1-s1-t3" name="Test DATA ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${DATA}</arg>
<arg>DATA</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.547" starttime="20160128 01:06:39.546"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:39.602" starttime="20160128 01:06:39.551"></status>
</kw>
<msg timestamp="20160128 01:06:39.604" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:06:39.604" starttime="20160128 01:06:39.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:06:39.615" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:40.003" level="INFO">Read output: Last login: Thu Jan 28 00:06:28 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:06:40.004" starttime="20160128 01:06:39.613"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:40.004" starttime="20160128 01:06:39.606"></status>
</kw>
<msg timestamp="20160128 01:06:40.006" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:06:40.006" starttime="20160128 01:06:39.541"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:40.012" starttime="20160128 01:06:40.011"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:40.014" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160128 01:06:40.017" starttime="20160128 01:06:40.013"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:40.018" starttime="20160128 01:06:40.007"></status>
</kw>
<msg timestamp="20160128 01:06:40.019" level="INFO">${ssh_connection} = 6</msg>
<status status="PASS" endtime="20160128 01:06:40.018" starttime="20160128 01:06:39.535"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:40.054" starttime="20160128 01:06:40.029"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:40.055" starttime="20160128 01:06:40.025"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:40.061" starttime="20160128 01:06:40.060"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:40.069" starttime="20160128 01:06:40.061"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:40.069" starttime="20160128 01:06:40.056"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.072" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:06:50.073" starttime="20160128 01:06:40.070"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.084" starttime="20160128 01:06:50.083"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:06:50.087" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:06:50.087" starttime="20160128 01:06:50.084"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.091" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:06:50.092" starttime="20160128 01:06:50.088"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.097" starttime="20160128 01:06:50.096"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:06:50.098" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:06:50.134" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:50.135" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:06:50.135" starttime="20160128 01:06:50.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.136" starttime="20160128 01:06:50.135"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.137" starttime="20160128 01:06:50.137"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.139" starttime="20160128 01:06:50.138"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:06:50.141" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:06:50.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:50.212" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:06:50.212" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:06:50.211" starttime="20160128 01:06:50.139"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.216" starttime="20160128 01:06:50.213"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.217" starttime="20160128 01:06:50.216"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.218" starttime="20160128 01:06:50.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.219" starttime="20160128 01:06:50.219"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.221" starttime="20160128 01:06:50.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.222" starttime="20160128 01:06:50.221"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.223" starttime="20160128 01:06:50.222"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.225" starttime="20160128 01:06:50.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.226" starttime="20160128 01:06:50.225"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.227" starttime="20160128 01:06:50.226"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.228" starttime="20160128 01:06:50.228"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.229" starttime="20160128 01:06:50.092"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:50.230" level="INFO">Starting command 'cat tmpfilemonitor6.log'.</msg>
<status status="PASS" endtime="20160128 01:06:50.234" starttime="20160128 01:06:50.229"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:06:50.235" level="INFO">Reading output of command 'cat tmpfilemonitor6.log'.</msg>
<msg timestamp="20160128 01:06:50.266" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:06:50.266" level="INFO">${stdout_string} = [2016-01-28 00:06:40,057][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:50.266" starttime="20160128 01:06:50.234"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:50.268" level="INFO">Executing command 'rm tmpfilemonitor6.log'.</msg>
<msg timestamp="20160128 01:06:50.341" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:06:50.341" starttime="20160128 01:06:50.267"></status>
</kw>
<msg timestamp="20160128 01:06:50.342" level="INFO">${tailed_text} = [2016-01-28 00:06:40,057][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:50.342" starttime="20160128 01:06:50.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.348" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/DATA_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:06:50.348" starttime="20160128 01:06:50.346"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.349" starttime="20160128 01:06:50.343"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.354" starttime="20160128 01:06:50.353"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.355" starttime="20160128 01:06:50.354"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.357" starttime="20160128 01:06:50.349"></status>
</kw>
<msg timestamp="20160128 01:06:50.358" level="INFO">${tailed_text} = [2016-01-28 00:06:40,057][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:06:50.358" starttime="20160128 01:06:50.075"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.375" starttime="20160128 01:06:50.374"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.428" starttime="20160128 01:06:50.375"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.430" starttime="20160128 01:06:50.429"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.431" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:06:50.432" level="INFO">${queryResultSetLines} = 1008647|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicSes...</msg>
<status status="PASS" endtime="20160128 01:06:50.432" starttime="20160128 01:06:50.430"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.433" starttime="20160128 01:06:50.433"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.435" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:06:50.436" level="INFO">@{queryResultSet} = [ 1008647|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160128 01:06:50.435" starttime="20160128 01:06:50.434"></status>
</kw>
<msg timestamp="20160128 01:06:50.437" level="INFO">@{queryRows} = [ 1008647|5.3|101|t|1|CRCE|CDR|crce01.tb13|2015-02-23 09:37:42.312+00|2015-02-23 09:37:06+00|DATA123456XdrComponentTest|1|1|27800|642041999740|PREPAID|OK|null|ACTIVE|null|0|NONE|1.2|FinalCommit|BasicS...</msg>
<status status="PASS" endtime="20160128 01:06:50.436" starttime="20160128 01:06:50.370"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.438" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:06:50.439" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:06:50.439" starttime="20160128 01:06:50.437"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.440" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:06:50.441" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:06:50.441" starttime="20160128 01:06:50.439"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:06:50.445" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:06:50.446" starttime="20160128 01:06:50.444"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.446" starttime="20160128 01:06:50.441"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.449" starttime="20160128 01:06:50.447"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.449" starttime="20160128 01:06:50.366"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.461" starttime="20160128 01:06:50.459"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.461" starttime="20160128 01:06:50.457"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.464" starttime="20160128 01:06:50.462"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.464" starttime="20160128 01:06:50.453"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.465" starttime="20160128 01:06:50.450"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.465" starttime="20160128 01:06:39.525"></status>
</kw>
<doc>Send the DATA XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:06:50.466" starttime="20160128 01:06:39.520"></status>
</test>
<test id="s1-s3-s1-s1-t4" name="Test CRCE Recharge ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Rec}</arg>
<arg>CRCE_Rec</arg>
<arg>crce_recharge</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.494" starttime="20160128 01:06:50.493"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.549" starttime="20160128 01:06:50.497"></status>
</kw>
<msg timestamp="20160128 01:06:50.551" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:06:50.550" starttime="20160128 01:06:50.494"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:06:50.562" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:06:50.949" level="INFO">Read output: Last login: Thu Jan 28 00:06:39 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:06:50.951" starttime="20160128 01:06:50.559"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.951" starttime="20160128 01:06:50.552"></status>
</kw>
<msg timestamp="20160128 01:06:50.952" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:06:50.952" starttime="20160128 01:06:50.488"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:50.958" starttime="20160128 01:06:50.957"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:06:50.960" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160128 01:06:50.963" starttime="20160128 01:06:50.959"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:50.964" starttime="20160128 01:06:50.953"></status>
</kw>
<msg timestamp="20160128 01:06:50.965" level="INFO">${ssh_connection} = 7</msg>
<status status="PASS" endtime="20160128 01:06:50.964" starttime="20160128 01:06:50.482"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:52.145" starttime="20160128 01:06:50.974"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:52.147" starttime="20160128 01:06:50.971"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:52.152" starttime="20160128 01:06:52.151"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:06:52.160" starttime="20160128 01:06:52.153"></status>
</kw>
<status status="PASS" endtime="20160128 01:06:52.161" starttime="20160128 01:06:52.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.164" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:07:02.165" starttime="20160128 01:06:52.161"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.176" starttime="20160128 01:07:02.175"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:07:02.180" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:07:02.180" starttime="20160128 01:07:02.177"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.184" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:07:02.185" starttime="20160128 01:07:02.181"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.191" starttime="20160128 01:07:02.190"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:07:02.192" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:07:02.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:02.229" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:07:02.229" starttime="20160128 01:07:02.191"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.231" starttime="20160128 01:07:02.230"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.232" starttime="20160128 01:07:02.231"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.233" starttime="20160128 01:07:02.232"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:07:02.235" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:07:02.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:02.306" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:07:02.306" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:07:02.305" starttime="20160128 01:07:02.234"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.309" starttime="20160128 01:07:02.306"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.310" starttime="20160128 01:07:02.310"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.312" starttime="20160128 01:07:02.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.313" starttime="20160128 01:07:02.312"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.314" starttime="20160128 01:07:02.313"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.315" starttime="20160128 01:07:02.315"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.317" starttime="20160128 01:07:02.316"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.318" starttime="20160128 01:07:02.317"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.319" starttime="20160128 01:07:02.318"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.320" starttime="20160128 01:07:02.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.322" starttime="20160128 01:07:02.321"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.322" starttime="20160128 01:07:02.186"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:02.324" level="INFO">Starting command 'cat tmpfilemonitor7.log'.</msg>
<status status="PASS" endtime="20160128 01:07:02.326" starttime="20160128 01:07:02.323"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:07:02.328" level="INFO">Reading output of command 'cat tmpfilemonitor7.log'.</msg>
<msg timestamp="20160128 01:07:02.360" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:02.360" level="INFO">${stdout_string} = [2016-01-28 00:06:52,148][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:02.360" starttime="20160128 01:07:02.327"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:02.362" level="INFO">Executing command 'rm tmpfilemonitor7.log'.</msg>
<msg timestamp="20160128 01:07:02.434" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:07:02.434" starttime="20160128 01:07:02.361"></status>
</kw>
<msg timestamp="20160128 01:07:02.436" level="INFO">${tailed_text} = [2016-01-28 00:06:52,148][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:02.435" starttime="20160128 01:07:02.172"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.441" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Rec_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:07:02.441" starttime="20160128 01:07:02.439"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.442" starttime="20160128 01:07:02.436"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.447" starttime="20160128 01:07:02.446"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.448" starttime="20160128 01:07:02.447"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.449" starttime="20160128 01:07:02.442"></status>
</kw>
<msg timestamp="20160128 01:07:02.451" level="INFO">${tailed_text} = [2016-01-28 00:06:52,148][INFO ][Camel (ticket-router) thread #48 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|110|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:02.451" starttime="20160128 01:07:02.167"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.467" starttime="20160128 01:07:02.466"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.515" starttime="20160128 01:07:02.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.517" starttime="20160128 01:07:02.516"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.518" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:07:02.519" level="INFO">${queryResultSetLines} = 1043834|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|...</msg>
<status status="PASS" endtime="20160128 01:07:02.519" starttime="20160128 01:07:02.517"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.520" starttime="20160128 01:07:02.520"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.522" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:07:02.522" level="INFO">@{queryResultSet} = [ 1043834|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160128 01:07:02.522" starttime="20160128 01:07:02.521"></status>
</kw>
<msg timestamp="20160128 01:07:02.523" level="INFO">@{queryRows} = [ 1043834|5.3|110|RECHARGE|1|CRCE|crce01.tb13|2015-02-23 09:18:39.002|2015-02-23 09:18:38.996|CRCE_RectariffChange@123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1....</msg>
<status status="PASS" endtime="20160128 01:07:02.523" starttime="20160128 01:07:02.462"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.525" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:07:02.526" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:07:02.525" starttime="20160128 01:07:02.524"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.527" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:07:02.528" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:07:02.527" starttime="20160128 01:07:02.526"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:07:02.532" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:07:02.532" starttime="20160128 01:07:02.531"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.533" starttime="20160128 01:07:02.528"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.536" starttime="20160128 01:07:02.533"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.536" starttime="20160128 01:07:02.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.549" starttime="20160128 01:07:02.547"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.549" starttime="20160128 01:07:02.545"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.552" starttime="20160128 01:07:02.550"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.552" starttime="20160128 01:07:02.540"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.553" starttime="20160128 01:07:02.537"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:02.553" starttime="20160128 01:06:50.472"></status>
</kw>
<doc>Send the CRCE Recharge XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:07:02.554" starttime="20160128 01:06:50.468"></status>
</test>
<test id="s1-s3-s1-s1-t5" name="Test CRCE Confirmation ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Conf}</arg>
<arg>CRCE_Conf</arg>
<arg>crce_conf</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.583" starttime="20160128 01:07:02.582"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:02.638" starttime="20160128 01:07:02.587"></status>
</kw>
<msg timestamp="20160128 01:07:02.640" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:07:02.639" starttime="20160128 01:07:02.584"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:07:02.652" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:07:03.039" level="INFO">Read output: Last login: Thu Jan 28 00:06:50 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:07:03.040" starttime="20160128 01:07:02.649"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:03.040" starttime="20160128 01:07:02.641"></status>
</kw>
<msg timestamp="20160128 01:07:03.042" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:07:03.042" starttime="20160128 01:07:02.577"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:03.048" starttime="20160128 01:07:03.047"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:03.050" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160128 01:07:03.053" starttime="20160128 01:07:03.049"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:03.054" starttime="20160128 01:07:03.043"></status>
</kw>
<msg timestamp="20160128 01:07:03.057" level="INFO">${ssh_connection} = 8</msg>
<status status="PASS" endtime="20160128 01:07:03.055" starttime="20160128 01:07:02.570"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:03.106" starttime="20160128 01:07:03.068"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:03.107" starttime="20160128 01:07:03.064"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:03.112" starttime="20160128 01:07:03.111"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:03.123" starttime="20160128 01:07:03.112"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:03.123" starttime="20160128 01:07:03.107"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.125" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:07:13.126" starttime="20160128 01:07:03.124"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.137" starttime="20160128 01:07:13.136"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:07:13.140" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:07:13.140" starttime="20160128 01:07:13.137"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.144" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:07:13.145" starttime="20160128 01:07:13.141"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.150" starttime="20160128 01:07:13.149"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:07:13.151" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:07:13.187" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:13.188" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:07:13.188" starttime="20160128 01:07:13.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.190" starttime="20160128 01:07:13.189"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.191" starttime="20160128 01:07:13.190"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.192" starttime="20160128 01:07:13.192"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:07:13.195" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:07:13.266" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:13.267" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:07:13.267" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:07:13.266" starttime="20160128 01:07:13.193"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.270" starttime="20160128 01:07:13.267"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.271" starttime="20160128 01:07:13.271"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.273" starttime="20160128 01:07:13.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.274" starttime="20160128 01:07:13.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.275" starttime="20160128 01:07:13.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.276" starttime="20160128 01:07:13.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.278" starttime="20160128 01:07:13.277"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.279" starttime="20160128 01:07:13.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.280" starttime="20160128 01:07:13.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.282" starttime="20160128 01:07:13.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.283" starttime="20160128 01:07:13.282"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.284" starttime="20160128 01:07:13.145"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:13.286" level="INFO">Starting command 'cat tmpfilemonitor8.log'.</msg>
<status status="PASS" endtime="20160128 01:07:13.289" starttime="20160128 01:07:13.285"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:07:13.290" level="INFO">Reading output of command 'cat tmpfilemonitor8.log'.</msg>
<msg timestamp="20160128 01:07:13.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:13.321" level="INFO">${stdout_string} = [2016-01-28 00:07:03,108][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:13.321" starttime="20160128 01:07:13.289"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:13.323" level="INFO">Executing command 'rm tmpfilemonitor8.log'.</msg>
<msg timestamp="20160128 01:07:13.396" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:07:13.396" starttime="20160128 01:07:13.322"></status>
</kw>
<msg timestamp="20160128 01:07:13.397" level="INFO">${tailed_text} = [2016-01-28 00:07:03,108][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:13.397" starttime="20160128 01:07:13.132"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.402" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Conf_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:07:13.403" starttime="20160128 01:07:13.400"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.403" starttime="20160128 01:07:13.398"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.408" starttime="20160128 01:07:13.407"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.410" starttime="20160128 01:07:13.409"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.412" starttime="20160128 01:07:13.404"></status>
</kw>
<msg timestamp="20160128 01:07:13.413" level="INFO">${tailed_text} = [2016-01-28 00:07:03,108][INFO ][Camel (ticket-router) thread #47 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|130|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:13.412" starttime="20160128 01:07:13.128"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.428" starttime="20160128 01:07:13.427"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.445" starttime="20160128 01:07:13.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.446" starttime="20160128 01:07:13.445"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.448" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:07:13.448" level="INFO">${queryResultSetLines} = 2068651|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff|1...</msg>
<status status="PASS" endtime="20160128 01:07:13.448" starttime="20160128 01:07:13.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.450" starttime="20160128 01:07:13.449"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.451" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:07:13.452" level="INFO">@{queryResultSet} = [ 2068651|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160128 01:07:13.452" starttime="20160128 01:07:13.451"></status>
</kw>
<msg timestamp="20160128 01:07:13.453" level="INFO">@{queryRows} = [ 2068651|5.3|130|CONF|1|CRCE|crce01.tb13|2015-02-23 09:18:38.969|2015-02-23 09:18:38.619|CRCE_Conf123456XdrComponentTest|1|1|27641|642041999581|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.3|activateTariff...</msg>
<status status="PASS" endtime="20160128 01:07:13.453" starttime="20160128 01:07:13.423"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.455" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:07:13.455" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:07:13.455" starttime="20160128 01:07:13.454"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.457" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:07:13.457" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:07:13.457" starttime="20160128 01:07:13.456"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:07:13.462" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:07:13.462" starttime="20160128 01:07:13.461"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.463" starttime="20160128 01:07:13.458"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.465" starttime="20160128 01:07:13.463"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.466" starttime="20160128 01:07:13.419"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.477" starttime="20160128 01:07:13.475"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.477" starttime="20160128 01:07:13.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.480" starttime="20160128 01:07:13.478"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.481" starttime="20160128 01:07:13.469"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.481" starttime="20160128 01:07:13.466"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.481" starttime="20160128 01:07:02.560"></status>
</kw>
<doc>Send the CRCE Confirmation XDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:07:13.482" starttime="20160128 01:07:02.556"></status>
</test>
<test id="s1-s3-s1-s1-t6" name="Test CRCE AccountChange ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${CRCE_Acc}</arg>
<arg>CRCE_Acc</arg>
<arg>crce_accountchange</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.510" starttime="20160128 01:07:13.509"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.552" starttime="20160128 01:07:13.513"></status>
</kw>
<msg timestamp="20160128 01:07:13.553" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:07:13.552" starttime="20160128 01:07:13.510"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:07:13.557" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:07:13.952" level="INFO">Read output: Last login: Thu Jan 28 00:07:02 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:07:13.953" starttime="20160128 01:07:13.556"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.953" starttime="20160128 01:07:13.553"></status>
</kw>
<msg timestamp="20160128 01:07:13.954" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:07:13.954" starttime="20160128 01:07:13.504"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:13.960" starttime="20160128 01:07:13.959"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:13.962" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160128 01:07:13.965" starttime="20160128 01:07:13.961"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:13.966" starttime="20160128 01:07:13.955"></status>
</kw>
<msg timestamp="20160128 01:07:13.967" level="INFO">${ssh_connection} = 9</msg>
<status status="PASS" endtime="20160128 01:07:13.966" starttime="20160128 01:07:13.498"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:14.301" starttime="20160128 01:07:13.977"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:14.302" starttime="20160128 01:07:13.974"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:14.309" starttime="20160128 01:07:14.308"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:14.316" starttime="20160128 01:07:14.310"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:14.317" starttime="20160128 01:07:14.304"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.318" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:07:24.319" starttime="20160128 01:07:14.317"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.331" starttime="20160128 01:07:24.330"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:07:24.335" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:07:24.334" starttime="20160128 01:07:24.332"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.340" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:07:24.340" starttime="20160128 01:07:24.335"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.346" starttime="20160128 01:07:24.345"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:07:24.347" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:07:24.383" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:24.384" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:07:24.383" starttime="20160128 01:07:24.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.385" starttime="20160128 01:07:24.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.386" starttime="20160128 01:07:24.385"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.387" starttime="20160128 01:07:24.387"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:07:24.389" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:07:24.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:24.459" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:07:24.460" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:07:24.459" starttime="20160128 01:07:24.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.463" starttime="20160128 01:07:24.460"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.464" starttime="20160128 01:07:24.463"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.465" starttime="20160128 01:07:24.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.467" starttime="20160128 01:07:24.466"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.468" starttime="20160128 01:07:24.467"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.469" starttime="20160128 01:07:24.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.470" starttime="20160128 01:07:24.470"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.472" starttime="20160128 01:07:24.471"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.473" starttime="20160128 01:07:24.472"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.474" starttime="20160128 01:07:24.473"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.475" starttime="20160128 01:07:24.475"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.476" starttime="20160128 01:07:24.341"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:24.477" level="INFO">Starting command 'cat tmpfilemonitor9.log'.</msg>
<status status="PASS" endtime="20160128 01:07:24.480" starttime="20160128 01:07:24.476"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:07:24.481" level="INFO">Reading output of command 'cat tmpfilemonitor9.log'.</msg>
<msg timestamp="20160128 01:07:24.511" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:24.512" level="INFO">${stdout_string} = [2016-01-28 00:07:14,305][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:24.511" starttime="20160128 01:07:24.480"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:24.513" level="INFO">Executing command 'rm tmpfilemonitor9.log'.</msg>
<msg timestamp="20160128 01:07:24.584" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:07:24.584" starttime="20160128 01:07:24.512"></status>
</kw>
<msg timestamp="20160128 01:07:24.585" level="INFO">${tailed_text} = [2016-01-28 00:07:14,305][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:24.585" starttime="20160128 01:07:24.326"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.591" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/CRCE_Acc_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:07:24.591" starttime="20160128 01:07:24.589"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.591" starttime="20160128 01:07:24.586"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.596" starttime="20160128 01:07:24.595"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.598" starttime="20160128 01:07:24.597"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.600" starttime="20160128 01:07:24.592"></status>
</kw>
<msg timestamp="20160128 01:07:24.601" level="INFO">${tailed_text} = [2016-01-28 00:07:14,305][INFO ][Camel (ticket-router) thread #49 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|140|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:07:24.600" starttime="20160128 01:07:24.321"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.616" starttime="20160128 01:07:24.615"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.644" starttime="20160128 01:07:24.617"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.645" starttime="20160128 01:07:24.645"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.647" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:07:24.648" level="INFO">${queryResultSetLines} = 1032777|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0|t...</msg>
<status status="PASS" endtime="20160128 01:07:24.648" starttime="20160128 01:07:24.646"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.649" starttime="20160128 01:07:24.649"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.651" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:07:24.651" level="INFO">@{queryResultSet} = [ 1032777|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160128 01:07:24.651" starttime="20160128 01:07:24.650"></status>
</kw>
<msg timestamp="20160128 01:07:24.652" level="INFO">@{queryRows} = [ 1032777|5.3|140|ACCOUNT_CHANGE|1|CRCE|crce01.tb13|2015-02-23 08:37:21.661|2015-02-23 08:37:21.659|CRCE_AccexpireAccount@crce01.tb13123456XdrComponentTest|1|1|27358|64272000351|PREPAID|EXPIRED|null|0...</msg>
<status status="PASS" endtime="20160128 01:07:24.652" starttime="20160128 01:07:24.611"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.654" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:07:24.655" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:07:24.654" starttime="20160128 01:07:24.653"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.656" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:07:24.657" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:07:24.656" starttime="20160128 01:07:24.655"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:07:24.661" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:07:24.661" starttime="20160128 01:07:24.660"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.662" starttime="20160128 01:07:24.657"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.664" starttime="20160128 01:07:24.662"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.665" starttime="20160128 01:07:24.607"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.676" starttime="20160128 01:07:24.675"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.676" starttime="20160128 01:07:24.672"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.679" starttime="20160128 01:07:24.677"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.680" starttime="20160128 01:07:24.668"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.680" starttime="20160128 01:07:24.665"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:24.681" starttime="20160128 01:07:13.488"></status>
</kw>
<doc>Send the CRCE AccountChange ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:07:24.682" starttime="20160128 01:07:13.484"></status>
</test>
<test id="s1-s3-s1-s1-t7" name="Test Customer EDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${Cust_EDR}</arg>
<arg>Cust_EDR</arg>
<arg>customer_edr</arg>
<arg>customerid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.709" starttime="20160128 01:07:24.708"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:24.750" starttime="20160128 01:07:24.713"></status>
</kw>
<msg timestamp="20160128 01:07:24.751" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:07:24.750" starttime="20160128 01:07:24.710"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:07:24.755" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:07:25.157" level="INFO">Read output: Last login: Thu Jan 28 00:07:13 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:07:25.157" starttime="20160128 01:07:24.754"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:25.158" starttime="20160128 01:07:24.752"></status>
</kw>
<msg timestamp="20160128 01:07:25.160" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:07:25.159" starttime="20160128 01:07:24.704"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:25.166" starttime="20160128 01:07:25.165"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:25.168" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160128 01:07:25.170" starttime="20160128 01:07:25.166"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:25.171" starttime="20160128 01:07:25.161"></status>
</kw>
<msg timestamp="20160128 01:07:25.172" level="INFO">${ssh_connection} = 10</msg>
<status status="PASS" endtime="20160128 01:07:25.172" starttime="20160128 01:07:24.698"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:25.187" starttime="20160128 01:07:25.182"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:25.187" starttime="20160128 01:07:25.178"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:25.192" starttime="20160128 01:07:25.191"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:25.201" starttime="20160128 01:07:25.193"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:25.202" starttime="20160128 01:07:25.188"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.203" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:07:35.205" starttime="20160128 01:07:25.202"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.215" starttime="20160128 01:07:35.214"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:07:35.218" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:07:35.218" starttime="20160128 01:07:35.215"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.222" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:07:35.223" starttime="20160128 01:07:35.219"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.228" starttime="20160128 01:07:35.227"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:07:35.229" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:07:35.266" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:35.267" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:07:35.267" starttime="20160128 01:07:35.228"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.269" starttime="20160128 01:07:35.268"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.270" starttime="20160128 01:07:35.269"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.271" starttime="20160128 01:07:35.271"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:07:35.274" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:07:35.342" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:35.343" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:07:35.343" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:07:35.342" starttime="20160128 01:07:35.272"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.346" starttime="20160128 01:07:35.343"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.347" starttime="20160128 01:07:35.347"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.349" starttime="20160128 01:07:35.348"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.350" starttime="20160128 01:07:35.349"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.351" starttime="20160128 01:07:35.350"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.353" starttime="20160128 01:07:35.352"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.354" starttime="20160128 01:07:35.353"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.355" starttime="20160128 01:07:35.355"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.357" starttime="20160128 01:07:35.356"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.358" starttime="20160128 01:07:35.357"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.359" starttime="20160128 01:07:35.358"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.360" starttime="20160128 01:07:35.223"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:35.361" level="INFO">Starting command 'cat tmpfilemonitor10.log'.</msg>
<status status="PASS" endtime="20160128 01:07:35.364" starttime="20160128 01:07:35.360"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:07:35.365" level="INFO">Reading output of command 'cat tmpfilemonitor10.log'.</msg>
<msg timestamp="20160128 01:07:35.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:35.396" level="INFO">${stdout_string} = [2016-01-28 00:07:25,250][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160128 01:07:35.395" starttime="20160128 01:07:35.365"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:35.397" level="INFO">Executing command 'rm tmpfilemonitor10.log'.</msg>
<msg timestamp="20160128 01:07:35.468" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:07:35.468" starttime="20160128 01:07:35.396"></status>
</kw>
<msg timestamp="20160128 01:07:35.469" level="INFO">${tailed_text} = [2016-01-28 00:07:25,250][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160128 01:07:35.469" starttime="20160128 01:07:35.211"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.474" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/Cust_EDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:07:35.475" starttime="20160128 01:07:35.473"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.475" starttime="20160128 01:07:35.470"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.480" starttime="20160128 01:07:35.479"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.482" starttime="20160128 01:07:35.481"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.483" starttime="20160128 01:07:35.476"></status>
</kw>
<msg timestamp="20160128 01:07:35.484" level="INFO">${tailed_text} = [2016-01-28 00:07:25,250][INFO ][Camel (ticket-router) thread #50 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|910|...</msg>
<status status="PASS" endtime="20160128 01:07:35.484" starttime="20160128 01:07:35.206"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.500" starttime="20160128 01:07:35.499"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.504" starttime="20160128 01:07:35.500"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.505" starttime="20160128 01:07:35.504"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.506" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:07:35.507" level="INFO">${queryResultSetLines} = 1000756|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.|
</msg>
<status status="PASS" endtime="20160128 01:07:35.507" starttime="20160128 01:07:35.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.508" starttime="20160128 01:07:35.508"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.510" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:07:35.510" level="INFO">@{queryResultSet} = [ 1000756|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160128 01:07:35.510" starttime="20160128 01:07:35.509"></status>
</kw>
<msg timestamp="20160128 01:07:35.511" level="INFO">@{queryRows} = [ 1000756|5.3|910|1|soa01|2015-02-23 10:45:09.197|2403996848198679|Cust_EDR123456XdrComponentTest|ANONYMOUS|INSTALLED|DELETE_CUSTOMER|null|null|null|null|CRM|166|Anony.| ]</msg>
<status status="PASS" endtime="20160128 01:07:35.511" starttime="20160128 01:07:35.495"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.513" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:07:35.514" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:07:35.513" starttime="20160128 01:07:35.512"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.515" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:07:35.515" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:07:35.515" starttime="20160128 01:07:35.514"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:07:35.520" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:07:35.520" starttime="20160128 01:07:35.519"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.520" starttime="20160128 01:07:35.516"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.523" starttime="20160128 01:07:35.521"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.524" starttime="20160128 01:07:35.491"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.535" starttime="20160128 01:07:35.533"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.535" starttime="20160128 01:07:35.531"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.538" starttime="20160128 01:07:35.535"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.538" starttime="20160128 01:07:35.527"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.539" starttime="20160128 01:07:35.524"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:35.539" starttime="20160128 01:07:24.687"></status>
</kw>
<doc>Send the CRM EDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:07:35.540" starttime="20160128 01:07:24.683"></status>
</test>
<test id="s1-s3-s1-s1-t8" name="Test Customer SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${SDR_IME}</arg>
<arg>SDR_IME</arg>
<arg>inotif_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.567" starttime="20160128 01:07:35.566"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:35.622" starttime="20160128 01:07:35.571"></status>
</kw>
<msg timestamp="20160128 01:07:35.623" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:07:35.623" starttime="20160128 01:07:35.568"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:07:35.633" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:07:36.022" level="INFO">Read output: Last login: Thu Jan 28 00:07:24 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:07:36.023" starttime="20160128 01:07:35.630"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:36.024" starttime="20160128 01:07:35.625"></status>
</kw>
<msg timestamp="20160128 01:07:36.026" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:07:36.025" starttime="20160128 01:07:35.562"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:36.032" starttime="20160128 01:07:36.031"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:36.033" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160128 01:07:36.036" starttime="20160128 01:07:36.032"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:36.037" starttime="20160128 01:07:36.027"></status>
</kw>
<msg timestamp="20160128 01:07:36.038" level="INFO">${ssh_connection} = 11</msg>
<status status="PASS" endtime="20160128 01:07:36.038" starttime="20160128 01:07:35.556"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:44.422" starttime="20160128 01:07:36.048"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:44.424" starttime="20160128 01:07:36.044"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:44.430" starttime="20160128 01:07:44.429"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:44.438" starttime="20160128 01:07:44.431"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:44.438" starttime="20160128 01:07:44.426"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:07:54.440" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:07:54.441" starttime="20160128 01:07:44.439"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.452" starttime="20160128 01:07:54.451"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:07:54.455" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:07:54.455" starttime="20160128 01:07:54.452"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:07:54.459" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:07:54.460" starttime="20160128 01:07:54.455"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.465" starttime="20160128 01:07:54.464"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:07:54.466" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:07:54.501" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:54.502" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:07:54.501" starttime="20160128 01:07:54.465"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.503" starttime="20160128 01:07:54.502"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.504" starttime="20160128 01:07:54.503"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.505" starttime="20160128 01:07:54.505"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:07:54.507" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:07:54.576" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:54.577" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:07:54.577" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:07:54.577" starttime="20160128 01:07:54.506"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.581" starttime="20160128 01:07:54.578"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.582" starttime="20160128 01:07:54.581"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.583" starttime="20160128 01:07:54.582"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.584" starttime="20160128 01:07:54.583"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.585" starttime="20160128 01:07:54.585"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.587" starttime="20160128 01:07:54.586"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.588" starttime="20160128 01:07:54.587"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.589" starttime="20160128 01:07:54.588"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.590" starttime="20160128 01:07:54.590"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.591" starttime="20160128 01:07:54.591"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.593" starttime="20160128 01:07:54.592"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:54.593" starttime="20160128 01:07:54.460"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:54.595" level="INFO">Starting command 'cat tmpfilemonitor11.log'.</msg>
<status status="PASS" endtime="20160128 01:07:54.598" starttime="20160128 01:07:54.594"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:07:54.599" level="INFO">Reading output of command 'cat tmpfilemonitor11.log'.</msg>
<msg timestamp="20160128 01:07:54.633" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:07:54.635" level="INFO">${stdout_string} = [2016-01-28 00:07:44,426][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160128 01:07:54.634" starttime="20160128 01:07:54.598"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:54.637" level="INFO">Executing command 'rm tmpfilemonitor11.log'.</msg>
<msg timestamp="20160128 01:07:54.708" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:07:54.709" starttime="20160128 01:07:54.635"></status>
</kw>
<msg timestamp="20160128 01:07:54.710" level="INFO">${tailed_text} = [2016-01-28 00:07:44,426][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160128 01:07:54.710" starttime="20160128 01:07:54.447"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:07:54.717" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/SDR_IME_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:07:54.717" starttime="20160128 01:07:54.715"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:54.717" starttime="20160128 01:07:54.711"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.723" starttime="20160128 01:07:54.722"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.724" starttime="20160128 01:07:54.723"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:54.726" starttime="20160128 01:07:54.718"></status>
</kw>
<msg timestamp="20160128 01:07:54.727" level="INFO">${tailed_text} = [2016-01-28 00:07:44,426][INFO ][Camel (ticket-router) thread #44 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|701||1||SDR|ngw...</msg>
<status status="PASS" endtime="20160128 01:07:54.726" starttime="20160128 01:07:54.443"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:54.742" starttime="20160128 01:07:54.741"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.720" starttime="20160128 01:07:54.742"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.722" starttime="20160128 01:07:55.721"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:07:55.724" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:07:55.725" level="INFO">${queryResultSetLines} = 5556161|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 23...</msg>
<status status="PASS" endtime="20160128 01:07:55.725" starttime="20160128 01:07:55.723"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.726" starttime="20160128 01:07:55.725"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:07:55.727" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:07:55.728" level="INFO">@{queryResultSet} = [ 5556161|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160128 01:07:55.728" starttime="20160128 01:07:55.727"></status>
</kw>
<msg timestamp="20160128 01:07:55.730" level="INFO">@{queryRows} = [ 5556161|5.3|701|SDR|1|null|ngw01|2015-02-23 23:29:53.59|2015-02-23 23:29:53.561|SDR_IME123XdrComponentTest|1434824|1|null|642042135084|null|null|null|null|null|null|SMS|null|5.3|null|NEW|2015-02-23 ...</msg>
<status status="PASS" endtime="20160128 01:07:55.729" starttime="20160128 01:07:54.737"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:07:55.731" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:07:55.732" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:07:55.732" starttime="20160128 01:07:55.730"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:07:55.733" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:07:55.734" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:07:55.734" starttime="20160128 01:07:55.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:07:55.738" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:07:55.739" starttime="20160128 01:07:55.737"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.739" starttime="20160128 01:07:55.734"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.742" starttime="20160128 01:07:55.740"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.742" starttime="20160128 01:07:54.733"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.753" starttime="20160128 01:07:55.752"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.754" starttime="20160128 01:07:55.750"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.756" starttime="20160128 01:07:55.754"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.757" starttime="20160128 01:07:55.746"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.758" starttime="20160128 01:07:55.743"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:55.758" starttime="20160128 01:07:35.546"></status>
</kw>
<doc>Send the CRM SDR IME ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:07:55.759" starttime="20160128 01:07:35.542"></status>
</test>
<test id="s1-s3-s1-s1-t9" name="Test Customer IVR SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${IVR_SDR}</arg>
<arg>IVR_SDR</arg>
<arg>ivr_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.786" starttime="20160128 01:07:55.785"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:55.816" starttime="20160128 01:07:55.789"></status>
</kw>
<msg timestamp="20160128 01:07:55.817" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:07:55.816" starttime="20160128 01:07:55.786"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:07:55.821" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:07:56.192" level="INFO">Read output: Last login: Thu Jan 28 00:07:35 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:07:56.193" starttime="20160128 01:07:55.820"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:56.193" starttime="20160128 01:07:55.817"></status>
</kw>
<msg timestamp="20160128 01:07:56.195" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:07:56.195" starttime="20160128 01:07:55.780"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:56.201" starttime="20160128 01:07:56.200"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:07:56.203" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160128 01:07:56.206" starttime="20160128 01:07:56.202"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:56.207" starttime="20160128 01:07:56.196"></status>
</kw>
<msg timestamp="20160128 01:07:56.208" level="INFO">${ssh_connection} = 12</msg>
<status status="PASS" endtime="20160128 01:07:56.207" starttime="20160128 01:07:55.775"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:56.222" starttime="20160128 01:07:56.218"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:56.223" starttime="20160128 01:07:56.214"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:56.228" starttime="20160128 01:07:56.227"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:07:56.236" starttime="20160128 01:07:56.228"></status>
</kw>
<status status="PASS" endtime="20160128 01:07:56.237" starttime="20160128 01:07:56.224"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.238" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:08:06.239" starttime="20160128 01:07:56.237"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.251" starttime="20160128 01:08:06.250"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:08:06.255" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:08:06.254" starttime="20160128 01:08:06.251"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.259" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:08:06.259" starttime="20160128 01:08:06.255"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.265" starttime="20160128 01:08:06.264"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:08:06.266" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:08:06.302" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:06.303" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:08:06.303" starttime="20160128 01:08:06.265"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.304" starttime="20160128 01:08:06.303"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.306" starttime="20160128 01:08:06.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.307" starttime="20160128 01:08:06.306"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:08:06.309" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:08:06.382" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:06.383" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:08:06.383" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:08:06.383" starttime="20160128 01:08:06.307"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.387" starttime="20160128 01:08:06.384"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.388" starttime="20160128 01:08:06.387"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.389" starttime="20160128 01:08:06.388"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.390" starttime="20160128 01:08:06.389"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.392" starttime="20160128 01:08:06.391"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.393" starttime="20160128 01:08:06.392"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.394" starttime="20160128 01:08:06.394"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.396" starttime="20160128 01:08:06.395"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.397" starttime="20160128 01:08:06.396"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.398" starttime="20160128 01:08:06.397"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.399" starttime="20160128 01:08:06.398"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.400" starttime="20160128 01:08:06.260"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:06.401" level="INFO">Starting command 'cat tmpfilemonitor12.log'.</msg>
<status status="PASS" endtime="20160128 01:08:06.404" starttime="20160128 01:08:06.400"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:06.405" level="INFO">Reading output of command 'cat tmpfilemonitor12.log'.</msg>
<msg timestamp="20160128 01:08:06.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:06.437" level="INFO">${stdout_string} = [2016-01-28 00:07:56,275][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:08:06.436" starttime="20160128 01:08:06.404"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:06.438" level="INFO">Executing command 'rm tmpfilemonitor12.log'.</msg>
<msg timestamp="20160128 01:08:06.510" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:08:06.511" starttime="20160128 01:08:06.437"></status>
</kw>
<msg timestamp="20160128 01:08:06.512" level="INFO">${tailed_text} = [2016-01-28 00:07:56,275][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:08:06.512" starttime="20160128 01:08:06.247"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.517" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/IVR_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:08:06.517" starttime="20160128 01:08:06.515"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.518" starttime="20160128 01:08:06.512"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.523" starttime="20160128 01:08:06.522"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.524" starttime="20160128 01:08:06.524"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.526" starttime="20160128 01:08:06.518"></status>
</kw>
<msg timestamp="20160128 01:08:06.527" level="INFO">${tailed_text} = [2016-01-28 00:07:56,275][INFO ][Camel (ticket-router) thread #51 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=1.0|601|...</msg>
<status status="PASS" endtime="20160128 01:08:06.527" starttime="20160128 01:08:06.242"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.542" starttime="20160128 01:08:06.541"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.546" starttime="20160128 01:08:06.543"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.547" starttime="20160128 01:08:06.547"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.549" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:08:06.550" level="INFO">${queryResultSetLines} = 1000749|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0|A...</msg>
<status status="PASS" endtime="20160128 01:08:06.549" starttime="20160128 01:08:06.548"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.551" starttime="20160128 01:08:06.550"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.552" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:08:06.553" level="INFO">@{queryResultSet} = [ 1000749|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160128 01:08:06.553" starttime="20160128 01:08:06.551"></status>
</kw>
<msg timestamp="20160128 01:08:06.554" level="INFO">@{queryRows} = [ 1000749|1.0|601|2015-02-23 11:43:07.287|ivr-app01|1|IVR_SDR856C793B481C63428.ivr-app01XdrComponentTest|2015-02-23 11:43:07.237|123456789|573192010000|573192010001|null|null|2013-03-05 11:43:07.237|0...</msg>
<status status="PASS" endtime="20160128 01:08:06.554" starttime="20160128 01:08:06.538"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.555" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:08:06.556" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:08:06.556" starttime="20160128 01:08:06.554"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.557" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:08:06.558" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:08:06.558" starttime="20160128 01:08:06.557"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:08:06.562" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:08:06.563" starttime="20160128 01:08:06.561"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.563" starttime="20160128 01:08:06.558"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.566" starttime="20160128 01:08:06.563"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.566" starttime="20160128 01:08:06.533"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.577" starttime="20160128 01:08:06.576"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.577" starttime="20160128 01:08:06.573"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.580" starttime="20160128 01:08:06.578"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.581" starttime="20160128 01:08:06.569"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.581" starttime="20160128 01:08:06.567"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:06.582" starttime="20160128 01:07:55.765"></status>
</kw>
<doc>Send the IVR SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:08:06.582" starttime="20160128 01:07:55.760"></status>
</test>
<test id="s1-s3-s1-s1-t10" name="Test Customer PROV SDR ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${PROV_SDR}</arg>
<arg>PROV_SDR</arg>
<arg>prov_sdr</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.610" starttime="20160128 01:08:06.609"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:06.666" starttime="20160128 01:08:06.613"></status>
</kw>
<msg timestamp="20160128 01:08:06.668" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:08:06.667" starttime="20160128 01:08:06.610"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:08:06.679" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:08:07.067" level="INFO">Read output: Last login: Thu Jan 28 00:07:56 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:08:07.069" starttime="20160128 01:08:06.677"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:07.070" starttime="20160128 01:08:06.669"></status>
</kw>
<msg timestamp="20160128 01:08:07.074" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:08:07.073" starttime="20160128 01:08:06.604"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:07.081" starttime="20160128 01:08:07.080"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:07.082" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160128 01:08:07.085" starttime="20160128 01:08:07.081"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:07.086" starttime="20160128 01:08:07.076"></status>
</kw>
<msg timestamp="20160128 01:08:07.087" level="INFO">${ssh_connection} = 13</msg>
<status status="PASS" endtime="20160128 01:08:07.086" starttime="20160128 01:08:06.598"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:07.113" starttime="20160128 01:08:07.097"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:07.114" starttime="20160128 01:08:07.093"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:07.119" starttime="20160128 01:08:07.118"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:07.127" starttime="20160128 01:08:07.120"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:07.128" starttime="20160128 01:08:07.115"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.130" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:08:17.130" starttime="20160128 01:08:07.128"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.141" starttime="20160128 01:08:17.140"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:08:17.144" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:08:17.144" starttime="20160128 01:08:17.141"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.148" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:08:17.149" starttime="20160128 01:08:17.145"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.154" starttime="20160128 01:08:17.153"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:08:17.155" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:08:17.191" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:17.192" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:08:17.192" starttime="20160128 01:08:17.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.193" starttime="20160128 01:08:17.192"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.194" starttime="20160128 01:08:17.194"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.196" starttime="20160128 01:08:17.195"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:08:17.198" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:08:17.268" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:17.269" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:08:17.269" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:08:17.269" starttime="20160128 01:08:17.196"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.272" starttime="20160128 01:08:17.270"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.274" starttime="20160128 01:08:17.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.275" starttime="20160128 01:08:17.274"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.276" starttime="20160128 01:08:17.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.277" starttime="20160128 01:08:17.276"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.278" starttime="20160128 01:08:17.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.280" starttime="20160128 01:08:17.279"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.281" starttime="20160128 01:08:17.280"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.282" starttime="20160128 01:08:17.281"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.283" starttime="20160128 01:08:17.283"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.285" starttime="20160128 01:08:17.284"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.285" starttime="20160128 01:08:17.149"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:17.286" level="INFO">Starting command 'cat tmpfilemonitor13.log'.</msg>
<status status="PASS" endtime="20160128 01:08:17.289" starttime="20160128 01:08:17.285"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:17.291" level="INFO">Reading output of command 'cat tmpfilemonitor13.log'.</msg>
<msg timestamp="20160128 01:08:17.321" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:17.322" level="INFO">${stdout_string} = [2016-01-28 00:08:07,115][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160128 01:08:17.322" starttime="20160128 01:08:17.290"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:17.324" level="INFO">Executing command 'rm tmpfilemonitor13.log'.</msg>
<msg timestamp="20160128 01:08:17.397" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:08:17.397" starttime="20160128 01:08:17.323"></status>
</kw>
<msg timestamp="20160128 01:08:17.398" level="INFO">${tailed_text} = [2016-01-28 00:08:07,115][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160128 01:08:17.398" starttime="20160128 01:08:17.136"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.403" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/PROV_SDR_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:08:17.404" starttime="20160128 01:08:17.402"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.404" starttime="20160128 01:08:17.399"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.409" starttime="20160128 01:08:17.408"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.411" starttime="20160128 01:08:17.410"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.413" starttime="20160128 01:08:17.405"></status>
</kw>
<msg timestamp="20160128 01:08:17.414" level="INFO">${tailed_text} = [2016-01-28 00:08:07,115][INFO ][Camel (ticket-router) thread #53 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|321|2015-02-23T...</msg>
<status status="PASS" endtime="20160128 01:08:17.413" starttime="20160128 01:08:17.132"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.429" starttime="20160128 01:08:17.428"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.440" starttime="20160128 01:08:17.429"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.441" starttime="20160128 01:08:17.440"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.443" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:08:17.444" level="INFO">${queryResultSetLines} = 1012159|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|null|...</msg>
<status status="PASS" endtime="20160128 01:08:17.443" starttime="20160128 01:08:17.442"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.445" starttime="20160128 01:08:17.444"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.446" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:08:17.447" level="INFO">@{queryResultSet} = [ 1012159|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160128 01:08:17.447" starttime="20160128 01:08:17.445"></status>
</kw>
<msg timestamp="20160128 01:08:17.448" level="INFO">@{queryRows} = [ 1012159|5.3|321|1|prov01|2015-02-23 16:52:19.006|2015-02-23 16:52:18.253|PROV_SDR32010XdrComponentTest|NewImei|null|null|null|null|573192552404|732123900052404|8957123100900052404|null|null|null|nul...</msg>
<status status="PASS" endtime="20160128 01:08:17.448" starttime="20160128 01:08:17.424"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.450" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:08:17.450" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:08:17.450" starttime="20160128 01:08:17.448"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.452" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:08:17.452" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:08:17.452" starttime="20160128 01:08:17.451"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:08:17.457" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:08:17.457" starttime="20160128 01:08:17.456"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.457" starttime="20160128 01:08:17.453"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.460" starttime="20160128 01:08:17.458"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.461" starttime="20160128 01:08:17.420"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.471" starttime="20160128 01:08:17.470"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.472" starttime="20160128 01:08:17.468"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.474" starttime="20160128 01:08:17.472"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.475" starttime="20160128 01:08:17.464"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.475" starttime="20160128 01:08:17.461"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.476" starttime="20160128 01:08:06.588"></status>
</kw>
<doc>Send the PROV SDR ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:08:17.477" starttime="20160128 01:08:06.584"></status>
</test>
<test id="s1-s3-s1-s1-t11" name="Test MoneyTX ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MoneyTX}</arg>
<arg>MoneyTX</arg>
<arg>crce_moneytx</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.504" starttime="20160128 01:08:17.503"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.557" starttime="20160128 01:08:17.508"></status>
</kw>
<msg timestamp="20160128 01:08:17.560" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:08:17.559" starttime="20160128 01:08:17.505"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:08:17.570" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:08:17.953" level="INFO">Read output: Last login: Thu Jan 28 00:08:06 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:08:17.954" starttime="20160128 01:08:17.567"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.955" starttime="20160128 01:08:17.561"></status>
</kw>
<msg timestamp="20160128 01:08:17.956" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:08:17.955" starttime="20160128 01:08:17.499"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.961" starttime="20160128 01:08:17.960"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:17.963" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160128 01:08:17.966" starttime="20160128 01:08:17.962"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.967" starttime="20160128 01:08:17.957"></status>
</kw>
<msg timestamp="20160128 01:08:17.967" level="INFO">${ssh_connection} = 14</msg>
<status status="PASS" endtime="20160128 01:08:17.967" starttime="20160128 01:08:17.492"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.983" starttime="20160128 01:08:17.977"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.984" starttime="20160128 01:08:17.974"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.989" starttime="20160128 01:08:17.988"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:17.997" starttime="20160128 01:08:17.990"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:17.998" starttime="20160128 01:08:17.985"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:08:27.999" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:08:28.000" starttime="20160128 01:08:17.998"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.012" starttime="20160128 01:08:28.010"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:08:28.015" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:08:28.015" starttime="20160128 01:08:28.012"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.019" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:08:28.019" starttime="20160128 01:08:28.016"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.025" starttime="20160128 01:08:28.024"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:08:28.026" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:08:28.062" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:28.063" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:08:28.063" starttime="20160128 01:08:28.025"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.064" starttime="20160128 01:08:28.063"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.065" starttime="20160128 01:08:28.065"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.067" starttime="20160128 01:08:28.066"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:08:28.068" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:08:28.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:28.141" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:08:28.141" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:08:28.141" starttime="20160128 01:08:28.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.144" starttime="20160128 01:08:28.142"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.146" starttime="20160128 01:08:28.145"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.147" starttime="20160128 01:08:28.146"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.148" starttime="20160128 01:08:28.147"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.149" starttime="20160128 01:08:28.148"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.150" starttime="20160128 01:08:28.150"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.152" starttime="20160128 01:08:28.151"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.153" starttime="20160128 01:08:28.152"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.155" starttime="20160128 01:08:28.154"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.156" starttime="20160128 01:08:28.155"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.157" starttime="20160128 01:08:28.156"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.158" starttime="20160128 01:08:28.020"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:28.160" level="INFO">Starting command 'cat tmpfilemonitor14.log'.</msg>
<status status="PASS" endtime="20160128 01:08:28.163" starttime="20160128 01:08:28.159"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:28.164" level="INFO">Reading output of command 'cat tmpfilemonitor14.log'.</msg>
<msg timestamp="20160128 01:08:28.195" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:28.196" level="INFO">${stdout_string} = [2016-01-28 00:08:18,021][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160128 01:08:28.196" starttime="20160128 01:08:28.163"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:28.197" level="INFO">Executing command 'rm tmpfilemonitor14.log'.</msg>
<msg timestamp="20160128 01:08:28.271" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:08:28.272" starttime="20160128 01:08:28.196"></status>
</kw>
<msg timestamp="20160128 01:08:28.273" level="INFO">${tailed_text} = [2016-01-28 00:08:18,021][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160128 01:08:28.273" starttime="20160128 01:08:28.007"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.279" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MoneyTX_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:08:28.279" starttime="20160128 01:08:28.277"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.280" starttime="20160128 01:08:28.274"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.285" starttime="20160128 01:08:28.284"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.287" starttime="20160128 01:08:28.286"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.288" starttime="20160128 01:08:28.280"></status>
</kw>
<msg timestamp="20160128 01:08:28.289" level="INFO">${tailed_text} = [2016-01-28 00:08:18,021][INFO ][Camel (ticket-router) thread #52 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][ 447] Ticket successfully routed [ticket=5.3|120|...</msg>
<status status="PASS" endtime="20160128 01:08:28.289" starttime="20160128 01:08:28.002"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.305" starttime="20160128 01:08:28.304"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.309" starttime="20160128 01:08:28.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.310" starttime="20160128 01:08:28.310"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.312" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:08:28.313" level="INFO">${queryResultSetLines} = 1000821|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|1|...</msg>
<status status="PASS" endtime="20160128 01:08:28.313" starttime="20160128 01:08:28.311"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.314" starttime="20160128 01:08:28.313"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.315" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:08:28.316" level="INFO">@{queryResultSet} = [ 1000821|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160128 01:08:28.316" starttime="20160128 01:08:28.315"></status>
</kw>
<msg timestamp="20160128 01:08:28.317" level="INFO">@{queryRows} = [ 1000821|5.3|120|MONEYTX|1|CRCE|crce13|2015-02-23 09:45:57.996|2015-02-23 09:45:57.996|MoneyTX@crce01696123XdrComponentTest|1|1|149|38974400006|PREPAID|ACTIVE|null|0|t|OK|NONE|null|1.1|moneyTransfer|...</msg>
<status status="PASS" endtime="20160128 01:08:28.317" starttime="20160128 01:08:28.300"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.319" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:08:28.319" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:08:28.319" starttime="20160128 01:08:28.318"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.321" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:08:28.321" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:08:28.321" starttime="20160128 01:08:28.320"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:08:28.326" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:08:28.326" starttime="20160128 01:08:28.325"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.327" starttime="20160128 01:08:28.322"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.329" starttime="20160128 01:08:28.327"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.330" starttime="20160128 01:08:28.296"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.341" starttime="20160128 01:08:28.339"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.341" starttime="20160128 01:08:28.337"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.344" starttime="20160128 01:08:28.342"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.344" starttime="20160128 01:08:28.333"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.345" starttime="20160128 01:08:28.330"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.345" starttime="20160128 01:08:17.482"></status>
</kw>
<doc>Send the MoneyTX CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:08:28.346" starttime="20160128 01:08:17.478"></status>
</test>
<test id="s1-s3-s1-s1-t12" name="Test SwapSIM ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${swapSIM}</arg>
<arg>swapSIM</arg>
<arg>crce_simswap</arg>
<arg>sessionid</arg>
<arg>OK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.373" starttime="20160128 01:08:28.372"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.428" starttime="20160128 01:08:28.376"></status>
</kw>
<msg timestamp="20160128 01:08:28.430" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:08:28.429" starttime="20160128 01:08:28.373"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:08:28.440" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:08:28.832" level="INFO">Read output: Last login: Thu Jan 28 00:08:17 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:08:28.833" starttime="20160128 01:08:28.438"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.834" starttime="20160128 01:08:28.431"></status>
</kw>
<msg timestamp="20160128 01:08:28.836" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:08:28.836" starttime="20160128 01:08:28.367"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.849" starttime="20160128 01:08:28.846"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:28.853" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160128 01:08:28.857" starttime="20160128 01:08:28.850"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.858" starttime="20160128 01:08:28.838"></status>
</kw>
<msg timestamp="20160128 01:08:28.861" level="INFO">${ssh_connection} = 15</msg>
<status status="PASS" endtime="20160128 01:08:28.860" starttime="20160128 01:08:28.362"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.888" starttime="20160128 01:08:28.881"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.889" starttime="20160128 01:08:28.874"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.895" starttime="20160128 01:08:28.894"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:28.902" starttime="20160128 01:08:28.895"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:28.902" starttime="20160128 01:08:28.890"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:08:38.904" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:08:38.908" starttime="20160128 01:08:28.903"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:38.919" starttime="20160128 01:08:38.918"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:08:38.922" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:08:38.922" starttime="20160128 01:08:38.919"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:08:38.926" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:08:38.927" starttime="20160128 01:08:38.923"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:38.933" starttime="20160128 01:08:38.931"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:08:38.934" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:08:38.973" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:38.973" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:08:38.973" starttime="20160128 01:08:38.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:38.975" starttime="20160128 01:08:38.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:38.976" starttime="20160128 01:08:38.975"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:38.977" starttime="20160128 01:08:38.976"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:08:38.979" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:08:39.052" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:39.055" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:08:39.056" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:08:39.053" starttime="20160128 01:08:38.978"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.063" starttime="20160128 01:08:39.057"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.066" starttime="20160128 01:08:39.064"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.069" starttime="20160128 01:08:39.067"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.072" starttime="20160128 01:08:39.070"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.075" starttime="20160128 01:08:39.073"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.078" starttime="20160128 01:08:39.076"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.081" starttime="20160128 01:08:39.079"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.084" starttime="20160128 01:08:39.082"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.086" starttime="20160128 01:08:39.085"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.089" starttime="20160128 01:08:39.087"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.092" starttime="20160128 01:08:39.090"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.093" starttime="20160128 01:08:38.927"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:39.097" level="INFO">Starting command 'cat tmpfilemonitor15.log'.</msg>
<status status="PASS" endtime="20160128 01:08:39.101" starttime="20160128 01:08:39.094"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:39.103" level="INFO">Reading output of command 'cat tmpfilemonitor15.log'.</msg>
<msg timestamp="20160128 01:08:39.135" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:39.137" level="INFO">${stdout_string} = [2016-01-28 00:08:28,891][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160128 01:08:39.136" starttime="20160128 01:08:39.102"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:39.141" level="INFO">Executing command 'rm tmpfilemonitor15.log'.</msg>
<msg timestamp="20160128 01:08:39.211" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:08:39.212" starttime="20160128 01:08:39.139"></status>
</kw>
<msg timestamp="20160128 01:08:39.215" level="INFO">${tailed_text} = [2016-01-28 00:08:28,891][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160128 01:08:39.213" starttime="20160128 01:08:38.914"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.225" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/swapSIM_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:08:39.226" starttime="20160128 01:08:39.222"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.227" starttime="20160128 01:08:39.216"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.237" starttime="20160128 01:08:39.235"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.240" starttime="20160128 01:08:39.238"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.243" starttime="20160128 01:08:39.228"></status>
</kw>
<msg timestamp="20160128 01:08:39.246" level="INFO">${tailed_text} = [2016-01-28 00:08:28,891][INFO ][Camel (ticket-router) thread #46 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|160|true|16|CRC...</msg>
<status status="PASS" endtime="20160128 01:08:39.245" starttime="20160128 01:08:38.910"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.277" starttime="20160128 01:08:39.275"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.284" starttime="20160128 01:08:39.278"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.286" starttime="20160128 01:08:39.285"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.289" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:08:39.291" level="INFO">${queryResultSetLines} = 1000690|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|nul...</msg>
<status status="PASS" endtime="20160128 01:08:39.290" starttime="20160128 01:08:39.287"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.293" starttime="20160128 01:08:39.292"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.296" level="INFO">1 lines returned</msg>
<msg timestamp="20160128 01:08:39.297" level="INFO">@{queryResultSet} = [ 1000690|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160128 01:08:39.297" starttime="20160128 01:08:39.294"></status>
</kw>
<msg timestamp="20160128 01:08:39.299" level="INFO">@{queryRows} = [ 1000690|5.3|160|SIM_SWAP|16|CRCE|crce013|2015-02-23 12:42:43.815|2015-02-23 12:42:43.814|swapSIMchangeMsisdn@crce01567123XdrComponentTest|1|1|155420|573190004020|PREPAID|INSTALLED|null|1|t|OK|NONE|n...</msg>
<status status="PASS" endtime="20160128 01:08:39.299" starttime="20160128 01:08:39.267"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.303" level="INFO">Length is 1</msg>
<msg timestamp="20160128 01:08:39.304" level="INFO">${length} = 1</msg>
<status status="PASS" endtime="20160128 01:08:39.303" starttime="20160128 01:08:39.300"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.307" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:08:39.308" level="INFO">${length_s} = 1</msg>
<status status="PASS" endtime="20160128 01:08:39.307" starttime="20160128 01:08:39.305"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:08:39.316" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:08:39.317" starttime="20160128 01:08:39.314"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.318" starttime="20160128 01:08:39.309"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.324" starttime="20160128 01:08:39.319"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.324" starttime="20160128 01:08:39.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Contain">
<doc>Fails if `item1` does not contain `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.336" starttime="20160128 01:08:39.335"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.336" starttime="20160128 01:08:39.332"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.339" starttime="20160128 01:08:39.337"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.340" starttime="20160128 01:08:39.328"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.340" starttime="20160128 01:08:39.326"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.340" starttime="20160128 01:08:28.352"></status>
</kw>
<doc>Send the swapSIM CRCE ticket and analyse results

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>test</tag>
<tag>TNZ_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:08:39.341" starttime="20160128 01:08:28.348"></status>
</test>
<test id="s1-s3-s1-s1-t13" name="Test MOC NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${MOC_NOK}</arg>
<arg>MOC_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160128 01:08:39.352" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160128 01:08:39.375" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160128 01:08:39.376" starttime="20160128 01:08:39.351"></status>
</kw>
<status status="FAIL" endtime="20160128 01:08:39.376" starttime="20160128 01:08:39.348"></status>
</kw>
<doc>Send the invalid MOC XDR ticket with following changes: Version (Header, Mandatory, changed), Provider (H,M,empty), Success (H,M,changed), CRCE Operation (B,M, changed), TrafficType (B,M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160128 01:08:39.377" starttime="20160128 01:08:39.343">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t14" name="Test SMS NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${SMS_NOK}</arg>
<arg>SMS_NOK</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160128 01:08:39.389" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160128 01:08:39.390" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160128 01:08:39.391" starttime="20160128 01:08:39.388"></status>
</kw>
<status status="FAIL" endtime="20160128 01:08:39.391" starttime="20160128 01:08:39.384"></status>
</kw>
<doc>Send the invalid SMS XDR ticket with following changes: Version (Header, Mandatory, changed), TrafficType (B, M, mpty), CRCE Result Code (B, M, changed). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160128 01:08:39.392" starttime="20160128 01:08:39.379">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t15" name="Test DATA NOK ticket processing">
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE IF</arg>
<arg>'${SUT RELEASE TAG PREFIX}'=='R6.1'</arg>
<arg>Fail</arg>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
<arg>ELSE</arg>
<arg>Send Ticket And Analyse</arg>
<arg>${DATA_NOK}</arg>
<arg>DATA_NOK</arg>
<arg>crce_cdr</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="BuiltIn.Fail">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>SKIPPED until defect D-05171 is closed</arg>
<arg>noncritical</arg>
</arguments>
<msg timestamp="20160128 01:08:39.402" level="INFO">Set tag 'noncritical'.</msg>
<msg timestamp="20160128 01:08:39.403" level="FAIL">SKIPPED until defect D-05171 is closed</msg>
<status status="FAIL" endtime="20160128 01:08:39.403" starttime="20160128 01:08:39.401"></status>
</kw>
<status status="FAIL" endtime="20160128 01:08:39.404" starttime="20160128 01:08:39.398"></status>
</kw>
<doc>Send the invalid DATA XDR ticket with following changes: Application (Header, Mandatory, empty), Tariff (B, M, empty). It is expected that ticket processing fails (and test should PASS in that case)
=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>noncritical</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="FAIL" critical="no" endtime="20160128 01:08:39.404" starttime="20160128 01:08:39.393">SKIPPED until defect D-05171 is closed</status>
</test>
<test id="s1-s3-s1-s1-t16" name="Test MOC NOK - Invalid ASCII ticket processing">
<kw type="kw" name="Send Ticket And Analyse">
<doc>General test case skeleton to be executed. Contains all steps for single test case</doc>
<arguments>
<arg>${MOC_NOK_ASCII}</arg>
<arg>MOC_NOK_ASCII</arg>
<arg>crce_cdr_2015w08</arg>
<arg>sessionid</arg>
<arg>NOK</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login And Start File Monitor">
<doc>Combines 'SSH Login' and 'SSH Start File Monitor' for compacter coding style</doc>
<arguments>
<arg>${XDR USER}</arg>
<arg>${XDR PWD}</arg>
<arg>${EMPTY}</arg>
<arg>${XDR LOG FILE PATH}</arg>
<arg>host=${XDR HOST}</arg>
</arguments>
<kw type="kw" name="${ssh_connection} = ssh-support-resource.SSH Login">
<doc>Does a password or RSA key file based login at the passed SSH connection depending whether or not the passed password is .</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
<arg>${rsa_key_file}</arg>
<arg>ssh_connection=${ssh_connection}</arg>
<arg>host=${host}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Set Default Configuration">
<doc>Update the default `configuration`.</doc>
<arguments>
<arg>loglevel=INFO</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.431" starttime="20160128 01:08:39.430"></status>
</kw>
<kw type="kw" name="${ssh_connection} = BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${ssh_connection}'=='${EMPTY}'</arg>
<arg>Open Connection</arg>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>${host}</arg>
<arg>port=22</arg>
<arg>timeout=3</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.485" starttime="20160128 01:08:39.434"></status>
</kw>
<msg timestamp="20160128 01:08:39.487" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:08:39.487" starttime="20160128 01:08:39.432"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${pswd}'=='${EMPTY}'</arg>
<arg>Login With Public Key</arg>
<arg>${user}</arg>
<arg>${rsa_key_file}</arg>
<arg>ELSE</arg>
<arg>Login</arg>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${user}</arg>
<arg>${pswd}</arg>
</arguments>
<msg timestamp="20160128 01:08:39.498" level="INFO">Logging into '10.105.113.171:22' as 'qa_automation'.</msg>
<msg timestamp="20160128 01:08:39.890" level="INFO">Read output: Last login: Thu Jan 28 00:08:28 2016 from 10.105.101.196
[1m[qa_automation@xdr01.tb13 ~]$</msg>
<status status="PASS" endtime="20160128 01:08:39.890" starttime="20160128 01:08:39.495"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.891" starttime="20160128 01:08:39.489"></status>
</kw>
<msg timestamp="20160128 01:08:39.892" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:08:39.892" starttime="20160128 01:08:39.426"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Start File Monitor">
<doc>Executes a 'tail -0f' for the passed file on the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>${monitored_file_path}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.898" starttime="20160128 01:08:39.897"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>tail -0f ${monitored_file_path} &gt; tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:39.899" level="INFO">Starting command 'tail -0f /var/log/inew/xdr/5.3.1/inew-mvno-xdr.log &gt; tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160128 01:08:39.903" starttime="20160128 01:08:39.898"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.904" starttime="20160128 01:08:39.893"></status>
</kw>
<msg timestamp="20160128 01:08:39.906" level="INFO">${ssh_connection} = 16</msg>
<status status="PASS" endtime="20160128 01:08:39.906" starttime="20160128 01:08:39.420"></status>
</kw>
<kw type="kw" name="CleanDBTable">
<doc>Runs the sql query - deletes only selected rows of the ${table}</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Execute Sql">
<doc></doc>
<arguments>
<arg>delete from ${table} where ${search_key} like '${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.932" starttime="20160128 01:08:39.927"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.933" starttime="20160128 01:08:39.920"></status>
</kw>
<kw type="kw" name="Send Ticket To Queue">
<doc>Keyword using JMSLibrary to send ticket to JMS queue</doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="JMSLibrary.Create Text Message">
<doc></doc>
<arguments>
<arg>${ticket}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.938" starttime="20160128 01:08:39.937"></status>
</kw>
<kw type="kw" name="JMSLibrary.Send To Queue">
<doc></doc>
<arguments>
<arg>${AMQ-XDR CRCE CDR QUEUE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:39.946" starttime="20160128 01:08:39.939"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:39.946" starttime="20160128 01:08:39.933"></status>
</kw>
<kw type="kw" name="BuiltIn.Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${XDR PROCESSING TIME MS}</arg>
</arguments>
<msg timestamp="20160128 01:08:49.949" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20160128 01:08:49.950" starttime="20160128 01:08:39.947"></status>
</kw>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor And Logout">
<doc>Combines 'SSH Close File Monitor' and 'SSH Logout' for compacter coding style</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>./log/${logFileSignature}_ssh_tailed.log</arg>
</arguments>
<kw type="kw" name="${tailed_text} = ssh-support-resource.SSH Close File Monitor">
<doc>Closes a file monitor created via 'SSH Start File Monitor' and returns all grabbed text</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:49.961" starttime="20160128 01:08:49.960"></status>
</kw>
<kw type="kw" name="${CTRL_C} = BuiltIn.Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>chr(int(3))</arg>
</arguments>
<msg timestamp="20160128 01:08:49.964" level="INFO">${CTRL_C} = </msg>
<status status="PASS" endtime="20160128 01:08:49.964" starttime="20160128 01:08:49.961"></status>
</kw>
<kw type="kw" name="SSHLibrary.Write">
<doc>Writes the given `text` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${CTRL_C}</arg>
</arguments>
<msg timestamp="20160128 01:08:49.968" level="INFO">[m ^C</msg>
<status status="PASS" endtime="20160128 01:08:49.968" starttime="20160128 01:08:49.965"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Kill User Processes">
<doc>This is a helper to cleanup zombie processes left by the SSH lib's 'Start Command'</doc>
<arguments>
<arg>${ssh_connection}</arg>
<arg>tail</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:49.974" starttime="20160128 01:08:49.973"></status>
</kw>
<kw type="kw" name="${user} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>id -un</arg>
</arguments>
<msg timestamp="20160128 01:08:49.975" level="INFO">Executing command 'id -un'.</msg>
<msg timestamp="20160128 01:08:50.013" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:50.014" level="INFO">${user} = qa_automation</msg>
<status status="PASS" endtime="20160128 01:08:50.013" starttime="20160128 01:08:49.974"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.015" starttime="20160128 01:08:50.015"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>BEFORE SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.017" starttime="20160128 01:08:50.016"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.018" starttime="20160128 01:08:50.017"></status>
</kw>
<kw type="kw" name="${stderr}, ${rc} = SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -9 -u ${user} ${command_name}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<msg timestamp="20160128 01:08:50.020" level="INFO">Executing command 'pkill -9 -u qa_automation tail'.</msg>
<msg timestamp="20160128 01:08:50.091" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:50.092" level="INFO">${stderr} = </msg>
<msg timestamp="20160128 01:08:50.092" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20160128 01:08:50.091" starttime="20160128 01:08:50.018"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.095" starttime="20160128 01:08:50.092"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Old approach with kill:</arg>
<arg>For unknow reasons somtimes still processes stayed in the list an could not be killed even in subsequent executions</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.096" starttime="20160128 01:08:50.096"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>@{processes_list}=</arg>
<arg>Split String</arg>
<arg>${processes_string}</arg>
<arg>${\n}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.098" starttime="20160128 01:08:50.097"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>:FOR</arg>
<arg>${process}</arg>
<arg>IN</arg>
<arg>@{processes_list}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.099" starttime="20160128 01:08:50.098"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Log</arg>
<arg>SSH Kill User Processes is killing: ${process}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.100" starttime="20160128 01:08:50.099"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${pid}=</arg>
<arg>Fetch From Left</arg>
<arg>${process}</arg>
<arg>${SPACE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.101" starttime="20160128 01:08:50.101"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>${stderr}</arg>
<arg>${rc}=</arg>
<arg>Execute Command</arg>
<arg>sudo kill -9 ${pid}</arg>
<arg>return_stdout=False</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.103" starttime="20160128 01:08:50.102"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg></arg>
<arg>Run Keyword If</arg>
<arg>'${rc}' != '0'</arg>
<arg>Log</arg>
<arg>${stderr}</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.104" starttime="20160128 01:08:50.103"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${processes_string}=</arg>
<arg>Execute Command</arg>
<arg>ps U ${user} --no-heading | grep ${command_name} | grep -v grep</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.105" starttime="20160128 01:08:50.104"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>AFTER SSH Kill User Processes:</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.106" starttime="20160128 01:08:50.106"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Log</arg>
<arg>${processes_string}</arg>
<arg>console=yes</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.108" starttime="20160128 01:08:50.107"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.108" starttime="20160128 01:08:49.969"></status>
</kw>
<kw type="kw" name="SSHLibrary.Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>cat tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:50.110" level="INFO">Starting command 'cat tmpfilemonitor16.log'.</msg>
<status status="PASS" endtime="20160128 01:08:50.113" starttime="20160128 01:08:50.109"></status>
</kw>
<kw type="kw" name="${stdout_string} = SSHLibrary.Read Command Output">
<doc>Returns outputs of the most recent started command.</doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:50.114" level="INFO">Reading output of command 'cat tmpfilemonitor16.log'.</msg>
<msg timestamp="20160128 01:08:50.148" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20160128 01:08:50.149" level="INFO">${stdout_string} = [2016-01-28 00:08:39,934][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:08:50.149" starttime="20160128 01:08:50.114"></status>
</kw>
<kw type="kw" name="SSHLibrary.Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>rm tmpfilemonitor${ssh_connection}.log</arg>
</arguments>
<msg timestamp="20160128 01:08:50.151" level="INFO">Executing command 'rm tmpfilemonitor16.log'.</msg>
<msg timestamp="20160128 01:08:50.225" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20160128 01:08:50.225" starttime="20160128 01:08:50.150"></status>
</kw>
<msg timestamp="20160128 01:08:50.227" level="INFO">${tailed_text} = [2016-01-28 00:08:39,934][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:08:50.226" starttime="20160128 01:08:49.956"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword Unless">
<doc>Runs the given keyword with the given arguments, if `condition` is false.</doc>
<arguments>
<arg>'${store_to_file_path}'=='${EMPTY}'</arg>
<arg>Create File</arg>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<kw type="kw" name="OperatingSystem.Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${store_to_file_path}</arg>
<arg>${tailed_text}</arg>
</arguments>
<msg timestamp="20160128 01:08:50.232" html="yes" level="INFO">Created file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/log/MOC_NOK_ASCII_ssh_tailed.log&lt;/a&gt;'</msg>
<status status="PASS" endtime="20160128 01:08:50.232" starttime="20160128 01:08:50.230"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.233" starttime="20160128 01:08:50.227"></status>
</kw>
<kw type="kw" name="ssh-support-resource.SSH Logout">
<doc>Closes the passed SSH connection</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<kw type="kw" name="SSHLibrary.Switch Connection">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>${ssh_connection}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.238" starttime="20160128 01:08:50.237"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close Connection">
<doc>Closes the current connection.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.239" starttime="20160128 01:08:50.238"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.241" starttime="20160128 01:08:50.233"></status>
</kw>
<msg timestamp="20160128 01:08:50.242" level="INFO">${tailed_text} = [2016-01-28 00:08:39,934][INFO ][Camel (ticket-router) thread #45 - JmsConsumer[inew-cs.crce.cdr]][PartitionedTicketRoute                            ][  96] Received ticket [ticket=5.3|101|true|1|CRCE...</msg>
<status status="PASS" endtime="20160128 01:08:50.242" starttime="20160128 01:08:49.952"></status>
</kw>
<kw type="kw" name="AnalyseDBTable">
<doc>Look into the ${table} and check if entry exists. Entry is searched by sessionid that has to contain "ticket_signature" and XdrComponentTest string</doc>
<arguments>
<arg>${affectedDbTable}</arg>
<arg>${affectedDbTableKeyColumnName}</arg>
<arg>${test_case_type}</arg>
<arg>${logFileSignature}</arg>
</arguments>
<kw type="kw" name="@{queryRows} = dblib_support-resource.DBLIB Query">
<doc>this helper executes the passed select statement and returns the result as a list.</doc>
<arguments>
<arg>select * from ${table} where ${search_key} like '${test_sig}${UNIQUE_SEARCH_STRING}';</arg>
</arguments>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Execute Query *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.258" starttime="20160128 01:08:50.257"></status>
</kw>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Store Query Result To File">
<doc></doc>
<arguments>
<arg>${selectStatement}</arg>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.262" starttime="20160128 01:08:50.259"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Load Result from file</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.264" starttime="20160128 01:08:50.263"></status>
</kw>
<kw type="kw" name="${queryResultSetLines} = OperatingSystem.Get File">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${TMP_QUERY_RESULT_FILE}</arg>
</arguments>
<msg timestamp="20160128 01:08:50.266" html="yes" level="INFO">Getting file '&lt;a href="file:///opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt"&gt;/opt/robot/robotworkspace/bulk_execution_scripts/TNZ/tmp_query_result.txt&lt;/a&gt;'</msg>
<msg timestamp="20160128 01:08:50.266" level="INFO">${queryResultSetLines} = </msg>
<status status="PASS" endtime="20160128 01:08:50.266" starttime="20160128 01:08:50.264"></status>
</kw>
<kw type="kw" name="BuiltIn.Comment">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>***** Transform single string result into list of lines *****</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.268" starttime="20160128 01:08:50.267"></status>
</kw>
<kw type="kw" name="@{queryResultSet} = String.Split To Lines">
<doc>Converts the `string` into a list of lines.</doc>
<arguments>
<arg>${queryResultSetLines}</arg>
</arguments>
<msg timestamp="20160128 01:08:50.269" level="INFO">0 lines returned</msg>
<msg timestamp="20160128 01:08:50.270" level="INFO">@{queryResultSet} = [ ]</msg>
<status status="PASS" endtime="20160128 01:08:50.269" starttime="20160128 01:08:50.268"></status>
</kw>
<msg timestamp="20160128 01:08:50.270" level="INFO">@{queryRows} = [ ]</msg>
<status status="PASS" endtime="20160128 01:08:50.270" starttime="20160128 01:08:50.253"></status>
</kw>
<kw type="kw" name="${length} = BuiltIn.Get Length">
<doc>Returns and logs the length of the given item.</doc>
<arguments>
<arg>${queryRows}</arg>
</arguments>
<msg timestamp="20160128 01:08:50.272" level="INFO">Length is 0</msg>
<msg timestamp="20160128 01:08:50.273" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20160128 01:08:50.272" starttime="20160128 01:08:50.271"></status>
</kw>
<kw type="kw" name="${length_s} = BuiltIn.Convert To String">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${length}</arg>
</arguments>
<msg timestamp="20160128 01:08:50.274" level="INFO">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20160128 01:08:50.275" level="INFO">${length_s} = 0</msg>
<status status="PASS" endtime="20160128 01:08:50.274" starttime="20160128 01:08:50.273"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>1</arg>
<arg>msg=DB check failed</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.278" starttime="20160128 01:08:50.275"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Be Equal</arg>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length_s}</arg>
<arg>0</arg>
<arg>msg=DB check failed</arg>
</arguments>
<msg timestamp="20160128 01:08:50.282" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20160128 01:08:50.282" starttime="20160128 01:08:50.281"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.283" starttime="20160128 01:08:50.278"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.283" starttime="20160128 01:08:50.249"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${SUT RELEASE TAG PREFIX}'=='R5.3'</arg>
<arg>Check log</arg>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="Check log">
<doc>Checks the tailed log file created on XDR.</doc>
<arguments>
<arg>${tailed_text}</arg>
<arg>${test_case_type}</arg>
<arg>${ticket}</arg>
</arguments>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'OK'</arg>
<arg>Should Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed...' not found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.293" starttime="20160128 01:08:50.291"></status>
</kw>
<kw type="kw" name="BuiltIn.Run Keyword If">
<doc>Runs the given keyword with the given arguments, if `condition` is true.</doc>
<arguments>
<arg>'${test_type}' == 'NOK'</arg>
<arg>Should Not Contain</arg>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<kw type="kw" name="BuiltIn.Should Not Contain">
<doc>Fails if `item1` contains `item2` one or more times.</doc>
<arguments>
<arg>${log_text}</arg>
<arg>Ticket successfully routed [ticket=${ticket}</arg>
<arg>msg='Ticket successfully routed' unexpectedly found in XDR log</arg>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.297" starttime="20160128 01:08:50.296"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.298" starttime="20160128 01:08:50.294"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.298" starttime="20160128 01:08:50.286"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.299" starttime="20160128 01:08:50.283"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.299" starttime="20160128 01:08:39.410"></status>
</kw>
<doc>Send the MOC XDR ticket with invalid ASCII garbage in it

=========================================================</doc>
<tags>
<tag>ComponentTest</tag>
<tag>matko.sanseovic</tag>
<tag>MTEL_supported</tag>
<tag>MVNA_MEX_supported</tag>
<tag>SMARTSPACE_supported</tag>
<tag>TNZ_supported</tag>
<tag>VIRGIN_COLUMBIA_supported</tag>
<tag>XDR_only</tag>
</tags>
<status status="PASS" critical="yes" endtime="20160128 01:08:50.300" starttime="20160128 01:08:39.406"></status>
</test>
<kw type="teardown" name="Teardown Suite">
<doc></doc>
<arguments>
</arguments>
<kw type="kw" name="org.robot.database.keywords.DatabaseLibrary.Disconnect From Database">
<doc></doc>
<arguments>
</arguments>
<msg timestamp="20160128 01:08:50.331" level="INFO">SQL Warnings on this connection: null</msg>
<status status="PASS" endtime="20160128 01:08:50.331" starttime="20160128 01:08:50.330"></status>
</kw>
<kw type="kw" name="SSHLibrary.Close All Connections">
<doc>Closes all open connections.</doc>
<arguments>
</arguments>
<status status="PASS" endtime="20160128 01:08:50.333" starttime="20160128 01:08:50.332"></status>
</kw>
<status status="PASS" endtime="20160128 01:08:50.334" starttime="20160128 01:08:50.326"></status>
</kw>
<doc>Main goal of the test suite is to check behaviour of XDR in several basic positive cases and a few negative (NOK) cases.
It uses Robot Framework's JMSLibrary to send tickets of different types (MOC, SMS, DATA,...) to AMQ where XDR consumers should process them.
After that XDR's log will be analysed and finally DB should be checked if ticket has landed also there.
Negative tests (NOK) test different (but not all) mandatory fields (empty field, different values than predefined) according to
XDR Specification v5.3.2. Each NOK test has modified different fields - which exactly is specified in test description of the test itself</doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:08:50.334" starttime="20160128 01:06:12.236"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:08:50.397" starttime="20160128 01:06:12.205"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:08:50.461" starttime="20160128 01:06:12.173"></status>
</suite>
<doc></doc>
<metadata>
</metadata>
<status status="PASS" endtime="20160128 01:08:50.555" starttime="20160128 01:00:53.573"></status>
</suite>
<statistics>
<total>
<stat pass="32" fail="0">Critical Tests</stat>
<stat pass="32" fail="3">All Tests</stat>
</total>
<tag>
<stat pass="0" info="non-critical" doc="" combined="" fail="3" links="">noncritical</stat>
<stat pass="12" info="" doc="" combined="" fail="0" links="">calls</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">ComponentTest</stat>
<stat pass="32" info="" doc="" combined="" fail="3" links="">matko.sanseovic</stat>
<stat pass="1" info="" doc="" combined="" fail="0" links="">MFC_only</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">MOC_only</stat>
<stat pass="4" info="" doc="" combined="" fail="0" links="">MTC_only</stat>
<stat pass="24" info="" doc="" combined="" fail="3" links="">MTEL_supported</stat>
<stat pass="22" info="" doc="" combined="" fail="3" links="">MVNA_MEX_supported</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">SMARTSPACE_supported</stat>
<stat pass="6" info="" doc="" combined="" fail="0" links="">test</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">TNZ_specific</stat>
<stat pass="25" info="" doc="" combined="" fail="3" links="">TNZ_supported</stat>
<stat pass="7" info="" doc="" combined="" fail="0" links="">USSD_only</stat>
<stat pass="14" info="" doc="" combined="" fail="3" links="">VIRGIN_COLUMBIA_supported</stat>
<stat pass="13" info="" doc="" combined="" fail="3" links="">XDR_only</stat>
</tag>
<suite>
<stat pass="32" id="s1" fail="3" name="Robot Testsuites">Robot Testsuites</stat>
<stat pass="12" id="s1-s1" fail="0" name="Basic">Robot Testsuites.Basic</stat>
<stat pass="12" id="s1-s1-s1" fail="0" name="PrePaid">Robot Testsuites.Basic.PrePaid</stat>
<stat pass="1" id="s1-s1-s1-s1" fail="0" name="MFC">Robot Testsuites.Basic.PrePaid.MFC</stat>
<stat pass="1" id="s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s1-s1-s1" fail="0" name="MFC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MFC.MFC PREPAID-ShortDuration.MFC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s1-s1-s2" fail="0" name="MOC">Robot Testsuites.Basic.PrePaid.MOC</stat>
<stat pass="7" id="s1-s1-s1-s2-s1" fail="0" name="OnNet">Robot Testsuites.Basic.PrePaid.MOC.OnNet</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s1-s1" fail="0" name="MOC PREPAID ONNET-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Abandon.MOC PREPAID ONNET-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2" fail="0" name="MOC PREPAID ONNET-Busy">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s2-s1" fail="0" name="MOC PREPAID ONNET-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-Busy.MOC PREPAID ONNET-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3" fail="0" name="MOC PREPAID ONNET-LongDuration136s">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s3-s1" fail="0" name="MOC PREPAID ONNET-LongDuration136s-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-LongDuration136s.MOC PREPAID ONNET-LongDuration136s-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4" fail="0" name="MOC PREPAID ONNET-NoAnswer">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s4-s1" fail="0" name="MOC PREPAID ONNET-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoAnswer.MOC PREPAID ONNET-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5" fail="0" name="MOC PREPAID ONNET-NoCredit">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s5-s1" fail="0" name="MOC PREPAID ONNET-NoCredit-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-NoCredit.MOC PREPAID ONNET-NoCredit-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6" fail="0" name="MOC PREPAID ONNET-ShortDuration">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s6-s1" fail="0" name="MOC PREPAID ONNET-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ShortDuration.MOC PREPAID ONNET-ShortDuration-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7" fail="0" name="MOC PREPAID ONNET-ToUnknown">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown</stat>
<stat pass="1" id="s1-s1-s1-s2-s1-s7-s1" fail="0" name="MOC PREPAID ONNET-ToUnknown-robot-suite">Robot Testsuites.Basic.PrePaid.MOC.OnNet.MOC PREPAID ONNET-ToUnknown.MOC PREPAID ONNET-ToUnknown-robot-suite</stat>
<stat pass="4" id="s1-s1-s1-s3" fail="0" name="MTC">Robot Testsuites.Basic.PrePaid.MTC</stat>
<stat pass="1" id="s1-s1-s1-s3-s1" fail="0" name="MTC PREPAID-Abandon">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon</stat>
<stat pass="1" id="s1-s1-s1-s3-s1-s1" fail="0" name="MTC PREPAID-Abandon-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Abandon.MTC PREPAID-Abandon-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s2" fail="0" name="MTC PREPAID-Busy">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy</stat>
<stat pass="1" id="s1-s1-s1-s3-s2-s1" fail="0" name="MTC PREPAID-Busy-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-Busy.MTC PREPAID-Busy-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s3" fail="0" name="MTC PREPAID-NoAnswer">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer</stat>
<stat pass="1" id="s1-s1-s1-s3-s3-s1" fail="0" name="MTC PREPAID-NoAnswer-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-NoAnswer.MTC PREPAID-NoAnswer-robot-suite</stat>
<stat pass="1" id="s1-s1-s1-s3-s4" fail="0" name="MTC PREPAID-ShortDuration">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration</stat>
<stat pass="1" id="s1-s1-s1-s3-s4-s1" fail="0" name="MTC PREPAID-ShortDuration-robot-suite">Robot Testsuites.Basic.PrePaid.MTC.MTC PREPAID-ShortDuration.MTC PREPAID-ShortDuration-robot-suite</stat>
<stat pass="7" id="s1-s2" fail="0" name="Ussd">Robot Testsuites.Ussd</stat>
<stat pass="7" id="s1-s2-s1" fail="0" name="TNZ">Robot Testsuites.Ussd.TNZ</stat>
<stat pass="7" id="s1-s2-s1-s1" fail="0" name="Ussd-Robot-Suite">Robot Testsuites.Ussd.TNZ.Ussd-Robot-Suite</stat>
<stat pass="13" id="s1-s3" fail="3" name="Xdr">Robot Testsuites.Xdr</stat>
<stat pass="13" id="s1-s3-s1" fail="3" name="XDR-ticket-verification">Robot Testsuites.Xdr.XDR-ticket-verification</stat>
<stat pass="13" id="s1-s3-s1-s1" fail="3" name="XDR Test-robot-suite">Robot Testsuites.Xdr.XDR-ticket-verification.XDR Test-robot-suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
